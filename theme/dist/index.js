// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"fY9xN":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "92d425515cb7de60";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"6cF5V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _vue = require("vue");
var _vueRouter = require("vue-router");
var _core = require("@apollo/client/core");
var _apolloComposable = require("@vue/apollo-composable");
var _appVue = require("./components/App.vue");
var _appVueDefault = parcelHelpers.interopDefault(_appVue);
var _homeVue = require("./components/Home.vue");
var _homeVueDefault = parcelHelpers.interopDefault(_homeVue);
var _pageVue = require("./components/Page.vue");
var _pageVueDefault = parcelHelpers.interopDefault(_pageVue);
var _serieVue = require("./components/sermons/Serie.vue");
var _serieVueDefault = parcelHelpers.interopDefault(_serieVue);
var _seriesVue = require("./components/sermons/Series.vue");
var _seriesVueDefault = parcelHelpers.interopDefault(_seriesVue);
const apolloClient = new _core.ApolloClient({
    link: _core.createHttpLink({
        uri: `/graphql`
    }),
    cache: new _core.InMemoryCache()
});
const router = _vueRouter.createRouter({
    history: _vueRouter.createWebHistory(),
    routes: [
        {
            path: '/',
            component: _homeVueDefault.default
        },
        {
            path: '/sermoes/series',
            component: _seriesVueDefault.default
        },
        {
            path: '/sermoes/series/:serie',
            component: _serieVueDefault.default,
            props: true
        },
        {
            path: '/ministerio/:uri+',
            component: _pageVueDefault.default,
            props: true
        },
        {
            path: '/:uri+',
            component: _pageVueDefault.default,
            props: true
        }, 
    ],
    scrollBehavior (to, _, savedPosition) {
        return new Promise((resolve)=>{
            app.once('pageLoaded', ()=>{
                if (savedPosition) return resolve(savedPosition);
                if (to.hash) // timer was needed to get consistent behaviour
                // maybe vue-router scrolling to hash works after
                // https://github.com/vuejs/vue-router/pull/3592 ?
                // return resolve({ selector: to.hash, behavior: 'smooth' })
                return setTimeout(()=>document.querySelector(to.hash)?.scrollIntoView()
                , 100);
                // timer was needed to get consistent behaviour
                setTimeout(()=>resolve({
                        left: 0,
                        top: 0
                    })
                , 50);
            });
        });
    }
});
var app = _vue.createApp(_appVueDefault.default).use(router).provide(_apolloComposable.DefaultApolloClient, apolloClient).mount('#app');

},{"vue":"eg0LR","vue-router":"8Y8LY","@apollo/client/core":"59jsk","@vue/apollo-composable":"5hoGf","./components/App.vue":"aqnh3","./components/Home.vue":"2ifRl","./components/Page.vue":"49owP","./components/sermons/Serie.vue":"ilCqo","./components/sermons/Series.vue":"2MpqS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eg0LR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compile", ()=>compile
);
var _runtimeDom = require("@vue/runtime-dom");
parcelHelpers.exportAll(_runtimeDom, exports);
function initDev() {
    _runtimeDom.initCustomFormatter();
}
initDev();
const compile = ()=>{
    _runtimeDom.warn(`Runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
};

},{"@vue/runtime-dom":"i9SjY","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i9SjY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transition", ()=>Transition
);
parcelHelpers.export(exports, "TransitionGroup", ()=>TransitionGroup
);
parcelHelpers.export(exports, "createApp", ()=>createApp
);
parcelHelpers.export(exports, "createSSRApp", ()=>createSSRApp
);
parcelHelpers.export(exports, "hydrate", ()=>hydrate
);
parcelHelpers.export(exports, "render", ()=>render
);
parcelHelpers.export(exports, "useCssModule", ()=>useCssModule
);
parcelHelpers.export(exports, "useCssVars", ()=>useCssVars
);
parcelHelpers.export(exports, "vModelCheckbox", ()=>vModelCheckbox
);
parcelHelpers.export(exports, "vModelDynamic", ()=>vModelDynamic
);
parcelHelpers.export(exports, "vModelRadio", ()=>vModelRadio
);
parcelHelpers.export(exports, "vModelSelect", ()=>vModelSelect
);
parcelHelpers.export(exports, "vModelText", ()=>vModelText
);
parcelHelpers.export(exports, "vShow", ()=>vShow
);
parcelHelpers.export(exports, "withKeys", ()=>withKeys
);
parcelHelpers.export(exports, "withModifiers", ()=>withModifiers
);
var _runtimeCore = require("@vue/runtime-core");
var _shared = require("@vue/shared");
parcelHelpers.exportAll(_runtimeCore, exports);
const svgNS = 'http://www.w3.org/2000/svg';
const doc = typeof document !== 'undefined' ? document : null;
const staticTemplateCache = new Map();
const nodeOps = {
    insert: (child, parent, anchor)=>{
        parent.insertBefore(child, anchor || null);
    },
    remove: (child)=>{
        const parent = child.parentNode;
        if (parent) parent.removeChild(child);
    },
    createElement: (tag, isSVG, is, props)=>{
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {
            is
        } : undefined);
        if (tag === 'select' && props && props.multiple != null) el.setAttribute('multiple', props.multiple);
        return el;
    },
    createText: (text)=>doc.createTextNode(text)
    ,
    createComment: (text)=>doc.createComment(text)
    ,
    setText: (node, text)=>{
        node.nodeValue = text;
    },
    setElementText: (el, text)=>{
        el.textContent = text;
    },
    parentNode: (node)=>node.parentNode
    ,
    nextSibling: (node)=>node.nextSibling
    ,
    querySelector: (selector)=>doc.querySelector(selector)
    ,
    setScopeId (el, id) {
        el.setAttribute(id, '');
    },
    cloneNode (el) {
        const cloned = el.cloneNode(true);
        // #3072
        // - in `patchDOMProp`, we store the actual value in the `el._value` property.
        // - normally, elements using `:value` bindings will not be hoisted, but if
        //   the bound value is a constant, e.g. `:value="true"` - they do get
        //   hoisted.
        // - in production, hoisted nodes are cloned when subsequent inserts, but
        //   cloneNode() does not copy the custom property we attached.
        // - This may need to account for other custom DOM properties we attach to
        //   elements in addition to `_value` in the future.
        if (`_value` in el) cloned._value = el._value;
        return cloned;
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent (content, parent, anchor, isSVG) {
        // <parent> before | first ... last | anchor </parent>
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        let template = staticTemplateCache.get(content);
        if (!template) {
            const t = doc.createElement('template');
            t.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
            template = t.content;
            if (isSVG) {
                // remove outer svg wrapper
                const wrapper = template.firstChild;
                while(wrapper.firstChild)template.appendChild(wrapper.firstChild);
                template.removeChild(wrapper);
            }
            staticTemplateCache.set(content, template);
        }
        parent.insertBefore(template.cloneNode(true), anchor);
        return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
        ];
    }
};
// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function patchClass(el, value, isSVG) {
    // directly setting className should be faster than setAttribute in theory
    // if this is an element during a transition, take the temporary transition
    // classes into account.
    const transitionClasses = el._vtc;
    if (transitionClasses) value = (value ? [
        value,
        ...transitionClasses
    ] : [
        ...transitionClasses
    ]).join(' ');
    if (value == null) el.removeAttribute('class');
    else if (isSVG) el.setAttribute('class', value);
    else el.className = value;
}
function patchStyle(el, prev, next) {
    const style = el.style;
    if (!next) el.removeAttribute('style');
    else if (_shared.isString(next)) {
        if (prev !== next) {
            const current = style.display;
            style.cssText = next;
            // indicates that the `display` of the element is controlled by `v-show`,
            // so we always keep the current `display` value regardless of the `style` value,
            // thus handing over control to `v-show`.
            if ('_vod' in el) style.display = current;
        }
    } else {
        for(const key in next)setStyle(style, key, next[key]);
        if (prev && !_shared.isString(prev)) {
            for(const key1 in prev)if (next[key1] == null) setStyle(style, key1, '');
        }
    }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if (_shared.isArray(val)) val.forEach((v)=>setStyle(style, name, v)
    );
    else if (name.startsWith('--')) // custom property definition
    style.setProperty(name, val);
    else {
        const prefixed = autoPrefix(style, name);
        if (importantRE.test(val)) // !important
        style.setProperty(_shared.hyphenate(prefixed), val.replace(importantRE, ''), 'important');
        else style[prefixed] = val;
    }
}
const prefixes = [
    'Webkit',
    'Moz',
    'ms'
];
const prefixCache = {
};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) return cached;
    let name = _runtimeCore.camelize(rawName);
    if (name !== 'filter' && name in style) return prefixCache[rawName] = name;
    name = _shared.capitalize(name);
    for(let i = 0; i < prefixes.length; i++){
        const prefixed = prefixes[i] + name;
        if (prefixed in style) return prefixCache[rawName] = prefixed;
    }
    return rawName;
}
const xlinkNS = 'http://www.w3.org/1999/xlink';
function patchAttr(el, key, value, isSVG, instance) {
    if (isSVG && key.startsWith('xlink:')) {
        if (value == null) el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        else el.setAttributeNS(xlinkNS, key, value);
    } else {
        // note we are only checking boolean attributes that don't have a
        // corresponding dom prop of the same name here.
        const isBoolean = _shared.isSpecialBooleanAttr(key);
        if (value == null || isBoolean && value === false) el.removeAttribute(key);
        else el.setAttribute(key, isBoolean ? '' : value);
    }
}
// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function patchDOMProp(el, key, value, // the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
prevChildren, parentComponent, parentSuspense, unmountChildren) {
    if (key === 'innerHTML' || key === 'textContent') {
        if (prevChildren) unmountChildren(prevChildren, parentComponent, parentSuspense);
        el[key] = value == null ? '' : value;
        return;
    }
    if (key === 'value' && el.tagName !== 'PROGRESS') {
        // store value as _value as well since
        // non-string values will be stringified.
        el._value = value;
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) el.value = newValue;
        if (value == null) el.removeAttribute(key);
        return;
    }
    if (value === '' || value == null) {
        const type = typeof el[key];
        if (value === '' && type === 'boolean') {
            // e.g. <select multiple> compiles to { multiple: '' }
            el[key] = true;
            return;
        } else if (value == null && type === 'string') {
            // e.g. <div :id="null">
            el[key] = '';
            el.removeAttribute(key);
            return;
        } else if (type === 'number') {
            // e.g. <img :width="null">
            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error
            try {
                el[key] = 0;
            } catch (_a) {
            }
            el.removeAttribute(key);
            return;
        }
    }
    // some properties perform value validation and throw
    try {
        el[key] = value;
    } catch (e) {
        _runtimeCore.warn(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: ` + `value ${value} is invalid.`, e);
    }
}
// Async edge case fix requires storing an event listener's attach timestamp.
let _getNow = Date.now;
let skipTimestampCheck = false;
if (typeof window !== 'undefined') {
    // Determine what event timestamp the browser is using. Annoyingly, the
    // timestamp can either be hi-res (relative to page load) or low-res
    // (relative to UNIX epoch), so in order to compare time we have to use the
    // same timestamp type when saving the flush timestamp.
    if (_getNow() > document.createEvent('Event').timeStamp) // if the low-res timestamp which is bigger than the event timestamp
    // (which is evaluated AFTER) it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listeners as well.
    _getNow = ()=>performance.now()
    ;
    // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation
    // and does not fire microtasks in between event propagation, so safe to exclude.
    const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
    skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
}
// To avoid the overhead of repeatedly calling performance.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
let cachedNow = 0;
const p = Promise.resolve();
const reset = ()=>{
    cachedNow = 0;
};
const getNow = ()=>cachedNow || (p.then(reset), cachedNow = _getNow())
;
function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {
    });
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) // patch
    existingInvoker.value = nextValue;
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = invokers[rawName] = createInvoker(nextValue, instance);
            addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {
        };
        let m;
        while(m = name.match(optionsModifierRE)){
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    return [
        _shared.hyphenate(name.slice(2)),
        options
    ];
}
function createInvoker(initialValue, instance) {
    const invoker = (e)=>{
        // async edge case #6566: inner click event triggers patch, event handler
        // attached to outer element during patch, and triggered again. This
        // happens because browsers fire microtask ticks between event propagation.
        // the solution is simple: we save the timestamp when a handler is attached,
        // and the handler would only fire if the event passed to it was fired
        // AFTER it was attached.
        const timeStamp = e.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) _runtimeCore.callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */ , [
            e
        ]);
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function patchStopImmediatePropagation(e, value) {
    if (_shared.isArray(value)) {
        const originalStop = e.stopImmediatePropagation;
        e.stopImmediatePropagation = ()=>{
            originalStop.call(e);
            e._stopped = true;
        };
        return value.map((fn)=>(e1)=>!e1._stopped && fn(e1)
        );
    } else return value;
}
const nativeOnRE = /^on[a-z]/;
const forcePatchProp = (_, key)=>key === 'value'
;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren)=>{
    switch(key){
        // special
        case 'class':
            patchClass(el, nextValue, isSVG);
            break;
        case 'style':
            patchStyle(el, prevValue, nextValue);
            break;
        default:
            if (_shared.isOn(key)) // ignore v-model listeners
            {
                if (!_shared.isModelListener(key)) patchEvent(el, key, prevValue, nextValue, parentComponent);
            } else if (shouldSetAsProp(el, key, nextValue, isSVG)) patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
            else {
                // special case for <input v-model type="checkbox"> with
                // :true-value & :false-value
                // store value as dom properties since non-string values will be
                // stringified.
                if (key === 'true-value') el._trueValue = nextValue;
                else if (key === 'false-value') el._falseValue = nextValue;
                patchAttr(el, key, nextValue, isSVG);
            }
            break;
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        // most keys must be set as attribute on svg elements to work
        // ...except innerHTML
        if (key === 'innerHTML') return true;
        // or native onclick with function values
        if (key in el && nativeOnRE.test(key) && _shared.isFunction(value)) return true;
        return false;
    }
    // spellcheck and draggable are numerated attrs, however their
    // corresponding DOM properties are actually booleans - this leads to
    // setting it with a string "false" value leading it to be coerced to
    // `true`, so we need to always treat them as attributes.
    // Note that `contentEditable` doesn't have this problem: its DOM
    // property is also enumerated string values.
    if (key === 'spellcheck' || key === 'draggable') return false;
    // #1787, #2840 form property on form elements is readonly and must be set as
    // attribute.
    if (key === 'form') return false;
    // #1526 <input list> must be set as attribute
    if (key === 'list' && el.tagName === 'INPUT') return false;
    // #2766 <textarea type> must be set as attribute
    if (key === 'type' && el.tagName === 'TEXTAREA') return false;
    // native onclick with string value, must be set as attribute
    if (nativeOnRE.test(key) && _shared.isString(value)) return false;
    return key in el;
}
function useCssModule(name = '$style') {
    /* istanbul ignore else */ {
        const instance = _runtimeCore.getCurrentInstance();
        if (!instance) {
            _runtimeCore.warn(`useCssModule must be called inside setup()`);
            return _shared.EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            _runtimeCore.warn(`Current instance does not have CSS modules injected.`);
            return _shared.EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            _runtimeCore.warn(`Current instance does not have CSS module named "${name}".`);
            return _shared.EMPTY_OBJ;
        }
        return mod;
    }
}
/**
 * Runtime helper for SFC's CSS variable injection feature.
 * @private
 */ function useCssVars(getter) {
    const instance = _runtimeCore.getCurrentInstance();
    /* istanbul ignore next */ if (!instance) {
        _runtimeCore.warn(`useCssVars is called without current active component instance.`);
        return;
    }
    const setVars = ()=>setVarsOnVNode(instance.subTree, getter(instance.proxy))
    ;
    _runtimeCore.onMounted(()=>_runtimeCore.watchEffect(setVars, {
            flush: 'post'
        })
    );
    _runtimeCore.onUpdated(setVars);
}
function setVarsOnVNode(vnode, vars) {
    if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) suspense.effects.push(()=>{
            setVarsOnVNode(suspense.activeBranch, vars);
        });
    }
    // drill down HOCs until it's a non-component vnode
    while(vnode.component)vnode = vnode.component.subTree;
    if (vnode.shapeFlag & 1 /* ELEMENT */  && vnode.el) setVarsOnNode(vnode.el, vars);
    else if (vnode.type === _runtimeCore.Fragment) vnode.children.forEach((c)=>setVarsOnVNode(c, vars)
    );
    else if (vnode.type === _runtimeCore.Static) {
        let { el , anchor  } = vnode;
        while(el){
            setVarsOnNode(el, vars);
            if (el === anchor) break;
            el = el.nextSibling;
        }
    }
}
function setVarsOnNode(el, vars) {
    if (el.nodeType === 1) {
        const style = el.style;
        for(const key in vars)style.setProperty(`--${key}`, vars[key]);
    }
}
const TRANSITION = 'transition';
const ANIMATION = 'animation';
// DOM Transition is a higher-order-component based on the platform-agnostic
// base Transition component, with DOM-specific logic.
const Transition = (props, { slots  })=>_runtimeCore.h(_runtimeCore.BaseTransition, resolveTransitionProps(props), slots)
;
Transition.displayName = 'Transition';
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [
        String,
        Number,
        Object
    ],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /*#__PURE__*/ _shared.extend({
}, _runtimeCore.BaseTransition.props, DOMTransitionPropsValidators);
/**
 * #3227 Incoming hooks may be merged into arrays when wrapping Transition
 * with custom HOCs.
 */ const callHook = (hook, args = [])=>{
    if (_shared.isArray(hook)) hook.forEach((h)=>h(...args)
    );
    else if (hook) hook(...args);
};
/**
 * Check if a hook expects a callback (2nd arg), which means the user
 * intends to explicitly control the end of the transition.
 */ const hasExplicitCallback = (hook)=>{
    return hook ? _shared.isArray(hook) ? hook.some((h)=>h.length > 1
    ) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {
    };
    for(const key in rawProps)if (!(key in DOMTransitionPropsValidators)) baseProps[key] = rawProps[key];
    if (rawProps.css === false) return baseProps;
    const { name ='v' , type , duration , enterFromClass =`${name}-enter-from` , enterActiveClass =`${name}-enter-active` , enterToClass =`${name}-enter-to` , appearFromClass =enterFromClass , appearActiveClass =enterActiveClass , appearToClass =enterToClass , leaveFromClass =`${name}-leave-from` , leaveActiveClass =`${name}-leave-active` , leaveToClass =`${name}-leave-to`  } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter , onEnter , onEnterCancelled , onLeave , onLeaveCancelled , onBeforeAppear =onBeforeEnter , onAppear =onEnter , onAppearCancelled =onEnterCancelled  } = baseProps;
    const finishEnter = (el, isAppear, done)=>{
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    const finishLeave = (el, done)=>{
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear)=>{
        return (el, done)=>{
            const hook = isAppear ? onAppear : onEnter;
            const resolve = ()=>finishEnter(el, isAppear, done)
            ;
            callHook(hook, [
                el,
                resolve
            ]);
            nextFrame(()=>{
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) whenTransitionEnds(el, type, enterDuration, resolve);
            });
        };
    };
    return _shared.extend(baseProps, {
        onBeforeEnter (el) {
            callHook(onBeforeEnter, [
                el
            ]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear (el) {
            callHook(onBeforeAppear, [
                el
            ]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave (el, done) {
            const resolve = ()=>finishLeave(el, done)
            ;
            addTransitionClass(el, leaveFromClass);
            // force reflow so *-leave-from classes immediately take effect (#2593)
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(()=>{
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) whenTransitionEnds(el, type, leaveDuration, resolve);
            });
            callHook(onLeave, [
                el,
                resolve
            ]);
        },
        onEnterCancelled (el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [
                el
            ]);
        },
        onAppearCancelled (el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [
                el
            ]);
        },
        onLeaveCancelled (el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [
                el
            ]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) return null;
    else if (_shared.isObject(duration)) return [
        NumberOf(duration.enter),
        NumberOf(duration.leave)
    ];
    else {
        const n = NumberOf(duration);
        return [
            n,
            n
        ];
    }
}
function NumberOf(val) {
    const res = _shared.toNumber(val);
    validateDuration(res);
    return res;
}
function validateDuration(val) {
    if (typeof val !== 'number') _runtimeCore.warn(`<transition> explicit duration is not a valid number - ` + `got ${JSON.stringify(val)}.`);
    else if (isNaN(val)) _runtimeCore.warn(`<transition> explicit duration is NaN - ` + 'the duration expression might be incorrect.');
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.add(c)
    );
    (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.remove(c)
    );
    const { _vtc  } = el;
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) el._vtc = undefined;
    }
}
function nextFrame(cb) {
    requestAnimationFrame(()=>{
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = el._endId = ++endId;
    const resolveIfNotStale = ()=>{
        if (id === el._endId) resolve();
    };
    if (explicitTimeout) return setTimeout(resolveIfNotStale, explicitTimeout);
    const { type , timeout , propCount  } = getTransitionInfo(el, expectedType);
    if (!type) return resolve();
    const endEvent = type + 'end';
    let ended = 0;
    const end = ()=>{
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e)=>{
        if (e.target === el && (++ended) >= propCount) end();
    };
    setTimeout(()=>{
        if (ended < propCount) end();
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    const getStyleProperties = (key)=>(styles[key] || '').split(', ')
    ;
    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');
    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(ANIMATION + 'Delay');
    const animationDurations = getStyleProperties(ANIMATION + 'Duration');
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    /* istanbul ignore if */ if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while(delays.length < durations.length)delays = delays.concat(delays);
    return Math.max(...durations.map((d, i)=>toMs(d) + toMs(delays[i])
    ));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
// synchronously force layout to put elements into a certain state
function forceReflow() {
    return document.body.offsetHeight;
}
const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
    name: 'TransitionGroup',
    props: /*#__PURE__*/ _shared.extend({
    }, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup (props, { slots  }) {
        const instance = _runtimeCore.getCurrentInstance();
        const state = _runtimeCore.useTransitionState();
        let prevChildren;
        let children;
        _runtimeCore.onUpdated(()=>{
            // children is guaranteed to exist after initial render
            if (!prevChildren.length) return;
            const moveClass = props.moveClass || `${props.name || 'v'}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) return;
            // we divide the work into three loops to avoid mixing DOM reads and writes
            // in each iteration - which helps prevent layout thrashing.
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            // force reflow to put everything in position
            forceReflow();
            movedChildren.forEach((c)=>{
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = '';
                const cb = el._moveCb = (e)=>{
                    if (e && e.target !== el) return;
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener('transitionend', cb);
                        el._moveCb = null;
                        removeTransitionClass(el, moveClass);
                    }
                };
                el.addEventListener('transitionend', cb);
            });
        });
        return ()=>{
            const rawProps = _runtimeCore.toRaw(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || _runtimeCore.Fragment;
            prevChildren = children;
            children = slots.default ? _runtimeCore.getTransitionRawChildren(slots.default()) : [];
            for(let i = 0; i < children.length; i++){
                const child = children[i];
                if (child.key != null) _runtimeCore.setTransitionHooks(child, _runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance));
                else _runtimeCore.warn(`<TransitionGroup> children must be keyed.`);
            }
            if (prevChildren) for(let i1 = 0; i1 < prevChildren.length; i1++){
                const child = prevChildren[i1];
                _runtimeCore.setTransitionHooks(child, _runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance));
                positionMap.set(child, child.el.getBoundingClientRect());
            }
            return _runtimeCore.createVNode(tag, null, children);
        };
    }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el._moveCb) el._moveCb();
    if (el._enterCb) el._enterCb();
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = '0s';
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    // Detect whether an element with the move class applied has
    // CSS transitions. Since the element may be inside an entering
    // transition at this very moment, we make a clone of it and remove
    // all other transition classes applied to ensure only the move class
    // is applied.
    const clone = el.cloneNode();
    if (el._vtc) el._vtc.forEach((cls)=>{
        cls.split(/\s+/).forEach((c)=>c && clone.classList.remove(c)
        );
    });
    moveClass.split(/\s+/).forEach((c)=>c && clone.classList.add(c)
    );
    clone.style.display = 'none';
    const container = root.nodeType === 1 ? root : root.parentNode;
    container.appendChild(clone);
    const { hasTransform  } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}
const getModelAssigner = (vnode)=>{
    const fn = vnode.props['onUpdate:modelValue'];
    return _shared.isArray(fn) ? (value)=>_shared.invokeArrayFns(fn, value)
     : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        trigger(target, 'input');
    }
}
function trigger(el, type) {
    const e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
}
// We are exporting the v-model runtime directly as vnode hooks so that it can
// be tree-shaken in case v-model is never used.
const vModelText = {
    created (el, { modifiers: { lazy , trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || el.type === 'number';
        addEventListener(el, lazy ? 'change' : 'input', (e)=>{
            if (e.target.composing) return;
            let domValue = el.value;
            if (trim) domValue = domValue.trim();
            else if (castToNumber) domValue = _shared.toNumber(domValue);
            el._assign(domValue);
        });
        if (trim) addEventListener(el, 'change', ()=>{
            el.value = el.value.trim();
        });
        if (!lazy) {
            addEventListener(el, 'compositionstart', onCompositionStart);
            addEventListener(el, 'compositionend', onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            addEventListener(el, 'change', onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted (el, { value  }) {
        el.value = value == null ? '' : value;
    },
    beforeUpdate (el, { value , modifiers: { trim , number  }  }, vnode) {
        el._assign = getModelAssigner(vnode);
        // avoid clearing unresolved text. #2302
        if (el.composing) return;
        if (document.activeElement === el) {
            if (trim && el.value.trim() === value) return;
            if ((number || el.type === 'number') && _shared.toNumber(el.value) === value) return;
        }
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) el.value = newValue;
    }
};
const vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created (el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', ()=>{
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if (_shared.isArray(modelValue)) {
                const index = _shared.looseIndexOf(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) assign(modelValue.concat(elementValue));
                else if (!checked && found) {
                    const filtered = [
                        ...modelValue
                    ];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            } else if (_shared.isSet(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) cloned.add(elementValue);
                else cloned.delete(elementValue);
                assign(cloned);
            } else assign(getCheckboxValue(el, checked));
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate (el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value , oldValue  }, vnode) {
    el._modelValue = value;
    if (_shared.isArray(value)) el.checked = _shared.looseIndexOf(value, vnode.props.value) > -1;
    else if (_shared.isSet(value)) el.checked = value.has(vnode.props.value);
    else if (value !== oldValue) el.checked = _shared.looseEqual(value, getCheckboxValue(el, true));
}
const vModelRadio = {
    created (el, { value  }, vnode) {
        el.checked = _shared.looseEqual(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', ()=>{
            el._assign(getValue(el));
        });
    },
    beforeUpdate (el, { value , oldValue  }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) el.checked = _shared.looseEqual(value, vnode.props.value);
    }
};
const vModelSelect = {
    // <select multiple> value need to be deep traversed
    deep: true,
    created (el, { value , modifiers: { number  }  }, vnode) {
        const isSetModel = _shared.isSet(value);
        addEventListener(el, 'change', ()=>{
            const selectedVal = Array.prototype.filter.call(el.options, (o)=>o.selected
            ).map((o)=>number ? _shared.toNumber(getValue(o)) : getValue(o)
            );
            el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted (el, { value  }) {
        setSelected(el, value);
    },
    beforeUpdate (el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
    },
    updated (el, { value  }) {
        setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    if (isMultiple && !_shared.isArray(value) && !_shared.isSet(value)) {
        _runtimeCore.warn(`<select multiple v-model> expects an Array or Set value for its binding, ` + `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
    }
    for(let i = 0, l = el.options.length; i < l; i++){
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if (_shared.isArray(value)) option.selected = _shared.looseIndexOf(value, optionValue) > -1;
            else option.selected = value.has(optionValue);
        } else if (_shared.looseEqual(getValue(option), value)) {
            if (el.selectedIndex !== i) el.selectedIndex = i;
            return;
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) el.selectedIndex = -1;
}
// retrieve raw value set via :value bindings
function getValue(el) {
    return '_value' in el ? el._value : el.value;
}
// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings
function getCheckboxValue(el, checked) {
    const key = checked ? '_trueValue' : '_falseValue';
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'created');
    },
    mounted (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'mounted');
    },
    beforeUpdate (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');
    },
    updated (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'updated');
    }
};
function callModelHook(el, binding, vnode, prevVNode, hook) {
    let modelToUse;
    switch(el.tagName){
        case 'SELECT':
            modelToUse = vModelSelect;
            break;
        case 'TEXTAREA':
            modelToUse = vModelText;
            break;
        default:
            switch(vnode.props && vnode.props.type){
                case 'checkbox':
                    modelToUse = vModelCheckbox;
                    break;
                case 'radio':
                    modelToUse = vModelRadio;
                    break;
                default:
                    modelToUse = vModelText;
            }
    }
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
const systemModifiers = [
    'ctrl',
    'shift',
    'alt',
    'meta'
];
const modifierGuards = {
    stop: (e)=>e.stopPropagation()
    ,
    prevent: (e)=>e.preventDefault()
    ,
    self: (e)=>e.target !== e.currentTarget
    ,
    ctrl: (e)=>!e.ctrlKey
    ,
    shift: (e)=>!e.shiftKey
    ,
    alt: (e)=>!e.altKey
    ,
    meta: (e)=>!e.metaKey
    ,
    left: (e)=>'button' in e && e.button !== 0
    ,
    middle: (e)=>'button' in e && e.button !== 1
    ,
    right: (e)=>'button' in e && e.button !== 2
    ,
    exact: (e, modifiers)=>systemModifiers.some((m)=>e[`${m}Key`] && !modifiers.includes(m)
        )
};
/**
 * @private
 */ const withModifiers = (fn, modifiers)=>{
    return (event, ...args)=>{
        for(let i = 0; i < modifiers.length; i++){
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers)) return;
        }
        return fn(event, ...args);
    };
};
// Kept for 2.x compat.
// Note: IE11 compat for `spacebar` and `del` is removed for now.
const keyNames = {
    esc: 'escape',
    space: ' ',
    up: 'arrow-up',
    left: 'arrow-left',
    right: 'arrow-right',
    down: 'arrow-down',
    delete: 'backspace'
};
/**
 * @private
 */ const withKeys = (fn, modifiers)=>{
    return (event)=>{
        if (!('key' in event)) return;
        const eventKey = _shared.hyphenate(event.key);
        if (modifiers.some((k)=>k === eventKey || keyNames[k] === eventKey
        )) return fn(event);
    };
};
const vShow = {
    beforeMount (el, { value  }, { transition  }) {
        el._vod = el.style.display === 'none' ? '' : el.style.display;
        if (transition && value) transition.beforeEnter(el);
        else setDisplay(el, value);
    },
    mounted (el, { value  }, { transition  }) {
        if (transition && value) transition.enter(el);
    },
    updated (el, { value , oldValue  }, { transition  }) {
        if (!value === !oldValue) return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            } else transition.leave(el, ()=>{
                setDisplay(el, false);
            });
        } else setDisplay(el, value);
    },
    beforeUnmount (el, { value  }) {
        setDisplay(el, value);
    }
};
function setDisplay(el, value) {
    el.style.display = value ? el._vod : 'none';
}
const rendererOptions = _shared.extend({
    patchProp,
    forcePatchProp
}, nodeOps);
// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return renderer || (renderer = _runtimeCore.createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration ? renderer : _runtimeCore.createHydrationRenderer(rendererOptions);
    enabledHydration = true;
    return renderer;
}
// use explicit type casts here to avoid import() calls in rolled-up d.ts
const render = (...args)=>{
    ensureRenderer().render(...args);
};
const hydrate = (...args)=>{
    ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args)=>{
    const app = ensureRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (!container) return;
        const component = app._component;
        if (!_shared.isFunction(component) && !component.render && !component.template) // __UNSAFE__
        // Reason: potential execution of JS expressions in in-DOM template.
        // The user must make sure the in-DOM template is trusted. If it's
        // rendered by the server, the template should not contain any user data.
        component.template = container.innerHTML;
        // clear content before mounting
        container.innerHTML = '';
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
            container.removeAttribute('v-cloak');
            container.setAttribute('data-v-app', '');
        }
        return proxy;
    };
    return app;
};
const createSSRApp = (...args)=>{
    const app = ensureHydrationRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (container) return mount(container, true, container instanceof SVGElement);
    };
    return app;
};
function injectNativeTagCheck(app) {
    // Inject `isNativeTag`
    // this is used for component name validation (dev only)
    Object.defineProperty(app.config, 'isNativeTag', {
        value: (tag)=>_shared.isHTMLTag(tag) || _shared.isSVGTag(tag)
        ,
        writable: false
    });
}
// dev only
function injectCompilerOptionsCheck(app) {
    if (_runtimeCore.isRuntimeOnly()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, 'isCustomElement', {
            get () {
                return isCustomElement;
            },
            set () {
                _runtimeCore.warn(`The \`isCustomElement\` config option is deprecated. Use ` + `\`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using ` + `a build of Vue.js that includes the runtime compiler (aka "full build"). ` + `Since you are using the runtime-only build, \`compilerOptions\` ` + `must be passed to \`@vue/compiler-dom\` in the build setup instead.\n` + `- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.\n` + `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n` + `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app.config, 'compilerOptions', {
            get () {
                _runtimeCore.warn(msg);
                return compilerOptions;
            },
            set () {
                _runtimeCore.warn(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if (_shared.isString(container)) {
        const res = document.querySelector(container);
        if (!res) _runtimeCore.warn(`Failed to mount app: mount target selector "${container}" returned null.`);
        return res;
    }
    if (container instanceof window.ShadowRoot && container.mode === 'closed') _runtimeCore.warn(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
    return container;
}

},{"@vue/runtime-core":"6wrge","@vue/shared":"8bcX0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6wrge":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "customRef", ()=>_reactivity.customRef
);
parcelHelpers.export(exports, "isProxy", ()=>_reactivity.isProxy
);
parcelHelpers.export(exports, "isReactive", ()=>_reactivity.isReactive
);
parcelHelpers.export(exports, "isReadonly", ()=>_reactivity.isReadonly
);
parcelHelpers.export(exports, "isRef", ()=>_reactivity.isRef
);
parcelHelpers.export(exports, "markRaw", ()=>_reactivity.markRaw
);
parcelHelpers.export(exports, "proxyRefs", ()=>_reactivity.proxyRefs
);
parcelHelpers.export(exports, "reactive", ()=>_reactivity.reactive
);
parcelHelpers.export(exports, "readonly", ()=>_reactivity.readonly
);
parcelHelpers.export(exports, "ref", ()=>_reactivity.ref
);
parcelHelpers.export(exports, "shallowReactive", ()=>_reactivity.shallowReactive
);
parcelHelpers.export(exports, "shallowReadonly", ()=>_reactivity.shallowReadonly
);
parcelHelpers.export(exports, "shallowRef", ()=>_reactivity.shallowRef
);
parcelHelpers.export(exports, "toRaw", ()=>_reactivity.toRaw
);
parcelHelpers.export(exports, "toRef", ()=>_reactivity.toRef
);
parcelHelpers.export(exports, "toRefs", ()=>_reactivity.toRefs
);
parcelHelpers.export(exports, "triggerRef", ()=>_reactivity.triggerRef
);
parcelHelpers.export(exports, "unref", ()=>_reactivity.unref
);
parcelHelpers.export(exports, "camelize", ()=>_shared.camelize
);
parcelHelpers.export(exports, "capitalize", ()=>_shared.capitalize
);
parcelHelpers.export(exports, "toDisplayString", ()=>_shared.toDisplayString
);
parcelHelpers.export(exports, "toHandlerKey", ()=>_shared.toHandlerKey
);
parcelHelpers.export(exports, "BaseTransition", ()=>BaseTransition
);
parcelHelpers.export(exports, "Comment", ()=>Comment$1
);
parcelHelpers.export(exports, "Fragment", ()=>Fragment
);
parcelHelpers.export(exports, "KeepAlive", ()=>KeepAlive
);
parcelHelpers.export(exports, "Static", ()=>Static
);
parcelHelpers.export(exports, "Suspense", ()=>Suspense
);
parcelHelpers.export(exports, "Teleport", ()=>Teleport
);
parcelHelpers.export(exports, "Text", ()=>Text1
);
parcelHelpers.export(exports, "callWithAsyncErrorHandling", ()=>callWithAsyncErrorHandling
);
parcelHelpers.export(exports, "callWithErrorHandling", ()=>callWithErrorHandling
);
parcelHelpers.export(exports, "cloneVNode", ()=>cloneVNode
);
parcelHelpers.export(exports, "compatUtils", ()=>compatUtils
);
parcelHelpers.export(exports, "computed", ()=>computed
);
parcelHelpers.export(exports, "createBlock", ()=>createBlock
);
parcelHelpers.export(exports, "createCommentVNode", ()=>createCommentVNode
);
parcelHelpers.export(exports, "createHydrationRenderer", ()=>createHydrationRenderer
);
parcelHelpers.export(exports, "createRenderer", ()=>createRenderer
);
parcelHelpers.export(exports, "createSlots", ()=>createSlots
);
parcelHelpers.export(exports, "createStaticVNode", ()=>createStaticVNode
);
parcelHelpers.export(exports, "createTextVNode", ()=>createTextVNode
);
parcelHelpers.export(exports, "createVNode", ()=>createVNode
);
parcelHelpers.export(exports, "defineAsyncComponent", ()=>defineAsyncComponent
);
parcelHelpers.export(exports, "defineComponent", ()=>defineComponent
);
parcelHelpers.export(exports, "defineEmit", ()=>defineEmit
);
parcelHelpers.export(exports, "defineEmits", ()=>defineEmits
);
parcelHelpers.export(exports, "defineExpose", ()=>defineExpose
);
parcelHelpers.export(exports, "defineProps", ()=>defineProps
);
parcelHelpers.export(exports, "devtools", ()=>devtools
);
parcelHelpers.export(exports, "getCurrentInstance", ()=>getCurrentInstance
);
parcelHelpers.export(exports, "getTransitionRawChildren", ()=>getTransitionRawChildren
);
parcelHelpers.export(exports, "h", ()=>h
);
parcelHelpers.export(exports, "handleError", ()=>handleError
);
parcelHelpers.export(exports, "initCustomFormatter", ()=>initCustomFormatter
);
parcelHelpers.export(exports, "inject", ()=>inject
);
parcelHelpers.export(exports, "isRuntimeOnly", ()=>isRuntimeOnly
);
parcelHelpers.export(exports, "isVNode", ()=>isVNode
);
parcelHelpers.export(exports, "mergeDefaults", ()=>mergeDefaults
);
parcelHelpers.export(exports, "mergeProps", ()=>mergeProps
);
parcelHelpers.export(exports, "nextTick", ()=>nextTick
);
parcelHelpers.export(exports, "onActivated", ()=>onActivated
);
parcelHelpers.export(exports, "onBeforeMount", ()=>onBeforeMount
);
parcelHelpers.export(exports, "onBeforeUnmount", ()=>onBeforeUnmount
);
parcelHelpers.export(exports, "onBeforeUpdate", ()=>onBeforeUpdate
);
parcelHelpers.export(exports, "onDeactivated", ()=>onDeactivated
);
parcelHelpers.export(exports, "onErrorCaptured", ()=>onErrorCaptured
);
parcelHelpers.export(exports, "onMounted", ()=>onMounted
);
parcelHelpers.export(exports, "onRenderTracked", ()=>onRenderTracked
);
parcelHelpers.export(exports, "onRenderTriggered", ()=>onRenderTriggered
);
parcelHelpers.export(exports, "onServerPrefetch", ()=>onServerPrefetch
);
parcelHelpers.export(exports, "onUnmounted", ()=>onUnmounted
);
parcelHelpers.export(exports, "onUpdated", ()=>onUpdated
);
parcelHelpers.export(exports, "openBlock", ()=>openBlock
);
parcelHelpers.export(exports, "popScopeId", ()=>popScopeId
);
parcelHelpers.export(exports, "provide", ()=>provide
);
parcelHelpers.export(exports, "pushScopeId", ()=>pushScopeId
);
parcelHelpers.export(exports, "queuePostFlushCb", ()=>queuePostFlushCb
);
parcelHelpers.export(exports, "registerRuntimeCompiler", ()=>registerRuntimeCompiler
);
parcelHelpers.export(exports, "renderList", ()=>renderList
);
parcelHelpers.export(exports, "renderSlot", ()=>renderSlot
);
parcelHelpers.export(exports, "resolveComponent", ()=>resolveComponent
);
parcelHelpers.export(exports, "resolveDirective", ()=>resolveDirective
);
parcelHelpers.export(exports, "resolveDynamicComponent", ()=>resolveDynamicComponent
);
parcelHelpers.export(exports, "resolveFilter", ()=>resolveFilter
);
parcelHelpers.export(exports, "resolveTransitionHooks", ()=>resolveTransitionHooks
);
parcelHelpers.export(exports, "setBlockTracking", ()=>setBlockTracking
);
parcelHelpers.export(exports, "setDevtoolsHook", ()=>setDevtoolsHook
);
parcelHelpers.export(exports, "setTransitionHooks", ()=>setTransitionHooks
);
parcelHelpers.export(exports, "ssrContextKey", ()=>ssrContextKey
);
parcelHelpers.export(exports, "ssrUtils", ()=>ssrUtils
);
parcelHelpers.export(exports, "toHandlers", ()=>toHandlers
);
parcelHelpers.export(exports, "transformVNodeArgs", ()=>transformVNodeArgs
);
parcelHelpers.export(exports, "useAttrs", ()=>useAttrs
);
parcelHelpers.export(exports, "useContext", ()=>useContext
);
parcelHelpers.export(exports, "useSSRContext", ()=>useSSRContext
);
parcelHelpers.export(exports, "useSlots", ()=>useSlots
);
parcelHelpers.export(exports, "useTransitionState", ()=>useTransitionState
);
parcelHelpers.export(exports, "version", ()=>version
);
parcelHelpers.export(exports, "warn", ()=>warn
);
parcelHelpers.export(exports, "watch", ()=>watch
);
parcelHelpers.export(exports, "watchEffect", ()=>watchEffect
);
parcelHelpers.export(exports, "withAsyncContext", ()=>withAsyncContext
);
parcelHelpers.export(exports, "withCtx", ()=>withCtx
);
parcelHelpers.export(exports, "withDefaults", ()=>withDefaults
);
parcelHelpers.export(exports, "withDirectives", ()=>withDirectives
);
parcelHelpers.export(exports, "withScopeId", ()=>withScopeId
);
var _reactivity = require("@vue/reactivity");
var _shared = require("@vue/shared");
var global = arguments[3];
const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
function warn(msg, ...args) {
    // avoid props formatting or warn handler tracking deps that might be mutated
    // during patch, leading to infinite recursion.
    _reactivity.pauseTracking();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */ , [
        msg + args.join(''),
        instance && instance.proxy,
        trace.map(({ vnode  })=>`at <${formatComponentName(instance, vnode.type)}>`
        ).join('\n'),
        trace
    ]);
    else {
        const warnArgs = [
            `[Vue warn]: ${msg}`,
            ...args
        ];
        /* istanbul ignore if */ if (trace.length && // avoid spamming console during tests
        true) warnArgs.push(`\n`, ...formatTrace(trace));
        console.warn(...warnArgs);
    }
    _reactivity.resetTracking();
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) return [];
    // we can't just use the stack because it will be incomplete during updates
    // that did not start from the root. Re-construct the parent chain using
    // instance parent pointers.
    const normalizedStack = [];
    while(currentVNode){
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) last.recurseCount++;
        else normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
        });
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
/* istanbul ignore next */ function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i)=>{
        logs.push(...i === 0 ? [] : [
            `\n`
        ], ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode , recurseCount  }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props ? [
        open,
        ...formatProps(vnode.props),
        close
    ] : [
        open + close
    ];
}
/* istanbul ignore next */ function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach((key)=>{
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) res.push(` ...`);
    return res;
}
/* istanbul ignore next */ function formatProp(key, value, raw) {
    if (_shared.isString(value)) {
        value = JSON.stringify(value);
        return raw ? value : [
            `${key}=${value}`
        ];
    } else if (typeof value === 'number' || typeof value === 'boolean' || value == null) return raw ? value : [
        `${key}=${value}`
    ];
    else if (_reactivity.isRef(value)) {
        value = formatProp(key, _reactivity.toRaw(value.value), true);
        return raw ? value : [
            `${key}=Ref<`,
            value,
            `>`
        ];
    } else if (_shared.isFunction(value)) return [
        `${key}=fn${value.name ? `<${value.name}>` : ``}`
    ];
    else {
        value = _reactivity.toRaw(value);
        return raw ? value : [
            `${key}=`,
            value
        ];
    }
}
const ErrorTypeStrings = {
    ["sp" /* SERVER_PREFETCH */ ]: 'serverPrefetch hook',
    ["bc" /* BEFORE_CREATE */ ]: 'beforeCreate hook',
    ["c" /* CREATED */ ]: 'created hook',
    ["bm" /* BEFORE_MOUNT */ ]: 'beforeMount hook',
    ["m" /* MOUNTED */ ]: 'mounted hook',
    ["bu" /* BEFORE_UPDATE */ ]: 'beforeUpdate hook',
    ["u" /* UPDATED */ ]: 'updated',
    ["bum" /* BEFORE_UNMOUNT */ ]: 'beforeUnmount hook',
    ["um" /* UNMOUNTED */ ]: 'unmounted hook',
    ["a" /* ACTIVATED */ ]: 'activated hook',
    ["da" /* DEACTIVATED */ ]: 'deactivated hook',
    ["ec" /* ERROR_CAPTURED */ ]: 'errorCaptured hook',
    ["rtc" /* RENDER_TRACKED */ ]: 'renderTracked hook',
    ["rtg" /* RENDER_TRIGGERED */ ]: 'renderTriggered hook',
    [0 /* SETUP_FUNCTION */ ]: 'setup function',
    [1 /* RENDER_FUNCTION */ ]: 'render function',
    [2 /* WATCH_GETTER */ ]: 'watcher getter',
    [3 /* WATCH_CALLBACK */ ]: 'watcher callback',
    [4 /* WATCH_CLEANUP */ ]: 'watcher cleanup function',
    [5 /* NATIVE_EVENT_HANDLER */ ]: 'native event handler',
    [6 /* COMPONENT_EVENT_HANDLER */ ]: 'component event handler',
    [7 /* VNODE_HOOK */ ]: 'vnode hook',
    [8 /* DIRECTIVE_HOOK */ ]: 'directive hook',
    [9 /* TRANSITION_HOOK */ ]: 'transition hook',
    [10 /* APP_ERROR_HANDLER */ ]: 'app errorHandler',
    [11 /* APP_WARN_HANDLER */ ]: 'app warnHandler',
    [12 /* FUNCTION_REF */ ]: 'ref function',
    [13 /* ASYNC_COMPONENT_LOADER */ ]: 'async component loader',
    [14 /* SCHEDULER */ ]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next"
};
function callWithErrorHandling(fn, instance, type, args) {
    let res;
    try {
        res = args ? fn(...args) : fn();
    } catch (err) {
        handleError(err, instance, type);
    }
    return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if (_shared.isFunction(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && _shared.isPromise(res)) res.catch((err)=>{
            handleError(err, instance, type);
        });
        return res;
    }
    const values = [];
    for(let i = 0; i < fn.length; i++)values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    return values;
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    if (instance) {
        let cur = instance.parent;
        // the exposed instance is the render proxy to keep it consistent with 2.x
        const exposedInstance = instance.proxy;
        // in production the hook receives only the error code
        const errorInfo = ErrorTypeStrings[type];
        while(cur){
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) for(let i = 0; i < errorCapturedHooks.length; i++){
                if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) return;
            }
            cur = cur.parent;
        }
        // app-level handling
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */ , [
                err,
                exposedInstance,
                errorInfo
            ]);
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
    {
        const info = ErrorTypeStrings[type];
        if (contextVNode) pushWarningContext(contextVNode);
        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) popWarningContext();
        // crash in dev by default so it's more noticeable
        if (throwInDev) throw err;
        else console.error(err);
    }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function findInsertionIndex(job) {
    // the start index should be `flushIndex + 1`
    let start = flushIndex + 1;
    let end = queue.length;
    const jobId = getId(job);
    while(start < end){
        const middle = start + end >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < jobId ? start = middle + 1 : end = middle;
    }
    return start;
}
function queueJob(job) {
    // the dedupe search uses the startIndex argument of Array.includes()
    // by default the search index includes the current job that is being run
    // so it cannot recursively trigger itself again.
    // if the job is a watch() callback, the search will start with a +1 index to
    // allow it recursively trigger itself - it is the user's responsibility to
    // ensure it doesn't end up in an infinite loop.
    if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
        const pos = findInsertionIndex(job);
        if (pos > -1) queue.splice(pos, 0, job);
        else queue.push(job);
        queueFlush();
    }
}
function queueFlush() {
    if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
    }
}
function invalidateJob(job) {
    const i = queue.indexOf(job);
    if (i > flushIndex) queue.splice(i, 1);
}
function queueCb(cb, activeQueue, pendingQueue, index) {
    if (!_shared.isArray(cb)) {
        if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) pendingQueue.push(cb);
    } else // if cb is an array, it is a component lifecycle hook which can only be
    // triggered by a job, which is already deduped in the main queue, so
    // we can skip duplicate check here to improve perf
    pendingQueue.push(...cb);
    queueFlush();
}
function queuePreFlushCb(cb) {
    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
    if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [
            ...new Set(pendingPreFlushCbs)
        ];
        pendingPreFlushCbs.length = 0;
        seen = seen || new Map();
        for(preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++){
            if (checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) continue;
            activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        // recursively flush until it drains
        flushPreFlushCbs(seen, parentJob);
    }
}
function flushPostFlushCbs(seen) {
    if (pendingPostFlushCbs.length) {
        const deduped = [
            ...new Set(pendingPostFlushCbs)
        ];
        pendingPostFlushCbs.length = 0;
        // #1947 already has active queue, nested flushPostFlushCbs call
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        seen = seen || new Map();
        activePostFlushCbs.sort((a, b)=>getId(a) - getId(b)
        );
        for(postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++){
            if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) continue;
            activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job)=>job.id == null ? Infinity : job.id
;
function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    seen = seen || new Map();
    flushPreFlushCbs(seen);
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    queue.sort((a, b)=>getId(a) - getId(b)
    );
    try {
        for(flushIndex = 0; flushIndex < queue.length; flushIndex++){
            const job = queue[flushIndex];
            if (job && job.active !== false) {
                if (checkRecursiveUpdates(seen, job)) continue;
                callWithErrorHandling(job, null, 14 /* SCHEDULER */ );
            }
        }
    } finally{
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen);
        isFlushing = false;
        currentFlushPromise = null;
        // some postFlushCb queued jobs!
        // keep flushing until it drains.
        if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) flushJobs(seen);
    }
}
function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) seen.set(fn, 1);
    else {
        const count = seen.get(fn);
        if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` + `This means you have a reactive effect that is mutating its own ` + `dependencies and thus recursively triggering itself. Possible sources ` + `include component template, render function, updated hook or ` + `watcher source function.`);
            return true;
        } else seen.set(fn, count + 1);
    }
}
/* eslint-disable no-restricted-globals */ let isHmrUpdating = false;
const hmrDirtyComponents = new Set();
{
    const globalObject = typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {
    };
    globalObject.__VUE_HMR_RUNTIME__ = {
        createRecord: tryWrap(createRecord),
        rerender: tryWrap(rerender),
        reload: tryWrap(reload)
    };
}const map = new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
    }
    record.instances.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, component) {
    if (!component) {
        warn(`HMR API usage is out of date.\n` + `Please upgrade vue-loader/vite/rollup-plugin-vue or other relevant ` + `dependency that handles Vue SFC compilation.`);
        component = {
        };
    }
    if (map.has(id)) return false;
    map.set(id, {
        component: isClassComponent(component) ? component.__vccOpts : component,
        instances: new Set()
    });
    return true;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) return;
    if (newRender) record.component.render = newRender;
    // Array.from creates a snapshot which avoids the set being mutated during
    // updates
    Array.from(record.instances).forEach((instance)=>{
        if (newRender) instance.render = newRender;
        instance.renderCache = [];
        // this flag forces child components with slot content to update
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record) return;
    // Array.from creates a snapshot which avoids the set being mutated during
    // updates
    const { component , instances  } = record;
    if (!hmrDirtyComponents.has(component)) {
        // 1. Update existing comp definition to match new one
        newComp = isClassComponent(newComp) ? newComp.__vccOpts : newComp;
        _shared.extend(component, newComp);
        for(const key in component)if (key !== '__file' && !(key in newComp)) delete component[key];
        // 2. Mark component dirty. This forces the renderer to replace the component
        // on patch.
        hmrDirtyComponents.add(component);
        // 3. Make sure to unmark the component after the reload.
        queuePostFlushCb(()=>{
            hmrDirtyComponents.delete(component);
        });
    }
    Array.from(instances).forEach((instance)=>{
        if (instance.parent) // 4. Force the parent instance to re-render. This will cause all updated
        // components to be unmounted and re-mounted. Queue the update so that we
        // don't end up forcing the same parent to re-render multiple times.
        queueJob(instance.parent.update);
        else if (instance.appContext.reload) // root instance mounted via createApp() has a reload method
        instance.appContext.reload();
        else if (typeof window !== 'undefined') // root instance inside tree created via raw render(). Force reload.
        window.location.reload();
        else console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');
    });
}
function tryWrap(fn) {
    return (id, arg)=>{
        try {
            return fn(id, arg);
        } catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` + `Full reload required.`);
        }
    };
}
let devtools;
function setDevtoolsHook(hook) {
    devtools = hook;
}
function devtoolsInitApp(app, version) {
    // TODO queue if devtools is undefined
    if (!devtools) return;
    devtools.emit("app:init" /* APP_INIT */ , app, version, {
        Fragment,
        Text: Text1,
        Comment: Comment$1,
        Static
    });
}
function devtoolsUnmountApp(app) {
    if (!devtools) return;
    devtools.emit("app:unmount" /* APP_UNMOUNT */ , app);
}
const devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook("component:added" /* COMPONENT_ADDED */ );
const devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */ );
const devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook("component:removed" /* COMPONENT_REMOVED */ );
function createDevtoolsComponentHook(hook) {
    return (component)=>{
        if (!devtools) return;
        devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);
    };
}
const devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:start" /* PERFORMANCE_START */ );
const devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:end" /* PERFORMANCE_END */ );
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time)=>{
        if (!devtools) return;
        devtools.emit(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    if (!devtools) return;
    devtools.emit("component:emit" /* COMPONENT_EMIT */ , component.appContext.app, component, event, params);
}
const deprecationData = {
    ["GLOBAL_MOUNT" /* GLOBAL_MOUNT */ ]: {
        message: `The global app bootstrapping API has changed: vm.$mount() and the "el" ` + `option have been removed. Use createApp(RootComponent).mount() instead.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#mounting-app-instance`
    },
    ["GLOBAL_MOUNT_CONTAINER" /* GLOBAL_MOUNT_CONTAINER */ ]: {
        message: `Vue detected directives on the mount container. ` + `In Vue 3, the container is no longer considered part of the template ` + `and will not be processed/replaced.`,
        link: `https://v3.vuejs.org/guide/migration/mount-changes.html`
    },
    ["GLOBAL_EXTEND" /* GLOBAL_EXTEND */ ]: {
        message: `Vue.extend() has been removed in Vue 3. ` + `Use defineComponent() instead.`,
        link: `https://v3.vuejs.org/api/global-api.html#definecomponent`
    },
    ["GLOBAL_PROTOTYPE" /* GLOBAL_PROTOTYPE */ ]: {
        message: `Vue.prototype is no longer available in Vue 3. ` + `Use app.config.globalProperties instead.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#vue-prototype-replaced-by-config-globalproperties`
    },
    ["GLOBAL_SET" /* GLOBAL_SET */ ]: {
        message: `Vue.set() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["GLOBAL_DELETE" /* GLOBAL_DELETE */ ]: {
        message: `Vue.delete() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["GLOBAL_OBSERVABLE" /* GLOBAL_OBSERVABLE */ ]: {
        message: `Vue.observable() has been removed. ` + `Use \`import { reactive } from "vue"\` from Composition API instead.`,
        link: `https://v3.vuejs.org/api/basic-reactivity.html`
    },
    ["GLOBAL_PRIVATE_UTIL" /* GLOBAL_PRIVATE_UTIL */ ]: {
        message: `Vue.util has been removed. Please refactor to avoid its usage ` + `since it was an internal API even in Vue 2.`
    },
    ["CONFIG_SILENT" /* CONFIG_SILENT */ ]: {
        message: `config.silent has been removed because it is not good practice to ` + `intentionally suppress warnings. You can use your browser console's ` + `filter features to focus on relevant messages.`
    },
    ["CONFIG_DEVTOOLS" /* CONFIG_DEVTOOLS */ ]: {
        message: `config.devtools has been removed. To enable devtools for ` + `production, configure the __VUE_PROD_DEVTOOLS__ compile-time flag.`,
        link: `https://github.com/vuejs/vue-next/tree/master/packages/vue#bundler-build-feature-flags`
    },
    ["CONFIG_KEY_CODES" /* CONFIG_KEY_CODES */ ]: {
        message: `config.keyCodes has been removed. ` + `In Vue 3, you can directly use the kebab-case key names as v-on modifiers.`,
        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`
    },
    ["CONFIG_PRODUCTION_TIP" /* CONFIG_PRODUCTION_TIP */ ]: {
        message: `config.productionTip has been removed.`,
        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-productiontip-removed`
    },
    ["CONFIG_IGNORED_ELEMENTS" /* CONFIG_IGNORED_ELEMENTS */ ]: {
        message: ()=>{
            let msg = `config.ignoredElements has been removed.`;
            if (isRuntimeOnly()) msg += ` Pass the "isCustomElement" option to @vue/compiler-dom instead.`;
            else msg += ` Use config.isCustomElement instead.`;
            return msg;
        },
        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-ignoredelements-is-now-config-iscustomelement`
    },
    ["CONFIG_WHITESPACE" /* CONFIG_WHITESPACE */ ]: {
        // this warning is only relevant in the full build when using runtime
        // compilation, so it's put in the runtime compatConfig list.
        message: `Vue 3 compiler's whitespace option will default to "condense" instead of ` + `"preserve". To suppress this warning, provide an explicit value for ` + `\`config.compilerOptions.whitespace\`.`
    },
    ["CONFIG_OPTION_MERGE_STRATS" /* CONFIG_OPTION_MERGE_STRATS */ ]: {
        message: `config.optionMergeStrategies no longer exposes internal strategies. ` + `Use custom merge functions instead.`
    },
    ["INSTANCE_SET" /* INSTANCE_SET */ ]: {
        message: `vm.$set() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["INSTANCE_DELETE" /* INSTANCE_DELETE */ ]: {
        message: `vm.$delete() has been removed as it is no longer needed in Vue 3. ` + `Simply use native JavaScript mutations.`
    },
    ["INSTANCE_DESTROY" /* INSTANCE_DESTROY */ ]: {
        message: `vm.$destroy() has been removed. Use app.unmount() instead.`,
        link: `https://v3.vuejs.org/api/application-api.html#unmount`
    },
    ["INSTANCE_EVENT_EMITTER" /* INSTANCE_EVENT_EMITTER */ ]: {
        message: `vm.$on/$once/$off() have been removed. ` + `Use an external event emitter library instead.`,
        link: `https://v3.vuejs.org/guide/migration/events-api.html`
    },
    ["INSTANCE_EVENT_HOOKS" /* INSTANCE_EVENT_HOOKS */ ]: {
        message: (event)=>`"${event}" lifecycle events are no longer supported. From templates, ` + `use the "vnode" prefix instead of "hook:". For example, @${event} ` + `should be changed to @vnode-${event.slice(5)}. ` + `From JavaScript, use Composition API to dynamically register lifecycle ` + `hooks.`
        ,
        link: `https://v3.vuejs.org/guide/migration/vnode-lifecycle-events.html`
    },
    ["INSTANCE_CHILDREN" /* INSTANCE_CHILDREN */ ]: {
        message: `vm.$children has been removed. Consider refactoring your logic ` + `to avoid relying on direct access to child components.`,
        link: `https://v3.vuejs.org/guide/migration/children.html`
    },
    ["INSTANCE_LISTENERS" /* INSTANCE_LISTENERS */ ]: {
        message: `vm.$listeners has been removed. In Vue 3, parent v-on listeners are ` + `included in vm.$attrs and it is no longer necessary to separately use ` + `v-on="$listeners" if you are already using v-bind="$attrs". ` + `(Note: the Vue 3 behavior only applies if this compat config is disabled)`,
        link: `https://v3.vuejs.org/guide/migration/listeners-removed.html`
    },
    ["INSTANCE_SCOPED_SLOTS" /* INSTANCE_SCOPED_SLOTS */ ]: {
        message: `vm.$scopedSlots has been removed. Use vm.$slots instead.`,
        link: `https://v3.vuejs.org/guide/migration/slots-unification.html`
    },
    ["INSTANCE_ATTRS_CLASS_STYLE" /* INSTANCE_ATTRS_CLASS_STYLE */ ]: {
        message: (componentName)=>`Component <${componentName || 'Anonymous'}> has \`inheritAttrs: false\` but is ` + `relying on class/style fallthrough from parent. In Vue 3, class/style ` + `are now included in $attrs and will no longer fallthrough when ` + `inheritAttrs is false. If you are already using v-bind="$attrs" on ` + `component root it should render the same end result. ` + `If you are binding $attrs to a non-root element and expecting ` + `class/style to fallthrough on root, you will need to now manually bind ` + `them on root via :class="$attrs.class".`
        ,
        link: `https://v3.vuejs.org/guide/migration/attrs-includes-class-style.html`
    },
    ["OPTIONS_DATA_FN" /* OPTIONS_DATA_FN */ ]: {
        message: `The "data" option can no longer be a plain object. ` + `Always use a function.`,
        link: `https://v3.vuejs.org/guide/migration/data-option.html`
    },
    ["OPTIONS_DATA_MERGE" /* OPTIONS_DATA_MERGE */ ]: {
        message: (key)=>`Detected conflicting key "${key}" when merging data option values. ` + `In Vue 3, data keys are merged shallowly and will override one another.`
        ,
        link: `https://v3.vuejs.org/guide/migration/data-option.html#mixin-merge-behavior-change`
    },
    ["OPTIONS_BEFORE_DESTROY" /* OPTIONS_BEFORE_DESTROY */ ]: {
        message: `\`beforeDestroy\` has been renamed to \`beforeUnmount\`.`
    },
    ["OPTIONS_DESTROYED" /* OPTIONS_DESTROYED */ ]: {
        message: `\`destroyed\` has been renamed to \`unmounted\`.`
    },
    ["WATCH_ARRAY" /* WATCH_ARRAY */ ]: {
        message: `"watch" option or vm.$watch on an array value will no longer ` + `trigger on array mutation unless the "deep" option is specified. ` + `If current usage is intended, you can disable the compat behavior and ` + `suppress this warning with:` + `\n\n  configureCompat({ ${"WATCH_ARRAY" /* WATCH_ARRAY */ }: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/watch.html`
    },
    ["PROPS_DEFAULT_THIS" /* PROPS_DEFAULT_THIS */ ]: {
        message: (key)=>`props default value function no longer has access to "this". The compat ` + `build only offers access to this.$options.` + `(found in prop "${key}")`
        ,
        link: `https://v3.vuejs.org/guide/migration/props-default-this.html`
    },
    ["CUSTOM_DIR" /* CUSTOM_DIR */ ]: {
        message: (legacyHook, newHook)=>`Custom directive hook "${legacyHook}" has been removed. ` + `Use "${newHook}" instead.`
        ,
        link: `https://v3.vuejs.org/guide/migration/custom-directives.html`
    },
    ["V_FOR_REF" /* V_FOR_REF */ ]: {
        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` + `Consider using function refs or refactor to avoid ref usage altogether.`,
        link: `https://v3.vuejs.org/guide/migration/array-refs.html`
    },
    ["V_ON_KEYCODE_MODIFIER" /* V_ON_KEYCODE_MODIFIER */ ]: {
        message: `Using keyCode as v-on modifier is no longer supported. ` + `Use kebab-case key name modifiers instead.`,
        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`
    },
    ["ATTR_FALSE_VALUE" /* ATTR_FALSE_VALUE */ ]: {
        message: (name)=>`Attribute "${name}" with v-bind value \`false\` will render ` + `${name}="false" instead of removing it in Vue 3. To remove the attribute, ` + `use \`null\` or \`undefined\` instead. If the usage is intended, ` + `you can disable the compat behavior and suppress this warning with:` + `\n\n  configureCompat({ ${"ATTR_FALSE_VALUE" /* ATTR_FALSE_VALUE */ }: false })\n`
        ,
        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`
    },
    ["ATTR_ENUMERATED_COERCION" /* ATTR_ENUMERATED_COERCION */ ]: {
        message: (name, value, coerced)=>`Enumerated attribute "${name}" with v-bind value \`${value}\` will ` + `${value === null ? `be removed` : `render the value as-is`} instead of coercing the value to "${coerced}" in Vue 3. ` + `Always use explicit "true" or "false" values for enumerated attributes. ` + `If the usage is intended, ` + `you can disable the compat behavior and suppress this warning with:` + `\n\n  configureCompat({ ${"ATTR_ENUMERATED_COERCION" /* ATTR_ENUMERATED_COERCION */ }: false })\n`
        ,
        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`
    },
    ["TRANSITION_CLASSES" /* TRANSITION_CLASSES */ ]: {
        message: `` // this feature cannot be runtime-detected
    },
    ["TRANSITION_GROUP_ROOT" /* TRANSITION_GROUP_ROOT */ ]: {
        message: `<TransitionGroup> no longer renders a root <span> element by ` + `default if no "tag" prop is specified. If you do not rely on the span ` + `for styling, you can disable the compat behavior and suppress this ` + `warning with:` + `\n\n  configureCompat({ ${"TRANSITION_GROUP_ROOT" /* TRANSITION_GROUP_ROOT */ }: false })\n`,
        link: `https://v3.vuejs.org/guide/migration/transition-group.html`
    },
    ["COMPONENT_ASYNC" /* COMPONENT_ASYNC */ ]: {
        message: (comp)=>{
            const name = getComponentName(comp);
            return `Async component${name ? ` <${name}>` : `s`} should be explicitly created via \`defineAsyncComponent()\` ` + `in Vue 3. Plain functions will be treated as functional components in ` + `non-compat build. If you have already migrated all async component ` + `usage and intend to use plain functions for functional components, ` + `you can disable the compat behavior and suppress this ` + `warning with:` + `\n\n  configureCompat({ ${"COMPONENT_ASYNC" /* COMPONENT_ASYNC */ }: false })\n`;
        },
        link: `https://v3.vuejs.org/guide/migration/async-components.html`
    },
    ["COMPONENT_FUNCTIONAL" /* COMPONENT_FUNCTIONAL */ ]: {
        message: (comp)=>{
            const name = getComponentName(comp);
            return `Functional component${name ? ` <${name}>` : `s`} should be defined as a plain function in Vue 3. The "functional" ` + `option has been removed. NOTE: Before migrating to use plain ` + `functions for functional components, first make sure that all async ` + `components usage have been migrated and its compat behavior has ` + `been disabled.`;
        },
        link: `https://v3.vuejs.org/guide/migration/functional-components.html`
    },
    ["COMPONENT_V_MODEL" /* COMPONENT_V_MODEL */ ]: {
        message: (comp)=>{
            const configMsg = `opt-in to ` + `Vue 3 behavior on a per-component basis with \`compatConfig: { ${"COMPONENT_V_MODEL" /* COMPONENT_V_MODEL */ }: false }\`.`;
            if (comp.props && (_shared.isArray(comp.props) ? comp.props.includes('modelValue') : _shared.hasOwn(comp.props, 'modelValue'))) return `Component delcares "modelValue" prop, which is Vue 3 usage, but ` + `is running under Vue 2 compat v-model behavior. You can ${configMsg}`;
            return `v-model usage on component has changed in Vue 3. Component that expects ` + `to work with v-model should now use the "modelValue" prop and emit the ` + `"update:modelValue" event. You can update the usage and then ${configMsg}`;
        },
        link: `https://v3.vuejs.org/guide/migration/v-model.html`
    },
    ["RENDER_FUNCTION" /* RENDER_FUNCTION */ ]: {
        message: `Vue 3's render function API has changed. ` + `You can opt-in to the new API with:` + `\n\n  configureCompat({ ${"RENDER_FUNCTION" /* RENDER_FUNCTION */ }: false })\n` + `\n  (This can also be done per-component via the "compatConfig" option.)`,
        link: `https://v3.vuejs.org/guide/migration/render-function-api.html`
    },
    ["FILTERS" /* FILTERS */ ]: {
        message: `filters have been removed in Vue 3. ` + `The "|" symbol will be treated as native JavaScript bitwise OR operator. ` + `Use method calls or computed properties instead.`,
        link: `https://v3.vuejs.org/guide/migration/filters.html`
    },
    ["PRIVATE_APIS" /* PRIVATE_APIS */ ]: {
        message: (name)=>`"${name}" is a Vue 2 private API that no longer exists in Vue 3. ` + `If you are seeing this warning only due to a dependency, you can ` + `suppress this warning via { PRIVATE_APIS: 'supress-warning' }.`
    }
};
const instanceWarned = Object.create(null);
const warnCount = Object.create(null);
function warnDeprecation(key, instance, ...args) {
    instance = instance || getCurrentInstance();
    // check user config
    const config = getCompatConfigForKey(key, instance);
    if (config === 'suppress-warning') return;
    const dupKey = key + args.join('');
    let compId = instance && formatComponentName(instance, instance.type);
    if (compId === 'Anonymous' && instance) compId = instance.uid;
    // skip if the same warning is emitted for the same component type
    const componentDupKey = dupKey + compId;
    if (componentDupKey in instanceWarned) return;
    instanceWarned[componentDupKey] = true;
    // same warning, but different component. skip the long message and just
    // log the key and count.
    if (dupKey in warnCount) {
        warn(`(deprecation ${key}) (${(++warnCount[dupKey]) + 1})`);
        return;
    }
    warnCount[dupKey] = 0;
    const { message , link  } = deprecationData[key];
    warn(`(deprecation ${key}) ${typeof message === 'function' ? message(...args) : message}${link ? `\n  Details: ${link}` : ``}`);
    if (!isCompatEnabled(key, instance, true)) console.error(`^ The above deprecation's compat behavior is disabled and will likely ` + `lead to runtime errors.`);
}
const globalCompatConfig = {
    MODE: 2
};
function getCompatConfigForKey(key, instance) {
    const instanceConfig = instance && instance.type.compatConfig;
    if (instanceConfig && key in instanceConfig) return instanceConfig[key];
    return globalCompatConfig[key];
}
function isCompatEnabled(key, instance, enableForBuiltIn = false) {
    // skip compat for built-in components
    if (!enableForBuiltIn && instance && instance.type.__isBuiltIn) return false;
    const rawMode = getCompatConfigForKey('MODE', instance) || 2;
    const val = getCompatConfigForKey(key, instance);
    const mode = _shared.isFunction(rawMode) ? rawMode(instance && instance.type) : rawMode;
    if (mode === 2) return val !== false;
    else return val === true || val === 'suppress-warning';
}
function emit(instance, event, ...rawArgs) {
    const props = instance.vnode.props || _shared.EMPTY_OBJ;
    {
        const { emitsOptions , propsOptions: [propsOptions]  } = instance;
        if (emitsOptions) {
            if (!(event in emitsOptions) && true) {
                if (!propsOptions || !(_shared.toHandlerKey(event) in propsOptions)) warn(`Component emitted event "${event}" but it is neither declared in ` + `the emits option nor as an "${_shared.toHandlerKey(event)}" prop.`);
            } else {
                const validator = emitsOptions[event];
                if (_shared.isFunction(validator)) {
                    const isValid = validator(...rawArgs);
                    if (!isValid) warn(`Invalid event arguments: event validation failed for event "${event}".`);
                }
            }
        }
    }
    let args = rawArgs;
    const isModelListener = event.startsWith('update:');
    // for v-model update:xxx events, apply modifiers on args
    const modelArg = isModelListener && event.slice(7);
    if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;
        const { number , trim  } = props[modifiersKey] || _shared.EMPTY_OBJ;
        if (trim) args = rawArgs.map((a)=>a.trim()
        );
        else if (number) args = rawArgs.map(_shared.toNumber);
    }
    devtoolsComponentEmit(instance, event, args);
    {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[_shared.toHandlerKey(lowerCaseEvent)]) warn(`Event "${lowerCaseEvent}" is emitted in component ` + `${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". ` + `Note that HTML attributes are case-insensitive and you cannot use ` + `v-on to listen to camelCase events when using in-DOM templates. ` + `You should probably use "${_shared.hyphenate(event)}" instead of "${event}".`);
    }
    let handlerName;
    let handler = props[handlerName = _shared.toHandlerKey(event)] || // also try camelCase event handler (#2249)
    props[handlerName = _shared.toHandlerKey(_shared.camelize(event))];
    // for v-model update:xxx events, also trigger kebab-case equivalent
    // for props passed via kebab-case
    if (!handler && isModelListener) handler = props[handlerName = _shared.toHandlerKey(_shared.hyphenate(event))];
    if (handler) callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) instance.emitted = {
        };
        else if (instance.emitted[handlerName]) return;
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */ , args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== undefined) return cached;
    const raw = comp.emits;
    let normalized = {
    };
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !_shared.isFunction(comp)) {
        const extendEmits = (raw1)=>{
            const normalizedFromExtend = normalizeEmitsOptions(raw1, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                _shared.extend(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendEmits);
        if (comp.extends) extendEmits(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendEmits);
    }
    if (!raw && !hasExtends) {
        cache.set(comp, null);
        return null;
    }
    if (_shared.isArray(raw)) raw.forEach((key)=>normalized[key] = null
    );
    else _shared.extend(normalized, raw);
    cache.set(comp, normalized);
    return normalized;
}
// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function isEmitListener(options, key) {
    if (!options || !_shared.isOn(key)) return false;
    key = key.slice(2).replace(/Once$/, '');
    return _shared.hasOwn(options, key[0].toLowerCase() + key.slice(1)) || _shared.hasOwn(options, _shared.hyphenate(key)) || _shared.hasOwn(options, key);
}
/**
 * mark the current rendering instance for asset resolution (e.g.
 * resolveComponent, resolveDirective) during render
 */ let currentRenderingInstance = null;
let currentScopeId = null;
/**
 * Note: rendering calls maybe nested. The function returns the parent rendering
 * instance if present, which should be restored after the render is done:
 *
 * ```js
 * const prev = setCurrentRenderingInstance(i)
 * // ...render
 * setCurrentRenderingInstance(prev)
 * ```
 */ function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = instance && instance.type.__scopeId || null;
    return prev;
}
/**
 * Set scope id when creating hoisted vnodes.
 * @private compiler helper
 */ function pushScopeId(id) {
    currentScopeId = id;
}
/**
 * Technically we no longer need this after 3.0.8 but we need to keep the same
 * API for backwards compat w/ code generated by compilers.
 * @private
 */ function popScopeId() {
    currentScopeId = null;
}
/**
 * Only for backwards compat
 * @private
 */ const withScopeId = (_id)=>withCtx
;
/**
 * Wrap a slot function to memoize current rendering instance
 * @private compiler helper
 */ function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only
) {
    if (!ctx) return fn;
    // already normalized
    if (fn._n) return fn;
    const renderFnWithContext = (...args)=>{
        // If a user calls a compiled slot inside a template expression (#1745), it
        // can mess up block tracking, so by default we disable block tracking and
        // force bail out when invoking a compiled slot (indicated by the ._d flag).
        // This isn't necessary if rendering a compiled `<slot>`, so we flip the
        // ._d flag off when invoking the wrapped fn inside `renderSlot`.
        if (renderFnWithContext._d) setBlockTracking(-1);
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) setBlockTracking(1);
        devtoolsComponentUpdated(ctx);
        return res;
    };
    // mark normalized to avoid duplicated wrapping
    renderFnWithContext._n = true;
    // mark this as compiled by default
    // this is used in vnode.ts -> normalizeChildren() to set the slot
    // rendering flag.
    renderFnWithContext._c = true;
    // disable block tracking by default
    renderFnWithContext._d = true;
    return renderFnWithContext;
}
/**
 * dev only flag to track whether $attrs was used during render.
 * If $attrs was used during render then the warning for failed attrs
 * fallthrough can be suppressed.
 */ let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component , vnode , proxy , withProxy , props , propsOptions: [propsOptions] , slots , attrs , emit: emit1 , render , renderCache , data , setupState , ctx , inheritAttrs  } = instance;
    let result;
    const prev = setCurrentRenderingInstance(instance);
    accessedAttrs = false;
    try {
        let fallthroughAttrs;
        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) {
            // withProxy is a proxy with a different `has` trap only for
            // runtime-compiled render functions using `with` block.
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
            fallthroughAttrs = attrs;
        } else {
            // functional
            const render1 = Component;
            // in dev, mark attrs accessed if optional props (attrs === props)
            if (attrs === props) markAttrsAccessed();
            result = normalizeVNode(render1.length > 1 ? render1(props, {
                get attrs () {
                    markAttrsAccessed();
                    return attrs;
                },
                slots,
                emit: emit1
            }) : render1(props, null));
            fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
        // attr merging
        // in dev mode, comments are preserved, and it's possible for a template
        // to have comments along side the root element which makes it a fragment
        let root = result;
        let setRoot = undefined;
        if (result.patchFlag > 0 && result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) [root, setRoot] = getChildRoot(result);
        if (fallthroughAttrs && inheritAttrs !== false) {
            const keys = Object.keys(fallthroughAttrs);
            const { shapeFlag  } = root;
            if (keys.length) {
                if (shapeFlag & 1 /* ELEMENT */  || shapeFlag & 6 /* COMPONENT */ ) {
                    if (propsOptions && keys.some(_shared.isModelListener)) // If a v-model listener (onUpdate:xxx) has a corresponding declared
                    // prop, it indicates this component expects to handle v-model and
                    // it should not fallthrough.
                    // related: #1543, #1643, #1989
                    fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                    root = cloneVNode(root, fallthroughAttrs);
                } else if (!accessedAttrs && root.type !== Comment$1) {
                    const allAttrs = Object.keys(attrs);
                    const eventAttrs = [];
                    const extraAttrs = [];
                    for(let i = 0, l = allAttrs.length; i < l; i++){
                        const key = allAttrs[i];
                        if (_shared.isOn(key)) // ignore v-model handlers when they fail to fallthrough
                        {
                            if (!_shared.isModelListener(key)) // remove `on`, lowercase first letter to reflect event casing
                            // accurately
                            eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                        } else extraAttrs.push(key);
                    }
                    if (extraAttrs.length) warn(`Extraneous non-props attributes (` + `${extraAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes.`);
                    if (eventAttrs.length) warn(`Extraneous non-emits event listeners (` + `${eventAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes. ` + `If the listener is intended to be a component custom event listener only, ` + `declare it using the "emits" option.`);
                }
            }
        }
        // inherit directives
        if (vnode.dirs) {
            if (!isElementRoot(root)) warn(`Runtime directive used on component with non-element root node. ` + `The directives will not function as intended.`);
            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
        }
        // inherit transition data
        if (vnode.transition) {
            if (!isElementRoot(root)) warn(`Component inside <Transition> renders non-element root node ` + `that cannot be animated.`);
            root.transition = vnode.transition;
        }
        if (setRoot) setRoot(root);
        else result = root;
    } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1 /* RENDER_FUNCTION */ );
        result = createVNode(Comment$1);
    }
    setCurrentRenderingInstance(prev);
    return result;
}
/**
 * dev only
 * In dev mode, template root level comments are rendered, which turns the
 * template into a fragment root, but we need to locate the single element
 * root for attrs and scope id processing.
 */ const getChildRoot = (vnode)=>{
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren);
    if (!childRoot) return [
        vnode,
        undefined
    ];
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot)=>{
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) dynamicChildren[dynamicIndex] = updatedRoot;
            else if (updatedRoot.patchFlag > 0) vnode.dynamicChildren = [
                ...dynamicChildren,
                updatedRoot
            ];
        }
    };
    return [
        normalizeVNode(childRoot),
        setRoot
    ];
};
function filterSingleRoot(children) {
    let singleRoot;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        if (isVNode(child)) // ignore user comment
        {
            if (child.type !== Comment$1 || child.children === 'v-if') {
                if (singleRoot) // has more than 1 non-comment child, return now
                return;
                else singleRoot = child;
            }
        } else return;
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs)=>{
    let res;
    for(const key in attrs)if (key === 'class' || key === 'style' || _shared.isOn(key)) (res || (res = {
    }))[key] = attrs[key];
    return res;
};
const filterModelListeners = (attrs, props)=>{
    const res = {
    };
    for(const key in attrs)if (!_shared.isModelListener(key) || !(key.slice(9) in props)) res[key] = attrs[key];
    return res;
};
const isElementRoot = (vnode)=>{
    return vnode.shapeFlag & 6 /* COMPONENT */  || vnode.shapeFlag & 1 /* ELEMENT */  || vnode.type === Comment$1 // potential v-if branch switch
    ;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps , children: prevChildren , component  } = prevVNode;
    const { props: nextProps , children: nextChildren , patchFlag  } = nextVNode;
    const emits = component.emitsOptions;
    // Parent component's render function was hot-updated. Since this may have
    // caused the child component's slots content to have changed, we need to
    // force the child to update as well.
    if ((prevChildren || nextChildren) && isHmrUpdating) return true;
    // force child update for runtime directive or transition on component vnode.
    if (nextVNode.dirs || nextVNode.transition) return true;
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024 /* DYNAMIC_SLOTS */ ) // slot content that references values that might have changed,
        // e.g. in a v-for
        return true;
        if (patchFlag & 16 /* FULL_PROPS */ ) {
            if (!prevProps) return !!nextProps;
            // presence of this flag indicates props are always non-null
            return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8 /* PROPS */ ) {
            const dynamicProps = nextVNode.dynamicProps;
            for(let i = 0; i < dynamicProps.length; i++){
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) return true;
            }
        }
    } else {
        // this path is only taken by manually written render functions
        // so presence of any children leads to a forced update
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) return true;
        }
        if (prevProps === nextProps) return false;
        if (!prevProps) return !!nextProps;
        if (!nextProps) return true;
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) return true;
    for(let i = 0; i < nextKeys.length; i++){
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) return true;
    }
    return false;
}
function updateHOCHostEl({ vnode , parent  }, el // HostNode
) {
    while(parent && parent.subTree === vnode){
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
    }
}
const isSuspense = (type)=>type.__isSuspense
;
// Suspense exposes a component-like API, and is treated like a component
// in the compiler, but internally it's a special built-in type that hooks
// directly into the renderer.
const SuspenseImpl = {
    name: 'Suspense',
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, // platform-specific impl passed from renderer
    rendererInternals) {
        if (n1 == null) mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        else patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
    },
    hydrate: hydrateSuspense,
    create: createSuspenseBoundary,
    normalize: normalizeSuspenseChildren
};
// Force-casted public typing for h and TSX props inference
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
    const eventListener = vnode.props && vnode.props[name];
    if (_shared.isFunction(eventListener)) eventListener();
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    const { p: patch , o: { createElement  }  } = rendererInternals;
    const hiddenContainer = createElement('div');
    const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
    // start mounting the content subtree in an off-dom container
    patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
    // now check if we have encountered any async deps
    if (suspense.deps > 0) {
        // has async
        // invoke @fallback event
        triggerEvent(vnode, 'onPending');
        triggerEvent(vnode, 'onFallback');
        // mount the fallback tree
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    } else // Suspense has no async deps. Just resolve.
    suspense.resolve();
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch , um: unmount , o: { createElement  }  }) {
    const suspense = n2.suspense = n1.suspense;
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch , pendingBranch , isInFallback , isHydrating  } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            // same root type but content may have changed.
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) suspense.resolve();
            else if (isInFallback) {
                patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, newFallback);
            }
        } else {
            // toggled before pending tree is resolved
            suspense.pendingId++;
            if (isHydrating) {
                // if toggled before hydration is finished, the current DOM tree is
                // no longer valid. set it as the active branch so it will be unmounted
                // when resolved
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            } else unmount(pendingBranch, parentComponent, suspense);
            // increment pending ID. this is used to invalidate async callbacks
            // reset suspense state
            suspense.deps = 0;
            // discard effects from pending branch
            suspense.effects.length = 0;
            // discard previous container
            suspense.hiddenContainer = createElement('div');
            if (isInFallback) {
                // already in fallback state
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, isSVG, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                // toggled "back" to current active branch
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                // force resolve
                suspense.resolve(true);
            } else {
                // switched to a 3rd branch
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
            }
        }
    } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        // root did not change, just normal patch
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        setActiveBranch(suspense, newBranch);
    } else {
        // root node toggled
        // invoke @pending event
        triggerEvent(n2, 'onPending');
        // mount pending branch in off-dom container
        suspense.pendingBranch = newBranch;
        suspense.pendingId++;
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) // incoming branch has no async deps, resolve now.
        suspense.resolve();
        else {
            const { timeout , pendingId  } = suspense;
            if (timeout > 0) setTimeout(()=>{
                if (suspense.pendingId === pendingId) suspense.fallback(newFallback);
            }, timeout);
            else if (timeout === 0) suspense.fallback(newFallback);
        }
    }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parent, parentComponent, container1, hiddenContainer, anchor1, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    /* istanbul ignore if */ if (!hasWarned) {
        hasWarned = true;
        // @ts-ignore `console.info` cannot be null error
        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);
    }
    const { p: patch , m: move , um: unmount , n: next , o: { parentNode , remove  }  } = rendererInternals;
    const timeout = _shared.toNumber(vnode.props && vnode.props.timeout);
    const suspense = {
        vnode,
        parent,
        parentComponent,
        isSVG,
        container: container1,
        hiddenContainer,
        anchor: anchor1,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === 'number' ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve (resume = false) {
            if (!resume && !suspense.pendingBranch) throw new Error(`suspense.resolve() is called without a pending branch.`);
            if (suspense.isUnmounted) throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
            const { vnode: vnode1 , activeBranch , pendingBranch , pendingId , effects , parentComponent: parentComponent1 , container: container1  } = suspense;
            if (suspense.isHydrating) suspense.isHydrating = false;
            else if (!resume) {
                const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === 'out-in';
                if (delayEnter) activeBranch.transition.afterLeave = ()=>{
                    if (pendingId === suspense.pendingId) move(pendingBranch, container1, anchor1, 0 /* ENTER */ );
                };
                // this is initial anchor on mount
                let { anchor: anchor1  } = suspense;
                // unmount current active tree
                if (activeBranch) {
                    // if the fallback tree was mounted, it may have been moved
                    // as part of a parent suspense. get the latest anchor for insertion
                    anchor1 = next(activeBranch);
                    unmount(activeBranch, parentComponent1, suspense, true);
                }
                if (!delayEnter) // move content from off-dom container to actual container
                move(pendingBranch, container1, anchor1, 0 /* ENTER */ );
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            // flush buffered effects
            // check if there is a pending parent suspense
            let parent1 = suspense.parent;
            let hasUnresolvedAncestor = false;
            while(parent1){
                if (parent1.pendingBranch) {
                    // found a pending parent suspense, merge buffered post jobs
                    // into that parent
                    parent1.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent1 = parent1.parent;
            }
            // no pending parent suspense, flush all jobs
            if (!hasUnresolvedAncestor) queuePostFlushCb(effects);
            suspense.effects = [];
            // invoke @resolve event
            triggerEvent(vnode1, 'onResolve');
        },
        fallback (fallbackVNode) {
            if (!suspense.pendingBranch) return;
            const { vnode: vnode1 , activeBranch , parentComponent: parentComponent1 , container: container1 , isSVG: isSVG1  } = suspense;
            // invoke @fallback event
            triggerEvent(vnode1, 'onFallback');
            const anchor1 = next(activeBranch);
            const mountFallback = ()=>{
                if (!suspense.isInFallback) return;
                // mount the fallback tree
                patch(null, fallbackVNode, container1, anchor1, parentComponent1, null, isSVG1, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';
            if (delayEnter) activeBranch.transition.afterLeave = mountFallback;
            suspense.isInFallback = true;
            // unmount current active branch
            unmount(activeBranch, parentComponent1, null, true // shouldRemove
            );
            if (!delayEnter) mountFallback();
        },
        move (container, anchor, type) {
            suspense.activeBranch && move(suspense.activeBranch, container, anchor, type);
            suspense.container = container;
        },
        next () {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep (instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) suspense.deps++;
            const hydratedEl = instance.vnode.el;
            instance.asyncDep.catch((err)=>{
                handleError(err, instance, 0 /* SETUP_FUNCTION */ );
            }).then((asyncSetupResult)=>{
                // retry when the setup() promise resolves.
                // component may have been unmounted before resolve.
                if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) return;
                // retry from this component
                instance.asyncResolved = true;
                const { vnode: vnode1  } = instance;
                pushWarningContext(vnode1);
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) // vnode may have been replaced if an update happened before the
                // async dep is resolved.
                vnode1.el = hydratedEl;
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode1, // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);
                if (placeholder) remove(placeholder);
                updateHOCHostEl(instance, vnode1.el);
                popWarningContext();
                // only decrease deps count if suspense is not already resolved
                if (isInPendingSuspense && (--suspense.deps) === 0) suspense.resolve();
            });
        },
        unmount (parentSuspense, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
            if (suspense.pendingBranch) unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    /* eslint-disable no-restricted-globals */ const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
    // there are two possible scenarios for server-rendered suspense:
    // - success: ssr content should be fully resolved
    // - failure: ssr content should be the fallback branch.
    // however, on the client we don't really know if it has failed or not
    // attempt to hydrate the DOM assuming it has succeeded, but we still
    // need to construct a suspense boundary first
    const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) suspense.resolve();
    return result;
/* eslint-enable no-restricted-globals */ }
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag , children  } = vnode;
    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */ ;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if (_shared.isFunction(s)) {
        const isCompiledSlot = s._c;
        if (isCompiledSlot) {
            // disableTracking: false
            // allow block tracking for compiled slots
            // (see ./componentRenderContext.ts)
            s._d = false;
            openBlock();
        }
        s = s();
        if (isCompiledSlot) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if (_shared.isArray(s)) {
        const singleChild = filterSingleRoot(s);
        if (!singleChild) warn(`<Suspense> slots expect a single root node.`);
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block) s.dynamicChildren = block.filter((c)=>c !== s
    );
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if (_shared.isArray(fn)) suspense.effects.push(...fn);
        else suspense.effects.push(fn);
    } else queuePostFlushCb(fn);
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode , parentComponent  } = suspense;
    const el = vnode.el = branch.el;
    // in case suspense is the root node of a component,
    // recursively update the HOC el
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}
function provide(key, value) {
    if (!currentInstance) warn(`provide() can only be used inside setup().`);
    else {
        let provides = currentInstance.provides;
        // by default an instance inherits its parent's provides object
        // but when it needs to provide values of its own, it creates its
        // own provides object using parent provides object as prototype.
        // this way in `inject` we can simply look up injections from direct
        // parent and let the prototype chain do the work.
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) provides = currentInstance.provides = Object.create(parentProvides);
        // TS doesn't allow symbol as index type
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    // fallback to `currentRenderingInstance` so that this can be called in
    // a functional component
    const instance = currentInstance || currentRenderingInstance;
    if (instance) {
        // #2400
        // to support `app.use` plugins,
        // fallback to appContext's `provides` if the intance is at root
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) // TS doesn't allow symbol as index type
        return provides[key];
        else if (arguments.length > 1) return treatDefaultAsFactory && _shared.isFunction(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
        else warn(`injection "${String(key)}" not found.`);
    } else warn(`inject() can only be used inside setup() or functional components.`);
}
// Simple effect.
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
// initial value for watchers to trigger on undefined initial values
const INITIAL_WATCHER_VALUE = {
};
// implementation
function watch(source, cb, options) {
    if (!_shared.isFunction(cb)) warn(`\`watch(fn, options?)\` signature has been moved to a separate API. ` + `Use \`watchEffect(fn, options?)\` instead. \`watch\` now only ` + `supports \`watch(source, cb, options?) signature.`);
    return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate , deep , flush , onTrack , onTrigger  } = _shared.EMPTY_OBJ, instance = currentInstance) {
    if (!cb) {
        if (immediate !== undefined) warn(`watch() "immediate" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
        if (deep !== undefined) warn(`watch() "deep" option is only respected when using the ` + `watch(source, callback, options?) signature.`);
    }
    const warnInvalidSource = (s)=>{
        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` + `a reactive object, or an array of these types.`);
    };
    let getter;
    let forceTrigger = false;
    let isMultiSource = false;
    if (_reactivity.isRef(source)) {
        getter = ()=>source.value
        ;
        forceTrigger = !!source._shallow;
    } else if (_reactivity.isReactive(source)) {
        getter = ()=>source
        ;
        deep = true;
    } else if (_shared.isArray(source)) {
        isMultiSource = true;
        forceTrigger = source.some(_reactivity.isReactive);
        getter = ()=>source.map((s)=>{
                if (_reactivity.isRef(s)) return s.value;
                else if (_reactivity.isReactive(s)) return traverse(s);
                else if (_shared.isFunction(s)) return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */ );
                else warnInvalidSource(s);
            })
        ;
    } else if (_shared.isFunction(source)) {
        if (cb) // getter with cb
        getter = ()=>callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */ )
        ;
        else // no cb -> simple effect
        getter = ()=>{
            if (instance && instance.isUnmounted) return;
            if (cleanup) cleanup();
            return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */ , [
                onInvalidate
            ]);
        };
    } else {
        getter = _shared.NOOP;
        warnInvalidSource(source);
    }
    if (cb && deep) {
        const baseGetter = getter;
        getter = ()=>traverse(baseGetter())
        ;
    }
    let cleanup;
    let onInvalidate = (fn)=>{
        cleanup = runner.options.onStop = ()=>{
            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */ );
        };
    };
    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
    const job = ()=>{
        if (!runner.active) return;
        if (cb) {
            // watch(source, cb)
            const newValue = runner();
            if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i)=>_shared.hasChanged(v, oldValue[i])
            ) : _shared.hasChanged(newValue, oldValue)) || false) {
                // cleanup before running cb again
                if (cleanup) cleanup();
                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */ , [
                    newValue,
                    // pass undefined as the old value when it's changed for the first time
                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,
                    onInvalidate
                ]);
                oldValue = newValue;
            }
        } else // watchEffect
        runner();
    };
    // important: mark the job as a watcher callback so that scheduler knows
    // it is allowed to self-trigger (#1727)
    job.allowRecurse = !!cb;
    let scheduler;
    if (flush === 'sync') scheduler = job; // the scheduler function gets called directly
    else if (flush === 'post') scheduler = ()=>queuePostRenderEffect(job, instance && instance.suspense)
    ;
    else // default: 'pre'
    scheduler = ()=>{
        if (!instance || instance.isMounted) queuePreFlushCb(job);
        else // with 'pre' option, the first call must happen before
        // the component is mounted so it is called synchronously.
        job();
    };
    const runner = _reactivity.effect(getter, {
        lazy: true,
        onTrack,
        onTrigger,
        scheduler
    });
    recordInstanceBoundEffect(runner, instance);
    // initial run
    if (cb) {
        if (immediate) job();
        else oldValue = runner();
    } else if (flush === 'post') queuePostRenderEffect(runner, instance && instance.suspense);
    else runner();
    return ()=>{
        _reactivity.stop(runner);
        if (instance) _shared.remove(instance.effects, runner);
    };
}
// this.$watch
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = _shared.isString(source) ? source.includes('.') ? createPathGetter(publicThis, source) : ()=>publicThis[source]
     : source.bind(publicThis, publicThis);
    let cb;
    if (_shared.isFunction(value)) cb = value;
    else {
        cb = value.handler;
        options = value;
    }
    return doWatch(getter, cb.bind(publicThis), options, this);
}
function createPathGetter(ctx, path) {
    const segments = path.split('.');
    return ()=>{
        let cur = ctx;
        for(let i = 0; i < segments.length && cur; i++)cur = cur[segments[i]];
        return cur;
    };
}
function traverse(value, seen = new Set()) {
    if (!_shared.isObject(value) || value["__v_skip" /* SKIP */ ]) return value;
    seen = seen || new Set();
    if (seen.has(value)) return value;
    seen.add(value);
    if (_reactivity.isRef(value)) traverse(value.value, seen);
    else if (_shared.isArray(value)) for(let i = 0; i < value.length; i++)traverse(value[i], seen);
    else if (_shared.isSet(value) || _shared.isMap(value)) value.forEach((v)=>{
        traverse(v, seen);
    });
    else if (_shared.isPlainObject(value)) for(const key in value)traverse(value[key], seen);
    return value;
}
function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: new Map()
    };
    onMounted(()=>{
        state.isMounted = true;
    });
    onBeforeUnmount(()=>{
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [
    Function,
    Array
];
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return ()=>{
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) return;
            // warn multiple elements
            if (children.length > 1) warn("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
            // there's no need to track reactivity for these props so use the raw
            // props for a bit better perf
            const rawProps = _reactivity.toRaw(props);
            const { mode  } = rawProps;
            // check mode
            if (mode && ![
                'in-out',
                'out-in',
                'default'
            ].includes(mode)) warn(`invalid <transition> mode: ${mode}`);
            // at this point children has a guaranteed length of 1.
            const child = children[0];
            if (state.isLeaving) return emptyPlaceholder(child);
            // in the case of <transition><keep-alive/></transition>, we need to
            // compare the type of the kept-alive children.
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) return emptyPlaceholder(child);
            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey  } = innerChild.type;
            if (getTransitionKey) {
                const key = getTransitionKey();
                if (prevTransitionKey === undefined) prevTransitionKey = key;
                else if (key !== prevTransitionKey) {
                    prevTransitionKey = key;
                    transitionKeyChanged = true;
                }
            }
            // handle mode
            if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                // update old tree's hooks in case of dynamic transition
                setTransitionHooks(oldInnerChild, leavingHooks);
                // switching between different views
                if (mode === 'out-in') {
                    state.isLeaving = true;
                    // return placeholder node and queue update when leave finishes
                    leavingHooks.afterLeave = ()=>{
                        state.isLeaving = false;
                        instance.update();
                    };
                    return emptyPlaceholder(child);
                } else if (mode === 'in-out' && innerChild.type !== Comment$1) leavingHooks.delayLeave = (el, earlyRemove, delayedLeave)=>{
                    const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                    leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                    // early removal callback
                    el._leaveCb = ()=>{
                        earlyRemove();
                        el._leaveCb = undefined;
                        delete enterHooks.delayedLeave;
                    };
                    enterHooks.delayedLeave = delayedLeave;
                };
            }
            return child;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes  } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function resolveTransitionHooks(vnode1, props, state, instance) {
    const { appear , mode , persisted =false , onBeforeEnter , onEnter , onAfterEnter , onEnterCancelled , onBeforeLeave , onLeave , onAfterLeave , onLeaveCancelled , onBeforeAppear , onAppear , onAfterAppear , onAppearCancelled  } = props;
    const key = String(vnode1.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode1);
    const callHook = (hook, args)=>{
        hook && callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */ , args);
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter (el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) hook = onBeforeAppear || onBeforeEnter;
                else return;
            }
            // for same element (v-show)
            if (el._leaveCb) el._leaveCb(true);
            // for toggled element with same key (v-if)
            const leavingVNode = leavingVNodesCache[key];
            if (leavingVNode && isSameVNodeType(vnode1, leavingVNode) && leavingVNode.el._leaveCb) // force early removal (not cancelled)
            leavingVNode.el._leaveCb();
            callHook(hook, [
                el
            ]);
        },
        enter (el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                } else return;
            }
            let called = false;
            const done = el._enterCb = (cancelled)=>{
                if (called) return;
                called = true;
                if (cancelled) callHook(cancelHook, [
                    el
                ]);
                else callHook(afterHook, [
                    el
                ]);
                if (hooks.delayedLeave) hooks.delayedLeave();
                el._enterCb = undefined;
            };
            if (hook) {
                hook(el, done);
                if (hook.length <= 1) done();
            } else done();
        },
        leave (el, remove) {
            const key1 = String(vnode1.key);
            if (el._enterCb) el._enterCb(true);
            if (state.isUnmounting) return remove();
            callHook(onBeforeLeave, [
                el
            ]);
            let called = false;
            const done = el._leaveCb = (cancelled)=>{
                if (called) return;
                called = true;
                remove();
                if (cancelled) callHook(onLeaveCancelled, [
                    el
                ]);
                else callHook(onAfterLeave, [
                    el
                ]);
                el._leaveCb = undefined;
                if (leavingVNodesCache[key1] === vnode1) delete leavingVNodesCache[key1];
            };
            leavingVNodesCache[key1] = vnode1;
            if (onLeave) {
                onLeave(el, done);
                if (onLeave.length <= 1) done();
            } else done();
        },
        clone (vnode) {
            return resolveTransitionHooks(vnode, props, state, instance);
        }
    };
    return hooks;
}
// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getKeepAliveChild(vnode) {
    return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : undefined : vnode;
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 /* COMPONENT */  && vnode.component) setTransitionHooks(vnode.component.subTree, hooks);
    else if (vnode.shapeFlag & 128 /* SUSPENSE */ ) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    } else vnode.transition = hooks;
}
function getTransitionRawChildren(children, keepComment = false) {
    let ret = [];
    let keyedFragmentCount = 0;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        // handle fragment children case, e.g. v-for
        if (child.type === Fragment) {
            if (child.patchFlag & 128 /* KEYED_FRAGMENT */ ) keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
        } else if (keepComment || child.type !== Comment$1) ret.push(child);
    }
    // #1126 if a transition children list contains multiple sub fragments, these
    // fragments will be merged into a flat children array. Since each v-for
    // fragment may contain different static bindings inside, we need to de-op
    // these children to force full diffs to ensure correct behavior.
    if (keyedFragmentCount > 1) for(let i1 = 0; i1 < ret.length; i1++)ret[i1].patchFlag = -2 /* BAIL */ ;
    return ret;
}
// implementation, close to no-op
function defineComponent(options) {
    return _shared.isFunction(options) ? {
        setup: options,
        name: options.name
    } : options;
}
const isAsyncWrapper = (i)=>!!i.type.__asyncLoader
;
function defineAsyncComponent(source) {
    if (_shared.isFunction(source)) source = {
        loader: source
    };
    const { loader , loadingComponent , errorComponent , delay =200 , timeout , suspensible =true , onError: userOnError  } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = ()=>{
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = ()=>{
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader().catch((err)=>{
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) return new Promise((resolve, reject)=>{
                const userRetry = ()=>resolve(retry())
                ;
                const userFail = ()=>reject(err)
                ;
                userOnError(err, userRetry, userFail, retries + 1);
            });
            else throw err;
        }).then((comp)=>{
            if (thisRequest !== pendingRequest && pendingRequest) return pendingRequest;
            if (!comp) warn(`Async component loader resolved to undefined. ` + `If you are using retry(), make sure to return its return value.`);
            // interop module default
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) comp = comp.default;
            if (comp && !_shared.isObject(comp) && !_shared.isFunction(comp)) throw new Error(`Invalid async component load result: ${comp}`);
            resolvedComp = comp;
            return comp;
        }));
    };
    return defineComponent({
        name: 'AsyncComponentWrapper',
        __asyncLoader: load,
        get __asyncResolved () {
            return resolvedComp;
        },
        setup () {
            const instance = currentInstance;
            // already resolved
            if (resolvedComp) return ()=>createInnerComp(resolvedComp, instance)
            ;
            const onError = (err)=>{
                pendingRequest = null;
                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */ , !errorComponent /* do not throw in dev if user provided error component */ );
            };
            // suspense-controlled or SSR.
            if (suspensible && instance.suspense || false) return load().then((comp)=>{
                return ()=>createInnerComp(comp, instance)
                ;
            }).catch((err)=>{
                onError(err);
                return ()=>errorComponent ? createVNode(errorComponent, {
                        error: err
                    }) : null
                ;
            });
            const loaded = _reactivity.ref(false);
            const error = _reactivity.ref();
            const delayed = _reactivity.ref(!!delay);
            if (delay) setTimeout(()=>{
                delayed.value = false;
            }, delay);
            if (timeout != null) setTimeout(()=>{
                if (!loaded.value && !error.value) {
                    const err = new Error(`Async component timed out after ${timeout}ms.`);
                    onError(err);
                    error.value = err;
                }
            }, timeout);
            load().then(()=>{
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) // parent is keep-alive, force update so the loaded component's
                // name is taken into account
                queueJob(instance.parent.update);
            }).catch((err)=>{
                onError(err);
                error.value = err;
            });
            return ()=>{
                if (loaded.value && resolvedComp) return createInnerComp(resolvedComp, instance);
                else if (error.value && errorComponent) return createVNode(errorComponent, {
                    error: error.value
                });
                else if (loadingComponent && !delayed.value) return createVNode(loadingComponent);
            };
        }
    });
}
function createInnerComp(comp, { vnode: { ref , props , children  }  }) {
    const vnode = createVNode(comp, props, children);
    // ensure inner component inherits the async wrapper's ref owner
    vnode.ref = ref;
    return vnode;
}
const isKeepAlive = (vnode)=>vnode.type.__isKeepAlive
;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [
            String,
            RegExp,
            Array
        ],
        exclude: [
            String,
            RegExp,
            Array
        ],
        max: [
            String,
            Number
        ]
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        // KeepAlive communicates with the instantiated renderer via the
        // ctx where the renderer passes in its internals,
        // and the KeepAlive instance exposes activate/deactivate implementations.
        // The whole point of this is to avoid importing KeepAlive directly in the
        // renderer to facilitate tree-shaking.
        const sharedContext = instance.ctx;
        // if the internal renderer is not registered, it indicates that this is server-side rendering,
        // for KeepAlive, we just need to render its children
        if (!sharedContext.renderer) return slots.default;
        const cache = new Map();
        const keys = new Set();
        let current = null;
        instance.__v_cache = cache;
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch , m: move , um: _unmount , o: { createElement  }  }  } = sharedContext;
        const storageContainer = createElement('div');
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized)=>{
            const instance1 = vnode.component;
            move(vnode, container, anchor, 0 /* ENTER */ , parentSuspense);
            // in case props have changed
            patch(instance1.vnode, vnode, container, anchor, instance1, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(()=>{
                instance1.isDeactivated = false;
                if (instance1.a) _shared.invokeArrayFns(instance1.a);
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance1.parent, vnode);
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance1);
        };
        sharedContext.deactivate = (vnode)=>{
            const instance1 = vnode.component;
            move(vnode, storageContainer, null, 1 /* LEAVE */ , parentSuspense);
            queuePostRenderEffect(()=>{
                if (instance1.da) _shared.invokeArrayFns(instance1.da);
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance1.parent, vnode);
                instance1.isDeactivated = true;
            }, parentSuspense);
            // Update components tree
            devtoolsComponentAdded(instance1);
        };
        function unmount(vnode) {
            // reset the shapeFlag so it can be properly unmounted
            resetShapeFlag(vnode);
            _unmount(vnode, instance, parentSuspense);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key)=>{
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) pruneCacheEntry(key);
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || cached.type !== current.type) unmount(cached);
            else if (current) // current active instance should no longer be kept-alive.
            // we can't unmount it now but it might be later, so reset its flag now.
            resetShapeFlag(current);
            cache.delete(key);
            keys.delete(key);
        }
        // prune cache on include/exclude prop change
        watch(()=>[
                props.include,
                props.exclude
            ]
        , ([include, exclude])=>{
            include && pruneCache((name)=>matches(include, name)
            );
            exclude && pruneCache((name)=>!matches(exclude, name)
            );
        }, // prune post-render after `current` has been updated
        {
            flush: 'post',
            deep: true
        });
        // cache sub tree after render
        let pendingCacheKey = null;
        const cacheSubtree = ()=>{
            // fix #1621, the pendingCacheKey could be 0
            if (pendingCacheKey != null) cache.set(pendingCacheKey, getInnerChild(instance.subTree));
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(()=>{
            cache.forEach((cached)=>{
                const { subTree , suspense  } = instance;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type) {
                    // current instance will be unmounted as part of keep-alive's unmount
                    resetShapeFlag(vnode);
                    // but invoke its deactivated hook here
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return ()=>{
            pendingCacheKey = null;
            if (!slots.default) return null;
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                warn(`KeepAlive should contain exactly one component child.`);
                current = null;
                return children;
            } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ) && !(rawVNode.shapeFlag & 128 /* SUSPENSE */ )) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            // for async components, name check should be based in its loaded
            // inner component if available
            const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {
            } : comp);
            const { include , exclude , max  } = props;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            // clone vnode if it's reused because we are going to mutate it
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128 /* SUSPENSE */ ) rawVNode.ssContent = vnode;
            }
            // #1513 it's possible for the returned vnode to be cloned due to attr
            // fallthrough or scopeId, so the vnode here may not be the final vnode
            // that is mounted. Instead of caching it directly, we store the pending
            // key and cache `instance.subTree` (the normalized vnode) in
            // beforeMount/beforeUpdate hooks.
            pendingCacheKey = key;
            if (cachedVNode) {
                // copy over mounted state
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) // recursively update transition hooks on subTree
                setTransitionHooks(vnode, vnode.transition);
                // avoid vnode being mounted as fresh
                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */ ;
                // make this key the freshest
                keys.delete(key);
                keys.add(key);
            } else {
                keys.add(key);
                // prune oldest entry
                if (max && keys.size > parseInt(max, 10)) pruneCacheEntry(keys.values().next().value);
            }
            // avoid vnode being unmounted
            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
            current = vnode;
            return rawVNode;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
    if (_shared.isArray(pattern)) return pattern.some((p)=>matches(p, name)
    );
    else if (_shared.isString(pattern)) return pattern.split(',').indexOf(name) > -1;
    else if (pattern.test) return pattern.test(name);
    /* istanbul ignore next */ return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a" /* ACTIVATED */ , target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da" /* DEACTIVATED */ , target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    // cache the deactivate branch check wrapper for injected hooks so the same
    // hook can be properly deduped by the scheduler. "__wdc" stands for "with
    // deactivation check".
    const wrappedHook = hook.__wdc || (hook.__wdc = ()=>{
        // only fire the hook if the target instance is NOT in a deactivated branch.
        let current = target;
        while(current){
            if (current.isDeactivated) return;
            current = current.parent;
        }
        hook();
    });
    injectHook(type, wrappedHook, target);
    // In addition to registering it on the target instance, we walk up the parent
    // chain and register it on all ancestor instances that are keep-alive roots.
    // This avoids the need to walk the entire component tree when invoking these
    // hooks, and more importantly, avoids the need to track child components in
    // arrays.
    if (target) {
        let current = target.parent;
        while(current && current.parent){
            if (isKeepAlive(current.parent.vnode)) injectToKeepAliveRoot(wrappedHook, type, target, current);
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    // injectHook wraps the original for error handling, so make sure to remove
    // the wrapped version.
    const injected = injectHook(type, hook, keepAliveRoot, true);
    onUnmounted(()=>{
        _shared.remove(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    let shapeFlag = vnode.shapeFlag;
    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ;
    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */ ;
    vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 /* SUSPENSE */  ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        // cache the error handling wrapper for injected hooks so the same hook
        // can be properly deduped by the scheduler. "__weh" stands for "with error
        // handling".
        const wrappedHook = hook.__weh || (hook.__weh = (...args)=>{
            if (target.isUnmounted) return;
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            _reactivity.pauseTracking();
            // Set currentInstance during hook invocation.
            // This assumes the hook does not synchronously trigger other hooks, which
            // can only be false when the user does something really funky.
            setCurrentInstance(target);
            const res = callWithAsyncErrorHandling(hook, target, type, args);
            setCurrentInstance(null);
            _reactivity.resetTracking();
            return res;
        });
        if (prepend) hooks.unshift(wrappedHook);
        else hooks.push(wrappedHook);
        return wrappedHook;
    } else {
        const apiName = _shared.toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));
        warn(`${apiName} is called when there is no active component instance to be ` + `associated with. ` + `Lifecycle injection APIs can only be used during execution of setup().` + (` If you are using async setup(), make sure to register lifecycle ` + `hooks before the first await statement.`));
    }
}
const createHook = (lifecycle)=>(hook, target = currentInstance)=>// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
        (!isInSSRComponentSetup || lifecycle === "sp" /* SERVER_PREFETCH */ ) && injectHook(lifecycle, hook, target)
;
const onBeforeMount = createHook("bm" /* BEFORE_MOUNT */ );
const onMounted = createHook("m" /* MOUNTED */ );
const onBeforeUpdate = createHook("bu" /* BEFORE_UPDATE */ );
const onUpdated = createHook("u" /* UPDATED */ );
const onBeforeUnmount = createHook("bum" /* BEFORE_UNMOUNT */ );
const onUnmounted = createHook("um" /* UNMOUNTED */ );
const onServerPrefetch = createHook("sp" /* SERVER_PREFETCH */ );
const onRenderTriggered = createHook("rtg" /* RENDER_TRIGGERED */ );
const onRenderTracked = createHook("rtc" /* RENDER_TRACKED */ );
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec" /* ERROR_CAPTURED */ , hook, target);
}
function createDuplicateChecker() {
    const cache = Object.create(null);
    return (type, key)=>{
        if (cache[key]) warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
        else cache[key] = type;
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    // do not cache property access on public proxy during state initialization
    shouldCacheAccess = false;
    // call beforeCreate first before accessing other options since
    // the hook may mutate resolved options (#2791)
    if (options.beforeCreate) callHook(options.beforeCreate, instance, "bc" /* BEFORE_CREATE */ );
    const { // state
    data: dataOptions , computed: computedOptions , methods , watch: watchOptions , provide: provideOptions , inject: injectOptions , // lifecycle
    created , beforeMount , mounted , beforeUpdate , updated , activated , deactivated , beforeDestroy , beforeUnmount , destroyed , unmounted , render , renderTracked , renderTriggered , errorCaptured , serverPrefetch , // public API
    expose , inheritAttrs , // assets
    components , directives , filters  } = options;
    const checkDuplicateProperties = createDuplicateChecker();
    {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) for(const key in propsOptions)checkDuplicateProperties("Props" /* PROPS */ , key);
    }
    // options initialization order (to be consistent with Vue 2):
    // - props (already done outside of this function)
    // - inject
    // - methods
    // - data (deferred since it relies on `this` access)
    // - computed
    // - watch (deferred since it relies on `this` access)
    if (injectOptions) resolveInjections(injectOptions, ctx, checkDuplicateProperties);
    if (methods) for(const key in methods){
        const methodHandler = methods[key];
        if (_shared.isFunction(methodHandler)) {
            Object.defineProperty(ctx, key, {
                value: methodHandler.bind(publicThis),
                configurable: true,
                enumerable: true,
                writable: true
            });
            checkDuplicateProperties("Methods" /* METHODS */ , key);
        } else warn(`Method "${key}" has type "${typeof methodHandler}" in the component definition. ` + `Did you reference the function correctly?`);
    }
    if (dataOptions) {
        if (!_shared.isFunction(dataOptions)) warn(`The data option must be a function. ` + `Plain object usage is no longer supported.`);
        const data = dataOptions.call(publicThis, publicThis);
        if (_shared.isPromise(data)) warn(`data() returned a Promise - note data() cannot be async; If you ` + `intend to perform data fetching before component renders, use ` + `async setup() + <Suspense>.`);
        if (!_shared.isObject(data)) warn(`data() should return an object.`);
        else {
            instance.data = _reactivity.reactive(data);
            for(const key1 in data){
                checkDuplicateProperties("Data" /* DATA */ , key1);
                // expose data on ctx during dev
                if (key1[0] !== '$' && key1[0] !== '_') Object.defineProperty(ctx, key1, {
                    configurable: true,
                    enumerable: true,
                    get: ()=>data[key1]
                    ,
                    set: _shared.NOOP
                });
            }
        }
    }
    // state initialization complete at this point - start caching access
    shouldCacheAccess = true;
    if (computedOptions) for(const key1 in computedOptions){
        const opt = computedOptions[key1];
        const get = _shared.isFunction(opt) ? opt.bind(publicThis, publicThis) : _shared.isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : _shared.NOOP;
        if (get === _shared.NOOP) warn(`Computed property "${key1}" has no getter.`);
        const set = !_shared.isFunction(opt) && _shared.isFunction(opt.set) ? opt.set.bind(publicThis) : ()=>{
            warn(`Write operation failed: computed property "${key1}" is readonly.`);
        };
        const c = computed({
            get,
            set
        });
        Object.defineProperty(ctx, key1, {
            enumerable: true,
            configurable: true,
            get: ()=>c.value
            ,
            set: (v)=>c.value = v
        });
        checkDuplicateProperties("Computed" /* COMPUTED */ , key1);
    }
    if (watchOptions) for(const key2 in watchOptions)createWatcher(watchOptions[key2], ctx, publicThis, key2);
    if (provideOptions) {
        const provides = _shared.isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key3)=>{
            provide(key3, provides[key3]);
        });
    }
    if (created) callHook(created, instance, "c" /* CREATED */ );
    function registerLifecycleHook(register, hook) {
        if (_shared.isArray(hook)) hook.forEach((_hook)=>register(_hook.bind(publicThis))
        );
        else if (hook) register(hook.bind(publicThis));
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if (_shared.isArray(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {
            });
            expose.forEach((key3)=>{
                Object.defineProperty(exposed, key3, {
                    get: ()=>publicThis[key3]
                    ,
                    set: (val)=>publicThis[key3] = val
                });
            });
        } else if (!instance.exposed) instance.exposed = {
        };
    }
    // options that are handled when creating the instance but also need to be
    // applied from mixins
    if (render && instance.render === _shared.NOOP) instance.render = render;
    if (inheritAttrs != null) instance.inheritAttrs = inheritAttrs;
    // asset options.
    if (components) instance.components = components;
    if (directives) instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = _shared.NOOP) {
    if (_shared.isArray(injectOptions)) injectOptions = normalizeInject(injectOptions);
    for(const key in injectOptions){
        const opt = injectOptions[key];
        if (_shared.isObject(opt)) {
            if ('default' in opt) ctx[key] = inject(opt.from || key, opt.default, true);
            else ctx[key] = inject(opt.from || key);
        } else ctx[key] = inject(opt);
        checkDuplicateProperties("Inject" /* INJECT */ , key);
    }
}
function callHook(hook, instance, type) {
    callWithAsyncErrorHandling(_shared.isArray(hook) ? hook.map((h)=>h.bind(instance.proxy)
    ) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    const getter = key.includes('.') ? createPathGetter(publicThis, key) : ()=>publicThis[key]
    ;
    if (_shared.isString(raw)) {
        const handler = ctx[raw];
        if (_shared.isFunction(handler)) watch(getter, handler);
        else warn(`Invalid watch handler specified by key "${raw}"`, handler);
    } else if (_shared.isFunction(raw)) watch(getter, raw.bind(publicThis));
    else if (_shared.isObject(raw)) {
        if (_shared.isArray(raw)) raw.forEach((r)=>createWatcher(r, ctx, publicThis, key)
        );
        else {
            const handler = _shared.isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
            if (_shared.isFunction(handler)) watch(getter, handler, raw);
            else warn(`Invalid watch handler specified by key "${raw.handler}"`, handler);
        }
    } else warn(`Invalid watch option: "${key}"`, raw);
}
/**
 * Resolve merged options and cache it on the component.
 * This is done only once per-component since the merging does not involve
 * instances.
 */ function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins , extends: extendsOptions  } = base;
    const { mixins: globalMixins , optionsCache: cache , config: { optionMergeStrategies  }  } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) resolved = cached;
    else if (!globalMixins.length && !mixins && !extendsOptions) resolved = base;
    else {
        resolved = {
        };
        if (globalMixins.length) globalMixins.forEach((m)=>mergeOptions(resolved, m, optionMergeStrategies, true)
        );
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    cache.set(base, resolved);
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins , extends: extendsOptions  } = from;
    if (extendsOptions) mergeOptions(to, extendsOptions, strats, true);
    if (mixins) mixins.forEach((m)=>mergeOptions(to, m, strats, true)
    );
    for(const key in from)if (asMixin && key === 'expose') warn(`"expose" option is ignored when declared in mixins or extends. ` + `It should only be declared in the base component itself.`);
    else {
        const strat = internalOptionMergeStrats[key] || strats && strats[key];
        to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeObjectOptions,
    emits: mergeObjectOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    destroyed: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) return to;
    if (!to) return from;
    return function mergedDataFn() {
        return _shared.extend(_shared.isFunction(to) ? to.call(this, this) : to, _shared.isFunction(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if (_shared.isArray(raw)) {
        const res = {
        };
        for(let i = 0; i < raw.length; i++)res[raw[i]] = raw[i];
        return res;
    }
    return raw;
}
function mergeAsArray(to, from) {
    return to ? [
        ...new Set([].concat(to, from))
    ] : from;
}
function mergeObjectOptions(to, from) {
    return to ? _shared.extend(_shared.extend(Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
    if (!to) return from;
    if (!from) return to;
    const merged = _shared.extend(Object.create(null), to);
    for(const key in from)merged[key] = mergeAsArray(to[key], from[key]);
    return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
    const props = {
    };
    const attrs = {
    };
    _shared.def(attrs, InternalObjectKey, 1);
    instance.propsDefaults = Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    // ensure all declared prop keys are present
    for(const key in instance.propsOptions[0])if (!(key in props)) props[key] = undefined;
    validateProps(rawProps || {
    }, props, instance);
    if (isStateful) // stateful
    instance.props = isSSR ? props : _reactivity.shallowReactive(props);
    else if (!instance.type.props) // functional w/ optional props, props === attrs
    instance.props = attrs;
    else // functional w/ declared props
    instance.props = props;
    instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props , attrs , vnode: { patchFlag  }  } = instance;
    const rawCurrentProps = _reactivity.toRaw(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (// always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !(instance.type.__hmrId || instance.parent && instance.parent.type.__hmrId) && (optimized || patchFlag > 0) && !(patchFlag & 16 /* FULL_PROPS */ )) {
        if (patchFlag & 8 /* PROPS */ ) {
            // Compiler-generated props & no keys change, just set the updated
            // the props.
            const propsToUpdate = instance.vnode.dynamicProps;
            for(let i = 0; i < propsToUpdate.length; i++){
                let key = propsToUpdate[i];
                // PROPS flag guarantees rawProps to be non-null
                const value = rawProps[key];
                if (options) {
                    // attr / props separation was done on init and will be consistent
                    // in this code path, so just check if attrs have it.
                    if (_shared.hasOwn(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    } else {
                        const camelizedKey = _shared.camelize(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
                    }
                } else if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    } else {
        // full props update.
        if (setFullProps(instance, rawProps, props, attrs)) hasAttrsChanged = true;
        // in case of dynamic props, check if we need to delete keys from
        // the props object
        let kebabKey;
        for(const key in rawCurrentProps)if (!rawProps || !_shared.hasOwn(rawProps, key) && ((kebabKey = _shared.hyphenate(key)) === key || !_shared.hasOwn(rawProps, kebabKey))) {
            if (options) {
                if (rawPrevProps && (rawPrevProps[key] !== undefined || // for kebab-case
                rawPrevProps[kebabKey] !== undefined)) props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true);
            } else delete props[key];
        }
        // in the case of functional component w/o props declaration, props and
        // attrs point to the same object so it should already have been updated.
        if (attrs !== rawCurrentProps) {
            for(const key1 in attrs)if (!rawProps || !_shared.hasOwn(rawProps, key1)) {
                delete attrs[key1];
                hasAttrsChanged = true;
            }
        }
    }
    // trigger updates for $attrs in case it's used in component slots
    if (hasAttrsChanged) _reactivity.trigger(instance, "set" /* SET */ , '$attrs');
    validateProps(rawProps || {
    }, props, instance);
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) for(let key in rawProps){
        // key, ref are reserved and never passed down
        if (_shared.isReservedProp(key)) continue;
        const value = rawProps[key];
        // prop option names are camelized during normalization, so to support
        // kebab -> camel conversion here we need to camelize the key.
        let camelKey;
        if (options && _shared.hasOwn(options, camelKey = _shared.camelize(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) props[camelKey] = value;
            else (rawCastValues || (rawCastValues = {
            }))[camelKey] = value;
        } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = _reactivity.toRaw(props);
        const castValues = rawCastValues || _shared.EMPTY_OBJ;
        for(let i = 0; i < needCastKeys.length; i++){
            const key1 = needCastKeys[i];
            props[key1] = resolvePropValue(options, rawCurrentProps, key1, castValues[key1], instance, !_shared.hasOwn(castValues, key1));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = _shared.hasOwn(opt, 'default');
        // default values
        if (hasDefault && value === undefined) {
            const defaultValue = opt.default;
            if (opt.type !== Function && _shared.isFunction(defaultValue)) {
                const { propsDefaults  } = instance;
                if (key in propsDefaults) value = propsDefaults[key];
                else {
                    setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    setCurrentInstance(null);
                }
            } else value = defaultValue;
        }
        // boolean casting
        if (opt[0 /* shouldCast */ ]) {
            if (isAbsent && !hasDefault) value = false;
            else if (opt[1 /* shouldCastTrue */ ] && (value === '' || value === _shared.hyphenate(key))) value = true;
        }
    }
    return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) return cached;
    const raw = comp.props;
    const normalized = {
    };
    const needCastKeys = [];
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !_shared.isFunction(comp)) {
        const extendProps = (raw1)=>{
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw1, appContext, true);
            _shared.extend(normalized, props);
            if (keys) needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendProps);
        if (comp.extends) extendProps(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendProps);
    }
    if (!raw && !hasExtends) {
        cache.set(comp, _shared.EMPTY_ARR);
        return _shared.EMPTY_ARR;
    }
    if (_shared.isArray(raw)) for(let i = 0; i < raw.length; i++){
        if (!_shared.isString(raw[i])) warn(`props must be strings when using array syntax.`, raw[i]);
        const normalizedKey = _shared.camelize(raw[i]);
        if (validatePropName(normalizedKey)) normalized[normalizedKey] = _shared.EMPTY_OBJ;
    }
    else if (raw) {
        if (!_shared.isObject(raw)) warn(`invalid props options`, raw);
        for(const key in raw){
            const normalizedKey = _shared.camelize(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw[key];
                const prop = normalized[normalizedKey] = _shared.isArray(opt) || _shared.isFunction(opt) ? {
                    type: opt
                } : opt;
                if (prop) {
                    const booleanIndex = getTypeIndex(Boolean, prop.type);
                    const stringIndex = getTypeIndex(String, prop.type);
                    prop[0 /* shouldCast */ ] = booleanIndex > -1;
                    prop[1 /* shouldCastTrue */ ] = stringIndex < 0 || booleanIndex < stringIndex;
                    // if the prop needs boolean casting or default value
                    if (booleanIndex > -1 || _shared.hasOwn(prop, 'default')) needCastKeys.push(normalizedKey);
                }
            }
        }
    }
    const res = [
        normalized,
        needCastKeys
    ];
    cache.set(comp, res);
    return res;
}
function validatePropName(key) {
    if (key[0] !== '$') return true;
    else warn(`Invalid prop name: "${key}" is a reserved property.`);
    return false;
}
// use function string name to check type constructors
// so that it works across vms / iframes.
function getType(ctor) {
    const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if (_shared.isArray(expectedTypes)) return expectedTypes.findIndex((t)=>isSameType(t, type)
    );
    else if (_shared.isFunction(expectedTypes)) return isSameType(expectedTypes, type) ? 0 : -1;
    return -1;
}
/**
 * dev only
 */ function validateProps(rawProps, props, instance) {
    const resolvedValues = _reactivity.toRaw(props);
    const options = instance.propsOptions[0];
    for(const key in options){
        let opt = options[key];
        if (opt == null) continue;
        validateProp(key, resolvedValues[key], opt, !_shared.hasOwn(rawProps, key) && !_shared.hasOwn(rawProps, _shared.hyphenate(key)));
    }
}
/**
 * dev only
 */ function validateProp(name, value, prop, isAbsent) {
    const { type , required , validator  } = prop;
    // required!
    if (required && isAbsent) {
        warn('Missing required prop: "' + name + '"');
        return;
    }
    // missing but optional
    if (value == null && !prop.required) return;
    // type check
    if (type != null && type !== true) {
        let isValid = false;
        const types = _shared.isArray(type) ? type : [
            type
        ];
        const expectedTypes = [];
        // value is valid as long as one of the specified types match
        for(let i = 0; i < types.length && !isValid; i++){
            const { valid , expectedType  } = assertType(value, types[i]);
            expectedTypes.push(expectedType || '');
            isValid = valid;
        }
        if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    // custom validator
    if (validator && !validator(value)) warn('Invalid prop: custom validator check failed for prop "' + name + '".');
}
const isSimpleType = /*#__PURE__*/ _shared.makeMap('String,Number,Boolean,Function,Symbol,BigInt');
/**
 * dev only
 */ function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === 'object') valid = value instanceof type;
    } else if (expectedType === 'Object') valid = _shared.isObject(value);
    else if (expectedType === 'Array') valid = _shared.isArray(value);
    else valid = value instanceof type;
    return {
        valid,
        expectedType
    };
}
/**
 * dev only
 */ function getInvalidTypeMessage(name, value, expectedTypes) {
    let message = `Invalid prop: type check failed for prop "${name}".` + ` Expected ${expectedTypes.map(_shared.capitalize).join(', ')}`;
    const expectedType = expectedTypes[0];
    const receivedType = _shared.toRawType(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) message += ` with value ${expectedValue}`;
    message += `, got ${receivedType} `;
    // check if we need to specify received value
    if (isExplicable(receivedType)) message += `with value ${receivedValue}.`;
    return message;
}
/**
 * dev only
 */ function styleValue(value, type) {
    if (type === 'String') return `"${value}"`;
    else if (type === 'Number') return `${Number(value)}`;
    else return `${value}`;
}
/**
 * dev only
 */ function isExplicable(type) {
    const explicitTypes = [
        'string',
        'number',
        'boolean'
    ];
    return explicitTypes.some((elem)=>type.toLowerCase() === elem
    );
}
/**
 * dev only
 */ function isBoolean(...args) {
    return args.some((elem)=>elem.toLowerCase() === 'boolean'
    );
}
const isInternalKey = (key)=>key[0] === '_' || key === '$stable'
;
const normalizeSlotValue = (value)=>_shared.isArray(value) ? value.map(normalizeVNode) : [
        normalizeVNode(value)
    ]
;
const normalizeSlot = (key, rawSlot, ctx)=>{
    const normalized = withCtx((props)=>{
        if (currentInstance) warn(`Slot "${key}" invoked outside of the render function: ` + `this will not track dependencies used in the slot. ` + `Invoke the slot function inside the render function instead.`);
        return normalizeSlotValue(rawSlot(props));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance)=>{
    const ctx = rawSlots._ctx;
    for(const key in rawSlots){
        if (isInternalKey(key)) continue;
        const value = rawSlots[key];
        if (_shared.isFunction(value)) slots[key] = normalizeSlot(key, value, ctx);
        else if (value != null) {
            warn(`Non-function value encountered for slot "${key}". ` + `Prefer function slots for better performance.`);
            const normalized = normalizeSlotValue(value);
            slots[key] = ()=>normalized
            ;
        }
    }
};
const normalizeVNodeSlots = (instance, children)=>{
    if (!isKeepAlive(instance.vnode) && true) warn(`Non-function value encountered for default slot. ` + `Prefer function slots for better performance.`);
    const normalized = normalizeSlotValue(children);
    instance.slots.default = ()=>normalized
    ;
};
const initSlots = (instance, children)=>{
    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // users can get the shallow readonly version of the slots object through `this.$slots`,
            // we should avoid the proxy object polluting the slots of the internal instance
            instance.slots = _reactivity.toRaw(children);
            // make compiler marker non-enumerable
            _shared.def(children, '_', type);
        } else normalizeObjectSlots(children, instance.slots = {
        });
    } else {
        instance.slots = {
        };
        if (children) normalizeVNodeSlots(instance, children);
    }
    _shared.def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized)=>{
    const { vnode , slots  } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = _shared.EMPTY_OBJ;
    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */ ) {
        const type = children._;
        if (type) {
            // compiled slots.
            if (isHmrUpdating) // Parent was HMR updated so slot content may have changed.
            // force update slots and mark instance for hmr as well
            _shared.extend(slots, children);
            else if (optimized && type === 1 /* STABLE */ ) // compiled AND stable.
            // no need to update, and skip stale slots removal.
            needDeletionCheck = false;
            else {
                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip
                // normalization.
                _shared.extend(slots, children);
                // #2893
                // when rendering the optimized slots by manually written render function,
                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
                // i.e. let the `renderSlot` create the bailed Fragment
                if (!optimized && type === 1 /* STABLE */ ) delete slots._;
            }
        } else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    } else if (children) {
        // non slot object children (direct value) passed to a component
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = {
            default: 1
        };
    }
    // delete stale slots
    if (needDeletionCheck) {
        for(const key in slots)if (!isInternalKey(key) && !(key in deletionComparisonTarget)) delete slots[key];
    }
};
/**
Runtime helper for applying directives to a vnode. Example usage:

const comp = resolveComponent('comp')
const foo = resolveDirective('foo')
const bar = resolveDirective('bar')

return withDirectives(h(comp), [
  [foo, this.x],
  [bar, this.y]
])
*/ const isBuiltInDirective = /*#__PURE__*/ _shared.makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');
function validateDirectiveName(name) {
    if (isBuiltInDirective(name)) warn('Do not use built-in directive ids as custom directive id: ' + name);
}
/**
 * Adds directives to a VNode.
 */ function withDirectives(vnode, directives) {
    const internalInstance = currentRenderingInstance;
    if (internalInstance === null) {
        warn(`withDirectives can only be used inside render functions.`);
        return vnode;
    }
    const instance = internalInstance.proxy;
    const bindings = vnode.dirs || (vnode.dirs = []);
    for(let i = 0; i < directives.length; i++){
        let [dir, value, arg, modifiers = _shared.EMPTY_OBJ] = directives[i];
        if (_shared.isFunction(dir)) dir = {
            mounted: dir,
            updated: dir
        };
        if (dir.deep) traverse(value);
        bindings.push({
            dir,
            instance,
            value,
            oldValue: void 0,
            arg,
            modifiers
        });
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for(let i = 0; i < bindings.length; i++){
        const binding = bindings[i];
        if (oldBindings) binding.oldValue = oldBindings[i].value;
        let hook = binding.dir[name];
        if (hook) {
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            _reactivity.pauseTracking();
            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */ , [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            _reactivity.resetTracking();
        }
    }
}
function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: _shared.NO,
            performance: false,
            globalProperties: {
            },
            optionMergeStrategies: {
            },
            errorHandler: undefined,
            warnHandler: undefined,
            compilerOptions: {
            }
        },
        mixins: [],
        components: {
        },
        directives: {
        },
        provides: Object.create(null),
        optionsCache: new WeakMap(),
        propsCache: new WeakMap(),
        emitsCache: new WeakMap()
    };
}
let uid = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (rootProps != null && !_shared.isObject(rootProps)) {
            warn(`root props passed to app.mount() must be an object.`);
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = new Set();
        let isMounted = false;
        const app = context.app = {
            _uid: uid++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version,
            get config () {
                return context.config;
            },
            set config (v){
                warn(`app.config cannot be replaced. Modify individual options instead.`);
            },
            use (plugin, ...options) {
                if (installedPlugins.has(plugin)) warn(`Plugin has already been applied to target app.`);
                else if (plugin && _shared.isFunction(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                } else if (_shared.isFunction(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                } else warn(`A plugin must either be a function or an object with an "install" ` + `function.`);
                return app;
            },
            mixin (mixin) {
                if (__VUE_OPTIONS_API__) {
                    if (!context.mixins.includes(mixin)) context.mixins.push(mixin);
                    else warn('Mixin has already been applied to target app' + (mixin.name ? `: ${mixin.name}` : ''));
                } else warn('Mixins are only available in builds supporting Options API');
                return app;
            },
            component (name, component) {
                validateComponentName(name, context.config);
                if (!component) return context.components[name];
                if (context.components[name]) warn(`Component "${name}" has already been registered in target app.`);
                context.components[name] = component;
                return app;
            },
            directive (name, directive) {
                validateDirectiveName(name);
                if (!directive) return context.directives[name];
                if (context.directives[name]) warn(`Directive "${name}" has already been registered in target app.`);
                context.directives[name] = directive;
                return app;
            },
            mount (rootContainer, isHydrate, isSVG) {
                if (!isMounted) {
                    const vnode = createVNode(rootComponent, rootProps);
                    // store app context on the root VNode.
                    // this will be set on the root instance on initial mount.
                    vnode.appContext = context;
                    context.reload = ()=>{
                        render(cloneVNode(vnode), rootContainer, isSVG);
                    };
                    if (isHydrate && hydrate) hydrate(vnode, rootContainer);
                    else render(vnode, rootContainer, isSVG);
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    app._instance = vnode.component;
                    devtoolsInitApp(app, version);
                    return vnode.component.proxy;
                } else warn(`App has already been mounted.\n` + `If you want to remount the same app, move your app creation logic ` + `into a factory function and create fresh app instances for each ` + `mount - e.g. \`const createMyApp = () => createApp(App)\``);
            },
            unmount () {
                if (isMounted) {
                    render(null, app._container);
                    app._instance = null;
                    devtoolsUnmountApp(app);
                    delete app._container.__vue_app__;
                } else warn(`Cannot unmount an app that is not mounted.`);
            },
            provide (key, value) {
                if (key in context.provides) warn(`App already provides property with key "${String(key)}". ` + `It will be overwritten with the new value.`);
                // TypeScript doesn't allow symbols as index type
                // https://github.com/Microsoft/TypeScript/issues/24587
                context.provides[key] = value;
                return app;
            }
        };
        return app;
    };
}
let hasMismatch = false;
const isSVGContainer = (container)=>/svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject'
;
const isComment = (node)=>node.nodeType === 8 /* COMMENT */ 
;
// Note: hydration is DOM-specific
// But we have to place it in core due to tight coupling with core - splitting
// it out creates a ton of unnecessary complexity.
// Hydration also depends on some renderer internal logic which needs to be
// passed in via arguments.
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent , p: patch , o: { patchProp , nextSibling , parentNode , remove , insert , createComment  }  } = rendererInternals;
    const hydrate = (vnode, container)=>{
        if (!container.hasChildNodes()) {
            warn(`Attempting to hydrate existing markup but container is empty. ` + `Performing full mount instead.`);
            patch(null, vnode, container);
            flushPostFlushCbs();
            return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        if (hasMismatch && true) // this error should show up in production
        console.error(`Hydration completed but contains mismatches.`);
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false)=>{
        const isFragmentStart = isComment(node) && node.data === '[';
        const onMismatch = ()=>handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart)
        ;
        const { type , ref , shapeFlag  } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        let nextNode = null;
        switch(type){
            case Text1:
                if (domType !== 3 /* TEXT */ ) nextNode = onMismatch();
                else {
                    if (node.data !== vnode.children) {
                        hasMismatch = true;
                        warn(`Hydration text mismatch:` + `\n- Client: ${JSON.stringify(node.data)}` + `\n- Server: ${JSON.stringify(vnode.children)}`);
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment$1:
                if (domType !== 8 /* COMMENT */  || isFragmentStart) nextNode = onMismatch();
                else nextNode = nextSibling(node);
                break;
            case Static:
                if (domType !== 1 /* ELEMENT */ ) nextNode = onMismatch();
                else {
                    // determine anchor, adopt content
                    nextNode = node;
                    // if the static vnode has its content stripped during build,
                    // adopt it from the server-rendered HTML.
                    const needToAdoptContent = !vnode.children.length;
                    for(let i = 0; i < vnode.staticCount; i++){
                        if (needToAdoptContent) vnode.children += nextNode.outerHTML;
                        if (i === vnode.staticCount - 1) vnode.anchor = nextNode;
                        nextNode = nextSibling(nextNode);
                    }
                    return nextNode;
                }
                break;
            case Fragment:
                if (!isFragmentStart) nextNode = onMismatch();
                else nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) {
                    if (domType !== 1 /* ELEMENT */  || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) nextNode = onMismatch();
                    else nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                } else if (shapeFlag & 6 /* COMPONENT */ ) {
                    // when setting up the render effect, if the initial vnode already
                    // has .el set, the component will perform hydration instead of mount
                    // on its sub-tree.
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
                    // component may be async, so in the case of fragments we cannot rely
                    // on component's rendered output to determine the end of the fragment
                    // instead, we do a lookahead to find the end anchor node.
                    nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
                    // #3787
                    // if component is async, it may get moved / unmounted before its
                    // inner component is loaded, so we need to give it a placeholder
                    // vnode that matches its adopted DOM.
                    if (isAsyncWrapper(vnode)) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                        } else subTree = node.nodeType === 3 ? createTextVNode('') : createVNode('div');
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                } else if (shapeFlag & 64 /* TELEPORT */ ) {
                    if (domType !== 8 /* COMMENT */ ) nextNode = onMismatch();
                    else nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                } else if (shapeFlag & 128 /* SUSPENSE */ ) nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                else warn('Invalid HostVNode type:', type, `(${typeof type})`);
        }
        if (ref != null) setRef(ref, null, parentSuspense, vnode);
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!vnode.dynamicChildren;
        const { type , props , patchFlag , shapeFlag , dirs  } = vnode;
        // #4006 for form elements with non-string v-model value bindings
        // e.g. <option :value="obj">, <input type="checkbox" :true-value="1">
        const forcePatchValue = type === 'input' && dirs || type === 'option';
        // skip props & children if this is hoisted static nodes
        if (forcePatchValue || patchFlag !== -1 /* HOISTED */ ) {
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'created');
            // props
            if (props) {
                if (forcePatchValue || !optimized || patchFlag & 16 /* FULL_PROPS */  || patchFlag & 32 /* HYDRATE_EVENTS */ ) {
                    for(const key in props)if (forcePatchValue && key.endsWith('value') || _shared.isOn(key) && !_shared.isReservedProp(key)) patchProp(el, key, null, props[key]);
                } else if (props.onClick) // Fast path for click listeners (which is most often) to avoid
                // iterating through props.
                patchProp(el, 'onClick', null, props.onClick);
            }
            // vnode / directive hooks
            let vnodeHooks;
            if (vnodeHooks = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) queueEffectWithSuspense(()=>{
                vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
            }, parentSuspense);
            // children
            if (shapeFlag & 16 /* ARRAY_CHILDREN */  && // skip if element has innerHTML / textContent
            !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned1 = false;
                while(next){
                    hasMismatch = true;
                    if (!hasWarned1) {
                        warn(`Hydration children mismatch in <${vnode.type}>: ` + `server rendered element contains more child nodes than client vdom.`);
                        hasWarned1 = true;
                    }
                    // The SSRed DOM contains more nodes than it should. Remove them.
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            } else if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
                if (el.textContent !== vnode.children) {
                    hasMismatch = true;
                    warn(`Hydration text content mismatch in <${vnode.type}>:\n` + `- Client: ${el.textContent}\n` + `- Server: ${vnode.children}`);
                    el.textContent = vnode.children;
                }
            }
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned1 = false;
        for(let i = 0; i < l; i++){
            const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
            if (node) node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            else if (vnode.type === Text1 && !vnode.children) continue;
            else {
                hasMismatch = true;
                if (!hasWarned1) {
                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` + `server rendered element contains fewer child nodes than client vdom.`);
                    hasWarned1 = true;
                }
                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.
                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        const { slotScopeIds: fragmentSlotScopeIds  } = vnode;
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === ']') return nextSibling(vnode.anchor = next);
        else {
            // fragment didn't hydrate successfully, since we didn't get a end anchor
            // back. This should have led to node/children mismatch warnings.
            hasMismatch = true;
            // since the anchor is missing, we need to create one and insert it
            insert(vnode.anchor = createComment(`]`), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment)=>{
        hasMismatch = true;
        warn(`Hydration node mismatch:\n- Client vnode:`, vnode.type, `\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */  ? `(text)` : isComment(node) && node.data === '[' ? `(start of fragment)` : ``);
        vnode.el = null;
        if (isFragment) {
            // remove excessive fragment nodes
            const end = locateClosingAsyncAnchor(node);
            while(true){
                const next = nextSibling(node);
                if (next && next !== end) remove(next);
                else break;
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
    };
    const locateClosingAsyncAnchor = (node)=>{
        let match = 0;
        while(node){
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === '[') match++;
                if (node.data === ']') {
                    if (match === 0) return nextSibling(node);
                    else match--;
                }
            }
        }
        return node;
    };
    return [
        hydrate,
        hydrateNode
    ];
}
let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) perf.mark(`vue-${type}-${instance.uid}`);
    devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());
}
function isSupported() {
    if (supported !== undefined) return supported;
    /* eslint-disable no-restricted-globals */ if (typeof window !== 'undefined' && window.performance) {
        supported = true;
        perf = window.performance;
    } else supported = false;
    /* eslint-enable no-restricted-globals */ return supported;
}
/**
 * This is only called in esm-bundler builds.
 * It is called when a renderer is created, in `baseCreateRenderer` so that
 * importing runtime-core is side-effects free.
 *
 * istanbul-ignore-next
 */ function initFeatureFlags() {
    let needWarn = false;
    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {
        needWarn = true;
        _shared.getGlobalThis().__VUE_OPTIONS_API__ = true;
    }
    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {
        needWarn = true;
        _shared.getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (needWarn) console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` + `configure your bundler to explicitly replace feature flag globals ` + `with boolean literals to get proper tree-shaking in the final bundle. ` + `See http://link.vuejs.org/feature-flags for more details.`);
}
const prodEffectOptions = {
    scheduler: queueJob,
    // #1801, #2043 component render effects should allow recursive updates
    allowRecurse: true
};
function createDevEffectOptions(instance) {
    return {
        scheduler: queueJob,
        allowRecurse: true,
        onTrack: instance.rtc ? (e)=>_shared.invokeArrayFns(instance.rtc, e)
         : void 0,
        onTrigger: instance.rtg ? (e)=>_shared.invokeArrayFns(instance.rtg, e)
         : void 0
    };
}
const queuePostRenderEffect = queueEffectWithSuspense;
const setRef = (rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false)=>{
    if (_shared.isArray(rawRef)) {
        rawRef.forEach((r, i)=>setRef(r, oldRawRef && (_shared.isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount)
        );
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) // when mounting async components, nothing needs to be done,
    // because the template ref is forwarded to inner component
    return;
    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */  ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner , r: ref  } = rawRef;
    if (!owner) {
        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` + `A vnode with ref must be created inside the render function.`);
        return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === _shared.EMPTY_OBJ ? owner.refs = {
    } : owner.refs;
    const setupState = owner.setupState;
    // dynamic ref changed. unset old ref
    if (oldRef != null && oldRef !== ref) {
        if (_shared.isString(oldRef)) {
            refs[oldRef] = null;
            if (_shared.hasOwn(setupState, oldRef)) setupState[oldRef] = null;
        } else if (_reactivity.isRef(oldRef)) oldRef.value = null;
    }
    if (_shared.isString(ref)) {
        const doSet = ()=>{
            refs[ref] = value;
            if (_shared.hasOwn(setupState, ref)) setupState[ref] = value;
        };
        // #1789: for non-null values, set them after render
        // null values means this is unmount and it should not overwrite another
        // ref with the same key
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if (_reactivity.isRef(ref)) {
        const doSet = ()=>{
            ref.value = value;
        };
        if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
        } else doSet();
    } else if (_shared.isFunction(ref)) callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */ , [
        value,
        refs
    ]);
    else warn('Invalid template ref type:', value, `(${typeof value})`);
};
/**
 * The createRenderer function accepts two generic arguments:
 * HostNode and HostElement, corresponding to Node and Element types in the
 * host environment. For example, for runtime-dom, HostNode would be the DOM
 * `Node` interface and HostElement would be the DOM `Element` interface.
 *
 * Custom renderers can pass in the platform specific types like this:
 *
 * ``` js
 * const { render, createApp } = createRenderer<Node, Element>({
 *   patchProp,
 *   ...nodeOps
 * })
 * ```
 */ function createRenderer(options) {
    return baseCreateRenderer(options);
}
// Separate API for creating hydration-enabled renderer.
// Hydration logic is only used when calling this function, making it
// tree-shakable.
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
// implementation
function baseCreateRenderer(options, createHydrationFns) {
    initFeatureFlags();
    {
        const target = _shared.getGlobalThis();
        target.__VUE__ = true;
        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);
    }
    const { insert: hostInsert , remove: hostRemove , patchProp: hostPatchProp , forcePatchProp: hostForcePatchProp , createElement: hostCreateElement , createText: hostCreateText , createComment: hostCreateComment , setText: hostSetText , setElementText: hostSetElementText , parentNode: hostParentNode , nextSibling: hostNextSibling , setScopeId: hostSetScopeId = _shared.NOOP , cloneNode: hostCloneNode , insertStaticContent: hostInsertStaticContent  } = options;
    // Note: functions inside this closure should use `const xxx = () => {}`
    // style in order to prevent being inlined by minifiers.
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren)=>{
        // patching & not same type, unmount old tree
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2 /* BAIL */ ) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type , ref , shapeFlag  } = n2;
        switch(type){
            case Text1:
                processText(n1, n2, container, anchor);
                break;
            case Comment$1:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) mountStaticNode(n2, container, anchor, isSVG);
                else patchStaticNode(n1, n2, container, isSVG);
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */ ) processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 6 /* COMPONENT */ ) processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (shapeFlag & 64 /* TELEPORT */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else if (shapeFlag & 128 /* SUSPENSE */ ) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                else warn('Invalid VNode type:', type, `(${typeof type})`);
        }
        // set ref
        if (ref != null && parentComponent) setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    };
    const processText = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        else {
            const el = n2.el = n1.el;
            if (n2.children !== n1.children) hostSetText(el, n2.children);
        }
    };
    const processCommentNode = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateComment(n2.children || ''), container, anchor);
        else // there's no support for dynamic comments
        n2.el = n1.el;
    };
    const mountStaticNode = (n2, container, anchor, isSVG)=>{
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    };
    /**
     * Dev / HMR only
     */ const patchStaticNode = (n1, n2, container, isSVG)=>{
        // static nodes are only patched during dev for HMR
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            // remove existing
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        } else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el , anchor  }, container, nextSibling)=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el , anchor  })=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        isSVG = isSVG || n2.type === 'svg';
        if (n1 == null) mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        else patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let el;
        let vnodeHook;
        const { type , props , shapeFlag , transition , patchFlag , dirs  } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
        // mount children first, since some props may rely on child content
        // being already rendered, e.g. `<select value>`
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(el, vnode.children);
        else if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized);
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'created');
        // props
        if (props) {
            for(const key in props)if (!_shared.isReservedProp(key)) hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            if (vnodeHook = props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        // scopeId
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        Object.defineProperty(el, '__vnode', {
            value: vnode,
            enumerable: false
        });
        Object.defineProperty(el, '__vueParentComponent', {
            value: parentComponent,
            enumerable: false
        });
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
        // #1689 For inside suspense + suspense resolved case, just call it
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
        }, parentSuspense);
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent)=>{
        if (scopeId) hostSetScopeId(el, scopeId);
        if (slotScopeIds) for(let i = 0; i < slotScopeIds.length; i++)hostSetScopeId(el, slotScopeIds[i]);
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (subTree.patchFlag > 0 && subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */ ) subTree = filterSingleRoot(subTree.children) || subTree;
            if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0)=>{
        for(let i = start; i < children.length; i++){
            const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const el = n2.el = n1.el;
        let { patchFlag , dynamicChildren , dirs  } = n2;
        // #1426 take the old vnode's patch flag into account since user may clone a
        // compiler-generated vnode, which de-opts to FULL_PROPS
        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */ ;
        const oldProps = n1.props || _shared.EMPTY_OBJ;
        const newProps = n2.props || _shared.EMPTY_OBJ;
        let vnodeHook;
        if (vnodeHook = newProps.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        if (dirs) invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        if (patchFlag > 0) {
            // the presence of a patchFlag means this element's render code was
            // generated by the compiler and can take the fast path.
            // in this path old node and new node are guaranteed to have the same shape
            // (i.e. at the exact same position in the source template)
            if (patchFlag & 16 /* FULL_PROPS */ ) // element props contain dynamic keys, full diff needed
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
            else {
                // class
                // this flag is matched when the element has dynamic class bindings.
                if (patchFlag & 2 /* CLASS */ ) {
                    if (oldProps.class !== newProps.class) hostPatchProp(el, 'class', null, newProps.class, isSVG);
                }
                // style
                // this flag is matched when the element has dynamic style bindings
                if (patchFlag & 4 /* STYLE */ ) hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);
                // props
                // This flag is matched when the element has dynamic prop/attr bindings
                // other than class and style. The keys of dynamic prop/attrs are saved for
                // faster iteration.
                // Note dynamic keys like :[foo]="bar" will cause this optimization to
                // bail out and go through a full diff because we need to unset the old key
                if (patchFlag & 8 /* PROPS */ ) {
                    // if the flag is present then dynamicProps must be non-null
                    const propsToUpdate = n2.dynamicProps;
                    for(let i = 0; i < propsToUpdate.length; i++){
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
            }
            // text
            // This flag is matched when the element has only dynamic text children.
            if (patchFlag & 1 /* TEXT */ ) {
                if (n1.children !== n2.children) hostSetElementText(el, n2.children);
            }
        } else if (!optimized && dynamicChildren == null) // unoptimized, full diff
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
        } else if (!optimized) // full diff
        patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');
        }, parentSuspense);
    };
    // The fast path for blocks.
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds)=>{
        for(let i = 0; i < newChildren.length; i++){
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            // Determine the container (parent element) for the patch.
            const container = // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el && (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
            // which also requires the correct parent container
            !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
            oldVNode.shapeFlag & 6 /* COMPONENT */  || oldVNode.shapeFlag & 64 /* TELEPORT */ ) ? hostParentNode(oldVNode.el) : // just pass the block element here to avoid a DOM parentNode call.
            fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
    };
    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG)=>{
        if (oldProps !== newProps) {
            for(const key in newProps){
                // empty string is not valid prop
                if (_shared.isReservedProp(key)) continue;
                const next = newProps[key];
                const prev = oldProps[key];
                if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
            if (oldProps !== _shared.EMPTY_OBJ) {
                for(const key1 in oldProps)if (!_shared.isReservedProp(key1) && !(key1 in newProps)) hostPatchProp(el, key1, oldProps[key1], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText('');
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText('');
        let { patchFlag , dynamicChildren , slotScopeIds: fragmentSlotScopeIds  } = n2;
        if (dynamicChildren) optimized = true;
        // check if this is a slot fragment with :slotted scope ids
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        if (isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            // a fragment can only have array children
            // since they are either generated by the compiler, or implicitly created
            // from arrays.
            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */  && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
        // of renderSlot() with no valid children
        n1.dynamicChildren) {
            // a stable fragment (template root or <template v-for>) doesn't need to
            // patch children order, but it may contain dynamicChildren.
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) traverseStaticChildren(n1, n2);
            else if (// #2080 if the stable fragment has a key, it's a <template v-for> that may
            //  get moved around. Make sure all root level vnodes inherit el.
            // #2134 or if it's a component root, it may also get moved around
            // as the component is being moved.
            n2.key != null || parentComponent && n2 === parentComponent.subTree) traverseStaticChildren(n1, n2, true);
        } else // keyed / unkeyed, or manual fragments.
        // for keyed & unkeyed, since they are compiler generated from v-for,
        // each child is guaranteed to be a block so the fragment will never
        // have dynamicChildren.
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */ ) parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
            else mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
        } else updateComponent(n1, n2, optimized);
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized)=>{
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (instance.type.__hmrId) registerHMR(instance);
        pushWarningContext(initialVNode);
        startMeasure(instance, `mount`);
        // inject renderer internals for keepAlive
        if (isKeepAlive(initialVNode)) instance.ctx.renderer = internals;
        startMeasure(instance, `init`);
        setupComponent(instance);
        endMeasure(instance, `init`);
        // setup() is async. This component relies on async logic to be resolved
        // before proceeding
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            // Give it a placeholder if this is not hydration
            // TODO handle self-defined fallback
            if (!initialVNode.el) {
                const placeholder = instance.subTree = createVNode(Comment$1);
                processCommentNode(null, placeholder, container, anchor);
            }
            return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        popWarningContext();
        endMeasure(instance, `mount`);
    };
    const updateComponent = (n1, n2, optimized)=>{
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep && !instance.asyncResolved) {
                pushWarningContext(n2);
                updateComponentPreRender(instance, n2, optimized);
                popWarningContext();
                return;
            } else {
                // normal update
                instance.next = n2;
                // in case the child component is also queued, remove it to avoid
                // double updating the same child component in the same flush.
                invalidateJob(instance.update);
                // instance.update is the reactive effect runner.
                instance.update();
            }
        } else {
            // no update needed. just copy over properties
            n2.component = n1.component;
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)=>{
        // create reactive effect for rendering
        instance.update = _reactivity.effect(function componentEffect() {
            if (!instance.isMounted) {
                let vnodeHook;
                const { el , props  } = initialVNode;
                const { bm , m , parent  } = instance;
                // beforeMount hook
                if (bm) _shared.invokeArrayFns(bm);
                // onVnodeBeforeMount
                if (vnodeHook = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parent, initialVNode);
                if (el && hydrateNode) {
                    // vnode has adopted host node - perform hydration instead of mount.
                    const hydrateSubTree = ()=>{
                        startMeasure(instance, `render`);
                        instance.subTree = renderComponentRoot(instance);
                        endMeasure(instance, `render`);
                        startMeasure(instance, `hydrate`);
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        endMeasure(instance, `hydrate`);
                    };
                    if (isAsyncWrapper(initialVNode)) initialVNode.type.__asyncLoader().then(// note: we are moving the render call into an async callback,
                    // which means it won't track dependencies - but it's ok because
                    // a server-rendered async wrapper is already in resolved state
                    // and it will never need to change.
                    ()=>!instance.isUnmounted && hydrateSubTree()
                    );
                    else hydrateSubTree();
                } else {
                    startMeasure(instance, `render`);
                    const subTree = instance.subTree = renderComponentRoot(instance);
                    endMeasure(instance, `render`);
                    startMeasure(instance, `patch`);
                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
                    endMeasure(instance, `patch`);
                    initialVNode.el = subTree.el;
                }
                // mounted hook
                if (m) queuePostRenderEffect(m, parentSuspense);
                // onVnodeMounted
                if (vnodeHook = props && props.onVnodeMounted) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, scopedInitialVNode)
                    , parentSuspense);
                }
                // activated hook for keep-alive roots.
                // #1742 activated hook must be accessed after first render
                // since the hook may be injected by a child keep-alive
                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                instance.isMounted = true;
                devtoolsComponentAdded(instance);
                // #2458: deference mount-only object parameters to prevent memleaks
                initialVNode = container = anchor = null;
            } else {
                // updateComponent
                // This is triggered by mutation of component's own state (next: null)
                // OR parent calling processComponent (next: VNode)
                let { next , bu , u , parent , vnode  } = instance;
                let originNext = next;
                let vnodeHook;
                pushWarningContext(next || instance.vnode);
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                } else next = vnode;
                // beforeUpdate hook
                if (bu) _shared.invokeArrayFns(bu);
                // onVnodeBeforeUpdate
                if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parent, next, vnode);
                startMeasure(instance, `render`);
                const nextTree = renderComponentRoot(instance);
                endMeasure(instance, `render`);
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                startMeasure(instance, `patch`);
                patch(prevTree, nextTree, // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, isSVG);
                endMeasure(instance, `patch`);
                next.el = nextTree.el;
                if (originNext === null) // self-triggered update. In case of HOC, update parent component
                // vnode el. HOC is indicated by parent instance's subTree pointing
                // to child component's vnode
                updateHOCHostEl(instance, nextTree.el);
                // updated hook
                if (u) queuePostRenderEffect(u, parentSuspense);
                // onVnodeUpdated
                if (vnodeHook = next.props && next.props.onVnodeUpdated) queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, next, vnode)
                , parentSuspense);
                devtoolsComponentUpdated(instance);
                popWarningContext();
            }
        }, createDevEffectOptions(instance));
        // @ts-ignore
        instance.update.ownerInstance = instance;
    };
    const updateComponentPreRender = (instance, nextVNode, optimized)=>{
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        _reactivity.pauseTracking();
        // props update may have triggered pre-flush watchers.
        // flush them before the render update.
        flushPreFlushCbs(undefined, instance.update);
        _reactivity.resetTracking();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false)=>{
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag , shapeFlag  } = n2;
        // fast path
        if (patchFlag > 0) {
            if (patchFlag & 128 /* KEYED_FRAGMENT */ ) {
                // this could be either fully-keyed or mixed (some keyed some not)
                // presence of patchFlag means children are guaranteed to be arrays
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            } else if (patchFlag & 256 /* UNKEYED_FRAGMENT */ ) {
                // unkeyed
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
        }
        // children has 3 possibilities: text, array or no children.
        if (shapeFlag & 8 /* TEXT_CHILDREN */ ) {
            // text children fast path
            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(c1, parentComponent, parentSuspense);
            if (c2 !== c1) hostSetElementText(container, c2);
        } else if (prevShapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            // prev children was array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) // two arrays, cannot assume anything, do full diff
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else // no new children, just unmount old
            unmountChildren(c1, parentComponent, parentSuspense, true);
        } else {
            // prev children was text OR null
            // new children is array OR null
            if (prevShapeFlag & 8 /* TEXT_CHILDREN */ ) hostSetElementText(container, '');
            // mount new if array
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        c1 = c1 || _shared.EMPTY_ARR;
        c2 = c2 || _shared.EMPTY_ARR;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for(i = 0; i < commonLength; i++){
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) // remove old
        unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        else // mount new
        mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    };
    // can be all-keyed or mixed
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized)=>{
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1; // prev ending index
        let e2 = l2 - 1; // next ending index
        // 1. sync from start
        // (a b) c
        // (a b) d e
        while(i <= e1 && i <= e2){
            const n1 = c1[i];
            const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            i++;
        }
        // 2. sync from end
        // a (b c)
        // d e (b c)
        while(i <= e1 && i <= e2){
            const n1 = c1[e1];
            const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            else break;
            e1--;
            e2--;
        }
        // 3. common sequence + mount
        // (a b)
        // (a b) c
        // i = 2, e1 = 1, e2 = 2
        // (a b)
        // c (a b)
        // i = 0, e1 = -1, e2 = 0
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while(i <= e2){
                    patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    i++;
                }
            }
        } else if (i > e2) while(i <= e1){
            unmount(c1[i], parentComponent, parentSuspense, true);
            i++;
        }
        else {
            const s1 = i; // prev starting index
            const s2 = i; // next starting index
            // 5.1 build key:index map for newChildren
            const keyToNewIndexMap = new Map();
            for(i = s2; i <= e2; i++){
                const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
                if (nextChild.key != null) {
                    if (keyToNewIndexMap.has(nextChild.key)) warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            // 5.2 loop through old children left to be patched and try to patch
            // matching nodes & remove nodes that are no longer present
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            // used to track whether any node has moved
            let maxNewIndexSoFar = 0;
            // works as Map<newIndex, oldIndex>
            // Note that oldIndex is offset by +1
            // and oldIndex = 0 is a special value indicating the new node has
            // no corresponding old node.
            // used for determining longest stable subsequence
            const newIndexToOldIndexMap = new Array(toBePatched);
            for(i = 0; i < toBePatched; i++)newIndexToOldIndexMap[i] = 0;
            for(i = s1; i <= e1; i++){
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    // all new children have been patched so this can only be a removal
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) newIndex = keyToNewIndexMap.get(prevChild.key);
                else {
                    // key-less node, try to locate a key-less node of the same type
                    for(j = s2; j <= e2; j++)if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                        newIndex = j;
                        break;
                    }
                }
                if (newIndex === undefined) unmount(prevChild, parentComponent, parentSuspense, true);
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) maxNewIndexSoFar = newIndex;
                    else moved = true;
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    patched++;
                }
            }
            // 5.3 move and mount
            // generate longest stable subsequence only when nodes have moved
            const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : _shared.EMPTY_ARR;
            j = increasingNewIndexSequence.length - 1;
            // looping backwards so that we can use last patched node as anchor
            for(i = toBePatched - 1; i >= 0; i--){
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) // mount new
                patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                else if (moved) {
                    // move if:
                    // There is no stable subsequence (e.g. a reverse)
                    // OR current node is not among the stable sequence
                    if (j < 0 || i !== increasingNewIndexSequence[j]) move(nextChild, container, anchor, 2 /* REORDER */ );
                    else j--;
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null)=>{
        const { el , type , transition , children , shapeFlag  } = vnode;
        if (shapeFlag & 6 /* COMPONENT */ ) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128 /* SUSPENSE */ ) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for(let i = 0; i < children.length; i++)move(children[i], container, anchor, moveType);
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        // single nodes
        const needTransition = moveType !== 2 /* REORDER */  && shapeFlag & 1 /* ELEMENT */  && transition;
        if (needTransition) {
            if (moveType === 0 /* ENTER */ ) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(()=>transition.enter(el)
                , parentSuspense);
            } else {
                const { leave , delayLeave , afterLeave  } = transition;
                const remove = ()=>hostInsert(el, container, anchor)
                ;
                const performLeave = ()=>{
                    leave(el, ()=>{
                        remove();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) delayLeave(el, remove, performLeave);
                else performLeave();
            }
        } else hostInsert(el, container, anchor);
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false)=>{
        const { type , props , ref , children , dynamicChildren , shapeFlag , patchFlag , dirs  } = vnode;
        // unset ref
        if (ref != null) setRef(ref, null, parentSuspense, vnode, true);
        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */  && dirs;
        let vnodeHook;
        if (vnodeHook = props && props.onVnodeBeforeUnmount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        if (shapeFlag & 6 /* COMPONENT */ ) unmountComponent(vnode.component, parentSuspense, doRemove);
        else {
            if (shapeFlag & 128 /* SUSPENSE */ ) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');
            if (shapeFlag & 64 /* TELEPORT */ ) vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
            else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */ )) // fast path for block nodes: only need to unmount dynamic children.
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            else if (type === Fragment && (patchFlag & 128 /* KEYED_FRAGMENT */  || patchFlag & 256 /* UNKEYED_FRAGMENT */ ) || !optimized && shapeFlag & 16 /* ARRAY_CHILDREN */ ) unmountChildren(children, parentComponent, parentSuspense);
            if (doRemove) remove(vnode);
        }
        if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');
        }, parentSuspense);
    };
    const remove = (vnode)=>{
        const { type , el , anchor , transition  } = vnode;
        if (type === Fragment) {
            removeFragment(el, anchor);
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = ()=>{
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) transition.afterLeave();
        };
        if (vnode.shapeFlag & 1 /* ELEMENT */  && transition && !transition.persisted) {
            const { leave , delayLeave  } = transition;
            const performLeave = ()=>leave(el, performRemove)
            ;
            if (delayLeave) delayLeave(vnode.el, performRemove, performLeave);
            else performLeave();
        } else performRemove();
    };
    const removeFragment = (cur, end)=>{
        // For fragments, directly remove all contained DOM nodes.
        // (fragment child nodes cannot have transition)
        let next;
        while(cur !== end){
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove)=>{
        if (instance.type.__hmrId) unregisterHMR(instance);
        const { bum , effects , update , subTree , um  } = instance;
        // beforeUnmount hook
        if (bum) _shared.invokeArrayFns(bum);
        if (effects) for(let i = 0; i < effects.length; i++)_reactivity.stop(effects[i]);
        // update may be null if a component is unmounted before its async
        // setup has resolved.
        if (update) {
            _reactivity.stop(update);
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        // unmounted hook
        if (um) queuePostRenderEffect(um, parentSuspense);
        queuePostRenderEffect(()=>{
            instance.isUnmounted = true;
        }, parentSuspense);
        // A component with async dep inside a pending suspense is unmounted before
        // its async dep resolves. This should remove the dep from the suspense, and
        // cause the suspense to resolve immediately if that was the last dep.
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) parentSuspense.resolve();
        }
        devtoolsComponentRemoved(instance);
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0)=>{
        for(let i = start; i < children.length; i++)unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    };
    const getNextHostNode = (vnode)=>{
        if (vnode.shapeFlag & 6 /* COMPONENT */ ) return getNextHostNode(vnode.component.subTree);
        if (vnode.shapeFlag & 128 /* SUSPENSE */ ) return vnode.suspense.next();
        return hostNextSibling(vnode.anchor || vnode.el);
    };
    const render = (vnode, container, isSVG)=>{
        if (vnode == null) {
            if (container._vnode) unmount(container._vnode, null, null, true);
        } else patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) [hydrate, hydrateNode] = createHydrationFns(internals);
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */ , [
        vnode,
        prevVNode
    ]);
}
/**
 * #1156
 * When a component is HMR-enabled, we need to make sure that all static nodes
 * inside a block also inherit the DOM element from the previous tree so that
 * HMR updates (which are full updates) can retrieve the element for patching.
 *
 * #2080
 * Inside keyed `template` fragment static children, if a fragment is moved,
 * the children will always moved so that need inherit el form previous nodes
 * to ensure correct moved position.
 */ function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if (_shared.isArray(ch1) && _shared.isArray(ch2)) for(let i = 0; i < ch1.length; i++){
        // this is only called in the optimized path so array children are
        // guaranteed to be vnodes
        const c1 = ch1[i];
        let c2 = ch2[i];
        if (c2.shapeFlag & 1 /* ELEMENT */  && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */ ) {
                c2 = ch2[i] = cloneIfMounted(ch2[i]);
                c2.el = c1.el;
            }
            if (!shallow) traverseStaticChildren(c1, c2);
        }
        // also inherit for comment nodes, but not placeholders (e.g. v-if which
        // would have received .el during block patch)
        if (c2.type === Comment$1 && !c2.el) c2.el = c1.el;
    }
}
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function getSequence(arr) {
    const p = arr.slice();
    const result = [
        0
    ];
    let i, j, u, v, c;
    const len = arr.length;
    for(i = 0; i < len; i++){
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                c = (u + v) / 2 | 0;
                if (arr[result[c]] < arrI) u = c + 1;
                else v = c;
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) p[i] = result[u - 1];
                result[u] = i;
            }
        }
    }
    u = result.length;
    v = result[u - 1];
    while((u--) > 0){
        result[u] = v;
        v = p[v];
    }
    return result;
}
const isTeleport = (type)=>type.__isTeleport
;
const isTeleportDisabled = (props)=>props && (props.disabled || props.disabled === '')
;
const isTargetSVG = (target)=>typeof SVGElement !== 'undefined' && target instanceof SVGElement
;
const resolveTarget = (props, select)=>{
    const targetSelector = props && props.to;
    if (_shared.isString(targetSelector)) {
        if (!select) {
            warn(`Current renderer does not support string target for Teleports. ` + `(missing querySelector renderer option)`);
            return null;
        } else {
            const target = select(targetSelector);
            if (!target) warn(`Failed to locate Teleport target with selector "${targetSelector}". ` + `Note the target element must exist before the component is mounted - ` + `i.e. the target cannot be rendered by the component itself, and ` + `ideally should be outside of the entire Vue component tree.`);
            return target;
        }
    } else {
        if (!targetSelector && !isTeleportDisabled(props)) warn(`Invalid Teleport target: ${targetSelector}`);
        return targetSelector;
    }
};
const TeleportImpl = {
    __isTeleport: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren , pc: patchChildren , pbc: patchBlockChildren , o: { insert , querySelector , createText , createComment  }  } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag , children , dynamicChildren  } = n2;
        // #3302
        // HMR updated, force full diff
        if (isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            // insert anchors in the main view
            const placeholder = n2.el = createComment('teleport start');
            const mainAnchor = n2.anchor = createComment('teleport end');
            insert(placeholder, container, anchor);
            insert(mainAnchor, container, anchor);
            const target = n2.target = resolveTarget(n2.props, querySelector);
            const targetAnchor = n2.targetAnchor = createText('');
            if (target) {
                insert(targetAnchor, target);
                // #2652 we could be teleporting from a non-SVG tree into an SVG tree
                isSVG = isSVG || isTargetSVG(target);
            } else if (!disabled) warn('Invalid Teleport target on mount:', target, `(${typeof target})`);
            const mount = (container, anchor)=>{
                // Teleport *always* has Array children. This is enforced in both the
                // compiler and vnode children normalization.
                if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            };
            if (disabled) mount(container, mainAnchor);
            else if (target) mount(target, targetAnchor);
        } else {
            // update content
            n2.el = n1.el;
            const mainAnchor = n2.anchor = n1.anchor;
            const target = n2.target = n1.target;
            const targetAnchor = n2.targetAnchor = n1.targetAnchor;
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
                // fast path when the teleport happens to be a block root
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
                // even in block tree mode we need to make sure all root-level nodes
                // in the teleport inherit previous DOM references so that they can
                // be moved in future patches.
                traverseStaticChildren(n1, n2, true);
            } else if (!optimized) patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
            if (disabled) {
                if (!wasDisabled) // enabled -> disabled
                // move into main container
                moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */ );
            } else {
                // target changed
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
                    if (nextTarget) moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */ );
                    else warn('Invalid Teleport target on update:', target, `(${typeof target})`);
                } else if (wasDisabled) // disabled -> enabled
                // move into teleport target
                moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */ );
            }
        }
    },
    remove (vnode, parentComponent, parentSuspense, optimized, { um: unmount , o: { remove: hostRemove  }  }, doRemove) {
        const { shapeFlag , children , anchor , targetAnchor , target , props  } = vnode;
        if (target) hostRemove(targetAnchor);
        // an unmounted teleport should always remove its children if not disabled
        if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++){
                const child = children[i];
                unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert  } , m: move  }, moveType = 2 /* REORDER */ ) {
    // move target anchor if this is a target change.
    if (moveType === 0 /* TARGET_CHANGE */ ) insert(vnode.targetAnchor, container, parentAnchor);
    const { el , anchor , shapeFlag , children , props  } = vnode;
    const isReorder = moveType === 2 /* REORDER */ ;
    // move main view anchor if this is a re-order.
    if (isReorder) insert(el, container, parentAnchor);
    // if this is a re-order and teleport is enabled (content is in target)
    // do not move children. So the opposite is: only move children if this
    // is not a reorder, or the teleport is disabled
    if (!isReorder || isTeleportDisabled(props)) {
        // Teleport has either Array children or no children.
        if (shapeFlag & 16 /* ARRAY_CHILDREN */ ) for(let i = 0; i < children.length; i++)move(children[i], container, parentAnchor, 2 /* REORDER */ );
    }
    // move main view anchor if this is a re-order.
    if (isReorder) insert(anchor, container, parentAnchor);
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling , parentNode , querySelector  }  }, hydrateChildren) {
    const target = vnode.target = resolveTarget(vnode.props, querySelector);
    if (target) {
        // if multiple teleports rendered to the same target element, we need to
        // pick up from where the last teleport finished instead of the first node
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */ ) {
            if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetAnchor = targetNode;
            } else {
                vnode.anchor = nextSibling(node);
                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
        }
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
// Force-casted public typing for h and TSX props inference
const Teleport = TeleportImpl;
const COMPONENTS = 'components';
const DIRECTIVES = 'directives';
/**
 * @private
 */ function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
/**
 * @private
 */ function resolveDynamicComponent(component) {
    if (_shared.isString(component)) return resolveAsset(COMPONENTS, component, false) || component;
    else // invalid types will fallthrough to createVNode and raise warning
    return component || NULL_DYNAMIC_COMPONENT;
}
/**
 * @private
 */ function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
// implementation
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        // explicit self name has highest priority
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component);
            if (selfName && (selfName === name || selfName === _shared.camelize(name) || selfName === _shared.capitalize(_shared.camelize(name)))) return Component;
        }
        const res = // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) || // global registration
        resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) // fallback to implicit self-reference
        return Component;
        if (warnMissing && !res) warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);
        return res;
    } else warn(`resolve${_shared.capitalize(type.slice(0, -1))} ` + `can only be used in render() or setup().`);
}
function resolve(registry, name) {
    return registry && (registry[name] || registry[_shared.camelize(name)] || registry[_shared.capitalize(_shared.camelize(name))]);
}
const Fragment = Symbol('Fragment');
const Text1 = Symbol('Text');
const Comment$1 = Symbol('Comment');
const Static = Symbol('Static');
// Since v-if and v-for are the two possible ways node structure can dynamically
// change, once we consider v-if branches and each v-for fragment a block, we
// can divide a template into nested blocks, and within each block the node
// structure would be stable. This allows us to skip most children diffing
// and only worry about the dynamic nodes (indicated by patch flags).
const blockStack = [];
let currentBlock = null;
/**
 * Open a block.
 * This must be called before `createBlock`. It cannot be part of `createBlock`
 * because the children of the block are evaluated before `createBlock` itself
 * is called. The generated code typically looks like this:
 *
 * ```js
 * function render() {
 *   return (openBlock(),createBlock('div', null, [...]))
 * }
 * ```
 * disableTracking is true when creating a v-for fragment block, since a v-for
 * fragment always diffs its children.
 *
 * @private
 */ function openBlock(disableTracking = false) {
    blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let isBlockTreeEnabled = 1;
/**
 * Block tracking sometimes needs to be disabled, for example during the
 * creation of a tree that needs to be cached by v-once. The compiler generates
 * code like this:
 *
 * ``` js
 * _cache[1] || (
 *   setBlockTracking(-1),
 *   _cache[1] = createVNode(...),
 *   setBlockTracking(1),
 *   _cache[1]
 * )
 * ```
 *
 * @private
 */ function setBlockTracking(value) {
    isBlockTreeEnabled += value;
}
/**
 * Create a block root vnode. Takes the same exact arguments as `createVNode`.
 * A block root keeps track of dynamic nodes within the block in the
 * `dynamicChildren` array.
 *
 * @private
 */ function createBlock(type, props, children, patchFlag, dynamicProps) {
    const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true);
    // save current block children on the block vnode
    vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || _shared.EMPTY_ARR : null;
    // close block
    closeBlock();
    // a block is always going to be patched, so track it as a child of its
    // parent block
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(vnode);
    return vnode;
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (n2.shapeFlag & 6 /* COMPONENT */  && hmrDirtyComponents.has(n2.type)) // HMR only: if the component has been hot-updated, force a reload.
    return false;
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
/**
 * Internal API for registering an arguments transform for createVNode
 * used for creating stubs in the test-utils
 * It is *internal* but needs to be exposed for test-utils to pick up proper
 * typings
 */ function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args)=>{
    return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key  })=>key != null ? key : null
;
const normalizeRef = ({ ref  })=>{
    return ref != null ? _shared.isString(ref) || _reactivity.isRef(ref) || _shared.isFunction(ref) ? {
        i: currentRenderingInstance,
        r: ref
    } : ref : null;
};
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (!type) warn(`Invalid vnode type when creating vnode: ${type}.`);
        type = Comment$1;
    }
    if (isVNode(type)) {
        // createVNode receiving an existing vnode. This happens in cases like
        // <component :is="vnode"/>
        // #2078 make sure to merge refs during the clone instead of overwriting it
        const cloned = cloneVNode(type, props, true);
        if (children) normalizeChildren(cloned, children);
        return cloned;
    }
    // class component normalization.
    if (isClassComponent(type)) type = type.__vccOpts;
    // class & style normalization.
    if (props) {
        // for reactive or proxy objects, we need to clone it to enable mutation.
        if (_reactivity.isProxy(props) || InternalObjectKey in props) props = _shared.extend({
        }, props);
        let { class: klass , style  } = props;
        if (klass && !_shared.isString(klass)) props.class = _shared.normalizeClass(klass);
        if (_shared.isObject(style)) {
            // reactive state objects need to be cloned since they are likely to be
            // mutated
            if (_reactivity.isProxy(style) && !_shared.isArray(style)) style = _shared.extend({
            }, style);
            props.style = _shared.normalizeStyle(style);
        }
    }
    // encode the vnode type information into a bitmap
    const shapeFlag = _shared.isString(type) ? 1 /* ELEMENT */  : isSuspense(type) ? 128 /* SUSPENSE */  : isTeleport(type) ? 64 /* TELEPORT */  : _shared.isObject(type) ? 4 /* STATEFUL_COMPONENT */  : _shared.isFunction(type) ? 2 /* FUNCTIONAL_COMPONENT */  : 0;
    if (shapeFlag & 4 /* STATEFUL_COMPONENT */  && _reactivity.isProxy(type)) {
        type = _reactivity.toRaw(type);
        warn(`Vue received a Component which was made a reactive object. This can ` + `lead to unnecessary performance overhead, and should be avoided by ` + `marking the component with \`markRaw\` or using \`shallowRef\` ` + `instead of \`ref\`.`, `\nComponent that was made reactive: `, type);
    }
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children: null,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
    };
    // validate key
    if (vnode.key !== vnode.key) warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    normalizeChildren(vnode, children);
    // normalize suspense children
    if (shapeFlag & 128 /* SUSPENSE */ ) type.normalize(vnode);
    if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
    !isBlockNode && // has current parent block
    currentBlock && (patchFlag > 0 || shapeFlag & 6 /* COMPONENT */ ) && // the EVENTS flag is only for hydration and if it is the only flag, the
    // vnode should not be considered dynamic due to handler caching.
    patchFlag !== 32 /* HYDRATE_EVENTS */ ) currentBlock.push(vnode);
    return vnode;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
    // This is intentionally NOT using spread or extend to avoid the runtime
    // key enumeration cost.
    const { props , ref , patchFlag , children  } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {
    }, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? // if the vnode itself already has a ref, cloneVNode will need to merge
        // the refs so the single vnode can be set on multiple refs
        mergeRef && ref ? _shared.isArray(ref) ? ref.concat(normalizeRef(extraProps)) : [
            ref,
            normalizeRef(extraProps)
        ] : normalizeRef(extraProps) : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: patchFlag === -1 /* HOISTED */  && _shared.isArray(children) ? children.map(deepCloneVNode) : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: perserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 // hoisted node
         ? 16 /* FULL_PROPS */  : patchFlag | 16 /* FULL_PROPS */  : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
    };
    return cloned;
}
/**
 * Dev only, for HMR of hoisted vnodes reused in v-for
 * https://github.com/vitejs/vite/issues/2022
 */ function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if (_shared.isArray(vnode.children)) cloned.children = vnode.children.map(deepCloneVNode);
    return cloned;
}
/**
 * @private
 */ function createTextVNode(text = ' ', flag = 0) {
    return createVNode(Text1, null, text, flag);
}
/**
 * @private
 */ function createStaticVNode(content, numberOfNodes) {
    // A static vnode can contain multiple stringified elements, and the number
    // of elements is necessary for hydration.
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
/**
 * @private
 */ function createCommentVNode(text = '', // when used as the v-else branch, the comment node must be created as a
// block to ensure correct updates.
asBlock = false) {
    return asBlock ? (openBlock(), createBlock(Comment$1, null, text)) : createVNode(Comment$1, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === 'boolean') // empty placeholder
    return createVNode(Comment$1);
    else if (_shared.isArray(child)) // fragment
    return createVNode(Fragment, null, // #3666, avoid reference pollution when reusing vnode
    child.slice());
    else if (typeof child === 'object') // already vnode, this should be the most common since compiled templates
    // always produce all-vnode children arrays
    return cloneIfMounted(child);
    else // strings and numbers
    return createVNode(Text1, null, String(child));
}
// optimized normalization for template-compiled render fns
function cloneIfMounted(child) {
    return child.el === null ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag  } = vnode;
    if (children == null) children = null;
    else if (_shared.isArray(children)) type = 16 /* ARRAY_CHILDREN */ ;
    else if (typeof children === 'object') {
        if (shapeFlag & 1 /* ELEMENT */  || shapeFlag & 64 /* TELEPORT */ ) {
            // Normalize slot to plain children for plain element and Teleport
            const slot = children.default;
            if (slot) {
                // _c marker is added by withCtx() indicating this is a compiled slot
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        } else {
            type = 32 /* SLOTS_CHILDREN */ ;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) children._ctx = currentRenderingInstance;
            else if (slotFlag === 3 /* FORWARDED */  && currentRenderingInstance) {
                // a child component receives forwarded slots from the parent.
                // its slot type is determined by its parent's slot type.
                if (currentRenderingInstance.slots._ === 1 /* STABLE */ ) children._ = 1 /* STABLE */ ;
                else {
                    children._ = 2 /* DYNAMIC */ ;
                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */ ;
                }
            }
        }
    } else if (_shared.isFunction(children)) {
        children = {
            default: children,
            _ctx: currentRenderingInstance
        };
        type = 32 /* SLOTS_CHILDREN */ ;
    } else {
        children = String(children);
        // force teleport children to array so it can be moved around
        if (shapeFlag & 64 /* TELEPORT */ ) {
            type = 16 /* ARRAY_CHILDREN */ ;
            children = [
                createTextVNode(children)
            ];
        } else type = 8 /* TEXT_CHILDREN */ ;
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = _shared.extend({
    }, args[0]);
    for(let i = 1; i < args.length; i++){
        const toMerge = args[i];
        for(const key in toMerge){
            if (key === 'class') {
                if (ret.class !== toMerge.class) ret.class = _shared.normalizeClass([
                    ret.class,
                    toMerge.class
                ]);
            } else if (key === 'style') ret.style = _shared.normalizeStyle([
                ret.style,
                toMerge.style
            ]);
            else if (_shared.isOn(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (existing !== incoming) ret[key] = existing ? [].concat(existing, incoming) : incoming;
            } else if (key !== '') ret[key] = toMerge[key];
        }
    }
    return ret;
}
/**
 * Actual implementation
 */ function renderList(source, renderItem) {
    let ret;
    if (_shared.isArray(source) || _shared.isString(source)) {
        ret = new Array(source.length);
        for(let i = 0, l = source.length; i < l; i++)ret[i] = renderItem(source[i], i);
    } else if (typeof source === 'number') {
        if (!Number.isInteger(source)) {
            warn(`The v-for range expect an integer value but got ${source}.`);
            return [];
        }
        ret = new Array(source);
        for(let i = 0; i < source; i++)ret[i] = renderItem(i + 1, i);
    } else if (_shared.isObject(source)) {
        if (source[Symbol.iterator]) ret = Array.from(source, renderItem);
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for(let i = 0, l = keys.length; i < l; i++){
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i);
            }
        }
    } else ret = [];
    return ret;
}
/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */ function createSlots(slots, dynamicSlots) {
    for(let i = 0; i < dynamicSlots.length; i++){
        const slot = dynamicSlots[i];
        // array of dynamic slot generated by <template v-for="..." #[...]>
        if (_shared.isArray(slot)) for(let j = 0; j < slot.length; j++)slots[slot[j].name] = slot[j].fn;
        else if (slot) // conditional single slot generated by <template v-if="..." #foo>
        slots[slot.name] = slot.fn;
    }
    return slots;
}
/**
 * Compiler runtime helper for rendering `<slot/>`
 * @private
 */ function renderSlot(slots, name, props = {
}, // this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
fallback, noSlotted) {
    let slot = slots[name];
    if (slot && slot.length > 1) {
        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` + `function. You need to mark this component with $dynamic-slots in the ` + `parent template.`);
        slot = ()=>[]
        ;
    }
    // a compiled slot disables block tracking by default to avoid manual
    // invocation interfering with template-based block tracking, but in
    // `renderSlot` we can be sure that it's template-based so we can force
    // enable it.
    if (slot && slot._c) slot._d = false;
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const rendered = createBlock(Fragment, {
        key: props.key || `_${name}`
    }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */  ? 64 /* STABLE_FRAGMENT */  : -2 /* BAIL */ );
    if (!noSlotted && rendered.scopeId) rendered.slotScopeIds = [
        rendered.scopeId + '-s'
    ];
    if (slot && slot._c) slot._d = true;
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some((child)=>{
        if (!isVNode(child)) return true;
        if (child.type === Comment$1) return false;
        if (child.type === Fragment && !ensureValidVNode(child.children)) return false;
        return true;
    }) ? vnodes : null;
}
/**
 * For prefixing keys in v-on="obj" with "on"
 * @private
 */ function toHandlers(obj) {
    const ret = {
    };
    if (!_shared.isObject(obj)) {
        warn(`v-on with no argument expects an object value.`);
        return ret;
    }
    for(const key in obj)ret[_shared.toHandlerKey(key)] = obj[key];
    return ret;
}
/**
 * #2437 In Vue 3, functional components do not have a public instance proxy but
 * they exist in the internal parent chain. For code that relies on traversing
 * public $parent chains, skip functional ones and go to the parent instead.
 */ const getPublicInstance = (i)=>{
    if (!i) return null;
    if (isStatefulComponent(i)) return getExposeProxy(i) || i.proxy;
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = _shared.extend(Object.create(null), {
    $: (i)=>i
    ,
    $el: (i)=>i.vnode.el
    ,
    $data: (i)=>i.data
    ,
    $props: (i)=>_reactivity.shallowReadonly(i.props)
    ,
    $attrs: (i)=>_reactivity.shallowReadonly(i.attrs)
    ,
    $slots: (i)=>_reactivity.shallowReadonly(i.slots)
    ,
    $refs: (i)=>_reactivity.shallowReadonly(i.refs)
    ,
    $parent: (i)=>getPublicInstance(i.parent)
    ,
    $root: (i)=>getPublicInstance(i.root)
    ,
    $emit: (i)=>i.emit
    ,
    $options: (i)=>__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type
    ,
    $forceUpdate: (i)=>()=>queueJob(i.update)
    ,
    $nextTick: (i)=>nextTick.bind(i.proxy)
    ,
    $watch: (i)=>__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : _shared.NOOP
});
const PublicInstanceProxyHandlers = {
    get ({ _: instance  }, key) {
        const { ctx , setupState , data , props , accessCache , type , appContext  } = instance;
        // for internal formatters to know that this is a Vue instance
        if (key === '__isVue') return true;
        // prioritize <script setup> bindings during dev.
        // this allows even properties that start with _ or $ to be used - so that
        // it aligns with the production behavior where the render fn is inlined and
        // indeed has access to all declared variables.
        if (setupState !== _shared.EMPTY_OBJ && setupState.__isScriptSetup && _shared.hasOwn(setupState, key)) return setupState[key];
        // data / props / ctx
        // This getter gets called for every property access on the render context
        // during render and is a major hotspot. The most expensive part of this
        // is the multiple hasOwn() calls. It's much faster to do a simple property
        // access on a plain object, so we use an accessCache object (with null
        // prototype) to memoize what access type a key corresponds to.
        let normalizedProps;
        if (key[0] !== '$') {
            const n = accessCache[key];
            if (n !== undefined) switch(n){
                case 0 /* SETUP */ :
                    return setupState[key];
                case 1 /* DATA */ :
                    return data[key];
                case 3 /* CONTEXT */ :
                    return ctx[key];
                case 2 /* PROPS */ :
                    return props[key];
            }
            else if (setupState !== _shared.EMPTY_OBJ && _shared.hasOwn(setupState, key)) {
                accessCache[key] = 0 /* SETUP */ ;
                return setupState[key];
            } else if (data !== _shared.EMPTY_OBJ && _shared.hasOwn(data, key)) {
                accessCache[key] = 1 /* DATA */ ;
                return data[key];
            } else if (// only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && _shared.hasOwn(normalizedProps, key)) {
                accessCache[key] = 2 /* PROPS */ ;
                return props[key];
            } else if (ctx !== _shared.EMPTY_OBJ && _shared.hasOwn(ctx, key)) {
                accessCache[key] = 3 /* CONTEXT */ ;
                return ctx[key];
            } else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) accessCache[key] = 4 /* OTHER */ ;
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        // public $xxx properties
        if (publicGetter) {
            if (key === '$attrs') {
                _reactivity.track(instance, "get" /* GET */ , key);
                markAttrsAccessed();
            }
            return publicGetter(instance);
        } else if (// css module (injected by vue-loader)
        (cssModule = type.__cssModules) && (cssModule = cssModule[key])) return cssModule;
        else if (ctx !== _shared.EMPTY_OBJ && _shared.hasOwn(ctx, key)) {
            // user may set custom properties to `this` that start with `$`
            accessCache[key] = 3 /* CONTEXT */ ;
            return ctx[key];
        } else if (globalProperties = appContext.config.globalProperties, _shared.hasOwn(globalProperties, key)) return globalProperties[key];
        else if (currentRenderingInstance && (!_shared.isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
        // to infinite warning loop
        key.indexOf('__v') !== 0)) {
            if (data !== _shared.EMPTY_OBJ && (key[0] === '$' || key[0] === '_') && _shared.hasOwn(data, key)) warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` + `character ("$" or "_") and is not proxied on the render context.`);
            else if (instance === currentRenderingInstance) warn(`Property ${JSON.stringify(key)} was accessed during render ` + `but is not defined on instance.`);
        }
    },
    set ({ _: instance  }, key, value) {
        const { data , setupState , ctx  } = instance;
        if (setupState !== _shared.EMPTY_OBJ && _shared.hasOwn(setupState, key)) setupState[key] = value;
        else if (data !== _shared.EMPTY_OBJ && _shared.hasOwn(data, key)) data[key] = value;
        else if (_shared.hasOwn(instance.props, key)) {
            warn(`Attempting to mutate prop "${key}". Props are readonly.`, instance);
            return false;
        }
        if (key[0] === '$' && key.slice(1) in instance) {
            warn(`Attempting to mutate public property "${key}". ` + `Properties starting with $ are reserved and readonly.`, instance);
            return false;
        } else if (key in instance.appContext.config.globalProperties) Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            value
        });
        else ctx[key] = value;
        return true;
    },
    has ({ _: { data , setupState , accessCache , ctx , appContext , propsOptions  }  }, key) {
        let normalizedProps;
        return accessCache[key] !== undefined || data !== _shared.EMPTY_OBJ && _shared.hasOwn(data, key) || setupState !== _shared.EMPTY_OBJ && _shared.hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && _shared.hasOwn(normalizedProps, key) || _shared.hasOwn(ctx, key) || _shared.hasOwn(publicPropertiesMap, key) || _shared.hasOwn(appContext.config.globalProperties, key);
    }
};
PublicInstanceProxyHandlers.ownKeys = (target)=>{
    warn(`Avoid app logic that relies on enumerating keys on a component instance. ` + `The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
};
const RuntimeCompiledPublicInstanceProxyHandlers = _shared.extend({
}, PublicInstanceProxyHandlers, {
    get (target, key) {
        // fast path for unscopables when using `with` block
        if (key === Symbol.unscopables) return;
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has (_, key) {
        const has = key[0] !== '_' && !_shared.isGloballyWhitelisted(key);
        if (!has && PublicInstanceProxyHandlers.has(_, key)) warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        return has;
    }
});
// In dev mode, the proxy target exposes the same properties as seen on `this`
// for easier console inspection. In prod mode it will be an empty object so
// these properties definitions can be skipped.
function createRenderContext(instance) {
    const target = {
    };
    // expose internal instance for proxy handlers
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: ()=>instance
    });
    // expose public properties
    Object.keys(publicPropertiesMap).forEach((key)=>{
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: ()=>publicPropertiesMap[key](instance)
            ,
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: _shared.NOOP
        });
    });
    return target;
}
// dev only
function exposePropsOnRenderContext(instance) {
    const { ctx , propsOptions: [propsOptions]  } = instance;
    if (propsOptions) Object.keys(propsOptions).forEach((key)=>{
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>instance.props[key]
            ,
            set: _shared.NOOP
        });
    });
}
// dev only
function exposeSetupStateOnRenderContext(instance) {
    const { ctx , setupState  } = instance;
    Object.keys(_reactivity.toRaw(setupState)).forEach((key)=>{
        if (!setupState.__isScriptSetup && (key[0] === '$' || key[0] === '_')) {
            warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` + `which are reserved prefixes for Vue internals.`);
            return;
        }
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>setupState[key]
            ,
            set: _shared.NOOP
        });
    });
}
const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    // inherit parent app context - or - if root, adopt from root vnode
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        update: null,
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        effects: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resovled assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: _shared.EMPTY_OBJ,
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: _shared.EMPTY_OBJ,
        data: _shared.EMPTY_OBJ,
        props: _shared.EMPTY_OBJ,
        attrs: _shared.EMPTY_OBJ,
        slots: _shared.EMPTY_OBJ,
        refs: _shared.EMPTY_OBJ,
        setupState: _shared.EMPTY_OBJ,
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    instance.ctx = createRenderContext(instance);
    instance.root = parent ? parent.root : instance;
    instance.emit = emit.bind(null, instance);
    return instance;
}
let currentInstance = null;
const getCurrentInstance = ()=>currentInstance || currentRenderingInstance
;
const setCurrentInstance = (instance)=>{
    currentInstance = instance;
};
const isBuiltInTag = /*#__PURE__*/ _shared.makeMap('slot,component');
function validateComponentName(name, config) {
    const appIsNativeTag = config.isNativeTag || _shared.NO;
    if (isBuiltInTag(name) || appIsNativeTag(name)) warn('Do not use built-in or reserved HTML elements as component id: ' + name);
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ ;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
    isInSSRComponentSetup = isSSR;
    const { props , children  } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children);
    const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : undefined;
    isInSSRComponentSetup = false;
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    const Component = instance.type;
    if (Component.name) validateComponentName(Component.name, instance.appContext.config);
    if (Component.components) {
        const names = Object.keys(Component.components);
        for(let i = 0; i < names.length; i++)validateComponentName(names[i], instance.appContext.config);
    }
    if (Component.directives) {
        const names = Object.keys(Component.directives);
        for(let i = 0; i < names.length; i++)validateDirectiveName(names[i]);
    }
    if (Component.compilerOptions && isRuntimeOnly()) warn(`"compilerOptions" is only supported when using a build of Vue that ` + `includes the runtime compiler. Since you are using a runtime-only ` + `build, the options should be passed via your build tool config instead.`);
    // 0. create render proxy property access cache
    instance.accessCache = Object.create(null);
    // 1. create public instance / render proxy
    // also mark it raw so it's never observed
    instance.proxy = _reactivity.markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
    exposePropsOnRenderContext(instance);
    // 2. call setup()
    const { setup  } = Component;
    if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        currentInstance = instance;
        _reactivity.pauseTracking();
        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */ , [
            _reactivity.shallowReadonly(instance.props),
            setupContext
        ]);
        _reactivity.resetTracking();
        currentInstance = null;
        if (_shared.isPromise(setupResult)) {
            const unsetInstance = ()=>{
                currentInstance = null;
            };
            setupResult.then(unsetInstance, unsetInstance);
            if (isSSR) // return the promise so server-renderer can wait on it
            return setupResult.then((resolvedResult)=>{
                handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e)=>{
                handleError(e, instance, 0 /* SETUP_FUNCTION */ );
            });
            else // async setup returned Promise.
            // bail here and wait for re-entry.
            instance.asyncDep = setupResult;
        } else handleSetupResult(instance, setupResult, isSSR);
    } else finishComponentSetup(instance, isSSR);
}
function handleSetupResult(instance, setupResult, isSSR) {
    if (_shared.isFunction(setupResult)) instance.render = setupResult;
    else if (_shared.isObject(setupResult)) {
        if (isVNode(setupResult)) warn(`setup() should not return VNodes directly - ` + `return a render function instead.`);
        instance.devtoolsRawSetupState = setupResult;
        instance.setupState = _reactivity.proxyRefs(setupResult);
        exposeSetupStateOnRenderContext(instance);
    } else if (setupResult !== undefined) warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);
    finishComponentSetup(instance, isSSR);
}
let compile;
// dev only
const isRuntimeOnly = ()=>!compile
;
/**
 * For runtime-dom to register the compiler.
 * Note the exported method uses any to avoid d.ts relying on the compiler types.
 */ function registerRuntimeCompiler(_compile) {
    compile = _compile;
}
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    // template / render function normalization
    if (!instance.render) {
        // could be set from setup()
        if (compile && !Component.render) {
            const template = Component.template;
            if (template) {
                startMeasure(instance, `compile`);
                const { isCustomElement , compilerOptions  } = instance.appContext.config;
                const { delimiters , compilerOptions: componentCompilerOptions  } = Component;
                const finalCompilerOptions = _shared.extend(_shared.extend({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                endMeasure(instance, `compile`);
            }
        }
        instance.render = Component.render || _shared.NOOP;
        // for runtime-compiled render functions using `with` blocks, the render
        // proxy used needs a different `has` handler which is more performant and
        // also only allows a whitelist of globals to fallthrough.
        if (instance.render._rc) instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
    // support for 2.x options
    if (__VUE_OPTIONS_API__ && true) {
        currentInstance = instance;
        _reactivity.pauseTracking();
        applyOptions(instance);
        _reactivity.resetTracking();
        currentInstance = null;
    }
    // warn missing template/render
    // the runtime compilation of template in SSR is done by server-render
    if (!Component.render && instance.render === _shared.NOOP && !isSSR) {
        /* istanbul ignore if */ if (!compile && Component.template) warn(`Component provided template option but ` + `runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
        else warn(`Component is missing template or render function.`);
    }
}
const attrDevProxyHandlers = {
    get: (target, key)=>{
        markAttrsAccessed();
        return target[key];
    },
    set: ()=>{
        warn(`setupContext.attrs is readonly.`);
        return false;
    },
    deleteProperty: ()=>{
        warn(`setupContext.attrs is readonly.`);
        return false;
    }
};
function createSetupContext(instance) {
    const expose = (exposed)=>{
        if (instance.exposed) warn(`expose() should be called only once per setup().`);
        instance.exposed = exposed || {
        };
    };
    {
        let attrs;
        // We use getters in dev in case libs like test-utils overwrite instance
        // properties (overwrites should not be done in prod)
        return Object.freeze({
            get attrs () {
                return attrs || (attrs = new Proxy(instance.attrs, attrDevProxyHandlers));
            },
            get slots () {
                return _reactivity.shallowReadonly(instance.slots);
            },
            get emit () {
                return (event, ...args)=>instance.emit(event, ...args)
                ;
            },
            expose
        });
    }
}
function getExposeProxy(instance) {
    if (instance.exposed) return instance.exposeProxy || (instance.exposeProxy = new Proxy(_reactivity.proxyRefs(_reactivity.markRaw(instance.exposed)), {
        get (target, key) {
            if (key in target) return target[key];
            else if (key in publicPropertiesMap) return publicPropertiesMap[key](instance);
        }
    }));
}
// record effects created during a component's setup() so that they can be
// stopped when the component unmounts
function recordInstanceBoundEffect(effect, instance = currentInstance) {
    if (instance) (instance.effects || (instance.effects = [])).push(effect);
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str)=>str.replace(classifyRE, (c)=>c.toUpperCase()
    ).replace(/[-_]/g, '')
;
function getComponentName(Component) {
    return _shared.isFunction(Component) ? Component.displayName || Component.name : Component.name;
}
/* istanbul ignore next */ function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) name = match[1];
    }
    if (!name && instance && instance.parent) {
        // try to infer the name based on reverse resolution
        const inferFromRegistry = (registry)=>{
            for(const key in registry){
                if (registry[key] === Component) return key;
            }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return _shared.isFunction(value) && '__vccOpts' in value;
}
function computed(getterOrOptions) {
    const c = _reactivity.computed(getterOrOptions);
    recordInstanceBoundEffect(c.effect);
    return c;
}
Object.freeze({
});
Object.freeze([]);
const isFunction = (val)=>typeof val === 'function'
;
const isObject = (val)=>val !== null && typeof val === 'object'
;
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
// dev only
const warnRuntimeUsage = (method)=>warn(`${method}() is a compiler-hint helper that is only usable inside ` + `<script setup> of a single file component. Its arguments should be ` + `compiled away and passing it at runtime has no effect.`)
;
// implementation
function defineProps() {
    warnRuntimeUsage(`defineProps`);
    return null;
}
// implementation
function defineEmits() {
    warnRuntimeUsage(`defineEmits`);
    return null;
}
/**
 * @deprecated use `defineEmits` instead.
 */ const defineEmit = defineEmits;
/**
 * Vue `<script setup>` compiler macro for declaring a component's exposed
 * instance properties when it is accessed by a parent component via template
 * refs.
 *
 * `<script setup>` components are closed by default - i.e. varaibles inside
 * the `<script setup>` scope is not exposed to parent unless explicitly exposed
 * via `defineExpose`.
 *
 * This is only usable inside `<script setup>`, is compiled away in the
 * output and should **not** be actually called at runtime.
 */ function defineExpose(exposed) {
    warnRuntimeUsage(`defineExpose`);
}
/**
 * Vue `<script setup>` compiler macro for providing props default values when
 * using type-based `defineProps` decalration.
 *
 * Example usage:
 * ```ts
 * withDefaults(defineProps<{
 *   size?: number
 *   labels?: string[]
 * }>(), {
 *   size: 3,
 *   labels: () => ['default label']
 * })
 * ```
 *
 * This is only usable inside `<script setup>`, is compiled away in the output
 * and should **not** be actually called at runtime.
 */ function withDefaults(props, defaults) {
    warnRuntimeUsage(`withDefaults`);
    return null;
}
/**
 * @deprecated use `useSlots` and `useAttrs` instead.
 */ function useContext() {
    warn(`\`useContext()\` has been deprecated and will be removed in the ` + `next minor release. Use \`useSlots()\` and \`useAttrs()\` instead.`);
    return getContext();
}
function useSlots() {
    return getContext().slots;
}
function useAttrs() {
    return getContext().attrs;
}
function getContext() {
    const i = getCurrentInstance();
    if (!i) warn(`useContext() called without active instance.`);
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
/**
 * Runtime helper for merging default declarations. Imported by compiled code
 * only.
 * @internal
 */ function mergeDefaults(// the base props is compiler-generated and guaranteed to be in this shape.
props, defaults) {
    for(const key in defaults){
        const val = props[key];
        if (val) val.default = defaults[key];
        else if (val === null) props[key] = {
            default: defaults[key]
        };
        else warn(`props default key "${key}" has no corresponding declaration.`);
    }
    return props;
}
/**
 * `<script setup>` helper for persisting the current instance context over
 * async/await flows.
 *
 * `@vue/compiler-sfc` converts the following:
 *
 * ```ts
 * const x = await foo()
 * ```
 *
 * into:
 *
 * ```ts
 * let __temp, __restore
 * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)
 * ```
 * @internal
 */ function withAsyncContext(getAwaitable) {
    const ctx = getCurrentInstance();
    let awaitable = getAwaitable();
    setCurrentInstance(null);
    if (isPromise(awaitable)) awaitable = awaitable.catch((e)=>{
        setCurrentInstance(ctx);
        throw e;
    });
    return [
        awaitable,
        ()=>setCurrentInstance(ctx)
    ];
}
// Actual implementation
function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if (_shared.isObject(propsOrChildren) && !_shared.isArray(propsOrChildren)) {
            // single vnode without props
            if (isVNode(propsOrChildren)) return createVNode(type, null, [
                propsOrChildren
            ]);
            // props without children
            return createVNode(type, propsOrChildren);
        } else // omit props
        return createVNode(type, null, propsOrChildren);
    } else {
        if (l > 3) children = Array.prototype.slice.call(arguments, 2);
        else if (l === 3 && isVNode(children)) children = [
            children
        ];
        return createVNode(type, propsOrChildren, children);
    }
}
const ssrContextKey = Symbol(`ssrContext`);
const useSSRContext = ()=>{
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) warn(`Server rendering context not provided. Make sure to only call ` + `useSSRContext() conditionally in the server build.`);
        return ctx;
    }
};
function initCustomFormatter() {
    /* eslint-disable no-restricted-globals */ if (typeof window === 'undefined') return;
    const vueStyle = {
        style: 'color:#3ba776'
    };
    const numberStyle = {
        style: 'color:#0b1bc9'
    };
    const stringStyle = {
        style: 'color:#b62e24'
    };
    const keywordStyle = {
        style: 'color:#9d288c'
    };
    // custom formatter for Chrome
    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html
    const formatter = {
        header (obj) {
            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup
            if (!_shared.isObject(obj)) return null;
            if (obj.__isVue) return [
                'div',
                vueStyle,
                `VueInstance`
            ];
            else if (_reactivity.isRef(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    genRefFlag(obj)
                ],
                '<',
                formatValue(obj.value),
                `>`
            ];
            else if (_reactivity.isReactive(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    'Reactive'
                ],
                '<',
                formatValue(obj),
                `>${_reactivity.isReadonly(obj) ? ` (readonly)` : ``}`
            ];
            else if (_reactivity.isReadonly(obj)) return [
                'div',
                {
                },
                [
                    'span',
                    vueStyle,
                    'Readonly'
                ],
                '<',
                formatValue(obj),
                '>'
            ];
            return null;
        },
        hasBody (obj) {
            return obj && obj.__isVue;
        },
        body (obj) {
            if (obj && obj.__isVue) return [
                'div',
                {
                },
                ...formatInstance(obj.$)
            ];
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) blocks.push(createInstanceBlock('props', _reactivity.toRaw(instance.props)));
        if (instance.setupState !== _shared.EMPTY_OBJ) blocks.push(createInstanceBlock('setup', instance.setupState));
        if (instance.data !== _shared.EMPTY_OBJ) blocks.push(createInstanceBlock('data', _reactivity.toRaw(instance.data)));
        const computed1 = extractKeys(instance, 'computed');
        if (computed1) blocks.push(createInstanceBlock('computed', computed1));
        const injected = extractKeys(instance, 'inject');
        if (injected) blocks.push(createInstanceBlock('injected', injected));
        blocks.push([
            'div',
            {
            },
            [
                'span',
                {
                    style: keywordStyle.style + ';opacity:0.66'
                },
                '$ (internal): '
            ],
            [
                'object',
                {
                    object: instance
                }
            ]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = _shared.extend({
        }, target);
        if (!Object.keys(target).length) return [
            'span',
            {
            }
        ];
        return [
            'div',
            {
                style: 'line-height:1.25em;margin-bottom:0.6em'
            },
            [
                'div',
                {
                    style: 'color:#476582'
                },
                type
            ],
            [
                'div',
                {
                    style: 'padding-left:1.25em'
                },
                ...Object.keys(target).map((key)=>{
                    return [
                        'div',
                        {
                        },
                        [
                            'span',
                            keywordStyle,
                            key + ': '
                        ],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v, asRaw = true) {
        if (typeof v === 'number') return [
            'span',
            numberStyle,
            v
        ];
        else if (typeof v === 'string') return [
            'span',
            stringStyle,
            JSON.stringify(v)
        ];
        else if (typeof v === 'boolean') return [
            'span',
            keywordStyle,
            v
        ];
        else if (_shared.isObject(v)) return [
            'object',
            {
                object: asRaw ? _reactivity.toRaw(v) : v
            }
        ];
        else return [
            'span',
            stringStyle,
            String(v)
        ];
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if (_shared.isFunction(Comp)) return;
        const extracted = {
        };
        for(const key in instance.ctx)if (isKeyOfType(Comp, key, type)) extracted[key] = instance.ctx[key];
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if (_shared.isArray(opts) && opts.includes(key) || _shared.isObject(opts) && key in opts) return true;
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) return true;
        if (Comp.mixins && Comp.mixins.some((m)=>isKeyOfType(m, key, type)
        )) return true;
    }
    function genRefFlag(v) {
        if (v._shallow) return `ShallowRef`;
        if (v.effect) return `ComputedRef`;
        return `Ref`;
    }
    if (window.devtoolsFormatters) window.devtoolsFormatters.push(formatter);
    else window.devtoolsFormatters = [
        formatter
    ];
}
// Core API ------------------------------------------------------------------
const version = "3.1.5";
/**
 * SSR utils for \@vue/server-renderer. Only exposed in cjs builds.
 * @internal
 */ const ssrUtils = null;
/**
 * @internal only exposed in compat builds
 */ const resolveFilter = null;
/**
 * @internal only exposed in compat builds.
 */ const compatUtils = null;

},{"@vue/reactivity":"8HAvF","@vue/shared":"8bcX0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8HAvF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ITERATE_KEY", ()=>ITERATE_KEY
);
parcelHelpers.export(exports, "computed", ()=>computed
);
parcelHelpers.export(exports, "customRef", ()=>customRef
);
parcelHelpers.export(exports, "effect", ()=>effect
);
parcelHelpers.export(exports, "enableTracking", ()=>enableTracking
);
parcelHelpers.export(exports, "isProxy", ()=>isProxy
);
parcelHelpers.export(exports, "isReactive", ()=>isReactive
);
parcelHelpers.export(exports, "isReadonly", ()=>isReadonly
);
parcelHelpers.export(exports, "isRef", ()=>isRef
);
parcelHelpers.export(exports, "markRaw", ()=>markRaw
);
parcelHelpers.export(exports, "pauseTracking", ()=>pauseTracking
);
parcelHelpers.export(exports, "proxyRefs", ()=>proxyRefs
);
parcelHelpers.export(exports, "reactive", ()=>reactive
);
parcelHelpers.export(exports, "readonly", ()=>readonly
);
parcelHelpers.export(exports, "ref", ()=>ref
);
parcelHelpers.export(exports, "resetTracking", ()=>resetTracking
);
parcelHelpers.export(exports, "shallowReactive", ()=>shallowReactive
);
parcelHelpers.export(exports, "shallowReadonly", ()=>shallowReadonly
);
parcelHelpers.export(exports, "shallowRef", ()=>shallowRef
);
parcelHelpers.export(exports, "stop", ()=>stop
);
parcelHelpers.export(exports, "toRaw", ()=>toRaw
);
parcelHelpers.export(exports, "toRef", ()=>toRef
);
parcelHelpers.export(exports, "toRefs", ()=>toRefs
);
parcelHelpers.export(exports, "track", ()=>track
);
parcelHelpers.export(exports, "trigger", ()=>trigger
);
parcelHelpers.export(exports, "triggerRef", ()=>triggerRef
);
parcelHelpers.export(exports, "unref", ()=>unref
);
var _shared = require("@vue/shared");
const targetMap = new WeakMap();
const effectStack = [];
let activeEffect;
const ITERATE_KEY = Symbol('iterate');
const MAP_KEY_ITERATE_KEY = Symbol('Map key iterate');
function isEffect(fn) {
    return fn && fn._isEffect === true;
}
function effect(fn, options = _shared.EMPTY_OBJ) {
    if (isEffect(fn)) fn = fn.raw;
    const effect1 = createReactiveEffect(fn, options);
    if (!options.lazy) effect1();
    return effect1;
}
function stop(effect1) {
    if (effect1.active) {
        cleanup(effect1);
        if (effect1.options.onStop) effect1.options.onStop();
        effect1.active = false;
    }
}
let uid = 0;
function createReactiveEffect(fn, options) {
    const effect1 = function reactiveEffect() {
        if (!effect1.active) return fn();
        if (!effectStack.includes(effect1)) {
            cleanup(effect1);
            try {
                enableTracking();
                effectStack.push(effect1);
                activeEffect = effect1;
                return fn();
            } finally{
                effectStack.pop();
                resetTracking();
                activeEffect = effectStack[effectStack.length - 1];
            }
        }
    };
    effect1.id = uid++;
    effect1.allowRecurse = !!options.allowRecurse;
    effect1._isEffect = true;
    effect1.active = true;
    effect1.raw = fn;
    effect1.deps = [];
    effect1.options = options;
    return effect1;
}
function cleanup(effect1) {
    const { deps  } = effect1;
    if (deps.length) {
        for(let i = 0; i < deps.length; i++)deps[i].delete(effect1);
        deps.length = 0;
    }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
}
function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === undefined ? true : last;
}
function track(target, type, key) {
    if (!shouldTrack || activeEffect === undefined) return;
    let depsMap = targetMap.get(target);
    if (!depsMap) targetMap.set(target, depsMap = new Map());
    let dep = depsMap.get(key);
    if (!dep) depsMap.set(key, dep = new Set());
    if (!dep.has(activeEffect)) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (activeEffect.options.onTrack) activeEffect.options.onTrack({
            effect: activeEffect,
            target,
            type,
            key
        });
    }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) // never been tracked
    return;
    const effects = new Set();
    const add = (effectsToAdd)=>{
        if (effectsToAdd) effectsToAdd.forEach((effect1)=>{
            if (effect1 !== activeEffect || effect1.allowRecurse) effects.add(effect1);
        });
    };
    if (type === "clear" /* CLEAR */ ) // collection being cleared
    // trigger all effects for target
    depsMap.forEach(add);
    else if (key === 'length' && _shared.isArray(target)) depsMap.forEach((dep, key1)=>{
        if (key1 === 'length' || key1 >= newValue) add(dep);
    });
    else {
        // schedule runs for SET | ADD | DELETE
        if (key !== void 0) add(depsMap.get(key));
        // also run for iteration key on ADD | DELETE | Map.SET
        switch(type){
            case "add" /* ADD */ :
                if (!_shared.isArray(target)) {
                    add(depsMap.get(ITERATE_KEY));
                    if (_shared.isMap(target)) add(depsMap.get(MAP_KEY_ITERATE_KEY));
                } else if (_shared.isIntegerKey(key)) // new index added to array -> length changes
                add(depsMap.get('length'));
                break;
            case "delete" /* DELETE */ :
                if (!_shared.isArray(target)) {
                    add(depsMap.get(ITERATE_KEY));
                    if (_shared.isMap(target)) add(depsMap.get(MAP_KEY_ITERATE_KEY));
                }
                break;
            case "set" /* SET */ :
                if (_shared.isMap(target)) add(depsMap.get(ITERATE_KEY));
                break;
        }
    }
    const run = (effect1)=>{
        if (effect1.options.onTrigger) effect1.options.onTrigger({
            effect: effect1,
            target,
            key,
            type,
            newValue,
            oldValue,
            oldTarget
        });
        if (effect1.options.scheduler) effect1.options.scheduler(effect1);
        else effect1();
    };
    effects.forEach(run);
}
const isNonTrackableKeys = /*#__PURE__*/ _shared.makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key)=>Symbol[key]
).filter(_shared.isSymbol));
const get = /*#__PURE__*/ createGetter();
const shallowGet = /*#__PURE__*/ createGetter(false, true);
const readonlyGet = /*#__PURE__*/ createGetter(true);
const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);
const arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();
function createArrayInstrumentations() {
    const instrumentations = {
    };
    [
        'includes',
        'indexOf',
        'lastIndexOf'
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            const arr = toRaw(this);
            for(let i = 0, l = this.length; i < l; i++)track(arr, "get" /* GET */ , i + '');
            // we run the method using the original args first (which may be reactive)
            const res = arr[key](...args);
            if (res === -1 || res === false) // if that didn't work, run it again using raw values.
            return arr[key](...args.map(toRaw));
            else return res;
        };
    });
    [
        'push',
        'pop',
        'shift',
        'unshift',
        'splice'
    ].forEach((key)=>{
        instrumentations[key] = function(...args) {
            pauseTracking();
            const res = toRaw(this)[key].apply(this, args);
            resetTracking();
            return res;
        };
    });
    return instrumentations;
}
function createGetter(isReadonly = false, shallow = false) {
    return function get1(target, key, receiver) {
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly;
        else if (key === "__v_raw" /* RAW */  && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) return target;
        const targetIsArray = _shared.isArray(target);
        if (!isReadonly && targetIsArray && _shared.hasOwn(arrayInstrumentations, key)) return Reflect.get(arrayInstrumentations, key, receiver);
        const res = Reflect.get(target, key, receiver);
        if (_shared.isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) return res;
        if (!isReadonly) track(target, "get" /* GET */ , key);
        if (shallow) return res;
        if (isRef(res)) {
            // ref unwrapping - does not apply for Array + integer key.
            const shouldUnwrap = !targetIsArray || !_shared.isIntegerKey(key);
            return shouldUnwrap ? res.value : res;
        }
        if (_shared.isObject(res)) // Convert returned value into a proxy as well. we do the isObject check
        // here to avoid invalid value warning. Also need to lazy access readonly
        // and reactive here to avoid circular dependency.
        return isReadonly ? readonly(res) : reactive(res);
        return res;
    };
}
const set = /*#__PURE__*/ createSetter();
const shallowSet = /*#__PURE__*/ createSetter(true);
function createSetter(shallow = false) {
    return function set1(target, key, value, receiver) {
        let oldValue = target[key];
        if (!shallow) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
            if (!_shared.isArray(target) && isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
                return true;
            }
        }
        const hadKey = _shared.isArray(target) && _shared.isIntegerKey(key) ? Number(key) < target.length : _shared.hasOwn(target, key);
        const result = Reflect.set(target, key, value, receiver);
        // don't trigger if target is something up in the prototype chain of original
        if (target === toRaw(receiver)) {
            if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
            else if (_shared.hasChanged(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
        }
        return result;
    };
}
function deleteProperty(target, key) {
    const hadKey = _shared.hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function has(target, key) {
    const result = Reflect.has(target, key);
    if (!_shared.isSymbol(key) || !builtInSymbols.has(key)) track(target, "has" /* HAS */ , key);
    return result;
}
function ownKeys(target) {
    track(target, "iterate" /* ITERATE */ , _shared.isArray(target) ? 'length' : ITERATE_KEY);
    return Reflect.ownKeys(target);
}
const mutableHandlers = {
    get,
    set,
    deleteProperty,
    has,
    ownKeys
};
const readonlyHandlers = {
    get: readonlyGet,
    set (target, key) {
        console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    },
    deleteProperty (target, key) {
        console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    }
};
const shallowReactiveHandlers = /*#__PURE__*/ _shared.extend({
}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
});
// Props handlers are special in the sense that it should not unwrap top-level
// refs (in order to allow refs to be explicitly passed down), but should
// retain the reactivity of the normal readonly object.
const shallowReadonlyHandlers = /*#__PURE__*/ _shared.extend({
}, readonlyHandlers, {
    get: shallowReadonlyGet
});
const toReactive = (value)=>_shared.isObject(value) ? reactive(value) : value
;
const toReadonly = (value)=>_shared.isObject(value) ? readonly(value) : value
;
const toShallow = (value)=>value
;
const getProto = (v)=>Reflect.getPrototypeOf(v)
;
function get$1(target, key, isReadonly = false, isShallow = false) {
    // #1772: readonly(reactive(Map)) should return readonly + reactive version
    // of the value
    target = target["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly && track(rawTarget, "get" /* GET */ , key);
    !isReadonly && track(rawTarget, "get" /* GET */ , rawKey);
    const { has: has1  } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has1.call(rawTarget, key)) return wrap(target.get(key));
    else if (has1.call(rawTarget, rawKey)) return wrap(target.get(rawKey));
    else if (target !== rawTarget) // #3602 readonly(reactive(Map))
    // ensure that the nested reactive `Map` can do tracking for itself
    target.get(key);
}
function has$1(key, isReadonly = false) {
    const target = this["__v_raw" /* RAW */ ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) !isReadonly && track(rawTarget, "has" /* HAS */ , key);
    !isReadonly && track(rawTarget, "has" /* HAS */ , rawKey);
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly = false) {
    target = target["__v_raw" /* RAW */ ];
    !isReadonly && track(toRaw(target), "iterate" /* ITERATE */ , ITERATE_KEY);
    return Reflect.get(target, 'size', target);
}
function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
        target.add(value);
        trigger(target, "add" /* ADD */ , value, value);
    }
    return this;
}
function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has: has1 , get: get1  } = getProto(target);
    let hadKey = has1.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has1.call(target, key);
    } else checkIdentityKeys(target, has1, key);
    const oldValue = get1.call(target, key);
    target.set(key, value);
    if (!hadKey) trigger(target, "add" /* ADD */ , key, value);
    else if (_shared.hasChanged(value, oldValue)) trigger(target, "set" /* SET */ , key, value, oldValue);
    return this;
}
function deleteEntry(key) {
    const target = toRaw(this);
    const { has: has1 , get: get1  } = getProto(target);
    let hadKey = has1.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has1.call(target, key);
    } else checkIdentityKeys(target, has1, key);
    const oldValue = get1 ? get1.call(target, key) : undefined;
    // forward the operation before queueing reactions
    const result = target.delete(key);
    if (hadKey) trigger(target, "delete" /* DELETE */ , key, undefined, oldValue);
    return result;
}
function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = _shared.isMap(target) ? new Map(target) : new Set(target);
    // forward the operation before queueing reactions
    const result = target.clear();
    if (hadItems) trigger(target, "clear" /* CLEAR */ , undefined, undefined, oldTarget);
    return result;
}
function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate" /* ITERATE */ , ITERATE_KEY);
        return target.forEach((value, key)=>{
            // important: make sure the callback is
            // 1. invoked with the reactive map as `this` and 3rd arg
            // 2. the value received should be a corresponding reactive/readonly.
            return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
    };
}
function createIterableMethod(method, isReadonly, isShallow) {
    return function(...args) {
        const target = this["__v_raw" /* RAW */ ];
        const rawTarget = toRaw(target);
        const targetIsMap = _shared.isMap(rawTarget);
        const isPair = method === 'entries' || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === 'keys' && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate" /* ITERATE */ , isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        // return a wrapped iterator which returns observed versions of the
        // values emitted from the real iterator
        return {
            // iterator protocol
            next () {
                const { value , done  } = innerIterator.next();
                return done ? {
                    value,
                    done
                } : {
                    value: isPair ? [
                        wrap(value[0]),
                        wrap(value[1])
                    ] : wrap(value),
                    done
                };
            },
            // iterable protocol
            [Symbol.iterator] () {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function(...args) {
        {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            console.warn(`${_shared.capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" /* DELETE */  ? false : this;
    };
}
function createInstrumentations() {
    const mutableInstrumentations = {
        get (key) {
            return get$1(this, key);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
    };
    const shallowInstrumentations = {
        get (key) {
            return get$1(this, key, false, true);
        },
        get size () {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
    };
    const readonlyInstrumentations = {
        get (key) {
            return get$1(this, key, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations = {
        get (key) {
            return get$1(this, key, true, true);
        },
        get size () {
            return size(this, true);
        },
        has (key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */ ),
        set: createReadonlyMethod("set" /* SET */ ),
        delete: createReadonlyMethod("delete" /* DELETE */ ),
        clear: createReadonlyMethod("clear" /* CLEAR */ ),
        forEach: createForEach(true, true)
    };
    const iteratorMethods = [
        'keys',
        'values',
        'entries',
        Symbol.iterator
    ];
    iteratorMethods.forEach((method)=>{
        mutableInstrumentations[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations[method] = createIterableMethod(method, true, false);
        shallowInstrumentations[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
    });
    return [
        mutableInstrumentations,
        readonlyInstrumentations,
        shallowInstrumentations,
        shallowReadonlyInstrumentations
    ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();
function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
    return (target, key, receiver)=>{
        if (key === "__v_isReactive" /* IS_REACTIVE */ ) return !isReadonly;
        else if (key === "__v_isReadonly" /* IS_READONLY */ ) return isReadonly;
        else if (key === "__v_raw" /* RAW */ ) return target;
        return Reflect.get(_shared.hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has1, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has1.call(target, rawKey)) {
        const type = _shared.toRawType(target);
        console.warn(`Reactive ${type} contains both the raw and reactive ` + `versions of the same object${type === `Map` ? ` as keys` : ``}, ` + `which can lead to inconsistencies. ` + `Avoid differentiating between the raw and reactive versions ` + `of an object and only use the reactive version if possible.`);
    }
}
const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
    switch(rawType){
        case 'Object':
        case 'Array':
            return 1 /* COMMON */ ;
        case 'Map':
        case 'Set':
        case 'WeakMap':
        case 'WeakSet':
            return 2 /* COLLECTION */ ;
        default:
            return 0 /* INVALID */ ;
    }
}
function getTargetType(value) {
    return value["__v_skip" /* SKIP */ ] || !Object.isExtensible(value) ? 0 /* INVALID */  : targetTypeMap(_shared.toRawType(value));
}
function reactive(target) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (target && target["__v_isReadonly" /* IS_READONLY */ ]) return target;
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */ function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
/**
 * Creates a readonly copy of the original object. Note the returned copy is not
 * made reactive, but `readonly` can be called on an already reactive object.
 */ function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
/**
 * Returns a reactive-copy of the original object, where only the root level
 * properties are readonly, and does NOT unwrap refs nor recursively convert
 * returned properties.
 * This is used for creating the props proxy object for stateful components.
 */ function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!_shared.isObject(target)) {
        console.warn(`value cannot be made reactive: ${String(target)}`);
        return target;
    }
    // target is already a Proxy, return it.
    // exception: calling readonly() on a reactive object
    if (target["__v_raw" /* RAW */ ] && !(isReadonly && target["__v_isReactive" /* IS_REACTIVE */ ])) return target;
    // target already has corresponding Proxy
    const existingProxy = proxyMap.get(target);
    if (existingProxy) return existingProxy;
    // only a whitelist of value types can be observed.
    const targetType = getTargetType(target);
    if (targetType === 0 /* INVALID */ ) return target;
    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */  ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly(value)) return isReactive(value["__v_raw" /* RAW */ ]);
    return !!(value && value["__v_isReactive" /* IS_REACTIVE */ ]);
}
function isReadonly(value) {
    return !!(value && value["__v_isReadonly" /* IS_READONLY */ ]);
}
function isProxy(value) {
    return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
    return observed && toRaw(observed["__v_raw" /* RAW */ ]) || observed;
}
function markRaw(value) {
    _shared.def(value, "__v_skip" /* SKIP */ , true);
    return value;
}
const convert = (val)=>_shared.isObject(val) ? reactive(val) : val
;
function isRef(r) {
    return Boolean(r && r.__v_isRef === true);
}
function ref(value) {
    return createRef(value);
}
function shallowRef(value) {
    return createRef(value, true);
}
class RefImpl {
    constructor(value, _shallow = false){
        this._shallow = _shallow;
        this.__v_isRef = true;
        this._rawValue = _shallow ? value : toRaw(value);
        this._value = _shallow ? value : convert(value);
    }
    get value() {
        track(toRaw(this), "get" /* GET */ , 'value');
        return this._value;
    }
    set value(newVal) {
        newVal = this._shallow ? newVal : toRaw(newVal);
        if (_shared.hasChanged(newVal, this._rawValue)) {
            this._rawValue = newVal;
            this._value = this._shallow ? newVal : convert(newVal);
            trigger(toRaw(this), "set" /* SET */ , 'value', newVal);
        }
    }
}
function createRef(rawValue, shallow = false) {
    if (isRef(rawValue)) return rawValue;
    return new RefImpl(rawValue, shallow);
}
function triggerRef(ref1) {
    trigger(toRaw(ref1), "set" /* SET */ , 'value', ref1.value);
}
function unref(ref1) {
    return isRef(ref1) ? ref1.value : ref1;
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver)=>unref(Reflect.get(target, key, receiver))
    ,
    set: (target, key, value1, receiver)=>{
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value1)) {
            oldValue.value = value1;
            return true;
        } else return Reflect.set(target, key, value1, receiver);
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory){
        this.__v_isRef = true;
        const { get: get1 , set: set1  } = factory(()=>track(this, "get" /* GET */ , 'value')
        , ()=>trigger(this, "set" /* SET */ , 'value')
        );
        this._get = get1;
        this._set = set1;
    }
    get value() {
        return this._get();
    }
    set value(newVal) {
        this._set(newVal);
    }
}
function customRef(factory1) {
    return new CustomRefImpl(factory1);
}
function toRefs(object) {
    if (!isProxy(object)) console.warn(`toRefs() expects a reactive object but received a plain one.`);
    const ret = _shared.isArray(object) ? new Array(object.length) : {
    };
    for(const key in object)ret[key] = toRef(object, key);
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key){
        this._object = _object;
        this._key = _key;
        this.__v_isRef = true;
    }
    get value() {
        return this._object[this._key];
    }
    set value(newVal) {
        this._object[this._key] = newVal;
    }
}
function toRef(object, key) {
    return isRef(object[key]) ? object[key] : new ObjectRefImpl(object, key);
}
class ComputedRefImpl {
    constructor(getter, _setter, isReadonly1){
        this._setter = _setter;
        this._dirty = true;
        this.__v_isRef = true;
        this.effect = effect(getter, {
            lazy: true,
            scheduler: ()=>{
                if (!this._dirty) {
                    this._dirty = true;
                    trigger(toRaw(this), "set" /* SET */ , 'value');
                }
            }
        });
        this["__v_isReadonly" /* IS_READONLY */ ] = isReadonly1;
    }
    get value() {
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        const self = toRaw(this);
        if (self._dirty) {
            self._value = this.effect();
            self._dirty = false;
        }
        track(self, "get" /* GET */ , 'value');
        return self._value;
    }
    set value(newValue) {
        this._setter(newValue);
    }
}
function computed(getterOrOptions) {
    let getter1;
    let setter;
    if (_shared.isFunction(getterOrOptions)) {
        getter1 = getterOrOptions;
        setter = ()=>{
            console.warn('Write operation failed: computed value is readonly');
        };
    } else {
        getter1 = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    return new ComputedRefImpl(getter1, setter, _shared.isFunction(getterOrOptions) || !getterOrOptions.set);
}

},{"@vue/shared":"8bcX0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8bcX0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR
);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ
);
parcelHelpers.export(exports, "NO", ()=>NO
);
parcelHelpers.export(exports, "NOOP", ()=>NOOP
);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames
);
parcelHelpers.export(exports, "babelParserDefaultPlugins", ()=>babelParserDefaultPlugins
);
parcelHelpers.export(exports, "camelize", ()=>camelize
);
parcelHelpers.export(exports, "capitalize", ()=>capitalize
);
parcelHelpers.export(exports, "def", ()=>def
);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml
);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment
);
parcelHelpers.export(exports, "extend", ()=>extend
);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame
);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis
);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged
);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn
);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate
);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns
);
parcelHelpers.export(exports, "isArray", ()=>isArray
);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr
);
parcelHelpers.export(exports, "isDate", ()=>isDate
);
parcelHelpers.export(exports, "isFunction", ()=>isFunction
);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted
);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag
);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey
);
parcelHelpers.export(exports, "isKnownAttr", ()=>isKnownAttr
);
parcelHelpers.export(exports, "isMap", ()=>isMap
);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener
);
parcelHelpers.export(exports, "isNoUnitNumericStyleProp", ()=>isNoUnitNumericStyleProp
);
parcelHelpers.export(exports, "isObject", ()=>isObject
);
parcelHelpers.export(exports, "isOn", ()=>isOn
);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject
);
parcelHelpers.export(exports, "isPromise", ()=>isPromise
);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp
);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName
);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag
);
parcelHelpers.export(exports, "isSet", ()=>isSet
);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr
);
parcelHelpers.export(exports, "isString", ()=>isString
);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol
);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag
);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual
);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf
);
parcelHelpers.export(exports, "makeMap", ()=>makeMap
);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass
);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle
);
parcelHelpers.export(exports, "objectToString", ()=>objectToString
);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle
);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap
);
parcelHelpers.export(exports, "remove", ()=>remove
);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText
);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle
);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString
);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey
);
parcelHelpers.export(exports, "toNumber", ()=>toNumber
);
parcelHelpers.export(exports, "toRawType", ()=>toRawType
);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString
);
var global = arguments[3];
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */ function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(',');
    for(let i = 0; i < list.length; i++)map[list[i]] = true;
    return expectsLowerCase ? (val)=>!!map[val.toLowerCase()]
     : (val)=>!!map[val]
    ;
}
/**
 * dev only flag -> name mapping
 */ const PatchFlagNames = {
    [1 /* TEXT */ ]: `TEXT`,
    [2 /* CLASS */ ]: `CLASS`,
    [4 /* STYLE */ ]: `STYLE`,
    [8 /* PROPS */ ]: `PROPS`,
    [16 /* FULL_PROPS */ ]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */ ]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */ ]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */ ]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */ ]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */ ]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */ ]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */ ]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */ ]: `HOISTED`,
    [-2 /* BAIL */ ]: `BAIL`
};
/**
 * Dev only
 */ const slotFlagsText = {
    [1 /* STABLE */ ]: 'STABLE',
    [2 /* DYNAMIC */ ]: 'DYNAMIC',
    [3 /* FORWARDED */ ]: 'FORWARDED'
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1
    );
    lines = lines.filter((_, idx)=>idx % 2 === 0
    );
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + '^'.repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join('\n');
}
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */ const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */ const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {
};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
};
/**
 * CSS properties that accept plain numbers
 */ const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG
`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */ const isKnownAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {
        };
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {
    };
    cssText.split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = '';
    if (!styles) return ret;
    for(const key in styles){
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) || typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey)) // only render valid values
        ret += `${normalizedKey}:${value};`;
    }
    return ret;
}
function normalizeClass(value) {
    let res = '';
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + ' ';
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + ' ';
    }
    return res.trim();
}
// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';
const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = '' + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = '';
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = '&quot;';
                break;
            case 38:
                escaped = '&amp;';
                break;
            case 39:
                escaped = '&#39;';
                break;
            case 60:
                escaped = '&lt;';
                break;
            case 62:
                escaped = '&gt;';
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.substring(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, '');
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */ if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val)
    );
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */ const toDisplayString = (val)=>{
    return val == null ? '' : isObject(val) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val)=>{
    if (isMap(val)) return {
        [`Map(${val.size})`]: [
            ...val.entries()
        ].reduce((entries, [key, val1])=>{
            entries[`${key} =>`] = val1;
            return entries;
        }, {
        })
    };
    else if (isSet(val)) return {
        [`Set(${val.size})`]: [
            ...val.values()
        ]
    };
    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) return String(val);
    return val;
};
/**
 * List of @babel/parser plugins that are used for template expression
 * transforms and SFC script transforms. By default we enable proposals slated
 * for ES2020. This will need to be updated as the spec moves forward.
 * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
 */ const babelParserDefaultPlugins = [
    'bigInt',
    'optionalChaining',
    'nullishCoalescingOperator'
];
const EMPTY_OBJ = Object.freeze({
});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{
};
/**
 * Always return false.
 */ const NO = ()=>false
;
const onRE = /^on[^a-z]/;
const isOn = (key)=>onRE.test(key)
;
const isModelListener = (key)=>key.startsWith('onUpdate:')
;
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key)
;
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === '[object Map]'
;
const isSet = (val)=>toTypeString(val) === '[object Set]'
;
const isDate = (val)=>val instanceof Date
;
const isFunction = (val)=>typeof val === 'function'
;
const isString = (val)=>typeof val === 'string'
;
const isSymbol = (val)=>typeof val === 'symbol'
;
const isObject = (val)=>val !== null && typeof val === 'object'
;
const isPromise = (val)=>{
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value)
;
const toRawType = (value)=>{
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === '[object Object]'
;
const isIntegerKey = (key)=>isString(key) && key !== 'NaN' && key[0] !== '-' && '' + parseInt(key, 10) === key
;
const isReservedProp = /*#__PURE__*/ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn)=>{
    const cache = Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */ const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : ''
    );
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */ const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, '-$1').toLowerCase()
);
/**
 * @private
 */ const capitalize = cacheStringFunction((str)=>str.charAt(0).toUpperCase() + str.slice(1)
);
/**
 * @private
 */ const toHandlerKey = cacheStringFunction((str)=>str ? `on${capitalize(str)}` : ``
);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue)=>value !== oldValue && (value === value || oldValue === oldValue)
;
const invokeArrayFns = (fns, arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](arg);
};
const def = (obj, key, value)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"JacNc":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"8Y8LY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NavigationFailureType", ()=>NavigationFailureType
);
parcelHelpers.export(exports, "RouterLink", ()=>RouterLink
);
parcelHelpers.export(exports, "RouterView", ()=>RouterView
);
parcelHelpers.export(exports, "START_LOCATION", ()=>START_LOCATION_NORMALIZED
);
parcelHelpers.export(exports, "createMemoryHistory", ()=>createMemoryHistory
);
parcelHelpers.export(exports, "createRouter", ()=>createRouter
);
parcelHelpers.export(exports, "createRouterMatcher", ()=>createRouterMatcher
);
parcelHelpers.export(exports, "createWebHashHistory", ()=>createWebHashHistory
);
parcelHelpers.export(exports, "createWebHistory", ()=>createWebHistory
);
parcelHelpers.export(exports, "isNavigationFailure", ()=>isNavigationFailure
);
parcelHelpers.export(exports, "matchedRouteKey", ()=>matchedRouteKey
);
parcelHelpers.export(exports, "onBeforeRouteLeave", ()=>onBeforeRouteLeave
);
parcelHelpers.export(exports, "onBeforeRouteUpdate", ()=>onBeforeRouteUpdate
);
parcelHelpers.export(exports, "parseQuery", ()=>parseQuery
);
parcelHelpers.export(exports, "routeLocationKey", ()=>routeLocationKey
);
parcelHelpers.export(exports, "routerKey", ()=>routerKey
);
parcelHelpers.export(exports, "routerViewLocationKey", ()=>routerViewLocationKey
);
parcelHelpers.export(exports, "stringifyQuery", ()=>stringifyQuery
);
parcelHelpers.export(exports, "useLink", ()=>useLink
);
parcelHelpers.export(exports, "useRoute", ()=>useRoute
);
parcelHelpers.export(exports, "useRouter", ()=>useRouter
);
parcelHelpers.export(exports, "viewDepthKey", ()=>viewDepthKey
);
/*!
  * vue-router v4.0.11
  * (c) 2021 Eduardo San Martin Morote
  * @license MIT
  */ var _vue = require("vue");
var _devtoolsApi = require("@vue/devtools-api");
const hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
const PolySymbol = (name)=>// vr = vue router
    hasSymbol ? Symbol('[vue-router]: ' + name) : '[vue-router]: ' + name
;
// rvlm = Router View Location Matched
/**
 * RouteRecord being rendered by the closest ancestor Router View. Used for
 * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View
 * Location Matched
 *
 * @internal
 */ const matchedRouteKey = /*#__PURE__*/ PolySymbol('router view location matched');
/**
 * Allows overriding the router view depth to control which component in
 * `matched` is rendered. rvd stands for Router View Depth
 *
 * @internal
 */ const viewDepthKey = /*#__PURE__*/ PolySymbol('router view depth');
/**
 * Allows overriding the router instance returned by `useRouter` in tests. r
 * stands for router
 *
 * @internal
 */ const routerKey = /*#__PURE__*/ PolySymbol('router');
/**
 * Allows overriding the current route returned by `useRoute` in tests. rl
 * stands for route location
 *
 * @internal
 */ const routeLocationKey = /*#__PURE__*/ PolySymbol('route location');
/**
 * Allows overriding the current route used by router-view. Internally this is
 * used when the `route` prop is passed.
 *
 * @internal
 */ const routerViewLocationKey = /*#__PURE__*/ PolySymbol('router view location');
const isBrowser = typeof window !== 'undefined';
function isESModule(obj) {
    return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';
}
const assign = Object.assign;
function applyToParams(fn, params) {
    const newParams = {
    };
    for(const key in params){
        const value = params[key];
        newParams[key] = Array.isArray(value) ? value.map(fn) : fn(value);
    }
    return newParams;
}
const noop = ()=>{
};
function warn(msg) {
    // avoid using ...args as it breaks in older Edge builds
    const args = Array.from(arguments).slice(1);
    console.warn.apply(console, [
        '[Vue Router warn]: ' + msg
    ].concat(args));
}
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path)=>path.replace(TRAILING_SLASH_RE, '')
;
/**
 * Transforms an URI into a normalized history location
 *
 * @param parseQuery
 * @param location - URI to normalize
 * @param currentLocation - current absolute location. Allows resolving relative
 * paths. Must start with `/`. Defaults to `/`
 * @returns a normalized history location
 */ function parseURL(parseQuery, location, currentLocation = '/') {
    let path, query = {
    }, searchString = '', hash = '';
    // Could use URL and URLSearchParams but IE 11 doesn't support it
    const searchPos = location.indexOf('?');
    const hashPos = location.indexOf('#', searchPos > -1 ? searchPos : 0);
    if (searchPos > -1) {
        path = location.slice(0, searchPos);
        searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);
        query = parseQuery(searchString);
    }
    if (hashPos > -1) {
        path = path || location.slice(0, hashPos);
        // keep the # character
        hash = location.slice(hashPos, location.length);
    }
    // no search and no query
    path = resolveRelativePath(path != null ? path : location, currentLocation);
    // empty path means a relative query or hash `?foo=f`, `#thing`
    return {
        fullPath: path + (searchString && '?') + searchString + hash,
        path,
        query,
        hash
    };
}
/**
 * Stringifies a URL object
 *
 * @param stringifyQuery
 * @param location
 */ function stringifyURL(stringifyQuery, location) {
    const query = location.query ? stringifyQuery(location.query) : '';
    return location.path + (query && '?') + query + (location.hash || '');
}
/**
 * Strips off the base from the beginning of a location.pathname in a non
 * case-sensitive way.
 *
 * @param pathname - location.pathname
 * @param base - base to strip off
 */ function stripBase(pathname, base) {
    // no base or base is not found at the beginning
    if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase())) return pathname;
    return pathname.slice(base.length) || '/';
}
/**
 * Checks if two RouteLocation are equal. This means that both locations are
 * pointing towards the same {@link RouteRecord} and that all `params`, `query`
 * parameters and `hash` are the same
 *
 * @param a - first {@link RouteLocation}
 * @param b - second {@link RouteLocation}
 */ function isSameRouteLocation(stringifyQuery, a, b) {
    const aLastIndex = a.matched.length - 1;
    const bLastIndex = b.matched.length - 1;
    return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery(a.query) === stringifyQuery(b.query) && a.hash === b.hash;
}
/**
 * Check if two `RouteRecords` are equal. Takes into account aliases: they are
 * considered equal to the `RouteRecord` they are aliasing.
 *
 * @param a - first {@link RouteRecord}
 * @param b - second {@link RouteRecord}
 */ function isSameRouteRecord(a, b) {
    // since the original record has an undefined value for aliasOf
    // but all aliases point to the original record, this will always compare
    // the original record
    return (a.aliasOf || a) === (b.aliasOf || b);
}
function isSameRouteLocationParams(a, b) {
    if (Object.keys(a).length !== Object.keys(b).length) return false;
    for(const key in a){
        if (!isSameRouteLocationParamsValue(a[key], b[key])) return false;
    }
    return true;
}
function isSameRouteLocationParamsValue(a, b) {
    return Array.isArray(a) ? isEquivalentArray(a, b) : Array.isArray(b) ? isEquivalentArray(b, a) : a === b;
}
/**
 * Check if two arrays are the same or if an array with one single entry is the
 * same as another primitive value. Used to check query and parameters
 *
 * @param a - array of values
 * @param b - array of values or a single value
 */ function isEquivalentArray(a, b) {
    return Array.isArray(b) ? a.length === b.length && a.every((value, i)=>value === b[i]
    ) : a.length === 1 && a[0] === b;
}
/**
 * Resolves a relative path that starts with `.`.
 *
 * @param to - path location we are resolving
 * @param from - currentLocation.path, should start with `/`
 */ function resolveRelativePath(to, from) {
    if (to.startsWith('/')) return to;
    if (!from.startsWith('/')) {
        warn(`Cannot resolve a relative location without an absolute path. Trying to resolve "${to}" from "${from}". It should look like "/${from}".`);
        return to;
    }
    if (!to) return from;
    const fromSegments = from.split('/');
    const toSegments = to.split('/');
    let position = fromSegments.length - 1;
    let toPosition;
    let segment;
    for(toPosition = 0; toPosition < toSegments.length; toPosition++){
        segment = toSegments[toPosition];
        // can't go below zero
        if (position === 1 || segment === '.') continue;
        if (segment === '..') position--;
        else break;
    }
    return fromSegments.slice(0, position).join('/') + '/' + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join('/');
}
var NavigationType;
(function(NavigationType1) {
    NavigationType1["pop"] = "pop";
    NavigationType1["push"] = "push";
})(NavigationType || (NavigationType = {
}));
var NavigationDirection;
(function(NavigationDirection1) {
    NavigationDirection1["back"] = "back";
    NavigationDirection1["forward"] = "forward";
    NavigationDirection1["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {
}));
/**
 * Starting location for Histories
 */ const START = '';
// Generic utils
/**
 * Normalizes a base by removing any trailing slash and reading the base tag if
 * present.
 *
 * @param base - base to normalize
 */ function normalizeBase(base) {
    if (!base) {
        if (isBrowser) {
            // respect <base> tag
            const baseEl = document.querySelector('base');
            base = baseEl && baseEl.getAttribute('href') || '/';
            // strip full URL origin
            base = base.replace(/^\w+:\/\/[^\/]+/, '');
        } else base = '/';
    }
    // ensure leading slash when it was removed by the regex above avoid leading
    // slash with hash because the file could be read from the disk like file://
    // and the leading slash would cause problems
    if (base[0] !== '/' && base[0] !== '#') base = '/' + base;
    // remove the trailing slash so all other method can just do `base + fullPath`
    // to build an href
    return removeTrailingSlash(base);
}
// remove any character before the hash
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location) {
    return base.replace(BEFORE_HASH_RE, '#') + location;
}
function getElementPosition(el, offset) {
    const docRect = document.documentElement.getBoundingClientRect();
    const elRect = el.getBoundingClientRect();
    return {
        behavior: offset.behavior,
        left: elRect.left - docRect.left - (offset.left || 0),
        top: elRect.top - docRect.top - (offset.top || 0)
    };
}
const computeScrollPosition = ()=>({
        left: window.pageXOffset,
        top: window.pageYOffset
    })
;
function scrollToPosition(position) {
    let scrollToOptions;
    if ('el' in position) {
        const positionEl = position.el;
        const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');
        /**
         * `id`s can accept pretty much any characters, including CSS combinators
         * like `>` or `~`. It's still possible to retrieve elements using
         * `document.getElementById('~')` but it needs to be escaped when using
         * `document.querySelector('#\\~')` for it to be valid. The only
         * requirements for `id`s are them to be unique on the page and to not be
         * empty (`id=""`). Because of that, when passing an id selector, it should
         * be properly escaped for it to work with `querySelector`. We could check
         * for the id selector to be simple (no CSS combinators `+ >~`) but that
         * would make things inconsistent since they are valid characters for an
         * `id` but would need to be escaped when using `querySelector`, breaking
         * their usage and ending up in no selector returned. Selectors need to be
         * escaped:
         *
         * - `#1-thing` becomes `#\31 -thing`
         * - `#with~symbols` becomes `#with\\~symbols`
         *
         * - More information about  the topic can be found at
         *   https://mathiasbynens.be/notes/html5-id-class.
         * - Practical example: https://mathiasbynens.be/demo/html5-id
         */ if (typeof position.el === 'string') {
            if (!isIdSelector || !document.getElementById(position.el.slice(1))) try {
                const foundEl = document.querySelector(position.el);
                if (isIdSelector && foundEl) {
                    warn(`The selector "${position.el}" should be passed as "el: document.querySelector('${position.el}')" because it starts with "#".`);
                    // return to avoid other warnings
                    return;
                }
            } catch (err) {
                warn(`The selector "${position.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);
                // return to avoid other warnings
                return;
            }
        }
        const el = typeof positionEl === 'string' ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
        if (!el) {
            warn(`Couldn't find element using selector "${position.el}" returned by scrollBehavior.`);
            return;
        }
        scrollToOptions = getElementPosition(el, position);
    } else scrollToOptions = position;
    if ('scrollBehavior' in document.documentElement.style) window.scrollTo(scrollToOptions);
    else window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
}
function getScrollKey(path, delta) {
    const position = history.state ? history.state.position - delta : -1;
    return position + path;
}
const scrollPositions = new Map();
function saveScrollPosition(key, scrollPosition) {
    scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
    const scroll = scrollPositions.get(key);
    // consume it so it's not used again
    scrollPositions.delete(key);
    return scroll;
}
// TODO: RFC about how to save scroll position
/**
 * ScrollBehavior instance used by the router to compute and restore the scroll
 * position when navigating.
 */ // export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {
//   // returns a scroll position that can be saved in history
//   compute(): ScrollPositionEntry
//   // can take an extended ScrollPositionEntry
//   scroll(position: ScrollPosition): void
// }
// export const scrollHandler: ScrollHandler<ScrollPosition> = {
//   compute: computeScroll,
//   scroll: scrollToPosition,
// }
let createBaseLocation = ()=>location.protocol + '//' + location.host
;
/**
 * Creates a normalized history location from a window.location object
 * @param location -
 */ function createCurrentLocation(base, location) {
    const { pathname , search , hash  } = location;
    // allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end
    const hashPos = base.indexOf('#');
    if (hashPos > -1) {
        let slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
        let pathFromHash = hash.slice(slicePos);
        // prepend the starting slash to hash so the url starts with /#
        if (pathFromHash[0] !== '/') pathFromHash = '/' + pathFromHash;
        return stripBase(pathFromHash, '');
    }
    const path = stripBase(pathname, base);
    return path + search + hash;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
    let listeners = [];
    let teardowns = [];
    // TODO: should it be a stack? a Dict. Check if the popstate listener
    // can trigger twice
    let pauseState = null;
    const popStateHandler = ({ state ,  })=>{
        const to = createCurrentLocation(base, location);
        const from = currentLocation.value;
        const fromState = historyState.value;
        let delta = 0;
        if (state) {
            currentLocation.value = to;
            historyState.value = state;
            // ignore the popstate and reset the pauseState
            if (pauseState && pauseState === from) {
                pauseState = null;
                return;
            }
            delta = fromState ? state.position - fromState.position : 0;
        } else replace(to);
        // console.log({ deltaFromCurrent })
        // Here we could also revert the navigation by calling history.go(-delta)
        // this listener will have to be adapted to not trigger again and to wait for the url
        // to be updated before triggering the listeners. Some kind of validation function would also
        // need to be passed to the listeners so the navigation can be accepted
        // call all listeners
        listeners.forEach((listener)=>{
            listener(currentLocation.value, from, {
                delta,
                type: NavigationType.pop,
                direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
            });
        });
    };
    function pauseListeners() {
        pauseState = currentLocation.value;
    }
    function listen(callback) {
        // setup the listener and prepare teardown callbacks
        listeners.push(callback);
        const teardown = ()=>{
            const index = listeners.indexOf(callback);
            if (index > -1) listeners.splice(index, 1);
        };
        teardowns.push(teardown);
        return teardown;
    }
    function beforeUnloadListener() {
        const { history  } = window;
        if (!history.state) return;
        history.replaceState(assign({
        }, history.state, {
            scroll: computeScrollPosition()
        }), '');
    }
    function destroy() {
        for (const teardown of teardowns)teardown();
        teardowns = [];
        window.removeEventListener('popstate', popStateHandler);
        window.removeEventListener('beforeunload', beforeUnloadListener);
    }
    // setup the listeners and prepare teardown callbacks
    window.addEventListener('popstate', popStateHandler);
    window.addEventListener('beforeunload', beforeUnloadListener);
    return {
        pauseListeners,
        listen,
        destroy
    };
}
/**
 * Creates a state object
 */ function buildState(back, current, forward, replaced = false, computeScroll = false) {
    return {
        back,
        current,
        forward,
        replaced,
        position: window.history.length,
        scroll: computeScroll ? computeScrollPosition() : null
    };
}
function useHistoryStateNavigation(base) {
    const { history , location  } = window;
    // private variables
    const currentLocation = {
        value: createCurrentLocation(base, location)
    };
    const historyState = {
        value: history.state
    };
    // build current history entry as this is a fresh navigation
    if (!historyState.value) changeLocation(currentLocation.value, {
        back: null,
        current: currentLocation.value,
        forward: null,
        // the length is off by one, we need to decrease it
        position: history.length - 1,
        replaced: true,
        // don't add a scroll as the user may have an anchor and we want
        // scrollBehavior to be triggered without a saved position
        scroll: null
    }, true);
    function changeLocation(to, state, replace) {
        /**
         * if a base tag is provided and we are on a normal domain, we have to
         * respect the provided `base` attribute because pushState() will use it and
         * potentially erase anything before the `#` like at
         * https://github.com/vuejs/vue-router-next/issues/685 where a base of
         * `/folder/#` but a base of `/` would erase the `/folder/` section. If
         * there is no host, the `<base>` tag makes no sense and if there isn't a
         * base tag we can just use everything after the `#`.
         */ const hashIndex = base.indexOf('#');
        const url = hashIndex > -1 ? (location.host && document.querySelector('base') ? base : base.slice(hashIndex)) + to : createBaseLocation() + base + to;
        try {
            // BROWSER QUIRK
            // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds
            history[replace ? 'replaceState' : 'pushState'](state, '', url);
            historyState.value = state;
        } catch (err) {
            warn('Error with push/replace State', err);
            // Force the navigation, this also resets the call count
            location[replace ? 'replace' : 'assign'](url);
        }
    }
    function replace(to, data) {
        const state = assign({
        }, history.state, buildState(historyState.value.back, // keep back and forward entries but override current position
        to, historyState.value.forward, true), data, {
            position: historyState.value.position
        });
        changeLocation(to, state, true);
        currentLocation.value = to;
    }
    function push(to, data) {
        // Add to current entry the information of where we are going
        // as well as saving the current position
        const currentState = assign({
        }, // use current history state to gracefully handle a wrong call to
        // history.replaceState
        // https://github.com/vuejs/vue-router-next/issues/366
        historyState.value, history.state, {
            forward: to,
            scroll: computeScrollPosition()
        });
        if (!history.state) warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\n\n` + `history.replaceState(history.state, '', url)\n\n` + `You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);
        changeLocation(currentState.current, currentState, true);
        const state = assign({
        }, buildState(currentLocation.value, to, null), {
            position: currentState.position + 1
        }, data);
        changeLocation(to, state, false);
        currentLocation.value = to;
    }
    return {
        location: currentLocation,
        state: historyState,
        push,
        replace
    };
}
/**
 * Creates an HTML5 history. Most common history for single page applications.
 *
 * @param base -
 */ function createWebHistory(base) {
    base = normalizeBase(base);
    const historyNavigation = useHistoryStateNavigation(base);
    const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
    function go(delta, triggerListeners = true) {
        if (!triggerListeners) historyListeners.pauseListeners();
        history.go(delta);
    }
    const routerHistory = assign({
        // it's overridden right after
        location: '',
        base,
        go,
        createHref: createHref.bind(null, base)
    }, historyNavigation, historyListeners);
    Object.defineProperty(routerHistory, 'location', {
        enumerable: true,
        get: ()=>historyNavigation.location.value
    });
    Object.defineProperty(routerHistory, 'state', {
        enumerable: true,
        get: ()=>historyNavigation.state.value
    });
    return routerHistory;
}
/**
 * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.
 * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.
 *
 * @param base - Base applied to all urls, defaults to '/'
 * @returns a history object that can be passed to the router constructor
 */ function createMemoryHistory(base = '') {
    let listeners = [];
    let queue = [
        START
    ];
    let position = 0;
    function setLocation(location) {
        position++;
        if (position === queue.length) // we are at the end, we can simply append a new entry
        queue.push(location);
        else {
            // we are in the middle, we remove everything from here in the queue
            queue.splice(position);
            queue.push(location);
        }
    }
    function triggerListeners(to, from, { direction , delta  }) {
        const info = {
            direction,
            delta,
            type: NavigationType.pop
        };
        for (const callback of listeners)callback(to, from, info);
    }
    const routerHistory = {
        // rewritten by Object.defineProperty
        location: START,
        // TODO: should be kept in queue
        state: {
        },
        base,
        createHref: createHref.bind(null, base),
        replace (to) {
            // remove current entry and decrement position
            queue.splice(position--, 1);
            setLocation(to);
        },
        push (to, data) {
            setLocation(to);
        },
        listen (callback) {
            listeners.push(callback);
            return ()=>{
                const index = listeners.indexOf(callback);
                if (index > -1) listeners.splice(index, 1);
            };
        },
        destroy () {
            listeners = [];
            queue = [
                START
            ];
            position = 0;
        },
        go (delta, shouldTrigger = true) {
            const from = this.location;
            const direction = // we are considering delta === 0 going forward, but in abstract mode
            // using 0 for the delta doesn't make sense like it does in html5 where
            // it reloads the page
            delta < 0 ? NavigationDirection.back : NavigationDirection.forward;
            position = Math.max(0, Math.min(position + delta, queue.length - 1));
            if (shouldTrigger) triggerListeners(this.location, from, {
                direction,
                delta
            });
        }
    };
    Object.defineProperty(routerHistory, 'location', {
        enumerable: true,
        get: ()=>queue[position]
    });
    return routerHistory;
}
/**
 * Creates a hash history. Useful for web applications with no host (e.g.
 * `file://`) or when configuring a server to handle any URL is not possible.
 *
 * @param base - optional base to provide. Defaults to `location.pathname +
 * location.search` If there is a `<base>` tag in the `head`, its value will be
 * ignored in favor of this parameter **but note it affects all the
 * history.pushState() calls**, meaning that if you use a `<base>` tag, it's
 * `href` value **has to match this parameter** (ignoring anything after the
 * `#`).
 *
 * @example
 * ```js
 * // at https://example.com/folder
 * createWebHashHistory() // gives a url of `https://example.com/folder#`
 * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`
 * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`
 * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`
 * // you should avoid doing this because it changes the original url and breaks copying urls
 * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`
 *
 * // at file:///usr/etc/folder/index.html
 * // for locations with no `host`, the base is ignored
 * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`
 * ```
 */ function createWebHashHistory(base) {
    // Make sure this implementation is fine in terms of encoding, specially for IE11
    // for `file://`, directly use the pathname and ignore the base
    // location.pathname contains an initial `/` even at the root: `https://example.com`
    base = location.host ? base || location.pathname + location.search : '';
    // allow the user to provide a `#` in the middle: `/base/#/app`
    if (!base.includes('#')) base += '#';
    if (!base.endsWith('#/') && !base.endsWith('#')) warn(`A hash base must end with a "#":\n"${base}" should be "${base.replace(/#.*$/, '#')}".`);
    return createWebHistory(base);
}
function isRouteLocation(route) {
    return typeof route === 'string' || route && typeof route === 'object';
}
function isRouteName(name) {
    return typeof name === 'string' || typeof name === 'symbol';
}
/**
 * Initial route location where the router is. Can be used in navigation guards
 * to differentiate the initial navigation.
 *
 * @example
 * ```js
 * import { START_LOCATION } from 'vue-router'
 *
 * router.beforeEach((to, from) => {
 *   if (from === START_LOCATION) {
 *     // initial navigation
 *   }
 * })
 * ```
 */ const START_LOCATION_NORMALIZED = {
    path: '/',
    name: undefined,
    params: {
    },
    query: {
    },
    hash: '',
    fullPath: '/',
    matched: [],
    meta: {
    },
    redirectedFrom: undefined
};
const NavigationFailureSymbol = /*#__PURE__*/ PolySymbol('navigation failure');
/**
 * Enumeration with all possible types for navigation failures. Can be passed to
 * {@link isNavigationFailure} to check for specific failures.
 */ var NavigationFailureType;
(function(NavigationFailureType1) {
    /**
     * An aborted navigation is a navigation that failed because a navigation
     * guard returned `false` or called `next(false)`
     */ NavigationFailureType1[NavigationFailureType1["aborted"] = 4] = "aborted";
    /**
     * A cancelled navigation is a navigation that failed because a more recent
     * navigation finished started (not necessarily finished).
     */ NavigationFailureType1[NavigationFailureType1["cancelled"] = 8] = "cancelled";
    /**
     * A duplicated navigation is a navigation that failed because it was
     * initiated while already being at the exact same location.
     */ NavigationFailureType1[NavigationFailureType1["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {
}));
// DEV only debug messages
const ErrorTypeMessages = {
    [1 /* MATCHER_NOT_FOUND */ ] ({ location , currentLocation  }) {
        return `No match for\n ${JSON.stringify(location)}${currentLocation ? '\nwhile being at\n' + JSON.stringify(currentLocation) : ''}`;
    },
    [2 /* NAVIGATION_GUARD_REDIRECT */ ] ({ from , to ,  }) {
        return `Redirected from "${from.fullPath}" to "${stringifyRoute(to)}" via a navigation guard.`;
    },
    [4 /* NAVIGATION_ABORTED */ ] ({ from , to  }) {
        return `Navigation aborted from "${from.fullPath}" to "${to.fullPath}" via a navigation guard.`;
    },
    [8 /* NAVIGATION_CANCELLED */ ] ({ from , to  }) {
        return `Navigation cancelled from "${from.fullPath}" to "${to.fullPath}" with a new navigation.`;
    },
    [16 /* NAVIGATION_DUPLICATED */ ] ({ from , to  }) {
        return `Avoided redundant navigation to current location: "${from.fullPath}".`;
    }
};
function createRouterError(type, params) {
    return assign(new Error(ErrorTypeMessages[type](params)), {
        type,
        [NavigationFailureSymbol]: true
    }, params);
}
function isNavigationFailure(error, type) {
    return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));
}
const propertiesToLog = [
    'params',
    'query',
    'hash'
];
function stringifyRoute(to) {
    if (typeof to === 'string') return to;
    if ('path' in to) return to.path;
    const location = {
    };
    for (const key of propertiesToLog)if (key in to) location[key] = to[key];
    return JSON.stringify(location, null, 2);
}
// default pattern for a param: non greedy everything but /
const BASE_PARAM_PATTERN = '[^/]+?';
const BASE_PATH_PARSER_OPTIONS = {
    sensitive: false,
    strict: false,
    start: true,
    end: true
};
// Special Regex characters that must be escaped in static tokens
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
/**
 * Creates a path parser from an array of Segments (a segment is an array of Tokens)
 *
 * @param segments - array of segments returned by tokenizePath
 * @param extraOptions - optional options for the regexp
 * @returns a PathParser
 */ function tokensToParser(segments, extraOptions) {
    const options = assign({
    }, BASE_PATH_PARSER_OPTIONS, extraOptions);
    // the amount of scores is the same as the length of segments except for the root segment "/"
    const score = [];
    // the regexp as a string
    let pattern = options.start ? '^' : '';
    // extracted keys
    const keys = [];
    for (const segment of segments){
        // the root segment needs special treatment
        const segmentScores = segment.length ? [] : [
            90 /* Root */ 
        ];
        // allow trailing slash
        if (options.strict && !segment.length) pattern += '/';
        for(let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++){
            const token = segment[tokenIndex];
            // resets the score if we are inside a sub segment /:a-other-:b
            let subSegmentScore = 40 /* Segment */  + (options.sensitive ? 0.25 /* BonusCaseSensitive */  : 0);
            if (token.type === 0 /* Static */ ) {
                // prepend the slash if we are starting a new segment
                if (!tokenIndex) pattern += '/';
                pattern += token.value.replace(REGEX_CHARS_RE, '\\$&');
                subSegmentScore += 40 /* Static */ ;
            } else if (token.type === 1 /* Param */ ) {
                const { value , repeatable , optional , regexp  } = token;
                keys.push({
                    name: value,
                    repeatable,
                    optional
                });
                const re = regexp ? regexp : BASE_PARAM_PATTERN;
                // the user provided a custom regexp /:id(\\d+)
                if (re !== BASE_PARAM_PATTERN) {
                    subSegmentScore += 10 /* BonusCustomRegExp */ ;
                    // make sure the regexp is valid before using it
                    try {
                        new RegExp(`(${re})`);
                    } catch (err) {
                        throw new Error(`Invalid custom RegExp for param "${value}" (${re}): ` + err.message);
                    }
                }
                // when we repeat we must take care of the repeating leading slash
                let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;
                // prepend the slash if we are starting a new segment
                if (!tokenIndex) subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
                // or /:p?-:p2
                optional && segment.length < 2 ? `(?:/${subPattern})` : '/' + subPattern;
                if (optional) subPattern += '?';
                pattern += subPattern;
                subSegmentScore += 20 /* Dynamic */ ;
                if (optional) subSegmentScore += -8 /* BonusOptional */ ;
                if (repeatable) subSegmentScore += -20 /* BonusRepeatable */ ;
                if (re === '.*') subSegmentScore += -50 /* BonusWildcard */ ;
            }
            segmentScores.push(subSegmentScore);
        }
        // an empty array like /home/ -> [[{home}], []]
        // if (!segment.length) pattern += '/'
        score.push(segmentScores);
    }
    // only apply the strict bonus to the last score
    if (options.strict && options.end) {
        const i = score.length - 1;
        score[i][score[i].length - 1] += 0.7000000000000001 /* BonusStrict */ ;
    }
    // TODO: dev only warn double trailing slash
    if (!options.strict) pattern += '/?';
    if (options.end) pattern += '$';
    else if (options.strict) pattern += '(?:/|$)';
    const re = new RegExp(pattern, options.sensitive ? '' : 'i');
    function parse(path) {
        const match = path.match(re);
        const params = {
        };
        if (!match) return null;
        for(let i = 1; i < match.length; i++){
            const value = match[i] || '';
            const key = keys[i - 1];
            params[key.name] = value && key.repeatable ? value.split('/') : value;
        }
        return params;
    }
    function stringify(params) {
        let path = '';
        // for optional parameters to allow to be empty
        let avoidDuplicatedSlash = false;
        for (const segment1 of segments){
            if (!avoidDuplicatedSlash || !path.endsWith('/')) path += '/';
            avoidDuplicatedSlash = false;
            for (const token of segment1){
                if (token.type === 0 /* Static */ ) path += token.value;
                else if (token.type === 1 /* Param */ ) {
                    const { value , repeatable , optional  } = token;
                    const param = value in params ? params[value] : '';
                    if (Array.isArray(param) && !repeatable) throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
                    const text = Array.isArray(param) ? param.join('/') : param;
                    if (!text) {
                        if (optional) // if we have more than one optional param like /:a?-static we
                        // don't need to care about the optional param
                        {
                            if (segment1.length < 2) {
                                // remove the last slash as we could be at the end
                                if (path.endsWith('/')) path = path.slice(0, -1);
                                else avoidDuplicatedSlash = true;
                            }
                        } else throw new Error(`Missing required param "${value}"`);
                    }
                    path += text;
                }
            }
        }
        return path;
    }
    return {
        re,
        score,
        keys,
        parse,
        stringify
    };
}
/**
 * Compares an array of numbers as used in PathParser.score and returns a
 * number. This function can be used to `sort` an array
 *
 * @param a - first array of numbers
 * @param b - second array of numbers
 * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b
 * should be sorted first
 */ function compareScoreArray(a, b) {
    let i = 0;
    while(i < a.length && i < b.length){
        const diff = b[i] - a[i];
        // only keep going if diff === 0
        if (diff) return diff;
        i++;
    }
    // if the last subsegment was Static, the shorter segments should be sorted first
    // otherwise sort the longest segment first
    if (a.length < b.length) return a.length === 1 && a[0] === 80 /* Segment */  ? -1 : 1;
    else if (a.length > b.length) return b.length === 1 && b[0] === 80 /* Segment */  ? 1 : -1;
    return 0;
}
/**
 * Compare function that can be used with `sort` to sort an array of PathParser
 *
 * @param a - first PathParser
 * @param b - second PathParser
 * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b
 */ function comparePathParserScore(a, b) {
    let i = 0;
    const aScore = a.score;
    const bScore = b.score;
    while(i < aScore.length && i < bScore.length){
        const comp = compareScoreArray(aScore[i], bScore[i]);
        // do not return if both are equal
        if (comp) return comp;
        i++;
    }
    // if a and b share the same score entries but b has more, sort b first
    return bScore.length - aScore.length;
// this is the ternary version
// return aScore.length < bScore.length
//   ? 1
//   : aScore.length > bScore.length
//   ? -1
//   : 0
}
const ROOT_TOKEN = {
    type: 0 /* Static */ ,
    value: ''
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
// After some profiling, the cache seems to be unnecessary because tokenizePath
// (the slowest part of adding a route) is very fast
// const tokenCache = new Map<string, Token[][]>()
function tokenizePath(path) {
    if (!path) return [
        []
    ];
    if (path === '/') return [
        [
            ROOT_TOKEN
        ]
    ];
    if (!path.startsWith('/')) throw new Error(`Route paths should start with a "/": "${path}" should be "/${path}".`);
    // if (tokenCache.has(path)) return tokenCache.get(path)!
    function crash(message) {
        throw new Error(`ERR (${state})/"${buffer}": ${message}`);
    }
    let state = 0 /* Static */ ;
    let previousState = state;
    const tokens = [];
    // the segment will always be valid because we get into the initial state
    // with the leading /
    let segment;
    function finalizeSegment() {
        if (segment) tokens.push(segment);
        segment = [];
    }
    // index on the path
    let i = 0;
    // char at index
    let char;
    // buffer of the value read
    let buffer = '';
    // custom regexp for a param
    let customRe = '';
    function consumeBuffer() {
        if (!buffer) return;
        if (state === 0 /* Static */ ) segment.push({
            type: 0 /* Static */ ,
            value: buffer
        });
        else if (state === 1 /* Param */  || state === 2 /* ParamRegExp */  || state === 3 /* ParamRegExpEnd */ ) {
            if (segment.length > 1 && (char === '*' || char === '+')) crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
            segment.push({
                type: 1 /* Param */ ,
                value: buffer,
                regexp: customRe,
                repeatable: char === '*' || char === '+',
                optional: char === '*' || char === '?'
            });
        } else crash('Invalid state to consume buffer');
        buffer = '';
    }
    function addCharToBuffer() {
        buffer += char;
    }
    while(i < path.length){
        char = path[i++];
        if (char === '\\' && state !== 2 /* ParamRegExp */ ) {
            previousState = state;
            state = 4 /* EscapeNext */ ;
            continue;
        }
        switch(state){
            case 0 /* Static */ :
                if (char === '/') {
                    if (buffer) consumeBuffer();
                    finalizeSegment();
                } else if (char === ':') {
                    consumeBuffer();
                    state = 1 /* Param */ ;
                } else addCharToBuffer();
                break;
            case 4 /* EscapeNext */ :
                addCharToBuffer();
                state = previousState;
                break;
            case 1 /* Param */ :
                if (char === '(') state = 2 /* ParamRegExp */ ;
                else if (VALID_PARAM_RE.test(char)) addCharToBuffer();
                else {
                    consumeBuffer();
                    state = 0 /* Static */ ;
                    // go back one character if we were not modifying
                    if (char !== '*' && char !== '?' && char !== '+') i--;
                }
                break;
            case 2 /* ParamRegExp */ :
                // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)
                // it already works by escaping the closing )
                // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#
                // is this really something people need since you can also write
                // /prefix_:p()_suffix
                if (char === ')') {
                    // handle the escaped )
                    if (customRe[customRe.length - 1] == '\\') customRe = customRe.slice(0, -1) + char;
                    else state = 3 /* ParamRegExpEnd */ ;
                } else customRe += char;
                break;
            case 3 /* ParamRegExpEnd */ :
                // same as finalizing a param
                consumeBuffer();
                state = 0 /* Static */ ;
                // go back one character if we were not modifying
                if (char !== '*' && char !== '?' && char !== '+') i--;
                customRe = '';
                break;
            default:
                crash('Unknown state');
                break;
        }
    }
    if (state === 2 /* ParamRegExp */ ) crash(`Unfinished custom RegExp for param "${buffer}"`);
    consumeBuffer();
    finalizeSegment();
    // tokenCache.set(path, tokens)
    return tokens;
}
function createRouteRecordMatcher(record, parent, options) {
    const parser = tokensToParser(tokenizePath(record.path), options);
    {
        const existingKeys = new Set();
        for (const key of parser.keys){
            if (existingKeys.has(key.name)) warn(`Found duplicated params with name "${key.name}" for path "${record.path}". Only the last one will be available on "$route.params".`);
            existingKeys.add(key.name);
        }
    }
    const matcher = assign(parser, {
        record,
        parent,
        // these needs to be populated by the parent
        children: [],
        alias: []
    });
    if (parent) // both are aliases or both are not aliases
    // we don't want to mix them because the order is used when
    // passing originalRecord in Matcher.addRoute
    {
        if (!matcher.record.aliasOf === !parent.record.aliasOf) parent.children.push(matcher);
    }
    return matcher;
}
/**
 * Creates a Router Matcher.
 *
 * @internal
 * @param routes - array of initial routes
 * @param globalOptions - global route options
 */ function createRouterMatcher(routes, globalOptions) {
    // normalized ordered array of matchers
    const matchers = [];
    const matcherMap = new Map();
    globalOptions = mergeOptions({
        strict: false,
        end: true,
        sensitive: false
    }, globalOptions);
    function getRecordMatcher(name) {
        return matcherMap.get(name);
    }
    function addRoute(record, parent, originalRecord) {
        // used later on to remove by name
        const isRootAdd = !originalRecord;
        const mainNormalizedRecord = normalizeRouteRecord(record);
        // we might be the child of an alias
        mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
        const options = mergeOptions(globalOptions, record);
        // generate an array of records to correctly handle aliases
        const normalizedRecords = [
            mainNormalizedRecord, 
        ];
        if ('alias' in record) {
            const aliases = typeof record.alias === 'string' ? [
                record.alias
            ] : record.alias;
            for (const alias of aliases)normalizedRecords.push(assign({
            }, mainNormalizedRecord, {
                // this allows us to hold a copy of the `components` option
                // so that async components cache is hold on the original record
                components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
                path: alias,
                // we might be the child of an alias
                aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
            }));
        }
        let matcher;
        let originalMatcher;
        for (const normalizedRecord of normalizedRecords){
            const { path  } = normalizedRecord;
            // Build up the path for nested routes if the child isn't an absolute
            // route. Only add the / delimiter if the child path isn't empty and if the
            // parent path doesn't have a trailing slash
            if (parent && path[0] !== '/') {
                const parentPath = parent.record.path;
                const connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';
                normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
            }
            if (normalizedRecord.path === '*') throw new Error("Catch all routes (\"*\") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.");
            // create the object before hand so it can be passed to children
            matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
            if (parent && path[0] === '/') checkMissingParamsInAbsolutePath(matcher, parent);
            // if we are an alias we must tell the original record that we exist
            // so we can be removed
            if (originalRecord) {
                originalRecord.alias.push(matcher);
                checkSameParams(originalRecord, matcher);
            } else {
                // otherwise, the first record is the original and others are aliases
                originalMatcher = originalMatcher || matcher;
                if (originalMatcher !== matcher) originalMatcher.alias.push(matcher);
                // remove the route if named and only for the top record (avoid in nested calls)
                // this works because the original record is the first one
                if (isRootAdd && record.name && !isAliasRecord(matcher)) removeRoute(record.name);
            }
            if ('children' in mainNormalizedRecord) {
                const children = mainNormalizedRecord.children;
                for(let i = 0; i < children.length; i++)addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);
            }
            // if there was no original record, then the first one was not an alias and all
            // other alias (if any) need to reference this record when adding children
            originalRecord = originalRecord || matcher;
            // TODO: add normalized records for more flexibility
            // if (parent && isAliasRecord(originalRecord)) {
            //   parent.children.push(originalRecord)
            // }
            insertMatcher(matcher);
        }
        return originalMatcher ? ()=>{
            // since other matchers are aliases, they should be removed by the original matcher
            removeRoute(originalMatcher);
        } : noop;
    }
    function removeRoute(matcherRef) {
        if (isRouteName(matcherRef)) {
            const matcher = matcherMap.get(matcherRef);
            if (matcher) {
                matcherMap.delete(matcherRef);
                matchers.splice(matchers.indexOf(matcher), 1);
                matcher.children.forEach(removeRoute);
                matcher.alias.forEach(removeRoute);
            }
        } else {
            const index = matchers.indexOf(matcherRef);
            if (index > -1) {
                matchers.splice(index, 1);
                if (matcherRef.record.name) matcherMap.delete(matcherRef.record.name);
                matcherRef.children.forEach(removeRoute);
                matcherRef.alias.forEach(removeRoute);
            }
        }
    }
    function getRoutes() {
        return matchers;
    }
    function insertMatcher(matcher) {
        let i = 0;
        // console.log('i is', { i })
        while(i < matchers.length && comparePathParserScore(matcher, matchers[i]) >= 0)i++;
        // console.log('END i is', { i })
        // while (i < matchers.length && matcher.score <= matchers[i].score) i++
        matchers.splice(i, 0, matcher);
        // only add the original record to the name map
        if (matcher.record.name && !isAliasRecord(matcher)) matcherMap.set(matcher.record.name, matcher);
    }
    function resolve(location, currentLocation) {
        let matcher;
        let params = {
        };
        let path;
        let name;
        if ('name' in location && location.name) {
            matcher = matcherMap.get(location.name);
            if (!matcher) throw createRouterError(1 /* MATCHER_NOT_FOUND */ , {
                location
            });
            name = matcher.record.name;
            params = assign(// paramsFromLocation is a new object
            paramsFromLocation(currentLocation.params, // only keep params that exist in the resolved location
            // TODO: only keep optional params coming from a parent record
            matcher.keys.filter((k)=>!k.optional
            ).map((k)=>k.name
            )), location.params);
            // throws if cannot be stringified
            path = matcher.stringify(params);
        } else if ('path' in location) {
            // no need to resolve the path with the matcher as it was provided
            // this also allows the user to control the encoding
            path = location.path;
            if (!path.startsWith('/')) warn(`The Matcher cannot resolve relative paths but received "${path}". Unless you directly called \`matcher.resolve("${path}")\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.`);
            matcher = matchers.find((m)=>m.re.test(path)
            );
            // matcher should have a value after the loop
            if (matcher) {
                // TODO: dev warning of unused params if provided
                // we know the matcher works because we tested the regexp
                params = matcher.parse(path);
                name = matcher.record.name;
            }
        // location is a relative path
        } else {
            // match by name or path of current route
            matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m)=>m.re.test(currentLocation.path)
            );
            if (!matcher) throw createRouterError(1 /* MATCHER_NOT_FOUND */ , {
                location,
                currentLocation
            });
            name = matcher.record.name;
            // since we are navigating to the same location, we don't need to pick the
            // params like when `name` is provided
            params = assign({
            }, currentLocation.params, location.params);
            path = matcher.stringify(params);
        }
        const matched = [];
        let parentMatcher = matcher;
        while(parentMatcher){
            // reversed order so parents are at the beginning
            matched.unshift(parentMatcher.record);
            parentMatcher = parentMatcher.parent;
        }
        return {
            name,
            path,
            params,
            matched,
            meta: mergeMetaFields(matched)
        };
    }
    // add initial routes
    routes.forEach((route)=>addRoute(route)
    );
    return {
        addRoute,
        resolve,
        removeRoute,
        getRoutes,
        getRecordMatcher
    };
}
function paramsFromLocation(params, keys) {
    const newParams = {
    };
    for (const key of keys)if (key in params) newParams[key] = params[key];
    return newParams;
}
/**
 * Normalizes a RouteRecordRaw. Creates a copy
 *
 * @param record
 * @returns the normalized version
 */ function normalizeRouteRecord(record) {
    return {
        path: record.path,
        redirect: record.redirect,
        name: record.name,
        meta: record.meta || {
        },
        aliasOf: undefined,
        beforeEnter: record.beforeEnter,
        props: normalizeRecordProps(record),
        children: record.children || [],
        instances: {
        },
        leaveGuards: new Set(),
        updateGuards: new Set(),
        enterCallbacks: {
        },
        components: 'components' in record ? record.components || {
        } : {
            default: record.component
        }
    };
}
/**
 * Normalize the optional `props` in a record to always be an object similar to
 * components. Also accept a boolean for components.
 * @param record
 */ function normalizeRecordProps(record) {
    const propsObject = {
    };
    // props does not exist on redirect records but we can set false directly
    const props = record.props || false;
    if ('component' in record) propsObject.default = props;
    else // NOTE: we could also allow a function to be applied to every component.
    // Would need user feedback for use cases
    for(const name in record.components)propsObject[name] = typeof props === 'boolean' ? props : props[name];
    return propsObject;
}
/**
 * Checks if a record or any of its parent is an alias
 * @param record
 */ function isAliasRecord(record) {
    while(record){
        if (record.record.aliasOf) return true;
        record = record.parent;
    }
    return false;
}
/**
 * Merge meta fields of an array of records
 *
 * @param matched - array of matched records
 */ function mergeMetaFields(matched) {
    return matched.reduce((meta, record)=>assign(meta, record.meta)
    , {
    });
}
function mergeOptions(defaults, partialOptions) {
    const options = {
    };
    for(const key in defaults)options[key] = key in partialOptions ? partialOptions[key] : defaults[key];
    return options;
}
function isSameParam(a, b) {
    return a.name === b.name && a.optional === b.optional && a.repeatable === b.repeatable;
}
/**
 * Check if a path and its alias have the same required params
 *
 * @param a - original record
 * @param b - alias record
 */ function checkSameParams(a, b) {
    for (const key of a.keys){
        if (!key.optional && !b.keys.find(isSameParam.bind(null, key))) return warn(`Alias "${b.record.path}" and the original record: "${a.record.path}" should have the exact same param named "${key.name}"`);
    }
    for (const key1 of b.keys){
        if (!key1.optional && !a.keys.find(isSameParam.bind(null, key1))) return warn(`Alias "${b.record.path}" and the original record: "${a.record.path}" should have the exact same param named "${key1.name}"`);
    }
}
function checkMissingParamsInAbsolutePath(record, parent) {
    for (const key of parent.keys){
        if (!record.keys.find(isSameParam.bind(null, key))) return warn(`Absolute path "${record.record.path}" should have the exact same param named "${key.name}" as its parent "${parent.record.path}".`);
    }
}
/**
 * Encoding Rules ␣ = Space Path: ␣ " < > # ? { } Query: ␣ " < > # & = Hash: ␣ "
 * < > `
 *
 * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)
 * defines some extra characters to be encoded. Most browsers do not encode them
 * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to
 * also encode `!'()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)
 * plus `-._~`. This extra safety should be applied to query by patching the
 * string returned by encodeURIComponent encodeURI also encodes `[\]^`. `\`
 * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\`
 * into a `/` if directly typed in. The _backtick_ (`````) should also be
 * encoded everywhere because some browsers like FF encode it when directly
 * written while others don't. Safari and IE don't encode ``"<>{}``` in hash.
 */ // const EXTRA_RESERVED_RE = /[!'()*]/g
// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)
const HASH_RE = /#/g; // %23
const AMPERSAND_RE = /&/g; // %26
const SLASH_RE = /\//g; // %2F
const EQUAL_RE = /=/g; // %3D
const IM_RE = /\?/g; // %3F
const PLUS_RE = /\+/g; // %2B
/**
 * NOTE: It's not clear to me if we should encode the + symbol in queries, it
 * seems to be less flexible than not doing so and I can't find out the legacy
 * systems requiring this for regular requests like text/html. In the standard,
 * the encoding of the plus character is only mentioned for
 * application/x-www-form-urlencoded
 * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo
 * leave the plus character as is in queries. To be more flexible, we allow the
 * plus character on the query but it can also be manually encoded by the user.
 *
 * Resources:
 * - https://url.spec.whatwg.org/#urlencoded-parsing
 * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20
 */ const ENC_BRACKET_OPEN_RE = /%5B/g; // [
const ENC_BRACKET_CLOSE_RE = /%5D/g; // ]
const ENC_CARET_RE = /%5E/g; // ^
const ENC_BACKTICK_RE = /%60/g; // `
const ENC_CURLY_OPEN_RE = /%7B/g; // {
const ENC_PIPE_RE = /%7C/g; // |
const ENC_CURLY_CLOSE_RE = /%7D/g; // }
const ENC_SPACE_RE = /%20/g; // }
/**
 * Encode characters that need to be encoded on the path, search and hash
 * sections of the URL.
 *
 * @internal
 * @param text - string to encode
 * @returns encoded string
 */ function commonEncode(text) {
    return encodeURI('' + text).replace(ENC_PIPE_RE, '|').replace(ENC_BRACKET_OPEN_RE, '[').replace(ENC_BRACKET_CLOSE_RE, ']');
}
/**
 * Encode characters that need to be encoded on the hash section of the URL.
 *
 * @param text - string to encode
 * @returns encoded string
 */ function encodeHash(text) {
    return commonEncode(text).replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');
}
/**
 * Encode characters that need to be encoded query values on the query
 * section of the URL.
 *
 * @param text - string to encode
 * @returns encoded string
 */ function encodeQueryValue(text) {
    return commonEncode(text)// Encode the space as +, encode the + to differentiate it from the space
    .replace(PLUS_RE, '%2B').replace(ENC_SPACE_RE, '+').replace(HASH_RE, '%23').replace(AMPERSAND_RE, '%26').replace(ENC_BACKTICK_RE, '`').replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');
}
/**
 * Like `encodeQueryValue` but also encodes the `=` character.
 *
 * @param text - string to encode
 */ function encodeQueryKey(text) {
    return encodeQueryValue(text).replace(EQUAL_RE, '%3D');
}
/**
 * Encode characters that need to be encoded on the path section of the URL.
 *
 * @param text - string to encode
 * @returns encoded string
 */ function encodePath(text) {
    return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');
}
/**
 * Encode characters that need to be encoded on the path section of the URL as a
 * param. This function encodes everything {@link encodePath} does plus the
 * slash (`/`) character. If `text` is `null` or `undefined`, returns an empty
 * string instead.
 *
 * @param text - string to encode
 * @returns encoded string
 */ function encodeParam(text) {
    return text == null ? '' : encodePath(text).replace(SLASH_RE, '%2F');
}
/**
 * Decode text using `decodeURIComponent`. Returns the original text if it
 * fails.
 *
 * @param text - string to decode
 * @returns decoded string
 */ function decode(text) {
    try {
        return decodeURIComponent('' + text);
    } catch (err) {
        warn(`Error decoding "${text}". Using original value`);
    }
    return '' + text;
}
/**
 * Transforms a queryString into a {@link LocationQuery} object. Accept both, a
 * version with the leading `?` and without Should work as URLSearchParams

 * @internal
 *
 * @param search - search string to parse
 * @returns a query object
 */ function parseQuery(search) {
    const query = {
    };
    // avoid creating an object with an empty key and empty value
    // because of split('&')
    if (search === '' || search === '?') return query;
    const hasLeadingIM = search[0] === '?';
    const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');
    for(let i = 0; i < searchParams.length; ++i){
        // pre decode the + into space
        const searchParam = searchParams[i].replace(PLUS_RE, ' ');
        // allow the = character
        const eqPos = searchParam.indexOf('=');
        const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
        const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
        if (key in query) {
            // an extra variable for ts types
            let currentValue = query[key];
            if (!Array.isArray(currentValue)) currentValue = query[key] = [
                currentValue
            ];
            currentValue.push(value);
        } else query[key] = value;
    }
    return query;
}
/**
 * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it
 * doesn't prepend a `?`
 *
 * @internal
 *
 * @param query - query object to stringify
 * @returns string version of the query without the leading `?`
 */ function stringifyQuery(query) {
    let search = '';
    for(let key in query){
        const value = query[key];
        key = encodeQueryKey(key);
        if (value == null) {
            // only null adds the value
            if (value !== undefined) search += (search.length ? '&' : '') + key;
            continue;
        }
        // keep null values
        const values = Array.isArray(value) ? value.map((v)=>v && encodeQueryValue(v)
        ) : [
            value && encodeQueryValue(value)
        ];
        values.forEach((value1)=>{
            // skip undefined values in arrays as if they were not present
            // smaller code than using filter
            if (value1 !== undefined) {
                // only append & with non-empty search
                search += (search.length ? '&' : '') + key;
                if (value1 != null) search += '=' + value1;
            }
        });
    }
    return search;
}
/**
 * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting
 * numbers into strings, removing keys with an undefined value and replacing
 * undefined with null in arrays
 *
 * @param query - query object to normalize
 * @returns a normalized query object
 */ function normalizeQuery(query) {
    const normalizedQuery = {
    };
    for(const key in query){
        const value = query[key];
        if (value !== undefined) normalizedQuery[key] = Array.isArray(value) ? value.map((v)=>v == null ? null : '' + v
        ) : value == null ? value : '' + value;
    }
    return normalizedQuery;
}
/**
 * Create a list of callbacks that can be reset. Used to create before and after navigation guards list
 */ function useCallbacks() {
    let handlers = [];
    function add(handler) {
        handlers.push(handler);
        return ()=>{
            const i = handlers.indexOf(handler);
            if (i > -1) handlers.splice(i, 1);
        };
    }
    function reset() {
        handlers = [];
    }
    return {
        add,
        list: ()=>handlers
        ,
        reset
    };
}
function registerGuard(record, name, guard) {
    const removeFromList = ()=>{
        record[name].delete(guard);
    };
    _vue.onUnmounted(removeFromList);
    _vue.onDeactivated(removeFromList);
    _vue.onActivated(()=>{
        record[name].add(guard);
    });
    record[name].add(guard);
}
/**
 * Add a navigation guard that triggers whenever the component for the current
 * location is about to be left. Similar to {@link beforeRouteLeave} but can be
 * used in any component. The guard is removed when the component is unmounted.
 *
 * @param leaveGuard - {@link NavigationGuard}
 */ function onBeforeRouteLeave(leaveGuard) {
    if (!_vue.getCurrentInstance()) {
        warn('getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function');
        return;
    }
    const activeRecord = _vue.inject(matchedRouteKey, // to avoid warning
    {
    }).value;
    if (!activeRecord) {
        warn('No active route record was found. Are you missing a <router-view> component?');
        return;
    }
    registerGuard(activeRecord, 'leaveGuards', leaveGuard);
}
/**
 * Add a navigation guard that triggers whenever the current location is about
 * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any
 * component. The guard is removed when the component is unmounted.
 *
 * @param updateGuard - {@link NavigationGuard}
 */ function onBeforeRouteUpdate(updateGuard) {
    if (!_vue.getCurrentInstance()) {
        warn('getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function');
        return;
    }
    const activeRecord = _vue.inject(matchedRouteKey, // to avoid warning
    {
    }).value;
    if (!activeRecord) {
        warn('No active route record was found. Are you missing a <router-view> component?');
        return;
    }
    registerGuard(activeRecord, 'updateGuards', updateGuard);
}
function guardToPromiseFn(guard, to, from, record, name) {
    // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place
    const enterCallbackArray = record && (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
    return ()=>new Promise((resolve, reject)=>{
            const next = (valid)=>{
                if (valid === false) reject(createRouterError(4 /* NAVIGATION_ABORTED */ , {
                    from,
                    to
                }));
                else if (valid instanceof Error) reject(valid);
                else if (isRouteLocation(valid)) reject(createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */ , {
                    from: to,
                    to: valid
                }));
                else {
                    if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
                    record.enterCallbacks[name] === enterCallbackArray && typeof valid === 'function') enterCallbackArray.push(valid);
                    resolve();
                }
            };
            // wrapping with Promise.resolve allows it to work with both async and sync guards
            const guardReturn = guard.call(record && record.instances[name], to, from, canOnlyBeCalledOnce(next, to, from));
            let guardCall = Promise.resolve(guardReturn);
            if (guard.length < 3) guardCall = guardCall.then(next);
            if (guard.length > 2) {
                const message = `The "next" callback was never called inside of ${guard.name ? '"' + guard.name + '"' : ''}:\n${guard.toString()}\n. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;
                if (typeof guardReturn === 'object' && 'then' in guardReturn) guardCall = guardCall.then((resolvedValue)=>{
                    // @ts-expect-error: _called is added at canOnlyBeCalledOnce
                    if (!next._called) {
                        warn(message);
                        return Promise.reject(new Error('Invalid navigation guard'));
                    }
                    return resolvedValue;
                });
                else if (guardReturn !== undefined) // @ts-expect-error: _called is added at canOnlyBeCalledOnce
                {
                    if (!next._called) {
                        warn(message);
                        reject(new Error('Invalid navigation guard'));
                        return;
                    }
                }
            }
            guardCall.catch((err)=>reject(err)
            );
        })
    ;
}
function canOnlyBeCalledOnce(next, to, from) {
    let called = 0;
    return function() {
        if ((called++) === 1) warn(`The "next" callback was called more than once in one navigation guard when going from "${from.fullPath}" to "${to.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`);
        // @ts-expect-error: we put it in the original one because it's easier to check
        next._called = true;
        if (called === 1) next.apply(null, arguments);
    };
}
function extractComponentsGuards(matched, guardType, to, from) {
    const guards = [];
    for (const record of matched)for(const name in record.components){
        let rawComponent = record.components[name];
        if (!rawComponent || typeof rawComponent !== 'object' && typeof rawComponent !== 'function') {
            warn(`Component "${name}" in record with path "${record.path}" is not` + ` a valid component. Received "${String(rawComponent)}".`);
            // throw to ensure we stop here but warn to ensure the message isn't
            // missed by the user
            throw new Error('Invalid route component');
        } else if ('then' in rawComponent) {
            // warn if user wrote import('/component.vue') instead of () =>
            // import('./component.vue')
            warn(`Component "${name}" in record with path "${record.path}" is a ` + `Promise instead of a function that returns a Promise. Did you ` + `write "import('./MyPage.vue')" instead of ` + `"() => import('./MyPage.vue')" ? This will break in ` + `production if not fixed.`);
            const promise = rawComponent;
            rawComponent = ()=>promise
            ;
        } else if (rawComponent.__asyncLoader && // warn only once per component
        !rawComponent.__warnedDefineAsync) {
            rawComponent.__warnedDefineAsync = true;
            warn(`Component "${name}" in record with path "${record.path}" is defined ` + `using "defineAsyncComponent()". ` + `Write "() => import('./MyPage.vue')" instead of ` + `"defineAsyncComponent(() => import('./MyPage.vue'))".`);
        }
        // skip update and leave guards if the route component is not mounted
        if (guardType !== 'beforeRouteEnter' && !record.instances[name]) continue;
        if (isRouteComponent(rawComponent)) {
            // __vccOpts is added by vue-class-component and contain the regular options
            const options = rawComponent.__vccOpts || rawComponent;
            const guard = options[guardType];
            guard && guards.push(guardToPromiseFn(guard, to, from, record, name));
        } else {
            // start requesting the chunk already
            let componentPromise = rawComponent();
            if (!('catch' in componentPromise)) {
                warn(`Component "${name}" in record with path "${record.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`);
                componentPromise = Promise.resolve(componentPromise);
            }
            guards.push(()=>componentPromise.then((resolved)=>{
                    if (!resolved) return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
                    const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
                    // replace the function with the resolved component
                    record.components[name] = resolvedComponent;
                    // __vccOpts is added by vue-class-component and contain the regular options
                    const options = resolvedComponent.__vccOpts || resolvedComponent;
                    const guard = options[guardType];
                    return guard && guardToPromiseFn(guard, to, from, record, name)();
                })
            );
        }
    }
    return guards;
}
/**
 * Allows differentiating lazy components from functional components and vue-class-component
 *
 * @param component
 */ function isRouteComponent(component) {
    return typeof component === 'object' || 'displayName' in component || 'props' in component || '__vccOpts' in component;
}
// TODO: we could allow currentRoute as a prop to expose `isActive` and
// `isExactActive` behavior should go through an RFC
function useLink(props) {
    const router = _vue.inject(routerKey);
    const currentRoute = _vue.inject(routeLocationKey);
    const route = _vue.computed(()=>router.resolve(_vue.unref(props.to))
    );
    const activeRecordIndex = _vue.computed(()=>{
        const { matched  } = route.value;
        const { length  } = matched;
        const routeMatched = matched[length - 1];
        const currentMatched = currentRoute.matched;
        if (!routeMatched || !currentMatched.length) return -1;
        const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
        if (index > -1) return index;
        // possible parent record
        const parentRecordPath = getOriginalPath(matched[length - 2]);
        return(// we are dealing with nested routes
        length > 1 && // if the parent and matched route have the same path, this link is
        // referring to the empty child. Or we currently are on a different
        // child of the same parent
        getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
        currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index);
    });
    const isActive = _vue.computed(()=>activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params)
    );
    const isExactActive = _vue.computed(()=>activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params)
    );
    function navigate(e = {
    }) {
        if (guardEvent(e)) return router[_vue.unref(props.replace) ? 'replace' : 'push'](_vue.unref(props.to)).catch(noop);
        return Promise.resolve();
    }
    // devtools only
    if (isBrowser) {
        const instance = _vue.getCurrentInstance();
        if (instance) {
            const linkContextDevtools = {
                route: route.value,
                isActive: isActive.value,
                isExactActive: isExactActive.value
            };
            // @ts-expect-error: this is internal
            instance.__vrl_devtools = instance.__vrl_devtools || [];
            // @ts-expect-error: this is internal
            instance.__vrl_devtools.push(linkContextDevtools);
            _vue.watchEffect(()=>{
                linkContextDevtools.route = route.value;
                linkContextDevtools.isActive = isActive.value;
                linkContextDevtools.isExactActive = isExactActive.value;
            }, {
                flush: 'post'
            });
        }
    }
    return {
        route,
        href: _vue.computed(()=>route.value.href
        ),
        isActive,
        isExactActive,
        navigate
    };
}
const RouterLinkImpl = /*#__PURE__*/ _vue.defineComponent({
    name: 'RouterLink',
    props: {
        to: {
            type: [
                String,
                Object
            ],
            required: true
        },
        replace: Boolean,
        activeClass: String,
        // inactiveClass: String,
        exactActiveClass: String,
        custom: Boolean,
        ariaCurrentValue: {
            type: String,
            default: 'page'
        }
    },
    useLink,
    setup (props, { slots  }) {
        const link = _vue.reactive(useLink(props));
        const { options  } = _vue.inject(routerKey);
        const elClass = _vue.computed(()=>({
                [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,
                // [getLinkClass(
                //   props.inactiveClass,
                //   options.linkInactiveClass,
                //   'router-link-inactive'
                // )]: !link.isExactActive,
                [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive
            })
        );
        return ()=>{
            const children = slots.default && slots.default(link);
            return props.custom ? children : _vue.h('a', {
                'aria-current': link.isExactActive ? props.ariaCurrentValue : null,
                href: link.href,
                // this would override user added attrs but Vue will still add
                // the listener so we end up triggering both
                onClick: link.navigate,
                class: elClass.value
            }, children);
        };
    }
});
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
/**
 * Component to render a link that triggers a navigation on click.
 */ const RouterLink = RouterLinkImpl;
function guardEvent(e) {
    // don't redirect with control keys
    if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return;
    // don't redirect when preventDefault called
    if (e.defaultPrevented) return;
    // don't redirect on right click
    if (e.button !== undefined && e.button !== 0) return;
    // don't redirect if `target="_blank"`
    // @ts-expect-error getAttribute does exist
    if (e.currentTarget && e.currentTarget.getAttribute) {
        // @ts-expect-error getAttribute exists
        const target = e.currentTarget.getAttribute('target');
        if (/\b_blank\b/i.test(target)) return;
    }
    // this may be a Weex event which doesn't have this method
    if (e.preventDefault) e.preventDefault();
    return true;
}
function includesParams(outer, inner) {
    for(const key in inner){
        const innerValue = inner[key];
        const outerValue = outer[key];
        if (typeof innerValue === 'string') {
            if (innerValue !== outerValue) return false;
        } else {
            if (!Array.isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i)=>value !== outerValue[i]
            )) return false;
        }
    }
    return true;
}
/**
 * Get the original path value of a record by following its aliasOf
 * @param record
 */ function getOriginalPath(record) {
    return record ? record.aliasOf ? record.aliasOf.path : record.path : '';
}
/**
 * Utility class to get the active class based on defaults.
 * @param propClass
 * @param globalClass
 * @param defaultClass
 */ const getLinkClass = (propClass, globalClass, defaultClass)=>propClass != null ? propClass : globalClass != null ? globalClass : defaultClass
;
const RouterViewImpl = /*#__PURE__*/ _vue.defineComponent({
    name: 'RouterView',
    // #674 we manually inherit them
    inheritAttrs: false,
    props: {
        name: {
            type: String,
            default: 'default'
        },
        route: Object
    },
    setup (props, { attrs , slots  }) {
        warnDeprecatedUsage();
        const injectedRoute = _vue.inject(routerViewLocationKey);
        const routeToDisplay = _vue.computed(()=>props.route || injectedRoute.value
        );
        const depth = _vue.inject(viewDepthKey, 0);
        const matchedRouteRef = _vue.computed(()=>routeToDisplay.value.matched[depth]
        );
        _vue.provide(viewDepthKey, depth + 1);
        _vue.provide(matchedRouteKey, matchedRouteRef);
        _vue.provide(routerViewLocationKey, routeToDisplay);
        const viewRef = _vue.ref();
        // watch at the same time the component instance, the route record we are
        // rendering, and the name
        _vue.watch(()=>[
                viewRef.value,
                matchedRouteRef.value,
                props.name
            ]
        , ([instance, to, name], [oldInstance, from, oldName])=>{
            // copy reused instances
            if (to) {
                // this will update the instance for new instances as well as reused
                // instances when navigating to a new route
                to.instances[name] = instance;
                // the component instance is reused for a different route or name so
                // we copy any saved update or leave guards. With async setup, the
                // mounting component will mount before the matchedRoute changes,
                // making instance === oldInstance, so we check if guards have been
                // added before. This works because we remove guards when
                // unmounting/deactivating components
                if (from && from !== to && instance && instance === oldInstance) {
                    if (!to.leaveGuards.size) to.leaveGuards = from.leaveGuards;
                    if (!to.updateGuards.size) to.updateGuards = from.updateGuards;
                }
            }
            // trigger beforeRouteEnter next callbacks
            if (instance && to && (!from || !isSameRouteRecord(to, from) || !oldInstance)) (to.enterCallbacks[name] || []).forEach((callback)=>callback(instance)
            );
        }, {
            flush: 'post'
        });
        return ()=>{
            const route = routeToDisplay.value;
            const matchedRoute = matchedRouteRef.value;
            const ViewComponent = matchedRoute && matchedRoute.components[props.name];
            // we need the value at the time we render because when we unmount, we
            // navigated to a different location so the value is different
            const currentName = props.name;
            if (!ViewComponent) return normalizeSlot(slots.default, {
                Component: ViewComponent,
                route
            });
            // props from route configuration
            const routePropsOption = matchedRoute.props[props.name];
            const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === 'function' ? routePropsOption(route) : routePropsOption : null;
            const onVnodeUnmounted = (vnode)=>{
                // remove the instance reference to prevent leak
                if (vnode.component.isUnmounted) matchedRoute.instances[currentName] = null;
            };
            const component = _vue.h(ViewComponent, assign({
            }, routeProps, attrs, {
                onVnodeUnmounted,
                ref: viewRef
            }));
            return(// pass the vnode to the slot as a prop.
            // h and <component :is="..."> both accept vnodes
            normalizeSlot(slots.default, {
                Component: component,
                route
            }) || component);
        };
    }
});
function normalizeSlot(slot, data) {
    if (!slot) return null;
    const slotContent = slot(data);
    return slotContent.length === 1 ? slotContent[0] : slotContent;
}
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
/**
 * Component to display the current route the user is at.
 */ const RouterView = RouterViewImpl;
// warn against deprecated usage with <transition> & <keep-alive>
// due to functional component being no longer eager in Vue 3
function warnDeprecatedUsage() {
    const instance = _vue.getCurrentInstance();
    const parentName = instance.parent && instance.parent.type.name;
    if (parentName && (parentName === 'KeepAlive' || parentName.includes('Transition'))) {
        const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';
        warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\n` + `Use slot props instead:\n\n` + `<router-view v-slot="{ Component }">\n` + `  <${comp}>\n` + `    <component :is="Component" />\n` + `  </${comp}>\n` + `</router-view>`);
    }
}
function formatRouteLocation(routeLocation, tooltip) {
    const copy = assign({
    }, routeLocation, {
        // remove variables that can contain vue instances
        matched: routeLocation.matched.map((matched)=>omit(matched, [
                'instances',
                'children',
                'aliasOf'
            ])
        )
    });
    return {
        _custom: {
            type: null,
            readOnly: true,
            display: routeLocation.fullPath,
            tooltip,
            value: copy
        }
    };
}
function formatDisplay(display) {
    return {
        _custom: {
            display
        }
    };
}
// to support multiple router instances
let routerId = 0;
function addDevtools(app, router, matcher) {
    // Take over router.beforeEach and afterEach
    // make sure we are not registering the devtool twice
    if (router.__hasDevtools) return;
    router.__hasDevtools = true;
    // increment to support multiple router instances
    const id = routerId++;
    _devtoolsApi.setupDevtoolsPlugin({
        id: 'org.vuejs.router' + (id ? '.' + id : ''),
        label: 'Vue Router',
        packageName: 'vue-router',
        homepage: 'https://next.router.vuejs.org/',
        logo: 'https://vuejs.org/images/icons/favicon-96x96.png',
        componentStateTypes: [
            'Routing'
        ],
        app
    }, (api)=>{
        // display state added by the router
        api.on.inspectComponent((payload, ctx)=>{
            if (payload.instanceData) payload.instanceData.state.push({
                type: 'Routing',
                key: '$route',
                editable: false,
                value: formatRouteLocation(router.currentRoute.value, 'Current Route')
            });
        });
        // mark router-link as active
        api.on.visitComponentTree(({ treeNode: node , componentInstance  })=>{
            // if multiple useLink are used
            if (Array.isArray(componentInstance.__vrl_devtools)) {
                componentInstance.__devtoolsApi = api;
                componentInstance.__vrl_devtools.forEach((devtoolsData)=>{
                    let backgroundColor = ORANGE_400;
                    let tooltip = '';
                    if (devtoolsData.isExactActive) {
                        backgroundColor = LIME_500;
                        tooltip = 'This is exactly active';
                    } else if (devtoolsData.isActive) {
                        backgroundColor = BLUE_600;
                        tooltip = 'This link is active';
                    }
                    node.tags.push({
                        label: devtoolsData.route.path,
                        textColor: 0,
                        tooltip,
                        backgroundColor
                    });
                });
            }
        });
        _vue.watch(router.currentRoute, ()=>{
            // refresh active state
            refreshRoutesView();
            api.notifyComponentUpdate();
            api.sendInspectorTree(routerInspectorId);
            api.sendInspectorState(routerInspectorId);
        });
        const navigationsLayerId = 'router:navigations:' + id;
        api.addTimelineLayer({
            id: navigationsLayerId,
            label: `Router${id ? ' ' + id : ''} Navigations`,
            color: 4237508
        });
        // const errorsLayerId = 'router:errors'
        // api.addTimelineLayer({
        //   id: errorsLayerId,
        //   label: 'Router Errors',
        //   color: 0xea5455,
        // })
        router.onError((error, to)=>{
            api.addTimelineEvent({
                layerId: navigationsLayerId,
                event: {
                    title: 'Error during Navigation',
                    subtitle: to.fullPath,
                    logType: 'error',
                    time: Date.now(),
                    data: {
                        error
                    },
                    groupId: to.meta.__navigationId
                }
            });
        });
        // attached to `meta` and used to group events
        let navigationId = 0;
        router.beforeEach((to, from)=>{
            const data = {
                guard: formatDisplay('beforeEach'),
                from: formatRouteLocation(from, 'Current Location during this navigation'),
                to: formatRouteLocation(to, 'Target location')
            };
            // Used to group navigations together, hide from devtools
            Object.defineProperty(to.meta, '__navigationId', {
                value: navigationId++
            });
            api.addTimelineEvent({
                layerId: navigationsLayerId,
                event: {
                    time: Date.now(),
                    title: 'Start of navigation',
                    subtitle: to.fullPath,
                    data,
                    groupId: to.meta.__navigationId
                }
            });
        });
        router.afterEach((to, from, failure)=>{
            const data = {
                guard: formatDisplay('afterEach')
            };
            if (failure) {
                data.failure = {
                    _custom: {
                        type: Error,
                        readOnly: true,
                        display: failure ? failure.message : '',
                        tooltip: 'Navigation Failure',
                        value: failure
                    }
                };
                data.status = formatDisplay('❌');
            } else data.status = formatDisplay('✅');
            // we set here to have the right order
            data.from = formatRouteLocation(from, 'Current Location during this navigation');
            data.to = formatRouteLocation(to, 'Target location');
            api.addTimelineEvent({
                layerId: navigationsLayerId,
                event: {
                    title: 'End of navigation',
                    subtitle: to.fullPath,
                    time: Date.now(),
                    data,
                    logType: failure ? 'warning' : 'default',
                    groupId: to.meta.__navigationId
                }
            });
        });
        /**
         * Inspector of Existing routes
         */ const routerInspectorId = 'router-inspector:' + id;
        api.addInspector({
            id: routerInspectorId,
            label: 'Routes' + (id ? ' ' + id : ''),
            icon: 'book',
            treeFilterPlaceholder: 'Search routes'
        });
        function refreshRoutesView() {
            // the routes view isn't active
            if (!activeRoutesPayload) return;
            const payload = activeRoutesPayload;
            // children routes will appear as nested
            let routes = matcher.getRoutes().filter((route)=>!route.parent
            );
            // reset match state to false
            routes.forEach(resetMatchStateOnRouteRecord);
            // apply a match state if there is a payload
            if (payload.filter) routes = routes.filter((route)=>// save matches state based on the payload
                isRouteMatching(route, payload.filter.toLowerCase())
            );
            // mark active routes
            routes.forEach((route)=>markRouteRecordActive(route, router.currentRoute.value)
            );
            payload.rootNodes = routes.map(formatRouteRecordForInspector);
        }
        let activeRoutesPayload;
        api.on.getInspectorTree((payload)=>{
            activeRoutesPayload = payload;
            if (payload.app === app && payload.inspectorId === routerInspectorId) refreshRoutesView();
        });
        /**
         * Display information about the currently selected route record
         */ api.on.getInspectorState((payload)=>{
            if (payload.app === app && payload.inspectorId === routerInspectorId) {
                const routes = matcher.getRoutes();
                const route = routes.find((route1)=>route1.record.__vd_id === payload.nodeId
                );
                if (route) payload.state = {
                    options: formatRouteRecordMatcherForStateInspector(route)
                };
            }
        });
        api.sendInspectorTree(routerInspectorId);
        api.sendInspectorState(routerInspectorId);
    });
}
function modifierForKey(key) {
    if (key.optional) return key.repeatable ? '*' : '?';
    else return key.repeatable ? '+' : '';
}
function formatRouteRecordMatcherForStateInspector(route) {
    const { record  } = route;
    const fields = [
        {
            editable: false,
            key: 'path',
            value: record.path
        }, 
    ];
    if (record.name != null) fields.push({
        editable: false,
        key: 'name',
        value: record.name
    });
    fields.push({
        editable: false,
        key: 'regexp',
        value: route.re
    });
    if (route.keys.length) fields.push({
        editable: false,
        key: 'keys',
        value: {
            _custom: {
                type: null,
                readOnly: true,
                display: route.keys.map((key)=>`${key.name}${modifierForKey(key)}`
                ).join(' '),
                tooltip: 'Param keys',
                value: route.keys
            }
        }
    });
    if (record.redirect != null) fields.push({
        editable: false,
        key: 'redirect',
        value: record.redirect
    });
    if (route.alias.length) fields.push({
        editable: false,
        key: 'aliases',
        value: route.alias.map((alias)=>alias.record.path
        )
    });
    fields.push({
        key: 'score',
        editable: false,
        value: {
            _custom: {
                type: null,
                readOnly: true,
                display: route.score.map((score)=>score.join(', ')
                ).join(' | '),
                tooltip: 'Score used to sort routes',
                value: route.score
            }
        }
    });
    return fields;
}
/**
 * Extracted from tailwind palette
 */ const PINK_500 = 15485081;
const BLUE_600 = 2450411;
const LIME_500 = 8702998;
const CYAN_400 = 2282478;
const ORANGE_400 = 16486972;
// const GRAY_100 = 0xf4f4f5
const DARK = 6710886;
function formatRouteRecordForInspector(route) {
    const tags = [];
    const { record  } = route;
    if (record.name != null) tags.push({
        label: String(record.name),
        textColor: 0,
        backgroundColor: CYAN_400
    });
    if (record.aliasOf) tags.push({
        label: 'alias',
        textColor: 0,
        backgroundColor: ORANGE_400
    });
    if (route.__vd_match) tags.push({
        label: 'matches',
        textColor: 0,
        backgroundColor: PINK_500
    });
    if (route.__vd_exactActive) tags.push({
        label: 'exact',
        textColor: 0,
        backgroundColor: LIME_500
    });
    if (route.__vd_active) tags.push({
        label: 'active',
        textColor: 0,
        backgroundColor: BLUE_600
    });
    if (record.redirect) tags.push({
        label: 'redirect: ' + (typeof record.redirect === 'string' ? record.redirect : 'Object'),
        textColor: 16777215,
        backgroundColor: DARK
    });
    // add an id to be able to select it. Using the `path` is not possible because
    // empty path children would collide with their parents
    let id = record.__vd_id;
    if (id == null) {
        id = String(routeRecordId++);
        record.__vd_id = id;
    }
    return {
        id,
        label: record.path,
        tags,
        children: route.children.map(formatRouteRecordForInspector)
    };
}
//  incremental id for route records and inspector state
let routeRecordId = 0;
const EXTRACT_REGEXP_RE = /^\/(.*)\/([a-z]*)$/;
function markRouteRecordActive(route, currentRoute) {
    // no route will be active if matched is empty
    // reset the matching state
    const isExactActive = currentRoute.matched.length && isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);
    route.__vd_exactActive = route.__vd_active = isExactActive;
    if (!isExactActive) route.__vd_active = currentRoute.matched.some((match)=>isSameRouteRecord(match, route.record)
    );
    route.children.forEach((childRoute)=>markRouteRecordActive(childRoute, currentRoute)
    );
}
function resetMatchStateOnRouteRecord(route) {
    route.__vd_match = false;
    route.children.forEach(resetMatchStateOnRouteRecord);
}
function isRouteMatching(route, filter) {
    const found = String(route.re).match(EXTRACT_REGEXP_RE);
    route.__vd_match = false;
    if (!found || found.length < 3) return false;
    // use a regexp without $ at the end to match nested routes better
    const nonEndingRE = new RegExp(found[1].replace(/\$$/, ''), found[2]);
    if (nonEndingRE.test(filter)) {
        // mark children as matches
        route.children.forEach((child)=>isRouteMatching(child, filter)
        );
        // exception case: `/`
        if (route.record.path !== '/' || filter === '/') {
            route.__vd_match = route.re.test(filter);
            return true;
        }
        // hide the / route
        return false;
    }
    const path = route.record.path.toLowerCase();
    const decodedPath = decode(path);
    // also allow partial matching on the path
    if (!filter.startsWith('/') && (decodedPath.includes(filter) || path.includes(filter))) return true;
    if (decodedPath.startsWith(filter) || path.startsWith(filter)) return true;
    if (route.record.name && String(route.record.name).includes(filter)) return true;
    return route.children.some((child)=>isRouteMatching(child, filter)
    );
}
function omit(obj, keys) {
    const ret = {
    };
    for(const key in obj)if (!keys.includes(key)) // @ts-expect-error
    ret[key] = obj[key];
    return ret;
}
/**
 * Creates a Router instance that can be used by a Vue app.
 *
 * @param options - {@link RouterOptions}
 */ function createRouter(options) {
    const matcher = createRouterMatcher(options.routes, options);
    const parseQuery$1 = options.parseQuery || parseQuery;
    const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
    const routerHistory = options.history;
    if (!routerHistory) throw new Error("Provide the \"history\" option when calling \"createRouter()\": https://next.router.vuejs.org/api/#history.");
    const beforeGuards = useCallbacks();
    const beforeResolveGuards = useCallbacks();
    const afterGuards = useCallbacks();
    const currentRoute = _vue.shallowRef(START_LOCATION_NORMALIZED);
    let pendingLocation = START_LOCATION_NORMALIZED;
    // leave the scrollRestoration if no scrollBehavior is provided
    if (isBrowser && options.scrollBehavior && 'scrollRestoration' in history) history.scrollRestoration = 'manual';
    const normalizeParams = applyToParams.bind(null, (paramValue)=>'' + paramValue
    );
    const encodeParams = applyToParams.bind(null, encodeParam);
    const decodeParams = // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode);
    function addRoute(parentOrRoute, route) {
        let parent;
        let record;
        if (isRouteName(parentOrRoute)) {
            parent = matcher.getRecordMatcher(parentOrRoute);
            record = route;
        } else record = parentOrRoute;
        return matcher.addRoute(record, parent);
    }
    function removeRoute(name) {
        const recordMatcher = matcher.getRecordMatcher(name);
        if (recordMatcher) matcher.removeRoute(recordMatcher);
        else warn(`Cannot remove non-existent route "${String(name)}"`);
    }
    function getRoutes() {
        return matcher.getRoutes().map((routeMatcher)=>routeMatcher.record
        );
    }
    function hasRoute(name) {
        return !!matcher.getRecordMatcher(name);
    }
    function resolve(rawLocation, currentLocation) {
        // const objectLocation = routerLocationAsObject(rawLocation)
        // we create a copy to modify it later
        currentLocation = assign({
        }, currentLocation || currentRoute.value);
        if (typeof rawLocation === 'string') {
            const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
            const matchedRoute = matcher.resolve({
                path: locationNormalized.path
            }, currentLocation);
            const href = routerHistory.createHref(locationNormalized.fullPath);
            if (href.startsWith('//')) warn(`Location "${rawLocation}" resolved to "${href}". A resolved location cannot start with multiple slashes.`);
            else if (!matchedRoute.matched.length) warn(`No match found for location with path "${rawLocation}"`);
            // locationNormalized is always a new object
            return assign(locationNormalized, matchedRoute, {
                params: decodeParams(matchedRoute.params),
                hash: decode(locationNormalized.hash),
                redirectedFrom: undefined,
                href
            });
        }
        let matcherLocation;
        // path could be relative in object as well
        if ('path' in rawLocation) {
            if ('params' in rawLocation && !('name' in rawLocation) && Object.keys(rawLocation.params).length) warn(`Path "${rawLocation.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`);
            matcherLocation = assign({
            }, rawLocation, {
                path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
            });
        } else {
            // remove any nullish param
            const targetParams = assign({
            }, rawLocation.params);
            for(const key in targetParams)if (targetParams[key] == null) delete targetParams[key];
            // pass encoded values to the matcher so it can produce encoded path and fullPath
            matcherLocation = assign({
            }, rawLocation, {
                params: encodeParams(rawLocation.params)
            });
            // current location params are decoded, we need to encode them in case the
            // matcher merges the params
            currentLocation.params = encodeParams(currentLocation.params);
        }
        const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
        const hash = rawLocation.hash || '';
        if (hash && !hash.startsWith('#')) warn(`A \`hash\` should always start with the character "#". Replace "${hash}" with "#${hash}".`);
        // decoding them) the matcher might have merged current location params so
        // we need to run the decoding again
        matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
        const fullPath = stringifyURL(stringifyQuery$1, assign({
        }, rawLocation, {
            hash: encodeHash(hash),
            path: matchedRoute.path
        }));
        const href = routerHistory.createHref(fullPath);
        if (href.startsWith('//')) warn(`Location "${rawLocation}" resolved to "${href}". A resolved location cannot start with multiple slashes.`);
        else if (!matchedRoute.matched.length) warn(`No match found for location with path "${'path' in rawLocation ? rawLocation.path : rawLocation}"`);
        return assign({
            fullPath,
            // keep the hash encoded so fullPath is effectively path + encodedQuery +
            // hash
            hash,
            query: // if the user is using a custom query lib like qs, we might have
            // nested objects, so we keep the query as is, meaning it can contain
            // numbers at `$route.query`, but at the point, the user will have to
            // use their own type anyway.
            // https://github.com/vuejs/vue-router-next/issues/328#issuecomment-649481567
            stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {
            }
        }, matchedRoute, {
            redirectedFrom: undefined,
            href
        });
    }
    function locationAsObject(to) {
        return typeof to === 'string' ? parseURL(parseQuery$1, to, currentRoute.value.path) : assign({
        }, to);
    }
    function checkCanceledNavigation(to, from) {
        if (pendingLocation !== to) return createRouterError(8 /* NAVIGATION_CANCELLED */ , {
            from,
            to
        });
    }
    function push(to) {
        return pushWithRedirect(to);
    }
    function replace(to) {
        return push(assign(locationAsObject(to), {
            replace: true
        }));
    }
    function handleRedirectRecord(to) {
        const lastMatched = to.matched[to.matched.length - 1];
        if (lastMatched && lastMatched.redirect) {
            const { redirect  } = lastMatched;
            let newTargetLocation = typeof redirect === 'function' ? redirect(to) : redirect;
            if (typeof newTargetLocation === 'string') {
                newTargetLocation = newTargetLocation.includes('?') || newTargetLocation.includes('#') ? newTargetLocation = locationAsObject(newTargetLocation) : {
                    path: newTargetLocation
                };
                // @ts-expect-error: force empty params when a string is passed to let
                // the router parse them again
                newTargetLocation.params = {
                };
            }
            if (!('path' in newTargetLocation) && !('name' in newTargetLocation)) {
                warn(`Invalid redirect found:\n${JSON.stringify(newTargetLocation, null, 2)}\n when navigating to "${to.fullPath}". A redirect must contain a name or path. This will break in production.`);
                throw new Error('Invalid redirect');
            }
            return assign({
                query: to.query,
                hash: to.hash,
                params: to.params
            }, newTargetLocation);
        }
    }
    function pushWithRedirect(to, redirectedFrom) {
        const targetLocation = pendingLocation = resolve(to);
        const from = currentRoute.value;
        const data = to.state;
        const force = to.force;
        // to could be a string where `replace` is a function
        const replace1 = to.replace === true;
        const shouldRedirect = handleRedirectRecord(targetLocation);
        if (shouldRedirect) return pushWithRedirect(assign(locationAsObject(shouldRedirect), {
            state: data,
            force,
            replace: replace1
        }), // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation);
        // if it was a redirect we already called `pushWithRedirect` above
        const toLocation = targetLocation;
        toLocation.redirectedFrom = redirectedFrom;
        let failure;
        if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {
            failure = createRouterError(16 /* NAVIGATION_DUPLICATED */ , {
                to: toLocation,
                from
            });
            // trigger scroll to allow scrolling to the same anchor
            handleScroll(from, from, // this is a push, the only way for it to be triggered from a
            // history.listen is with a redirect, which makes it become a push
            true, // This cannot be the first navigation because the initial location
            // cannot be manually navigated to
            false);
        }
        return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error)=>isNavigationFailure(error) ? error : triggerError(error, toLocation, from)
        ).then((failure1)=>{
            if (failure1) {
                if (isNavigationFailure(failure1, 2 /* NAVIGATION_GUARD_REDIRECT */ )) {
                    if (// we are redirecting to the same location we were already at
                    isSameRouteLocation(stringifyQuery$1, resolve(failure1.to), toLocation) && // and we have done it a couple of times
                    redirectedFrom && // @ts-expect-error: added only in dev
                    (redirectedFrom._count = redirectedFrom._count ? redirectedFrom._count + 1 : 1) > 10) {
                        warn(`Detected an infinite redirection in a navigation guard when going from "${from.fullPath}" to "${toLocation.fullPath}". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);
                        return Promise.reject(new Error('Infinite redirect in navigation guard'));
                    }
                    return pushWithRedirect(// keep options
                    assign(locationAsObject(failure1.to), {
                        state: data,
                        force,
                        replace: replace1
                    }), // preserve the original redirectedFrom if any
                    redirectedFrom || toLocation);
                }
            } else // if we fail we don't finalize the navigation
            failure1 = finalizeNavigation(toLocation, from, true, replace1, data);
            triggerAfterEach(toLocation, from, failure1);
            return failure1;
        });
    }
    /**
     * Helper to reject and skip all navigation guards if a new navigation happened
     * @param to
     * @param from
     */ function checkCanceledNavigationAndReject(to, from) {
        const error = checkCanceledNavigation(to, from);
        return error ? Promise.reject(error) : Promise.resolve();
    }
    // TODO: refactor the whole before guards by internally using router.beforeEach
    function navigate(to, from) {
        let guards;
        const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);
        // all components here have been resolved once because we are leaving
        guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);
        // leavingRecords is already reversed
        for (const record of leavingRecords)record.leaveGuards.forEach((guard)=>{
            guards.push(guardToPromiseFn(guard, to, from));
        });
        const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);
        guards.push(canceledNavigationCheck);
        // run the queue of per route beforeRouteLeave guards
        return runGuardQueue(guards).then(()=>{
            // check global guards beforeEach
            guards = [];
            for (const guard of beforeGuards.list())guards.push(guardToPromiseFn(guard, to, from));
            guards.push(canceledNavigationCheck);
            return runGuardQueue(guards);
        }).then(()=>{
            // check in components beforeRouteUpdate
            guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);
            for (const record1 of updatingRecords)record1.updateGuards.forEach((guard)=>{
                guards.push(guardToPromiseFn(guard, to, from));
            });
            guards.push(canceledNavigationCheck);
            // run the queue of per route beforeEnter guards
            return runGuardQueue(guards);
        }).then(()=>{
            // check the route beforeEnter
            guards = [];
            for (const record1 of to.matched)// do not trigger beforeEnter on reused views
            if (record1.beforeEnter && !from.matched.includes(record1)) {
                if (Array.isArray(record1.beforeEnter)) for (const beforeEnter of record1.beforeEnter)guards.push(guardToPromiseFn(beforeEnter, to, from));
                else guards.push(guardToPromiseFn(record1.beforeEnter, to, from));
            }
            guards.push(canceledNavigationCheck);
            // run the queue of per route beforeEnter guards
            return runGuardQueue(guards);
        }).then(()=>{
            // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>
            // clear existing enterCallbacks, these are added by extractComponentsGuards
            to.matched.forEach((record1)=>record1.enterCallbacks = {
                }
            );
            // check in-component beforeRouteEnter
            guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from);
            guards.push(canceledNavigationCheck);
            // run the queue of per route beforeEnter guards
            return runGuardQueue(guards);
        }).then(()=>{
            // check global guards beforeResolve
            guards = [];
            for (const guard of beforeResolveGuards.list())guards.push(guardToPromiseFn(guard, to, from));
            guards.push(canceledNavigationCheck);
            return runGuardQueue(guards);
        })// catch any navigation canceled
        .catch((err)=>isNavigationFailure(err, 8 /* NAVIGATION_CANCELLED */ ) ? err : Promise.reject(err)
        );
    }
    function triggerAfterEach(to, from, failure) {
        // navigation is confirmed, call afterGuards
        // TODO: wrap with error handlers
        for (const guard of afterGuards.list())guard(to, from, failure);
    }
    /**
     * - Cleans up any navigation guards
     * - Changes the url if necessary
     * - Calls the scrollBehavior
     */ function finalizeNavigation(toLocation, from, isPush, replace1, data) {
        // a more recent navigation took place
        const error = checkCanceledNavigation(toLocation, from);
        if (error) return error;
        // only consider as push if it's not the first navigation
        const isFirstNavigation = from === START_LOCATION_NORMALIZED;
        const state = !isBrowser ? {
        } : history.state;
        // change URL only if the user did a push/replace and if it's not the initial navigation because
        // it's just reflecting the url
        if (isPush) {
            // on the initial navigation, we want to reuse the scroll position from
            // history state if it exists
            if (replace1 || isFirstNavigation) routerHistory.replace(toLocation.fullPath, assign({
                scroll: isFirstNavigation && state && state.scroll
            }, data));
            else routerHistory.push(toLocation.fullPath, data);
        }
        // accept current navigation
        currentRoute.value = toLocation;
        handleScroll(toLocation, from, isPush, isFirstNavigation);
        markAsReady();
    }
    let removeHistoryListener;
    // attach listener to history to trigger navigations
    function setupListeners() {
        removeHistoryListener = routerHistory.listen((to, _from, info)=>{
            // cannot be a redirect route because it was in history
            const toLocation = resolve(to);
            // due to dynamic routing, and to hash history with manual navigation
            // (manually changing the url or calling history.hash = '#/somewhere'),
            // there could be a redirect record in history
            const shouldRedirect = handleRedirectRecord(toLocation);
            if (shouldRedirect) {
                pushWithRedirect(assign(shouldRedirect, {
                    replace: true
                }), toLocation).catch(noop);
                return;
            }
            pendingLocation = toLocation;
            const from = currentRoute.value;
            // TODO: should be moved to web history?
            if (isBrowser) saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
            navigate(toLocation, from).catch((error)=>{
                if (isNavigationFailure(error, 12 /* NAVIGATION_CANCELLED */ )) return error;
                if (isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */ )) {
                    // Here we could call if (info.delta) routerHistory.go(-info.delta,
                    // false) but this is bug prone as we have no way to wait the
                    // navigation to be finished before calling pushWithRedirect. Using
                    // a setTimeout of 16ms seems to work but there is not guarantee for
                    // it to work on every browser. So Instead we do not restore the
                    // history entry and trigger a new navigation as requested by the
                    // navigation guard.
                    // the error is already handled by router.push we just want to avoid
                    // logging the error
                    pushWithRedirect(error.to, toLocation).then((failure)=>{
                        // manual change in hash history #916 ending up in the URL not
                        // changing but it was changed by the manual url change, so we
                        // need to manually change it ourselves
                        if (isNavigationFailure(failure, 20 /* NAVIGATION_DUPLICATED */ ) && !info.delta && info.type === NavigationType.pop) routerHistory.go(-1, false);
                    }).catch(noop);
                    // avoid the then branch
                    return Promise.reject();
                }
                // do not restore history on unknown direction
                if (info.delta) routerHistory.go(-info.delta, false);
                // unrecognized error, transfer to the global handler
                return triggerError(error, toLocation, from);
            }).then((failure)=>{
                failure = failure || finalizeNavigation(// after navigation, all matched components are resolved
                toLocation, from, false);
                // revert the navigation
                if (failure) {
                    if (info.delta) routerHistory.go(-info.delta, false);
                    else if (info.type === NavigationType.pop && isNavigationFailure(failure, 20 /* NAVIGATION_DUPLICATED */ )) // manual change in hash history #916
                    // it's like a push but lacks the information of the direction
                    routerHistory.go(-1, false);
                }
                triggerAfterEach(toLocation, from, failure);
            }).catch(noop);
        });
    }
    // Initialization and Errors
    let readyHandlers = useCallbacks();
    let errorHandlers = useCallbacks();
    let ready;
    /**
     * Trigger errorHandlers added via onError and throws the error as well
     *
     * @param error - error to throw
     * @param to - location we were navigating to when the error happened
     * @param from - location we were navigating from when the error happened
     * @returns the error as a rejected promise
     */ function triggerError(error, to, from) {
        markAsReady(error);
        const list = errorHandlers.list();
        if (list.length) list.forEach((handler)=>handler(error, to, from)
        );
        else {
            warn('uncaught error during route navigation:');
            console.error(error);
        }
        return Promise.reject(error);
    }
    function isReady() {
        if (ready && currentRoute.value !== START_LOCATION_NORMALIZED) return Promise.resolve();
        return new Promise((resolve1, reject)=>{
            readyHandlers.add([
                resolve1,
                reject
            ]);
        });
    }
    /**
     * Mark the router as ready, resolving the promised returned by isReady(). Can
     * only be called once, otherwise does nothing.
     * @param err - optional error
     */ function markAsReady(err) {
        if (ready) return;
        ready = true;
        setupListeners();
        readyHandlers.list().forEach(([resolve1, reject])=>err ? reject(err) : resolve1()
        );
        readyHandlers.reset();
    }
    // Scroll behavior
    function handleScroll(to, from, isPush, isFirstNavigation) {
        const { scrollBehavior  } = options;
        if (!isBrowser || !scrollBehavior) return Promise.resolve();
        const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
        return _vue.nextTick().then(()=>scrollBehavior(to, from, scrollPosition)
        ).then((position)=>position && scrollToPosition(position)
        ).catch((err)=>triggerError(err, to, from)
        );
    }
    const go = (delta)=>routerHistory.go(delta)
    ;
    let started;
    const installedApps = new Set();
    const router = {
        currentRoute,
        addRoute,
        removeRoute,
        hasRoute,
        getRoutes,
        resolve,
        options,
        push,
        replace,
        go,
        back: ()=>go(-1)
        ,
        forward: ()=>go(1)
        ,
        beforeEach: beforeGuards.add,
        beforeResolve: beforeResolveGuards.add,
        afterEach: afterGuards.add,
        onError: errorHandlers.add,
        isReady,
        install (app) {
            const router1 = this;
            app.component('RouterLink', RouterLink);
            app.component('RouterView', RouterView);
            app.config.globalProperties.$router = router1;
            Object.defineProperty(app.config.globalProperties, '$route', {
                enumerable: true,
                get: ()=>_vue.unref(currentRoute)
            });
            // this initial navigation is only necessary on client, on server it doesn't
            // make sense because it will create an extra unnecessary navigation and could
            // lead to problems
            if (isBrowser && // used for the initial navigation client side to avoid pushing
            // multiple times when the router is used in multiple apps
            !started && currentRoute.value === START_LOCATION_NORMALIZED) {
                // see above
                started = true;
                push(routerHistory.location).catch((err)=>{
                    warn('Unexpected error when starting the router:', err);
                });
            }
            const reactiveRoute = {
            };
            for(const key in START_LOCATION_NORMALIZED)// @ts-expect-error: the key matches
            reactiveRoute[key] = _vue.computed(()=>currentRoute.value[key]
            );
            app.provide(routerKey, router1);
            app.provide(routeLocationKey, _vue.reactive(reactiveRoute));
            app.provide(routerViewLocationKey, currentRoute);
            const unmountApp = app.unmount;
            installedApps.add(app);
            app.unmount = function() {
                installedApps.delete(app);
                // the router is not attached to an app anymore
                if (installedApps.size < 1) {
                    // invalidate the current navigation
                    pendingLocation = START_LOCATION_NORMALIZED;
                    removeHistoryListener && removeHistoryListener();
                    currentRoute.value = START_LOCATION_NORMALIZED;
                    started = false;
                    ready = false;
                }
                unmountApp();
            };
            if (isBrowser) addDevtools(app, router1, matcher);
        }
    };
    return router;
}
function runGuardQueue(guards) {
    return guards.reduce((promise, guard)=>promise.then(()=>guard()
        )
    , Promise.resolve());
}
function extractChangingRecords(to, from) {
    const leavingRecords = [];
    const updatingRecords = [];
    const enteringRecords = [];
    const len = Math.max(from.matched.length, to.matched.length);
    for(let i = 0; i < len; i++){
        const recordFrom = from.matched[i];
        if (recordFrom) {
            if (to.matched.find((record)=>isSameRouteRecord(record, recordFrom)
            )) updatingRecords.push(recordFrom);
            else leavingRecords.push(recordFrom);
        }
        const recordTo = to.matched[i];
        if (recordTo) // the type doesn't matter because we are comparing per reference
        {
            if (!from.matched.find((record)=>isSameRouteRecord(record, recordTo)
            )) enteringRecords.push(recordTo);
        }
    }
    return [
        leavingRecords,
        updatingRecords,
        enteringRecords
    ];
}
/**
 * Returns the router instance. Equivalent to using `$router` inside
 * templates.
 */ function useRouter() {
    return _vue.inject(routerKey);
}
/**
 * Returns the current route location. Equivalent to using `$route` inside
 * templates.
 */ function useRoute() {
    return _vue.inject(routeLocationKey);
}

},{"vue":"eg0LR","@vue/devtools-api":"b5OPj","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"b5OPj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setupDevtoolsPlugin", ()=>setupDevtoolsPlugin
);
var _env = require("./env");
var _const = require("./const");
var _api = require("./api");
parcelHelpers.exportAll(_api, exports);
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const hook = _env.getDevtoolsGlobalHook();
    if (hook) hook.emit(_const.HOOK_SETUP, pluginDescriptor, setupFn);
    else {
        const target = _env.getTarget();
        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor,
            setupFn
        });
    }
}

},{"./env":"2I2ME","./const":"3q4gn","./api":"7PDJn","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2I2ME":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDevtoolsGlobalHook", ()=>getDevtoolsGlobalHook
);
parcelHelpers.export(exports, "getTarget", ()=>getTarget
);
var global = arguments[3];
function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-ignore
    return typeof navigator !== 'undefined' ? window : typeof global !== 'undefined' ? global : {
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3q4gn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HOOK_SETUP", ()=>HOOK_SETUP
);
const HOOK_SETUP = 'devtools-plugin:setup';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7PDJn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _api = require("./api");
parcelHelpers.exportAll(_api, exports);
var _app = require("./app");
parcelHelpers.exportAll(_app, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _context = require("./context");
parcelHelpers.exportAll(_context, exports);
var _hooks = require("./hooks");
parcelHelpers.exportAll(_hooks, exports);
var _util = require("./util");
parcelHelpers.exportAll(_util, exports);

},{"./api":"jQJ2X","./app":"3wLXw","./component":"3SJ3x","./context":"b3ve0","./hooks":"aNFuP","./util":"lrVbp","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jQJ2X":[function(require,module,exports) {

},{}],"3wLXw":[function(require,module,exports) {

},{}],"3SJ3x":[function(require,module,exports) {

},{}],"b3ve0":[function(require,module,exports) {

},{}],"aNFuP":[function(require,module,exports) {

},{}],"lrVbp":[function(require,module,exports) {

},{}],"59jsk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApolloClient", ()=>_apolloClientJs.ApolloClient
);
parcelHelpers.export(exports, "mergeOptions", ()=>_apolloClientJs.mergeOptions
);
parcelHelpers.export(exports, "ObservableQuery", ()=>_observableQueryJs.ObservableQuery
);
parcelHelpers.export(exports, "applyNextFetchPolicy", ()=>_observableQueryJs.applyNextFetchPolicy
);
parcelHelpers.export(exports, "NetworkStatus", ()=>_networkStatusJs.NetworkStatus
);
parcelHelpers.export(exports, "isApolloError", ()=>_indexJs1.isApolloError
);
parcelHelpers.export(exports, "ApolloError", ()=>_indexJs1.ApolloError
);
parcelHelpers.export(exports, "Cache", ()=>_indexJs2.Cache
);
parcelHelpers.export(exports, "ApolloCache", ()=>_indexJs2.ApolloCache
);
parcelHelpers.export(exports, "InMemoryCache", ()=>_indexJs2.InMemoryCache
);
parcelHelpers.export(exports, "MissingFieldError", ()=>_indexJs2.MissingFieldError
);
parcelHelpers.export(exports, "defaultDataIdFromObject", ()=>_indexJs2.defaultDataIdFromObject
);
parcelHelpers.export(exports, "makeVar", ()=>_indexJs2.makeVar
);
parcelHelpers.export(exports, "fromError", ()=>_indexJs5.fromError
);
parcelHelpers.export(exports, "toPromise", ()=>_indexJs5.toPromise
);
parcelHelpers.export(exports, "fromPromise", ()=>_indexJs5.fromPromise
);
parcelHelpers.export(exports, "throwServerError", ()=>_indexJs5.throwServerError
);
parcelHelpers.export(exports, "Observable", ()=>_indexJs.Observable
);
parcelHelpers.export(exports, "isReference", ()=>_indexJs.isReference
);
parcelHelpers.export(exports, "makeReference", ()=>_indexJs.makeReference
);
parcelHelpers.export(exports, "setLogVerbosity", ()=>_tsInvariant.setVerbosity
);
parcelHelpers.export(exports, "gql", ()=>_graphqlTag.gql
);
parcelHelpers.export(exports, "resetCaches", ()=>_graphqlTag.resetCaches
);
parcelHelpers.export(exports, "disableFragmentWarnings", ()=>_graphqlTag.disableFragmentWarnings
);
parcelHelpers.export(exports, "enableExperimentalFragmentVariables", ()=>_graphqlTag.enableExperimentalFragmentVariables
);
parcelHelpers.export(exports, "disableExperimentalFragmentVariables", ()=>_graphqlTag.disableExperimentalFragmentVariables
);
var _indexJs = require("../utilities/index.js");
var _tsInvariant = require("ts-invariant");
var _apolloClientJs = require("./ApolloClient.js");
var _observableQueryJs = require("./ObservableQuery.js");
var _networkStatusJs = require("./networkStatus.js");
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
var _indexJs1 = require("../errors/index.js");
var _indexJs2 = require("../cache/index.js");
var _typesJs1 = require("../cache/inmemory/types.js");
parcelHelpers.exportAll(_typesJs1, exports);
var _indexJs3 = require("../link/core/index.js");
parcelHelpers.exportAll(_indexJs3, exports);
var _indexJs4 = require("../link/http/index.js");
parcelHelpers.exportAll(_indexJs4, exports);
var _indexJs5 = require("../link/utils/index.js");
var _graphqlTag = require("graphql-tag");
_tsInvariant.setVerbosity(_indexJs.DEV ? "log" : "silent");

},{"../utilities/index.js":"fhAGU","./ApolloClient.js":"hRMfY","./ObservableQuery.js":"4YjvH","./networkStatus.js":"jW3Zk","./types.js":"42MPA","../errors/index.js":"hsZu1","../cache/index.js":"ahDke","../cache/inmemory/types.js":"8JBVm","../link/core/index.js":"h0k4j","../link/http/index.js":"5crTt","../link/utils/index.js":"2qmtE","ts-invariant":"eFYq1","graphql-tag":"1g5En","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fhAGU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEV", ()=>_indexJs.DEV
);
parcelHelpers.export(exports, "shouldInclude", ()=>_directivesJs.shouldInclude
);
parcelHelpers.export(exports, "hasDirectives", ()=>_directivesJs.hasDirectives
);
parcelHelpers.export(exports, "hasClientExports", ()=>_directivesJs.hasClientExports
);
parcelHelpers.export(exports, "getDirectiveNames", ()=>_directivesJs.getDirectiveNames
);
parcelHelpers.export(exports, "getInclusionDirectives", ()=>_directivesJs.getInclusionDirectives
);
parcelHelpers.export(exports, "createFragmentMap", ()=>_fragmentsJs.createFragmentMap
);
parcelHelpers.export(exports, "getFragmentQueryDocument", ()=>_fragmentsJs.getFragmentQueryDocument
);
parcelHelpers.export(exports, "getFragmentFromSelection", ()=>_fragmentsJs.getFragmentFromSelection
);
parcelHelpers.export(exports, "checkDocument", ()=>_getFromASTJs.checkDocument
);
parcelHelpers.export(exports, "getOperationDefinition", ()=>_getFromASTJs.getOperationDefinition
);
parcelHelpers.export(exports, "getOperationName", ()=>_getFromASTJs.getOperationName
);
parcelHelpers.export(exports, "getFragmentDefinitions", ()=>_getFromASTJs.getFragmentDefinitions
);
parcelHelpers.export(exports, "getQueryDefinition", ()=>_getFromASTJs.getQueryDefinition
);
parcelHelpers.export(exports, "getFragmentDefinition", ()=>_getFromASTJs.getFragmentDefinition
);
parcelHelpers.export(exports, "getMainDefinition", ()=>_getFromASTJs.getMainDefinition
);
parcelHelpers.export(exports, "getDefaultValues", ()=>_getFromASTJs.getDefaultValues
);
parcelHelpers.export(exports, "makeReference", ()=>_storeUtilsJs.makeReference
);
parcelHelpers.export(exports, "isDocumentNode", ()=>_storeUtilsJs.isDocumentNode
);
parcelHelpers.export(exports, "isReference", ()=>_storeUtilsJs.isReference
);
parcelHelpers.export(exports, "isField", ()=>_storeUtilsJs.isField
);
parcelHelpers.export(exports, "isInlineFragment", ()=>_storeUtilsJs.isInlineFragment
);
parcelHelpers.export(exports, "valueToObjectRepresentation", ()=>_storeUtilsJs.valueToObjectRepresentation
);
parcelHelpers.export(exports, "storeKeyNameFromField", ()=>_storeUtilsJs.storeKeyNameFromField
);
parcelHelpers.export(exports, "argumentsObjectFromField", ()=>_storeUtilsJs.argumentsObjectFromField
);
parcelHelpers.export(exports, "resultKeyNameFromField", ()=>_storeUtilsJs.resultKeyNameFromField
);
parcelHelpers.export(exports, "getStoreKeyName", ()=>_storeUtilsJs.getStoreKeyName
);
parcelHelpers.export(exports, "getTypenameFromResult", ()=>_storeUtilsJs.getTypenameFromResult
);
parcelHelpers.export(exports, "addTypenameToDocument", ()=>_transformJs.addTypenameToDocument
);
parcelHelpers.export(exports, "buildQueryFromSelectionSet", ()=>_transformJs.buildQueryFromSelectionSet
);
parcelHelpers.export(exports, "removeDirectivesFromDocument", ()=>_transformJs.removeDirectivesFromDocument
);
parcelHelpers.export(exports, "removeConnectionDirectiveFromDocument", ()=>_transformJs.removeConnectionDirectiveFromDocument
);
parcelHelpers.export(exports, "removeArgumentsFromDocument", ()=>_transformJs.removeArgumentsFromDocument
);
parcelHelpers.export(exports, "removeFragmentSpreadFromDocument", ()=>_transformJs.removeFragmentSpreadFromDocument
);
parcelHelpers.export(exports, "removeClientSetsFromDocument", ()=>_transformJs.removeClientSetsFromDocument
);
parcelHelpers.export(exports, "concatPagination", ()=>_paginationJs.concatPagination
);
parcelHelpers.export(exports, "offsetLimitPagination", ()=>_paginationJs.offsetLimitPagination
);
parcelHelpers.export(exports, "relayStylePagination", ()=>_paginationJs.relayStylePagination
);
parcelHelpers.export(exports, "Observable", ()=>_observableJs.Observable
);
var _tsInvariant = require("ts-invariant");
var _indexJs = require("./globals/index.js");
var _directivesJs = require("./graphql/directives.js");
var _fragmentsJs = require("./graphql/fragments.js");
var _getFromASTJs = require("./graphql/getFromAST.js");
var _storeUtilsJs = require("./graphql/storeUtils.js");
var _transformJs = require("./graphql/transform.js");
var _paginationJs = require("./policies/pagination.js");
var _observableJs = require("./observables/Observable.js");
var _mergeDeepJs = require("./common/mergeDeep.js");
parcelHelpers.exportAll(_mergeDeepJs, exports);
var _cloneDeepJs = require("./common/cloneDeep.js");
parcelHelpers.exportAll(_cloneDeepJs, exports);
var _maybeDeepFreezeJs = require("./common/maybeDeepFreeze.js");
parcelHelpers.exportAll(_maybeDeepFreezeJs, exports);
var _maybeJs = require("./common/maybe.js");
parcelHelpers.exportAll(_maybeJs, exports);
var _iterationJs = require("./observables/iteration.js");
parcelHelpers.exportAll(_iterationJs, exports);
var _asyncMapJs = require("./observables/asyncMap.js");
parcelHelpers.exportAll(_asyncMapJs, exports);
var _concastJs = require("./observables/Concast.js");
parcelHelpers.exportAll(_concastJs, exports);
var _subclassingJs = require("./observables/subclassing.js");
parcelHelpers.exportAll(_subclassingJs, exports);
var _arraysJs = require("./common/arrays.js");
parcelHelpers.exportAll(_arraysJs, exports);
var _objectsJs = require("./common/objects.js");
parcelHelpers.exportAll(_objectsJs, exports);
var _errorHandlingJs = require("./common/errorHandling.js");
parcelHelpers.exportAll(_errorHandlingJs, exports);
var _canUseJs = require("./common/canUse.js");
parcelHelpers.exportAll(_canUseJs, exports);
var _compactJs = require("./common/compact.js");
parcelHelpers.exportAll(_compactJs, exports);
var _makeUniqueIdJs = require("./common/makeUniqueId.js");
parcelHelpers.exportAll(_makeUniqueIdJs, exports);
var _stringifyForDisplayJs = require("./common/stringifyForDisplay.js");
parcelHelpers.exportAll(_stringifyForDisplayJs, exports);
var _isStrictlyAnyJs = require("./types/IsStrictlyAny.js");
parcelHelpers.exportAll(_isStrictlyAnyJs, exports);
__DEV__ ? _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, _indexJs.DEV) : _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, 59);

},{"ts-invariant":"eFYq1","./globals/index.js":"4SnoD","./graphql/directives.js":"g7j7j","./graphql/fragments.js":"8U80W","./graphql/getFromAST.js":"1nIQK","./graphql/storeUtils.js":"2CHuR","./graphql/transform.js":"9gmed","./policies/pagination.js":"auVEQ","./observables/Observable.js":"9aLrX","./common/mergeDeep.js":"hAOlx","./common/cloneDeep.js":"8fKX8","./common/maybeDeepFreeze.js":"jSIGF","./common/maybe.js":"4zeLT","./observables/iteration.js":"5IE8U","./observables/asyncMap.js":"7Dena","./observables/Concast.js":"7dsWA","./observables/subclassing.js":"3aAlg","./common/arrays.js":"6Ewl1","./common/objects.js":"aYdMx","./common/errorHandling.js":"jK252","./common/canUse.js":"bMGKm","./common/compact.js":"dqF4M","./common/makeUniqueId.js":"ckB7u","./common/stringifyForDisplay.js":"e4eYW","./types/IsStrictlyAny.js":"a12GE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eFYq1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InvariantError", ()=>InvariantError1
);
parcelHelpers.export(exports, "default", ()=>invariant$1
);
parcelHelpers.export(exports, "invariant", ()=>invariant
);
parcelHelpers.export(exports, "setVerbosity", ()=>setVerbosity
);
var _tslib = require("tslib");
var genericMessage = "Invariant Violation";
var _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function(obj, proto) {
    obj.__proto__ = proto;
    return obj;
} : _a;
var InvariantError1 = function(_super) {
    _tslib.__extends(InvariantError2, _super);
    function InvariantError2(message) {
        if (message === void 0) message = genericMessage;
        var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
        _this.framesToPop = 1;
        _this.name = genericMessage;
        setPrototypeOf(_this, InvariantError2.prototype);
        return _this;
    }
    return InvariantError2;
}(Error);
function invariant(condition, message) {
    if (!condition) throw new InvariantError1(message);
}
var verbosityLevels = [
    "debug",
    "log",
    "warn",
    "error",
    "silent"
];
var verbosityLevel = verbosityLevels.indexOf("log");
function wrapConsoleMethod(name) {
    return function() {
        if (verbosityLevels.indexOf(name) >= verbosityLevel) {
            // Default to console.log if this host environment happens not to provide
            // all the console.* methods we need.
            var method = console[name] || console.log;
            return method.apply(console, arguments);
        }
    };
}
(function(invariant1) {
    invariant1.debug = wrapConsoleMethod("debug");
    invariant1.log = wrapConsoleMethod("log");
    invariant1.warn = wrapConsoleMethod("warn");
    invariant1.error = wrapConsoleMethod("error");
})(invariant || (invariant = {
}));
function setVerbosity(level) {
    var old = verbosityLevels[verbosityLevel];
    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));
    return old;
}
var invariant$1 = invariant;

},{"tslib":"bjkXk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bjkXk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread
);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet
);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d1, b1) {
        d1.__proto__ = b1;
    } || function(d1, b1) {
        for(var p in b1)if (Object.prototype.hasOwnProperty.call(b1, p)) d1[p] = b1[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign1(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || (n--) > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v1) {
            resolve({
                value: v1,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4SnoD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEV", ()=>_devJsDefault.default
);
parcelHelpers.export(exports, "removeTemporaryGlobals", ()=>_graphqlJs.removeTemporaryGlobals
);
var _devJs = require("./DEV.js");
var _devJsDefault = parcelHelpers.interopDefault(_devJs);
var _graphqlJs = require("./graphql.js");
_graphqlJs.removeTemporaryGlobals();

},{"./DEV.js":"kB0D4","./graphql.js":"6kCg9","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kB0D4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _globalJs = require("../common/global.js");
var _globalJsDefault = parcelHelpers.interopDefault(_globalJs);
var _maybeJs = require("../common/maybe.js");
var __ = "__";
var GLOBAL_KEY = [
    __,
    __
].join("DEV");
function getDEV() {
    try {
        return Boolean(__DEV__);
    } catch (_a) {
        Object.defineProperty(_globalJsDefault.default, GLOBAL_KEY, {
            value: _maybeJs.maybe(function() {
                return "development";
            }) !== "production",
            enumerable: false,
            configurable: true,
            writable: true
        });
        return _globalJsDefault.default[GLOBAL_KEY];
    }
}
exports.default = getDEV();

},{"../common/global.js":"2jtSS","../common/maybe.js":"4zeLT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2jtSS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _maybeJs = require("./maybe.js");
var global = arguments[3];
exports.default = _maybeJs.maybe(function() {
    return globalThis;
}) || _maybeJs.maybe(function() {
    return window;
}) || _maybeJs.maybe(function() {
    return self;
}) || _maybeJs.maybe(function() {
    return global;
}) || _maybeJs.maybe(function() {
    return Function("return this")();
});

},{"./maybe.js":"4zeLT","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4zeLT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maybe", ()=>maybe
);
function maybe(thunk) {
    try {
        return thunk();
    } catch (_a) {
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6kCg9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "removeTemporaryGlobals", ()=>removeTemporaryGlobals
);
var _process = require("ts-invariant/process");
var _graphql = require("graphql");
function removeTemporaryGlobals() {
    _graphql.isType(null);
    return _process.remove();
}

},{"ts-invariant/process":"f9rXg","graphql":"6yWt3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f9rXg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "install", ()=>install
);
parcelHelpers.export(exports, "remove", ()=>remove
);
var process = require("process");
var global = arguments[3];
function maybe(thunk) {
    try {
        return thunk();
    } catch (_) {
    }
}
const safeGlobal = maybe(function() {
    return globalThis;
}) || maybe(function() {
    return window;
}) || maybe(function() {
    return self;
}) || maybe(function() {
    return global;
}) || maybe(function() {
    return Function("return this")();
});
let needToRemove = false;
function install() {
    if (safeGlobal && !maybe(function() {
        return "development";
    }) && !maybe(function() {
        return process;
    })) {
        Object.defineProperty(safeGlobal, "process", {
            value: {
                env: {
                    // This default needs to be "production" instead of "development", to
                    // avoid the problem https://github.com/graphql/graphql-js/pull/2894
                    // will eventually solve, once merged and released.
                    NODE_ENV: "production"
                }
            },
            // Let anyone else change global.process as they see fit, but hide it from
            // Object.keys(global) enumeration.
            configurable: true,
            enumerable: false,
            writable: true
        });
        needToRemove = true;
    }
}
// Call install() at least once, when this module is imported.
install();
function remove() {
    if (needToRemove) {
        delete safeGlobal.process;
        needToRemove = false;
    }
}

},{"process":"6Upk8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6Upk8":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while((++queueIndex) < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"6yWt3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * GraphQL.js provides a reference implementation for the GraphQL specification
 * but is also a useful utility for operating on GraphQL files and building
 * sophisticated tools.
 *
 * This primary module exports a general purpose function for fulfilling all
 * steps of the GraphQL specification in a single operation, but also includes
 * utilities for every part of the GraphQL specification:
 *
 *   - Parsing the GraphQL language.
 *   - Building a GraphQL type schema.
 *   - Validating a GraphQL request against a type schema.
 *   - Executing a GraphQL request against a type schema.
 *
 * This also includes utility functions for operating on GraphQL types and
 * GraphQL documents to facilitate building tools.
 *
 * You may also import from each sub-directory directly. For example, the
 * following two import statements are equivalent:
 *
 *     import { parse } from 'graphql';
 *     import { parse } from 'graphql/language';
 */ // The GraphQL.js version info.
parcelHelpers.export(exports, "version", ()=>_versionMjs.version
) // The primary entry point into fulfilling a GraphQL request.
;
parcelHelpers.export(exports, "versionInfo", ()=>_versionMjs.versionInfo
);
parcelHelpers.export(exports, "graphql", ()=>_graphqlMjs.graphql
) // Create and operate on GraphQL type definitions and schema.
;
parcelHelpers.export(exports, "graphqlSync", ()=>_graphqlMjs.graphqlSync
);
parcelHelpers.export(exports, "GraphQLSchema", ()=>_indexMjs.GraphQLSchema
);
parcelHelpers.export(exports, "GraphQLDirective", ()=>_indexMjs.GraphQLDirective
);
parcelHelpers.export(exports, "GraphQLScalarType", ()=>_indexMjs.GraphQLScalarType
);
parcelHelpers.export(exports, "GraphQLObjectType", ()=>_indexMjs.GraphQLObjectType
);
parcelHelpers.export(exports, "GraphQLInterfaceType", ()=>_indexMjs.GraphQLInterfaceType
);
parcelHelpers.export(exports, "GraphQLUnionType", ()=>_indexMjs.GraphQLUnionType
);
parcelHelpers.export(exports, "GraphQLEnumType", ()=>_indexMjs.GraphQLEnumType
);
parcelHelpers.export(exports, "GraphQLInputObjectType", ()=>_indexMjs.GraphQLInputObjectType
);
parcelHelpers.export(exports, "GraphQLList", ()=>_indexMjs.GraphQLList
);
parcelHelpers.export(exports, "GraphQLNonNull", ()=>_indexMjs.GraphQLNonNull
);
parcelHelpers.export(exports, "specifiedScalarTypes", ()=>_indexMjs.specifiedScalarTypes
);
parcelHelpers.export(exports, "GraphQLInt", ()=>_indexMjs.GraphQLInt
);
parcelHelpers.export(exports, "GraphQLFloat", ()=>_indexMjs.GraphQLFloat
);
parcelHelpers.export(exports, "GraphQLString", ()=>_indexMjs.GraphQLString
);
parcelHelpers.export(exports, "GraphQLBoolean", ()=>_indexMjs.GraphQLBoolean
);
parcelHelpers.export(exports, "GraphQLID", ()=>_indexMjs.GraphQLID
);
parcelHelpers.export(exports, "specifiedDirectives", ()=>_indexMjs.specifiedDirectives
);
parcelHelpers.export(exports, "GraphQLIncludeDirective", ()=>_indexMjs.GraphQLIncludeDirective
);
parcelHelpers.export(exports, "GraphQLSkipDirective", ()=>_indexMjs.GraphQLSkipDirective
);
parcelHelpers.export(exports, "GraphQLDeprecatedDirective", ()=>_indexMjs.GraphQLDeprecatedDirective
);
parcelHelpers.export(exports, "GraphQLSpecifiedByDirective", ()=>_indexMjs.GraphQLSpecifiedByDirective
);
parcelHelpers.export(exports, "TypeKind", ()=>_indexMjs.TypeKind
);
parcelHelpers.export(exports, "DEFAULT_DEPRECATION_REASON", ()=>_indexMjs.DEFAULT_DEPRECATION_REASON
);
parcelHelpers.export(exports, "introspectionTypes", ()=>_indexMjs.introspectionTypes
);
parcelHelpers.export(exports, "__Schema", ()=>_indexMjs.__Schema
);
parcelHelpers.export(exports, "__Directive", ()=>_indexMjs.__Directive
);
parcelHelpers.export(exports, "__DirectiveLocation", ()=>_indexMjs.__DirectiveLocation
);
parcelHelpers.export(exports, "__Type", ()=>_indexMjs.__Type
);
parcelHelpers.export(exports, "__Field", ()=>_indexMjs.__Field
);
parcelHelpers.export(exports, "__InputValue", ()=>_indexMjs.__InputValue
);
parcelHelpers.export(exports, "__EnumValue", ()=>_indexMjs.__EnumValue
);
parcelHelpers.export(exports, "__TypeKind", ()=>_indexMjs.__TypeKind
);
parcelHelpers.export(exports, "SchemaMetaFieldDef", ()=>_indexMjs.SchemaMetaFieldDef
);
parcelHelpers.export(exports, "TypeMetaFieldDef", ()=>_indexMjs.TypeMetaFieldDef
);
parcelHelpers.export(exports, "TypeNameMetaFieldDef", ()=>_indexMjs.TypeNameMetaFieldDef
);
parcelHelpers.export(exports, "isSchema", ()=>_indexMjs.isSchema
);
parcelHelpers.export(exports, "isDirective", ()=>_indexMjs.isDirective
);
parcelHelpers.export(exports, "isType", ()=>_indexMjs.isType
);
parcelHelpers.export(exports, "isScalarType", ()=>_indexMjs.isScalarType
);
parcelHelpers.export(exports, "isObjectType", ()=>_indexMjs.isObjectType
);
parcelHelpers.export(exports, "isInterfaceType", ()=>_indexMjs.isInterfaceType
);
parcelHelpers.export(exports, "isUnionType", ()=>_indexMjs.isUnionType
);
parcelHelpers.export(exports, "isEnumType", ()=>_indexMjs.isEnumType
);
parcelHelpers.export(exports, "isInputObjectType", ()=>_indexMjs.isInputObjectType
);
parcelHelpers.export(exports, "isListType", ()=>_indexMjs.isListType
);
parcelHelpers.export(exports, "isNonNullType", ()=>_indexMjs.isNonNullType
);
parcelHelpers.export(exports, "isInputType", ()=>_indexMjs.isInputType
);
parcelHelpers.export(exports, "isOutputType", ()=>_indexMjs.isOutputType
);
parcelHelpers.export(exports, "isLeafType", ()=>_indexMjs.isLeafType
);
parcelHelpers.export(exports, "isCompositeType", ()=>_indexMjs.isCompositeType
);
parcelHelpers.export(exports, "isAbstractType", ()=>_indexMjs.isAbstractType
);
parcelHelpers.export(exports, "isWrappingType", ()=>_indexMjs.isWrappingType
);
parcelHelpers.export(exports, "isNullableType", ()=>_indexMjs.isNullableType
);
parcelHelpers.export(exports, "isNamedType", ()=>_indexMjs.isNamedType
);
parcelHelpers.export(exports, "isRequiredArgument", ()=>_indexMjs.isRequiredArgument
);
parcelHelpers.export(exports, "isRequiredInputField", ()=>_indexMjs.isRequiredInputField
);
parcelHelpers.export(exports, "isSpecifiedScalarType", ()=>_indexMjs.isSpecifiedScalarType
);
parcelHelpers.export(exports, "isIntrospectionType", ()=>_indexMjs.isIntrospectionType
);
parcelHelpers.export(exports, "isSpecifiedDirective", ()=>_indexMjs.isSpecifiedDirective
);
parcelHelpers.export(exports, "assertSchema", ()=>_indexMjs.assertSchema
);
parcelHelpers.export(exports, "assertDirective", ()=>_indexMjs.assertDirective
);
parcelHelpers.export(exports, "assertType", ()=>_indexMjs.assertType
);
parcelHelpers.export(exports, "assertScalarType", ()=>_indexMjs.assertScalarType
);
parcelHelpers.export(exports, "assertObjectType", ()=>_indexMjs.assertObjectType
);
parcelHelpers.export(exports, "assertInterfaceType", ()=>_indexMjs.assertInterfaceType
);
parcelHelpers.export(exports, "assertUnionType", ()=>_indexMjs.assertUnionType
);
parcelHelpers.export(exports, "assertEnumType", ()=>_indexMjs.assertEnumType
);
parcelHelpers.export(exports, "assertInputObjectType", ()=>_indexMjs.assertInputObjectType
);
parcelHelpers.export(exports, "assertListType", ()=>_indexMjs.assertListType
);
parcelHelpers.export(exports, "assertNonNullType", ()=>_indexMjs.assertNonNullType
);
parcelHelpers.export(exports, "assertInputType", ()=>_indexMjs.assertInputType
);
parcelHelpers.export(exports, "assertOutputType", ()=>_indexMjs.assertOutputType
);
parcelHelpers.export(exports, "assertLeafType", ()=>_indexMjs.assertLeafType
);
parcelHelpers.export(exports, "assertCompositeType", ()=>_indexMjs.assertCompositeType
);
parcelHelpers.export(exports, "assertAbstractType", ()=>_indexMjs.assertAbstractType
);
parcelHelpers.export(exports, "assertWrappingType", ()=>_indexMjs.assertWrappingType
);
parcelHelpers.export(exports, "assertNullableType", ()=>_indexMjs.assertNullableType
);
parcelHelpers.export(exports, "assertNamedType", ()=>_indexMjs.assertNamedType
);
parcelHelpers.export(exports, "getNullableType", ()=>_indexMjs.getNullableType
);
parcelHelpers.export(exports, "getNamedType", ()=>_indexMjs.getNamedType
);
parcelHelpers.export(exports, "validateSchema", ()=>_indexMjs.validateSchema
);
parcelHelpers.export(exports, "assertValidSchema", ()=>_indexMjs.assertValidSchema
);
// Parse and operate on GraphQL language source files.
parcelHelpers.export(exports, "Token", ()=>_indexMjs1.Token
);
parcelHelpers.export(exports, "Source", ()=>_indexMjs1.Source
);
parcelHelpers.export(exports, "Location", ()=>_indexMjs1.Location
);
parcelHelpers.export(exports, "getLocation", ()=>_indexMjs1.getLocation
);
parcelHelpers.export(exports, "printLocation", ()=>_indexMjs1.printLocation
);
parcelHelpers.export(exports, "printSourceLocation", ()=>_indexMjs1.printSourceLocation
);
parcelHelpers.export(exports, "Lexer", ()=>_indexMjs1.Lexer
);
parcelHelpers.export(exports, "TokenKind", ()=>_indexMjs1.TokenKind
);
parcelHelpers.export(exports, "parse", ()=>_indexMjs1.parse
);
parcelHelpers.export(exports, "parseValue", ()=>_indexMjs1.parseValue
);
parcelHelpers.export(exports, "parseType", ()=>_indexMjs1.parseType
);
parcelHelpers.export(exports, "print", ()=>_indexMjs1.print
);
parcelHelpers.export(exports, "visit", ()=>_indexMjs1.visit
);
parcelHelpers.export(exports, "visitInParallel", ()=>_indexMjs1.visitInParallel
);
parcelHelpers.export(exports, "getVisitFn", ()=>_indexMjs1.getVisitFn
);
parcelHelpers.export(exports, "BREAK", ()=>_indexMjs1.BREAK
);
parcelHelpers.export(exports, "Kind", ()=>_indexMjs1.Kind
);
parcelHelpers.export(exports, "DirectiveLocation", ()=>_indexMjs1.DirectiveLocation
);
parcelHelpers.export(exports, "isDefinitionNode", ()=>_indexMjs1.isDefinitionNode
);
parcelHelpers.export(exports, "isExecutableDefinitionNode", ()=>_indexMjs1.isExecutableDefinitionNode
);
parcelHelpers.export(exports, "isSelectionNode", ()=>_indexMjs1.isSelectionNode
);
parcelHelpers.export(exports, "isValueNode", ()=>_indexMjs1.isValueNode
);
parcelHelpers.export(exports, "isTypeNode", ()=>_indexMjs1.isTypeNode
);
parcelHelpers.export(exports, "isTypeSystemDefinitionNode", ()=>_indexMjs1.isTypeSystemDefinitionNode
);
parcelHelpers.export(exports, "isTypeDefinitionNode", ()=>_indexMjs1.isTypeDefinitionNode
);
parcelHelpers.export(exports, "isTypeSystemExtensionNode", ()=>_indexMjs1.isTypeSystemExtensionNode
);
parcelHelpers.export(exports, "isTypeExtensionNode", ()=>_indexMjs1.isTypeExtensionNode
);
// Execute GraphQL queries.
parcelHelpers.export(exports, "execute", ()=>_indexMjs2.execute
);
parcelHelpers.export(exports, "executeSync", ()=>_indexMjs2.executeSync
);
parcelHelpers.export(exports, "defaultFieldResolver", ()=>_indexMjs2.defaultFieldResolver
);
parcelHelpers.export(exports, "defaultTypeResolver", ()=>_indexMjs2.defaultTypeResolver
);
parcelHelpers.export(exports, "responsePathAsArray", ()=>_indexMjs2.responsePathAsArray
);
parcelHelpers.export(exports, "getDirectiveValues", ()=>_indexMjs2.getDirectiveValues
);
parcelHelpers.export(exports, "subscribe", ()=>_indexMjs3.subscribe
);
parcelHelpers.export(exports, "createSourceEventStream", ()=>_indexMjs3.createSourceEventStream
);
// Validate GraphQL documents.
parcelHelpers.export(exports, "validate", ()=>_indexMjs4.validate
);
parcelHelpers.export(exports, "ValidationContext", ()=>_indexMjs4.ValidationContext
);
parcelHelpers.export(exports, "specifiedRules", ()=>_indexMjs4.specifiedRules
);
parcelHelpers.export(exports, "ExecutableDefinitionsRule", ()=>_indexMjs4.ExecutableDefinitionsRule
);
parcelHelpers.export(exports, "FieldsOnCorrectTypeRule", ()=>_indexMjs4.FieldsOnCorrectTypeRule
);
parcelHelpers.export(exports, "FragmentsOnCompositeTypesRule", ()=>_indexMjs4.FragmentsOnCompositeTypesRule
);
parcelHelpers.export(exports, "KnownArgumentNamesRule", ()=>_indexMjs4.KnownArgumentNamesRule
);
parcelHelpers.export(exports, "KnownDirectivesRule", ()=>_indexMjs4.KnownDirectivesRule
);
parcelHelpers.export(exports, "KnownFragmentNamesRule", ()=>_indexMjs4.KnownFragmentNamesRule
);
parcelHelpers.export(exports, "KnownTypeNamesRule", ()=>_indexMjs4.KnownTypeNamesRule
);
parcelHelpers.export(exports, "LoneAnonymousOperationRule", ()=>_indexMjs4.LoneAnonymousOperationRule
);
parcelHelpers.export(exports, "NoFragmentCyclesRule", ()=>_indexMjs4.NoFragmentCyclesRule
);
parcelHelpers.export(exports, "NoUndefinedVariablesRule", ()=>_indexMjs4.NoUndefinedVariablesRule
);
parcelHelpers.export(exports, "NoUnusedFragmentsRule", ()=>_indexMjs4.NoUnusedFragmentsRule
);
parcelHelpers.export(exports, "NoUnusedVariablesRule", ()=>_indexMjs4.NoUnusedVariablesRule
);
parcelHelpers.export(exports, "OverlappingFieldsCanBeMergedRule", ()=>_indexMjs4.OverlappingFieldsCanBeMergedRule
);
parcelHelpers.export(exports, "PossibleFragmentSpreadsRule", ()=>_indexMjs4.PossibleFragmentSpreadsRule
);
parcelHelpers.export(exports, "ProvidedRequiredArgumentsRule", ()=>_indexMjs4.ProvidedRequiredArgumentsRule
);
parcelHelpers.export(exports, "ScalarLeafsRule", ()=>_indexMjs4.ScalarLeafsRule
);
parcelHelpers.export(exports, "SingleFieldSubscriptionsRule", ()=>_indexMjs4.SingleFieldSubscriptionsRule
);
parcelHelpers.export(exports, "UniqueArgumentNamesRule", ()=>_indexMjs4.UniqueArgumentNamesRule
);
parcelHelpers.export(exports, "UniqueDirectivesPerLocationRule", ()=>_indexMjs4.UniqueDirectivesPerLocationRule
);
parcelHelpers.export(exports, "UniqueFragmentNamesRule", ()=>_indexMjs4.UniqueFragmentNamesRule
);
parcelHelpers.export(exports, "UniqueInputFieldNamesRule", ()=>_indexMjs4.UniqueInputFieldNamesRule
);
parcelHelpers.export(exports, "UniqueOperationNamesRule", ()=>_indexMjs4.UniqueOperationNamesRule
);
parcelHelpers.export(exports, "UniqueVariableNamesRule", ()=>_indexMjs4.UniqueVariableNamesRule
);
parcelHelpers.export(exports, "ValuesOfCorrectTypeRule", ()=>_indexMjs4.ValuesOfCorrectTypeRule
);
parcelHelpers.export(exports, "VariablesAreInputTypesRule", ()=>_indexMjs4.VariablesAreInputTypesRule
);
parcelHelpers.export(exports, "VariablesInAllowedPositionRule", ()=>_indexMjs4.VariablesInAllowedPositionRule
);
parcelHelpers.export(exports, "LoneSchemaDefinitionRule", ()=>_indexMjs4.LoneSchemaDefinitionRule
);
parcelHelpers.export(exports, "UniqueOperationTypesRule", ()=>_indexMjs4.UniqueOperationTypesRule
);
parcelHelpers.export(exports, "UniqueTypeNamesRule", ()=>_indexMjs4.UniqueTypeNamesRule
);
parcelHelpers.export(exports, "UniqueEnumValueNamesRule", ()=>_indexMjs4.UniqueEnumValueNamesRule
);
parcelHelpers.export(exports, "UniqueFieldDefinitionNamesRule", ()=>_indexMjs4.UniqueFieldDefinitionNamesRule
);
parcelHelpers.export(exports, "UniqueDirectiveNamesRule", ()=>_indexMjs4.UniqueDirectiveNamesRule
);
parcelHelpers.export(exports, "PossibleTypeExtensionsRule", ()=>_indexMjs4.PossibleTypeExtensionsRule
);
parcelHelpers.export(exports, "NoDeprecatedCustomRule", ()=>_indexMjs4.NoDeprecatedCustomRule
);
parcelHelpers.export(exports, "NoSchemaIntrospectionCustomRule", ()=>_indexMjs4.NoSchemaIntrospectionCustomRule
);
// Create, format, and print GraphQL errors.
parcelHelpers.export(exports, "GraphQLError", ()=>_indexMjs5.GraphQLError
);
parcelHelpers.export(exports, "syntaxError", ()=>_indexMjs5.syntaxError
);
parcelHelpers.export(exports, "locatedError", ()=>_indexMjs5.locatedError
);
parcelHelpers.export(exports, "printError", ()=>_indexMjs5.printError
);
parcelHelpers.export(exports, "formatError", ()=>_indexMjs5.formatError
);
// Utilities for operating on GraphQL type schema and parsed sources.
parcelHelpers.export(exports, "getIntrospectionQuery", ()=>_indexMjs6.getIntrospectionQuery
);
parcelHelpers.export(exports, "getOperationAST", ()=>_indexMjs6.getOperationAST
);
parcelHelpers.export(exports, "getOperationRootType", ()=>_indexMjs6.getOperationRootType
);
parcelHelpers.export(exports, "introspectionFromSchema", ()=>_indexMjs6.introspectionFromSchema
);
parcelHelpers.export(exports, "buildClientSchema", ()=>_indexMjs6.buildClientSchema
);
parcelHelpers.export(exports, "buildASTSchema", ()=>_indexMjs6.buildASTSchema
);
parcelHelpers.export(exports, "buildSchema", ()=>_indexMjs6.buildSchema
);
parcelHelpers.export(exports, "getDescription", ()=>_indexMjs6.getDescription
);
parcelHelpers.export(exports, "extendSchema", ()=>_indexMjs6.extendSchema
);
parcelHelpers.export(exports, "lexicographicSortSchema", ()=>_indexMjs6.lexicographicSortSchema
);
parcelHelpers.export(exports, "printSchema", ()=>_indexMjs6.printSchema
);
parcelHelpers.export(exports, "printType", ()=>_indexMjs6.printType
);
parcelHelpers.export(exports, "printIntrospectionSchema", ()=>_indexMjs6.printIntrospectionSchema
);
parcelHelpers.export(exports, "typeFromAST", ()=>_indexMjs6.typeFromAST
);
parcelHelpers.export(exports, "valueFromAST", ()=>_indexMjs6.valueFromAST
);
parcelHelpers.export(exports, "valueFromASTUntyped", ()=>_indexMjs6.valueFromASTUntyped
);
parcelHelpers.export(exports, "astFromValue", ()=>_indexMjs6.astFromValue
);
parcelHelpers.export(exports, "TypeInfo", ()=>_indexMjs6.TypeInfo
);
parcelHelpers.export(exports, "visitWithTypeInfo", ()=>_indexMjs6.visitWithTypeInfo
);
parcelHelpers.export(exports, "coerceInputValue", ()=>_indexMjs6.coerceInputValue
);
parcelHelpers.export(exports, "concatAST", ()=>_indexMjs6.concatAST
);
parcelHelpers.export(exports, "separateOperations", ()=>_indexMjs6.separateOperations
);
parcelHelpers.export(exports, "stripIgnoredCharacters", ()=>_indexMjs6.stripIgnoredCharacters
);
parcelHelpers.export(exports, "isEqualType", ()=>_indexMjs6.isEqualType
);
parcelHelpers.export(exports, "isTypeSubTypeOf", ()=>_indexMjs6.isTypeSubTypeOf
);
parcelHelpers.export(exports, "doTypesOverlap", ()=>_indexMjs6.doTypesOverlap
);
parcelHelpers.export(exports, "assertValidName", ()=>_indexMjs6.assertValidName
);
parcelHelpers.export(exports, "isValidNameError", ()=>_indexMjs6.isValidNameError
);
parcelHelpers.export(exports, "BreakingChangeType", ()=>_indexMjs6.BreakingChangeType
);
parcelHelpers.export(exports, "DangerousChangeType", ()=>_indexMjs6.DangerousChangeType
);
parcelHelpers.export(exports, "findBreakingChanges", ()=>_indexMjs6.findBreakingChanges
);
parcelHelpers.export(exports, "findDangerousChanges", ()=>_indexMjs6.findDangerousChanges
);
parcelHelpers.export(exports, "findDeprecatedUsages", ()=>_indexMjs6.findDeprecatedUsages
);
var _versionMjs = require("./version.mjs");
var _graphqlMjs = require("./graphql.mjs");
var _indexMjs = require("./type/index.mjs");
var _indexMjs1 = require("./language/index.mjs");
var _indexMjs2 = require("./execution/index.mjs");
var _indexMjs3 = require("./subscription/index.mjs");
var _indexMjs4 = require("./validation/index.mjs");
var _indexMjs5 = require("./error/index.mjs");
var _indexMjs6 = require("./utilities/index.mjs");

},{"./version.mjs":"9ABTI","./graphql.mjs":"eZxq7","./type/index.mjs":"dgKM1","./language/index.mjs":"gxEXF","./execution/index.mjs":"8AmNx","./subscription/index.mjs":"fXM9R","./validation/index.mjs":"cHlIV","./error/index.mjs":"fkHfF","./utilities/index.mjs":"afKyD","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9ABTI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version
);
parcelHelpers.export(exports, "versionInfo", ()=>versionInfo
);
var version = '15.5.1';
var versionInfo = Object.freeze({
    major: 15,
    minor: 5,
    patch: 1,
    preReleaseTag: null
});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eZxq7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This is the primary entry point function for fulfilling GraphQL operations
 * by parsing, validating, and executing a GraphQL document along side a
 * GraphQL schema.
 *
 * More sophisticated GraphQL servers, such as those which persist queries,
 * may wish to separate the validation and execution phases to a static time
 * tooling step, and a server runtime step.
 *
 * Accepts either an object with named arguments, or individual arguments:
 *
 * schema:
 *    The GraphQL type system to use when validating and executing a query.
 * source:
 *    A GraphQL language formatted string representing the requested operation.
 * rootValue:
 *    The value provided as the first argument to resolver functions on the top
 *    level type (e.g. the query object type).
 * contextValue:
 *    The context value is provided as an argument to resolver functions after
 *    field arguments. It is used to pass shared information useful at any point
 *    during executing this query, for example the currently logged in user and
 *    connections to databases or other services.
 * variableValues:
 *    A mapping of variable name to runtime value to use for all variables
 *    defined in the requestString.
 * operationName:
 *    The name of the operation to use if requestString contains multiple
 *    possible operations. Can be omitted if requestString contains only
 *    one operation.
 * fieldResolver:
 *    A resolver function to use when one is not provided by the schema.
 *    If not provided, the default field resolver is used (which looks for a
 *    value or method on the source value with the field's name).
 * typeResolver:
 *    A type resolver function to use when none is provided by the schema.
 *    If not provided, the default type resolver is used (which looks for a
 *    `__typename` field or alternatively calls the `isTypeOf` method).
 */ parcelHelpers.export(exports, "graphql", ()=>graphql
);
/**
 * The graphqlSync function also fulfills GraphQL operations by parsing,
 * validating, and executing a GraphQL document along side a GraphQL schema.
 * However, it guarantees to complete synchronously (or throw an error) assuming
 * that all field resolvers are also synchronous.
 */ parcelHelpers.export(exports, "graphqlSync", ()=>graphqlSync
);
var _isPromiseMjs = require("./jsutils/isPromise.mjs");
var _isPromiseMjsDefault = parcelHelpers.interopDefault(_isPromiseMjs);
var _parserMjs = require("./language/parser.mjs");
var _validateMjs = require("./validation/validate.mjs");
var _validateMjs1 = require("./type/validate.mjs");
var _executeMjs = require("./execution/execute.mjs");
function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
    var _arguments = arguments;
    /* eslint-enable no-redeclare */ // Always return a Promise for a consistent API.
    return new Promise(function(resolve) {
        return resolve(_arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
            schema: argsOrSchema,
            source: source,
            rootValue: rootValue,
            contextValue: contextValue,
            variableValues: variableValues,
            operationName: operationName,
            fieldResolver: fieldResolver,
            typeResolver: typeResolver
        }));
    });
}
function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
    /* eslint-enable no-redeclare */ // Extract arguments from object args if provided.
    var result = arguments.length === 1 ? graphqlImpl(argsOrSchema) : graphqlImpl({
        schema: argsOrSchema,
        source: source,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        typeResolver: typeResolver
    }); // Assert that the execution was synchronous.
    if (_isPromiseMjsDefault.default(result)) throw new Error('GraphQL execution failed to complete synchronously.');
    return result;
}
function graphqlImpl(args) {
    var schema = args.schema, source = args.source, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, typeResolver = args.typeResolver; // Validate Schema
    var schemaValidationErrors = _validateMjs1.validateSchema(schema);
    if (schemaValidationErrors.length > 0) return {
        errors: schemaValidationErrors
    };
     // Parse
    var document;
    try {
        document = _parserMjs.parse(source);
    } catch (syntaxError) {
        return {
            errors: [
                syntaxError
            ]
        };
    } // Validate
    var validationErrors = _validateMjs.validate(schema, document);
    if (validationErrors.length > 0) return {
        errors: validationErrors
    };
     // Execute
    return _executeMjs.execute({
        schema: schema,
        document: document,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        typeResolver: typeResolver
    });
}

},{"./jsutils/isPromise.mjs":"gwsPK","./language/parser.mjs":"11ZrA","./validation/validate.mjs":"cJoEq","./type/validate.mjs":"ak8ik","./execution/execute.mjs":"kgSsA","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gwsPK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function isPromise(value) {
    return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
}
exports.default = isPromise;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"11ZrA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Configuration options to control parser behavior
 */ /**
 * Given a GraphQL source, parses it into a Document.
 * Throws GraphQLError if a syntax error is encountered.
 */ parcelHelpers.export(exports, "parse", ()=>parse
);
/**
 * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
 * that value.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Values directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: valueFromAST().
 */ parcelHelpers.export(exports, "parseValue", ()=>parseValue
);
/**
 * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
 * that type.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Types directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: typeFromAST().
 */ parcelHelpers.export(exports, "parseType", ()=>parseType
);
parcelHelpers.export(exports, "Parser", ()=>Parser
);
var _syntaxErrorMjs = require("../error/syntaxError.mjs");
var _kindsMjs = require("./kinds.mjs");
var _astMjs = require("./ast.mjs");
var _tokenKindMjs = require("./tokenKind.mjs");
var _sourceMjs = require("./source.mjs");
var _directiveLocationMjs = require("./directiveLocation.mjs");
var _lexerMjs = require("./lexer.mjs");
function parse(source, options) {
    var parser = new Parser(source, options);
    return parser.parseDocument();
}
function parseValue(source, options) {
    var parser = new Parser(source, options);
    parser.expectToken(_tokenKindMjs.TokenKind.SOF);
    var value = parser.parseValueLiteral(false);
    parser.expectToken(_tokenKindMjs.TokenKind.EOF);
    return value;
}
function parseType(source, options) {
    var parser = new Parser(source, options);
    parser.expectToken(_tokenKindMjs.TokenKind.SOF);
    var type = parser.parseTypeReference();
    parser.expectToken(_tokenKindMjs.TokenKind.EOF);
    return type;
}
var Parser = /*#__PURE__*/ function() {
    function Parser1(source, options) {
        var sourceObj = _sourceMjs.isSource(source) ? source : new _sourceMjs.Source(source);
        this._lexer = new _lexerMjs.Lexer(sourceObj);
        this._options = options;
    }
    /**
   * Converts a name lex token into a name parse node.
   */ var _proto = Parser1.prototype;
    _proto.parseName = function parseName() {
        var token = this.expectToken(_tokenKindMjs.TokenKind.NAME);
        return {
            kind: _kindsMjs.Kind.NAME,
            value: token.value,
            loc: this.loc(token)
        };
    } // Implements the parsing rules in the Document section.
    ;
    _proto.parseDocument = function parseDocument() {
        var start = this._lexer.token;
        return {
            kind: _kindsMjs.Kind.DOCUMENT,
            definitions: this.many(_tokenKindMjs.TokenKind.SOF, this.parseDefinition, _tokenKindMjs.TokenKind.EOF),
            loc: this.loc(start)
        };
    };
    _proto.parseDefinition = function parseDefinition() {
        if (this.peek(_tokenKindMjs.TokenKind.NAME)) switch(this._lexer.token.value){
            case 'query':
            case 'mutation':
            case 'subscription':
                return this.parseOperationDefinition();
            case 'fragment':
                return this.parseFragmentDefinition();
            case 'schema':
            case 'scalar':
            case 'type':
            case 'interface':
            case 'union':
            case 'enum':
            case 'input':
            case 'directive':
                return this.parseTypeSystemDefinition();
            case 'extend':
                return this.parseTypeSystemExtension();
        }
        else if (this.peek(_tokenKindMjs.TokenKind.BRACE_L)) return this.parseOperationDefinition();
        else if (this.peekDescription()) return this.parseTypeSystemDefinition();
        throw this.unexpected();
    } // Implements the parsing rules in the Operations section.
    ;
    _proto.parseOperationDefinition = function parseOperationDefinition() {
        var start = this._lexer.token;
        if (this.peek(_tokenKindMjs.TokenKind.BRACE_L)) return {
            kind: _kindsMjs.Kind.OPERATION_DEFINITION,
            operation: 'query',
            name: undefined,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
        };
        var operation = this.parseOperationType();
        var name;
        if (this.peek(_tokenKindMjs.TokenKind.NAME)) name = this.parseName();
        return {
            kind: _kindsMjs.Kind.OPERATION_DEFINITION,
            operation: operation,
            name: name,
            variableDefinitions: this.parseVariableDefinitions(),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
        };
    };
    _proto.parseOperationType = function parseOperationType() {
        var operationToken = this.expectToken(_tokenKindMjs.TokenKind.NAME);
        switch(operationToken.value){
            case 'query':
                return 'query';
            case 'mutation':
                return 'mutation';
            case 'subscription':
                return 'subscription';
        }
        throw this.unexpected(operationToken);
    };
    _proto.parseVariableDefinitions = function parseVariableDefinitions() {
        return this.optionalMany(_tokenKindMjs.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKindMjs.TokenKind.PAREN_R);
    };
    _proto.parseVariableDefinition = function parseVariableDefinition() {
        var start = this._lexer.token;
        return {
            kind: _kindsMjs.Kind.VARIABLE_DEFINITION,
            variable: this.parseVariable(),
            type: (this.expectToken(_tokenKindMjs.TokenKind.COLON), this.parseTypeReference()),
            defaultValue: this.expectOptionalToken(_tokenKindMjs.TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,
            directives: this.parseDirectives(true),
            loc: this.loc(start)
        };
    };
    _proto.parseVariable = function parseVariable() {
        var start = this._lexer.token;
        this.expectToken(_tokenKindMjs.TokenKind.DOLLAR);
        return {
            kind: _kindsMjs.Kind.VARIABLE,
            name: this.parseName(),
            loc: this.loc(start)
        };
    };
    _proto.parseSelectionSet = function parseSelectionSet() {
        var start = this._lexer.token;
        return {
            kind: _kindsMjs.Kind.SELECTION_SET,
            selections: this.many(_tokenKindMjs.TokenKind.BRACE_L, this.parseSelection, _tokenKindMjs.TokenKind.BRACE_R),
            loc: this.loc(start)
        };
    };
    _proto.parseSelection = function parseSelection() {
        return this.peek(_tokenKindMjs.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
    };
    _proto.parseField = function parseField() {
        var start = this._lexer.token;
        var nameOrAlias = this.parseName();
        var alias;
        var name;
        if (this.expectOptionalToken(_tokenKindMjs.TokenKind.COLON)) {
            alias = nameOrAlias;
            name = this.parseName();
        } else name = nameOrAlias;
        return {
            kind: _kindsMjs.Kind.FIELD,
            alias: alias,
            name: name,
            arguments: this.parseArguments(false),
            directives: this.parseDirectives(false),
            selectionSet: this.peek(_tokenKindMjs.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,
            loc: this.loc(start)
        };
    };
    _proto.parseArguments = function parseArguments(isConst) {
        var item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(_tokenKindMjs.TokenKind.PAREN_L, item, _tokenKindMjs.TokenKind.PAREN_R);
    };
    _proto.parseArgument = function parseArgument() {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKindMjs.TokenKind.COLON);
        return {
            kind: _kindsMjs.Kind.ARGUMENT,
            name: name,
            value: this.parseValueLiteral(false),
            loc: this.loc(start)
        };
    };
    _proto.parseConstArgument = function parseConstArgument() {
        var start = this._lexer.token;
        return {
            kind: _kindsMjs.Kind.ARGUMENT,
            name: this.parseName(),
            value: (this.expectToken(_tokenKindMjs.TokenKind.COLON), this.parseValueLiteral(true)),
            loc: this.loc(start)
        };
    } // Implements the parsing rules in the Fragments section.
    ;
    _proto.parseFragment = function parseFragment() {
        var start = this._lexer.token;
        this.expectToken(_tokenKindMjs.TokenKind.SPREAD);
        var hasTypeCondition = this.expectOptionalKeyword('on');
        if (!hasTypeCondition && this.peek(_tokenKindMjs.TokenKind.NAME)) return {
            kind: _kindsMjs.Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false),
            loc: this.loc(start)
        };
        return {
            kind: _kindsMjs.Kind.INLINE_FRAGMENT,
            typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
        };
    };
    _proto.parseFragmentDefinition = function parseFragmentDefinition() {
        var _this$_options;
        var start = this._lexer.token;
        this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes
        // the grammar of FragmentDefinition:
        //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet
        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) return {
            kind: _kindsMjs.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
        };
        return {
            kind: _kindsMjs.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
        };
    };
    _proto.parseFragmentName = function parseFragmentName() {
        if (this._lexer.token.value === 'on') throw this.unexpected();
        return this.parseName();
    } // Implements the parsing rules in the Values section.
    ;
    _proto.parseValueLiteral = function parseValueLiteral(isConst) {
        var token = this._lexer.token;
        switch(token.kind){
            case _tokenKindMjs.TokenKind.BRACKET_L:
                return this.parseList(isConst);
            case _tokenKindMjs.TokenKind.BRACE_L:
                return this.parseObject(isConst);
            case _tokenKindMjs.TokenKind.INT:
                this._lexer.advance();
                return {
                    kind: _kindsMjs.Kind.INT,
                    value: token.value,
                    loc: this.loc(token)
                };
            case _tokenKindMjs.TokenKind.FLOAT:
                this._lexer.advance();
                return {
                    kind: _kindsMjs.Kind.FLOAT,
                    value: token.value,
                    loc: this.loc(token)
                };
            case _tokenKindMjs.TokenKind.STRING:
            case _tokenKindMjs.TokenKind.BLOCK_STRING:
                return this.parseStringLiteral();
            case _tokenKindMjs.TokenKind.NAME:
                this._lexer.advance();
                switch(token.value){
                    case 'true':
                        return {
                            kind: _kindsMjs.Kind.BOOLEAN,
                            value: true,
                            loc: this.loc(token)
                        };
                    case 'false':
                        return {
                            kind: _kindsMjs.Kind.BOOLEAN,
                            value: false,
                            loc: this.loc(token)
                        };
                    case 'null':
                        return {
                            kind: _kindsMjs.Kind.NULL,
                            loc: this.loc(token)
                        };
                    default:
                        return {
                            kind: _kindsMjs.Kind.ENUM,
                            value: token.value,
                            loc: this.loc(token)
                        };
                }
            case _tokenKindMjs.TokenKind.DOLLAR:
                if (!isConst) return this.parseVariable();
                break;
        }
        throw this.unexpected();
    };
    _proto.parseStringLiteral = function parseStringLiteral() {
        var token = this._lexer.token;
        this._lexer.advance();
        return {
            kind: _kindsMjs.Kind.STRING,
            value: token.value,
            block: token.kind === _tokenKindMjs.TokenKind.BLOCK_STRING,
            loc: this.loc(token)
        };
    };
    _proto.parseList = function parseList(isConst) {
        var _this = this;
        var start = this._lexer.token;
        var item = function item1() {
            return _this.parseValueLiteral(isConst);
        };
        return {
            kind: _kindsMjs.Kind.LIST,
            values: this.any(_tokenKindMjs.TokenKind.BRACKET_L, item, _tokenKindMjs.TokenKind.BRACKET_R),
            loc: this.loc(start)
        };
    };
    _proto.parseObject = function parseObject(isConst) {
        var _this2 = this;
        var start = this._lexer.token;
        var item = function item1() {
            return _this2.parseObjectField(isConst);
        };
        return {
            kind: _kindsMjs.Kind.OBJECT,
            fields: this.any(_tokenKindMjs.TokenKind.BRACE_L, item, _tokenKindMjs.TokenKind.BRACE_R),
            loc: this.loc(start)
        };
    };
    _proto.parseObjectField = function parseObjectField(isConst) {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKindMjs.TokenKind.COLON);
        return {
            kind: _kindsMjs.Kind.OBJECT_FIELD,
            name: name,
            value: this.parseValueLiteral(isConst),
            loc: this.loc(start)
        };
    } // Implements the parsing rules in the Directives section.
    ;
    _proto.parseDirectives = function parseDirectives(isConst) {
        var directives = [];
        while(this.peek(_tokenKindMjs.TokenKind.AT))directives.push(this.parseDirective(isConst));
        return directives;
    };
    _proto.parseDirective = function parseDirective(isConst) {
        var start = this._lexer.token;
        this.expectToken(_tokenKindMjs.TokenKind.AT);
        return {
            kind: _kindsMjs.Kind.DIRECTIVE,
            name: this.parseName(),
            arguments: this.parseArguments(isConst),
            loc: this.loc(start)
        };
    } // Implements the parsing rules in the Types section.
    ;
    _proto.parseTypeReference = function parseTypeReference() {
        var start = this._lexer.token;
        var type;
        if (this.expectOptionalToken(_tokenKindMjs.TokenKind.BRACKET_L)) {
            type = this.parseTypeReference();
            this.expectToken(_tokenKindMjs.TokenKind.BRACKET_R);
            type = {
                kind: _kindsMjs.Kind.LIST_TYPE,
                type: type,
                loc: this.loc(start)
            };
        } else type = this.parseNamedType();
        if (this.expectOptionalToken(_tokenKindMjs.TokenKind.BANG)) return {
            kind: _kindsMjs.Kind.NON_NULL_TYPE,
            type: type,
            loc: this.loc(start)
        };
        return type;
    };
    _proto.parseNamedType = function parseNamedType() {
        var start = this._lexer.token;
        return {
            kind: _kindsMjs.Kind.NAMED_TYPE,
            name: this.parseName(),
            loc: this.loc(start)
        };
    } // Implements the parsing rules in the Type Definition section.
    ;
    _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
        // Many definitions begin with a description and require a lookahead.
        var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === _tokenKindMjs.TokenKind.NAME) switch(keywordToken.value){
            case 'schema':
                return this.parseSchemaDefinition();
            case 'scalar':
                return this.parseScalarTypeDefinition();
            case 'type':
                return this.parseObjectTypeDefinition();
            case 'interface':
                return this.parseInterfaceTypeDefinition();
            case 'union':
                return this.parseUnionTypeDefinition();
            case 'enum':
                return this.parseEnumTypeDefinition();
            case 'input':
                return this.parseInputObjectTypeDefinition();
            case 'directive':
                return this.parseDirectiveDefinition();
        }
        throw this.unexpected(keywordToken);
    };
    _proto.peekDescription = function peekDescription() {
        return this.peek(_tokenKindMjs.TokenKind.STRING) || this.peek(_tokenKindMjs.TokenKind.BLOCK_STRING);
    };
    _proto.parseDescription = function parseDescription() {
        if (this.peekDescription()) return this.parseStringLiteral();
    };
    _proto.parseSchemaDefinition = function parseSchemaDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('schema');
        var directives = this.parseDirectives(true);
        var operationTypes = this.many(_tokenKindMjs.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKindMjs.TokenKind.BRACE_R);
        return {
            kind: _kindsMjs.Kind.SCHEMA_DEFINITION,
            description: description,
            directives: directives,
            operationTypes: operationTypes,
            loc: this.loc(start)
        };
    };
    _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
        var start = this._lexer.token;
        var operation = this.parseOperationType();
        this.expectToken(_tokenKindMjs.TokenKind.COLON);
        var type = this.parseNamedType();
        return {
            kind: _kindsMjs.Kind.OPERATION_TYPE_DEFINITION,
            operation: operation,
            type: type,
            loc: this.loc(start)
        };
    };
    _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('scalar');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
            kind: _kindsMjs.Kind.SCALAR_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            loc: this.loc(start)
        };
    };
    _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('type');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
            kind: _kindsMjs.Kind.OBJECT_TYPE_DEFINITION,
            description: description,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
        };
    };
    _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
        var _this$_options2;
        if (!this.expectOptionalKeyword('implements')) return [];
        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
            var types = []; // Optional leading ampersand
            this.expectOptionalToken(_tokenKindMjs.TokenKind.AMP);
            do types.push(this.parseNamedType());
            while (this.expectOptionalToken(_tokenKindMjs.TokenKind.AMP) || this.peek(_tokenKindMjs.TokenKind.NAME))
            return types;
        }
        return this.delimitedMany(_tokenKindMjs.TokenKind.AMP, this.parseNamedType);
    };
    _proto.parseFieldsDefinition = function parseFieldsDefinition() {
        var _this$_options3;
        // Legacy support for the SDL?
        if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(_tokenKindMjs.TokenKind.BRACE_L) && this._lexer.lookahead().kind === _tokenKindMjs.TokenKind.BRACE_R) {
            this._lexer.advance();
            this._lexer.advance();
            return [];
        }
        return this.optionalMany(_tokenKindMjs.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKindMjs.TokenKind.BRACE_R);
    };
    _proto.parseFieldDefinition = function parseFieldDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        this.expectToken(_tokenKindMjs.TokenKind.COLON);
        var type = this.parseTypeReference();
        var directives = this.parseDirectives(true);
        return {
            kind: _kindsMjs.Kind.FIELD_DEFINITION,
            description: description,
            name: name,
            arguments: args,
            type: type,
            directives: directives,
            loc: this.loc(start)
        };
    };
    _proto.parseArgumentDefs = function parseArgumentDefs() {
        return this.optionalMany(_tokenKindMjs.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKindMjs.TokenKind.PAREN_R);
    };
    _proto.parseInputValueDef = function parseInputValueDef() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        this.expectToken(_tokenKindMjs.TokenKind.COLON);
        var type = this.parseTypeReference();
        var defaultValue;
        if (this.expectOptionalToken(_tokenKindMjs.TokenKind.EQUALS)) defaultValue = this.parseValueLiteral(true);
        var directives = this.parseDirectives(true);
        return {
            kind: _kindsMjs.Kind.INPUT_VALUE_DEFINITION,
            description: description,
            name: name,
            type: type,
            defaultValue: defaultValue,
            directives: directives,
            loc: this.loc(start)
        };
    };
    _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('interface');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
            kind: _kindsMjs.Kind.INTERFACE_TYPE_DEFINITION,
            description: description,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
        };
    };
    _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('union');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        return {
            kind: _kindsMjs.Kind.UNION_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            types: types,
            loc: this.loc(start)
        };
    };
    _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
        return this.expectOptionalToken(_tokenKindMjs.TokenKind.EQUALS) ? this.delimitedMany(_tokenKindMjs.TokenKind.PIPE, this.parseNamedType) : [];
    };
    _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('enum');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        return {
            kind: _kindsMjs.Kind.ENUM_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            values: values,
            loc: this.loc(start)
        };
    };
    _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
        return this.optionalMany(_tokenKindMjs.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKindMjs.TokenKind.BRACE_R);
    };
    _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
            kind: _kindsMjs.Kind.ENUM_VALUE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            loc: this.loc(start)
        };
    };
    _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('input');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        return {
            kind: _kindsMjs.Kind.INPUT_OBJECT_TYPE_DEFINITION,
            description: description,
            name: name,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
        };
    };
    _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
        return this.optionalMany(_tokenKindMjs.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKindMjs.TokenKind.BRACE_R);
    };
    _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
        var keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === _tokenKindMjs.TokenKind.NAME) switch(keywordToken.value){
            case 'schema':
                return this.parseSchemaExtension();
            case 'scalar':
                return this.parseScalarTypeExtension();
            case 'type':
                return this.parseObjectTypeExtension();
            case 'interface':
                return this.parseInterfaceTypeExtension();
            case 'union':
                return this.parseUnionTypeExtension();
            case 'enum':
                return this.parseEnumTypeExtension();
            case 'input':
                return this.parseInputObjectTypeExtension();
        }
        throw this.unexpected(keywordToken);
    };
    _proto.parseSchemaExtension = function parseSchemaExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('schema');
        var directives = this.parseDirectives(true);
        var operationTypes = this.optionalMany(_tokenKindMjs.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKindMjs.TokenKind.BRACE_R);
        if (directives.length === 0 && operationTypes.length === 0) throw this.unexpected();
        return {
            kind: _kindsMjs.Kind.SCHEMA_EXTENSION,
            directives: directives,
            operationTypes: operationTypes,
            loc: this.loc(start)
        };
    };
    _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('scalar');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        if (directives.length === 0) throw this.unexpected();
        return {
            kind: _kindsMjs.Kind.SCALAR_TYPE_EXTENSION,
            name: name,
            directives: directives,
            loc: this.loc(start)
        };
    };
    _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('type');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) throw this.unexpected();
        return {
            kind: _kindsMjs.Kind.OBJECT_TYPE_EXTENSION,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
        };
    };
    _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('interface');
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) throw this.unexpected();
        return {
            kind: _kindsMjs.Kind.INTERFACE_TYPE_EXTENSION,
            name: name,
            interfaces: interfaces,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
        };
    };
    _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('union');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0) throw this.unexpected();
        return {
            kind: _kindsMjs.Kind.UNION_TYPE_EXTENSION,
            name: name,
            directives: directives,
            types: types,
            loc: this.loc(start)
        };
    };
    _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('enum');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0) throw this.unexpected();
        return {
            kind: _kindsMjs.Kind.ENUM_TYPE_EXTENSION,
            name: name,
            directives: directives,
            values: values,
            loc: this.loc(start)
        };
    };
    _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword('extend');
        this.expectKeyword('input');
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) throw this.unexpected();
        return {
            kind: _kindsMjs.Kind.INPUT_OBJECT_TYPE_EXTENSION,
            name: name,
            directives: directives,
            fields: fields,
            loc: this.loc(start)
        };
    };
    _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword('directive');
        this.expectToken(_tokenKindMjs.TokenKind.AT);
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        var repeatable = this.expectOptionalKeyword('repeatable');
        this.expectKeyword('on');
        var locations = this.parseDirectiveLocations();
        return {
            kind: _kindsMjs.Kind.DIRECTIVE_DEFINITION,
            description: description,
            name: name,
            arguments: args,
            repeatable: repeatable,
            locations: locations,
            loc: this.loc(start)
        };
    };
    _proto.parseDirectiveLocations = function parseDirectiveLocations() {
        return this.delimitedMany(_tokenKindMjs.TokenKind.PIPE, this.parseDirectiveLocation);
    };
    _proto.parseDirectiveLocation = function parseDirectiveLocation() {
        var start = this._lexer.token;
        var name = this.parseName();
        if (_directiveLocationMjs.DirectiveLocation[name.value] !== undefined) return name;
        throw this.unexpected(start);
    } // Core parsing utility functions
    ;
    _proto.loc = function loc(startToken) {
        var _this$_options4;
        if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) return new _astMjs.Location(startToken, this._lexer.lastToken, this._lexer.source);
    };
    _proto.peek = function peek(kind) {
        return this._lexer.token.kind === kind;
    };
    _proto.expectToken = function expectToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
            this._lexer.advance();
            return token;
        }
        throw _syntaxErrorMjs.syntaxError(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
    };
    _proto.expectOptionalToken = function expectOptionalToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
            this._lexer.advance();
            return token;
        }
        return undefined;
    };
    _proto.expectKeyword = function expectKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === _tokenKindMjs.TokenKind.NAME && token.value === value) this._lexer.advance();
        else throw _syntaxErrorMjs.syntaxError(this._lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token), "."));
    };
    _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === _tokenKindMjs.TokenKind.NAME && token.value === value) {
            this._lexer.advance();
            return true;
        }
        return false;
    };
    _proto.unexpected = function unexpected(atToken) {
        var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return _syntaxErrorMjs.syntaxError(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
    };
    _proto.any = function any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        while(!this.expectOptionalToken(closeKind))nodes.push(parseFn.call(this));
        return nodes;
    };
    _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
            var nodes = [];
            do nodes.push(parseFn.call(this));
            while (!this.expectOptionalToken(closeKind))
            return nodes;
        }
        return [];
    };
    _proto.many = function many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        do nodes.push(parseFn.call(this));
        while (!this.expectOptionalToken(closeKind))
        return nodes;
    };
    _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        var nodes = [];
        do nodes.push(parseFn.call(this));
        while (this.expectOptionalToken(delimiterKind))
        return nodes;
    };
    return Parser1;
}();
/**
 * A helper function to describe a token as a string for debugging.
 */ function getTokenDesc(token) {
    var value = token.value;
    return getTokenKindDesc(token.kind) + (value != null ? " \"".concat(value, "\"") : '');
}
/**
 * A helper function to describe a token kind as a string for debugging.
 */ function getTokenKindDesc(kind) {
    return _lexerMjs.isPunctuatorTokenKind(kind) ? "\"".concat(kind, "\"") : kind;
}

},{"../error/syntaxError.mjs":"dJnXb","./kinds.mjs":"3gRFP","./ast.mjs":"avmJW","./tokenKind.mjs":"itJR8","./source.mjs":"8rn4G","./directiveLocation.mjs":"dhp4e","./lexer.mjs":"fx2Ap","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dJnXb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Produces a GraphQLError representing a syntax error, containing useful
 * descriptive information about the syntax error's position in the source.
 */ parcelHelpers.export(exports, "syntaxError", ()=>syntaxError
);
var _graphQLErrorMjs = require("./GraphQLError.mjs");
function syntaxError(source, position, description) {
    return new _graphQLErrorMjs.GraphQLError("Syntax Error: ".concat(description), undefined, source, [
        position
    ]);
}

},{"./GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a8Vyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GraphQLError", ()=>GraphQLError1
);
/**
 * Prints a GraphQLError to a string, representing useful location information
 * about the error's position in the source.
 */ parcelHelpers.export(exports, "printError", ()=>printError
);
// FIXME:
// flowlint uninitialized-instance-property:off
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _symbolsMjs = require("../polyfills/symbols.mjs");
var _locationMjs = require("../language/location.mjs");
var _printLocationMjs = require("../language/printLocation.mjs");
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof1(obj1) {
        return typeof obj1;
    };
    else _typeof = function _typeof2(obj1) {
        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
    };
    return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn(this, result);
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper1(Class1) {
        if (Class1 === null || !_isNativeFunction(Class1)) return Class1;
        if (typeof Class1 !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class1)) return _cache.get(Class1);
            _cache.set(Class1, Wrapper);
        }
        function Wrapper() {
            return _construct(Class1, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class1.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class1);
    };
    return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) _construct = Reflect.construct;
    else _construct = function _construct1(Parent1, args1, Class1) {
        var a = [
            null
        ];
        a.push.apply(a, args1);
        var Constructor = Function.bind.apply(Parent1, a);
        var instance = new Constructor();
        if (Class1) _setPrototypeOf(instance, Class1.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf1(o1) {
        return o1.__proto__ || Object.getPrototypeOf(o1);
    };
    return _getPrototypeOf(o);
}
var GraphQLError1 = /*#__PURE__*/ function(_Error) {
    _inherits(GraphQLError2, _Error);
    var _super = _createSuper(GraphQLError2);
    /**
   * A message describing the Error for debugging purposes.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   *
   * Note: should be treated as readonly, despite invariant usage.
   */ /**
   * An array of { line, column } locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */ /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */ /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */ /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */ /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */ /**
   * The original error thrown from a field resolver during execution.
   */ /**
   * Extension fields to add to the formatted error.
   */ function GraphQLError2(message, nodes, source, positions, path, originalError, extensions) {
        var _locations2, _source2, _positions2, _extensions2;
        var _this;
        _classCallCheck(this, GraphQLError2);
        _this = _super.call(this, message); // Compute list of blame nodes.
        var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [
            nodes
        ] : undefined; // Compute locations in the source for the given nodes/positions.
        var _source = source;
        if (!_source && _nodes) {
            var _nodes$0$loc;
            _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
        }
        var _positions = positions;
        if (!_positions && _nodes) _positions = _nodes.reduce(function(list, node) {
            if (node.loc) list.push(node.loc.start);
            return list;
        }, []);
        if (_positions && _positions.length === 0) _positions = undefined;
        var _locations;
        if (positions && source) _locations = positions.map(function(pos) {
            return _locationMjs.getLocation(source, pos);
        });
        else if (_nodes) _locations = _nodes.reduce(function(list, node) {
            if (node.loc) list.push(_locationMjs.getLocation(node.loc.source, node.loc.start));
            return list;
        }, []);
        var _extensions = extensions;
        if (_extensions == null && originalError != null) {
            var originalExtensions = originalError.extensions;
            if (_isObjectLikeMjsDefault.default(originalExtensions)) _extensions = originalExtensions;
        }
        Object.defineProperties(_assertThisInitialized(_this), {
            name: {
                value: 'GraphQLError'
            },
            message: {
                value: message,
                // By being enumerable, JSON.stringify will include `message` in the
                // resulting output. This ensures that the simplest possible GraphQL
                // service adheres to the spec.
                enumerable: true,
                writable: true
            },
            locations: {
                // Coercing falsy values to undefined ensures they will not be included
                // in JSON.stringify() when not provided.
                value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,
                // By being enumerable, JSON.stringify will include `locations` in the
                // resulting output. This ensures that the simplest possible GraphQL
                // service adheres to the spec.
                enumerable: _locations != null
            },
            path: {
                // Coercing falsy values to undefined ensures they will not be included
                // in JSON.stringify() when not provided.
                value: path !== null && path !== void 0 ? path : undefined,
                // By being enumerable, JSON.stringify will include `path` in the
                // resulting output. This ensures that the simplest possible GraphQL
                // service adheres to the spec.
                enumerable: path != null
            },
            nodes: {
                value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined
            },
            source: {
                value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined
            },
            positions: {
                value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined
            },
            originalError: {
                value: originalError
            },
            extensions: {
                // Coercing falsy values to undefined ensures they will not be included
                // in JSON.stringify() when not provided.
                value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,
                // By being enumerable, JSON.stringify will include `path` in the
                // resulting output. This ensures that the simplest possible GraphQL
                // service adheres to the spec.
                enumerable: _extensions != null
            }
        }); // Include (non-enumerable) stack trace.
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
            Object.defineProperty(_assertThisInitialized(_this), 'stack', {
                value: originalError.stack,
                writable: true,
                configurable: true
            });
            return _possibleConstructorReturn(_this);
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
        if (Error.captureStackTrace) Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError2);
        else Object.defineProperty(_assertThisInitialized(_this), 'stack', {
            value: Error().stack,
            writable: true,
            configurable: true
        });
        return _this;
    }
    _createClass(GraphQLError2, [
        {
            key: "toString",
            value: function toString() {
                return printError(this);
            } // FIXME: workaround to not break chai comparisons, should be remove in v16
        },
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'Object';
            }
        }
    ]);
    return GraphQLError2;
}(/*#__PURE__*/ _wrapNativeSuper(Error));
function printError(error) {
    var output = error.message;
    if (error.nodes) for(var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++){
        var node = _error$nodes2[_i2];
        if (node.loc) output += '\n\n' + _printLocationMjs.printLocation(node.loc);
    }
    else if (error.source && error.locations) for(var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++){
        var location = _error$locations2[_i4];
        output += '\n\n' + _printLocationMjs.printSourceLocation(error.source, location);
    }
    return output;
}

},{"../jsutils/isObjectLike.mjs":"6kDBW","../polyfills/symbols.mjs":"e9VHS","../language/location.mjs":"e78wy","../language/printLocation.mjs":"3Xx8f","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6kDBW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof1(obj1) {
        return typeof obj1;
    };
    else _typeof = function _typeof2(obj1) {
        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
    };
    return _typeof(obj);
}
function isObjectLike(value) {
    return _typeof(value) == 'object' && value !== null;
}
exports.default = isObjectLike;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e9VHS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SYMBOL_ITERATOR", ()=>SYMBOL_ITERATOR
);
parcelHelpers.export(exports, "SYMBOL_ASYNC_ITERATOR", ()=>SYMBOL_ASYNC_ITERATOR
);
parcelHelpers.export(exports, "SYMBOL_TO_STRING_TAG", ()=>SYMBOL_TO_STRING_TAG
);
var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator != null ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator
var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator != null ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e78wy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents a location in a Source.
 */ /**
 * Takes a Source and a UTF-8 character offset, and returns the corresponding
 * line and column as a SourceLocation.
 */ parcelHelpers.export(exports, "getLocation", ()=>getLocation
);
function getLocation(source, position) {
    var lineRegexp = /\r\n|[\n\r]/g;
    var line = 1;
    var column = position + 1;
    var match;
    while((match = lineRegexp.exec(source.body)) && match.index < position){
        line += 1;
        column = position + 1 - (match.index + match[0].length);
    }
    return {
        line: line,
        column: column
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3Xx8f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Render a helpful description of the location in the GraphQL Source document.
 */ parcelHelpers.export(exports, "printLocation", ()=>printLocation
);
/**
 * Render a helpful description of the location in the GraphQL Source document.
 */ parcelHelpers.export(exports, "printSourceLocation", ()=>printSourceLocation
);
var _locationMjs = require("./location.mjs");
function printLocation(location) {
    return printSourceLocation(location.source, _locationMjs.getLocation(location.source, location.start));
}
function printSourceLocation(source, sourceLocation) {
    var firstLineColumnOffset = source.locationOffset.column - 1;
    var body = whitespace(firstLineColumnOffset) + source.body;
    var lineIndex = sourceLocation.line - 1;
    var lineOffset = source.locationOffset.line - 1;
    var lineNum = sourceLocation.line + lineOffset;
    var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
    var columnNum = sourceLocation.column + columnOffset;
    var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
    var lines = body.split(/\r\n|[\n\r]/g);
    var locationLine = lines[lineIndex]; // Special case for minified documents
    if (locationLine.length > 120) {
        var subLineIndex = Math.floor(columnNum / 80);
        var subLineColumnNum = columnNum % 80;
        var subLines = [];
        for(var i = 0; i < locationLine.length; i += 80)subLines.push(locationLine.slice(i, i + 80));
        return locationStr + printPrefixedLines([
            [
                "".concat(lineNum),
                subLines[0]
            ]
        ].concat(subLines.slice(1, subLineIndex + 1).map(function(subLine) {
            return [
                '',
                subLine
            ];
        }), [
            [
                ' ',
                whitespace(subLineColumnNum - 1) + '^'
            ],
            [
                '',
                subLines[subLineIndex + 1]
            ]
        ]));
    }
    return locationStr + printPrefixedLines([
        [
            "".concat(lineNum - 1),
            lines[lineIndex - 1]
        ],
        [
            "".concat(lineNum),
            locationLine
        ],
        [
            '',
            whitespace(columnNum - 1) + '^'
        ],
        [
            "".concat(lineNum + 1),
            lines[lineIndex + 1]
        ]
    ]);
}
function printPrefixedLines(lines) {
    var existingLines = lines.filter(function(_ref) {
        var _ = _ref[0], line = _ref[1];
        return line !== undefined;
    });
    var padLen = Math.max.apply(Math, existingLines.map(function(_ref2) {
        var prefix = _ref2[0];
        return prefix.length;
    }));
    return existingLines.map(function(_ref3) {
        var prefix = _ref3[0], line = _ref3[1];
        return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');
    }).join('\n');
}
function whitespace(len) {
    return Array(len + 1).join(' ');
}
function leftPad(len, str) {
    return whitespace(len - str.length) + str;
}

},{"./location.mjs":"e78wy","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3gRFP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Kind", ()=>Kind
);
var Kind = Object.freeze({
    // Name
    NAME: 'Name',
    // Document
    DOCUMENT: 'Document',
    OPERATION_DEFINITION: 'OperationDefinition',
    VARIABLE_DEFINITION: 'VariableDefinition',
    SELECTION_SET: 'SelectionSet',
    FIELD: 'Field',
    ARGUMENT: 'Argument',
    // Fragments
    FRAGMENT_SPREAD: 'FragmentSpread',
    INLINE_FRAGMENT: 'InlineFragment',
    FRAGMENT_DEFINITION: 'FragmentDefinition',
    // Values
    VARIABLE: 'Variable',
    INT: 'IntValue',
    FLOAT: 'FloatValue',
    STRING: 'StringValue',
    BOOLEAN: 'BooleanValue',
    NULL: 'NullValue',
    ENUM: 'EnumValue',
    LIST: 'ListValue',
    OBJECT: 'ObjectValue',
    OBJECT_FIELD: 'ObjectField',
    // Directives
    DIRECTIVE: 'Directive',
    // Types
    NAMED_TYPE: 'NamedType',
    LIST_TYPE: 'ListType',
    NON_NULL_TYPE: 'NonNullType',
    // Type System Definitions
    SCHEMA_DEFINITION: 'SchemaDefinition',
    OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
    // Type Definitions
    SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
    OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
    FIELD_DEFINITION: 'FieldDefinition',
    INPUT_VALUE_DEFINITION: 'InputValueDefinition',
    INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
    UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
    ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
    ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
    INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
    // Directive Definitions
    DIRECTIVE_DEFINITION: 'DirectiveDefinition',
    // Type System Extensions
    SCHEMA_EXTENSION: 'SchemaExtension',
    // Type Extensions
    SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
    OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
    INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
    UNION_TYPE_EXTENSION: 'UnionTypeExtension',
    ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
    INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'
}); /**
 * The enum type representing the possible kind values of AST nodes.
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"avmJW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Location", ()=>Location1
);
parcelHelpers.export(exports, "Token", ()=>Token
);
/**
 * @internal
 */ parcelHelpers.export(exports, "isNode", ()=>isNode
) /**
 * The list of all possible AST node types.
 */ ;
var _defineInspectMjs = require("../jsutils/defineInspect.mjs");
var _defineInspectMjsDefault = parcelHelpers.interopDefault(_defineInspectMjs);
var Location1 = /*#__PURE__*/ function() {
    /**
   * The character offset at which this Node begins.
   */ /**
   * The character offset at which this Node ends.
   */ /**
   * The Token at which this Node begins.
   */ /**
   * The Token at which this Node ends.
   */ /**
   * The Source document the AST represents.
   */ function Location2(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
    }
    var _proto = Location2.prototype;
    _proto.toJSON = function toJSON() {
        return {
            start: this.start,
            end: this.end
        };
    };
    return Location2;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(Location1);
var Token = /*#__PURE__*/ function() {
    /**
   * The kind of Token.
   */ /**
   * The character offset at which this Node begins.
   */ /**
   * The character offset at which this Node ends.
   */ /**
   * The 1-indexed line number on which this Token appears.
   */ /**
   * The 1-indexed column number at which this Token begins.
   */ /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   */ /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */ function Token1(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
    }
    var _proto2 = Token1.prototype;
    _proto2.toJSON = function toJSON() {
        return {
            kind: this.kind,
            value: this.value,
            line: this.line,
            column: this.column
        };
    };
    return Token1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(Token);
function isNode(maybeNode) {
    return maybeNode != null && typeof maybeNode.kind === 'string';
}

},{"../jsutils/defineInspect.mjs":"cobf8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cobf8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invariantMjs = require("./invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _nodejsCustomInspectSymbolMjs = require("./nodejsCustomInspectSymbol.mjs");
var _nodejsCustomInspectSymbolMjsDefault = parcelHelpers.interopDefault(_nodejsCustomInspectSymbolMjs);
function defineInspect(classObject) {
    var fn = classObject.prototype.toJSON;
    typeof fn === 'function' || _invariantMjsDefault.default(0);
    classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')
    if (_nodejsCustomInspectSymbolMjsDefault.default) classObject.prototype[_nodejsCustomInspectSymbolMjsDefault.default] = fn;
}
exports.default = defineInspect;

},{"./invariant.mjs":"gb46A","./nodejsCustomInspectSymbol.mjs":"dY0mN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gb46A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function invariant(condition, message) {
    var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')
    if (!booleanCondition) throw new Error(message != null ? message : 'Unexpected invariant triggered.');
}
exports.default = invariant;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dY0mN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
exports.default = nodejsCustomInspectSymbol;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"itJR8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenKind", ()=>TokenKind
);
var TokenKind = Object.freeze({
    SOF: '<SOF>',
    EOF: '<EOF>',
    BANG: '!',
    DOLLAR: '$',
    AMP: '&',
    PAREN_L: '(',
    PAREN_R: ')',
    SPREAD: '...',
    COLON: ':',
    EQUALS: '=',
    AT: '@',
    BRACKET_L: '[',
    BRACKET_R: ']',
    BRACE_L: '{',
    PIPE: '|',
    BRACE_R: '}',
    NAME: 'Name',
    INT: 'Int',
    FLOAT: 'Float',
    STRING: 'String',
    BLOCK_STRING: 'BlockString',
    COMMENT: 'Comment'
}); /**
 * The enum type representing the token kinds values.
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8rn4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Source", ()=>Source
);
/**
 * Test if the given value is a Source object.
 *
 * @internal
 */ // eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isSource", ()=>isSource
);
var _symbolsMjs = require("../polyfills/symbols.mjs");
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _instanceOfMjs = require("../jsutils/instanceOf.mjs");
var _instanceOfMjsDefault = parcelHelpers.interopDefault(_instanceOfMjs);
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Source = /*#__PURE__*/ function() {
    function Source1(body) {
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';
        var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
            line: 1,
            column: 1
        };
        typeof body === 'string' || _devAssertMjsDefault.default(0, "Body must be a string. Received: ".concat(_inspectMjsDefault.default(body), "."));
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || _devAssertMjsDefault.default(0, 'line in locationOffset is 1-indexed and must be positive.');
        this.locationOffset.column > 0 || _devAssertMjsDefault.default(0, 'column in locationOffset is 1-indexed and must be positive.');
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    _createClass(Source1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'Source';
            }
        }
    ]);
    return Source1;
}();
function isSource(source) {
    return _instanceOfMjsDefault.default(source, Source);
}

},{"../polyfills/symbols.mjs":"e9VHS","../jsutils/inspect.mjs":"doI9y","../jsutils/devAssert.mjs":"iZbmm","../jsutils/instanceOf.mjs":"e6Poo","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"doI9y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable flowtype/no-weak-types */ var _nodejsCustomInspectSymbolMjs = require("./nodejsCustomInspectSymbol.mjs");
var _nodejsCustomInspectSymbolMjsDefault = parcelHelpers.interopDefault(_nodejsCustomInspectSymbolMjs);
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof1(obj1) {
        return typeof obj1;
    };
    else _typeof = function _typeof2(obj1) {
        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
    };
    return _typeof(obj);
}
var MAX_ARRAY_LENGTH = 10;
var MAX_RECURSIVE_DEPTH = 2;
function inspect(value) {
    return formatValue(value, []);
}
exports.default = inspect;
function formatValue(value, seenValues) {
    switch(_typeof(value)){
        case 'string':
            return JSON.stringify(value);
        case 'function':
            return value.name ? "[function ".concat(value.name, "]") : '[function]';
        case 'object':
            if (value === null) return 'null';
            return formatObjectValue(value, seenValues);
        default:
            return String(value);
    }
}
function formatObjectValue(value, previouslySeenValues) {
    if (previouslySeenValues.indexOf(value) !== -1) return '[Circular]';
    var seenValues = [].concat(previouslySeenValues, [
        value
    ]);
    var customInspectFn = getCustomFn(value);
    if (customInspectFn !== undefined) {
        var customValue = customInspectFn.call(value); // check for infinite recursion
        if (customValue !== value) return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
    } else if (Array.isArray(value)) return formatArray(value, seenValues);
    return formatObject(value, seenValues);
}
function formatObject(object, seenValues) {
    var keys = Object.keys(object);
    if (keys.length === 0) return '{}';
    if (seenValues.length > MAX_RECURSIVE_DEPTH) return '[' + getObjectTag(object) + ']';
    var properties = keys.map(function(key) {
        var value = formatValue(object[key], seenValues);
        return key + ': ' + value;
    });
    return '{ ' + properties.join(', ') + ' }';
}
function formatArray(array, seenValues) {
    if (array.length === 0) return '[]';
    if (seenValues.length > MAX_RECURSIVE_DEPTH) return '[Array]';
    var len = Math.min(MAX_ARRAY_LENGTH, array.length);
    var remaining = array.length - len;
    var items = [];
    for(var i = 0; i < len; ++i)items.push(formatValue(array[i], seenValues));
    if (remaining === 1) items.push('... 1 more item');
    else if (remaining > 1) items.push("... ".concat(remaining, " more items"));
    return '[' + items.join(', ') + ']';
}
function getCustomFn(object) {
    var customInspectFn = object[String(_nodejsCustomInspectSymbolMjsDefault.default)];
    if (typeof customInspectFn === 'function') return customInspectFn;
    if (typeof object.inspect === 'function') return object.inspect;
}
function getObjectTag(object) {
    var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');
    if (tag === 'Object' && typeof object.constructor === 'function') {
        var name = object.constructor.name;
        if (typeof name === 'string' && name !== '') return name;
    }
    return tag;
}

},{"./nodejsCustomInspectSymbol.mjs":"dY0mN","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iZbmm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function devAssert(condition, message) {
    var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')
    if (!booleanCondition) throw new Error(message);
}
exports.default = devAssert;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e6Poo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inspectMjs = require("./inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof1(obj1) {
        return typeof obj1;
    };
    else _typeof = function _typeof2(obj1) {
        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
    };
    return _typeof(obj);
}
exports.default = function instanceOf(value, constructor) {
    if (value instanceof constructor) return true;
    if (_typeof(value) === 'object' && value !== null) {
        var _value$constructor;
        var className = constructor.prototype[Symbol.toStringTag];
        var valueClassName = Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;
        if (className === valueClassName) {
            var stringifiedValue = _inspectMjsDefault.default(value);
            throw new Error("Cannot use ".concat(className, " \"").concat(stringifiedValue, "\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results."));
        }
    }
    return false;
};

},{"./inspect.mjs":"doI9y","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dhp4e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DirectiveLocation", ()=>DirectiveLocation
);
var DirectiveLocation = Object.freeze({
    // Request Definitions
    QUERY: 'QUERY',
    MUTATION: 'MUTATION',
    SUBSCRIPTION: 'SUBSCRIPTION',
    FIELD: 'FIELD',
    FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
    FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
    INLINE_FRAGMENT: 'INLINE_FRAGMENT',
    VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',
    // Type System Definitions
    SCHEMA: 'SCHEMA',
    SCALAR: 'SCALAR',
    OBJECT: 'OBJECT',
    FIELD_DEFINITION: 'FIELD_DEFINITION',
    ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
    INTERFACE: 'INTERFACE',
    UNION: 'UNION',
    ENUM: 'ENUM',
    ENUM_VALUE: 'ENUM_VALUE',
    INPUT_OBJECT: 'INPUT_OBJECT',
    INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
}); /**
 * The enum type representing the directive location values.
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fx2Ap":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Lexer", ()=>Lexer
);
/**
 * @internal
 */ parcelHelpers.export(exports, "isPunctuatorTokenKind", ()=>isPunctuatorTokenKind
);
var _syntaxErrorMjs = require("../error/syntaxError.mjs");
var _astMjs = require("./ast.mjs");
var _tokenKindMjs = require("./tokenKind.mjs");
var _blockStringMjs = require("./blockString.mjs");
var Lexer = /*#__PURE__*/ function() {
    /**
   * The previously focused non-ignored token.
   */ /**
   * The currently focused non-ignored token.
   */ /**
   * The (1-indexed) line containing the current token.
   */ /**
   * The character offset at which the current line begins.
   */ function Lexer1(source) {
        var startOfFileToken = new _astMjs.Token(_tokenKindMjs.TokenKind.SOF, 0, 0, 0, 0, null);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
    }
    /**
   * Advances the token stream to the next non-ignored token.
   */ var _proto = Lexer1.prototype;
    _proto.advance = function advance() {
        this.lastToken = this.token;
        var token = this.token = this.lookahead();
        return token;
    };
    _proto.lookahead = function lookahead() {
        var token = this.token;
        if (token.kind !== _tokenKindMjs.TokenKind.EOF) do {
            var _token$next;
            // Note: next is only mutable during parsing, so we cast to allow this.
            token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
        }while (token.kind === _tokenKindMjs.TokenKind.COMMENT)
        return token;
    };
    return Lexer1;
}();
function isPunctuatorTokenKind(kind) {
    return kind === _tokenKindMjs.TokenKind.BANG || kind === _tokenKindMjs.TokenKind.DOLLAR || kind === _tokenKindMjs.TokenKind.AMP || kind === _tokenKindMjs.TokenKind.PAREN_L || kind === _tokenKindMjs.TokenKind.PAREN_R || kind === _tokenKindMjs.TokenKind.SPREAD || kind === _tokenKindMjs.TokenKind.COLON || kind === _tokenKindMjs.TokenKind.EQUALS || kind === _tokenKindMjs.TokenKind.AT || kind === _tokenKindMjs.TokenKind.BRACKET_L || kind === _tokenKindMjs.TokenKind.BRACKET_R || kind === _tokenKindMjs.TokenKind.BRACE_L || kind === _tokenKindMjs.TokenKind.PIPE || kind === _tokenKindMjs.TokenKind.BRACE_R;
}
function printCharCode(code) {
    return isNaN(code) ? _tokenKindMjs.TokenKind.EOF : code < 127 ? JSON.stringify(String.fromCharCode(code)) : "\"\\u".concat(('00' + code.toString(16).toUpperCase()).slice(-4), "\"");
}
/**
 * Gets the next token from the source starting at the given position.
 *
 * This skips over whitespace until it finds the next lexable token, then lexes
 * punctuators immediately or calls the appropriate helper function for more
 * complicated tokens.
 */ function readToken(lexer, prev) {
    var source = lexer.source;
    var body = source.body;
    var bodyLength = body.length;
    var pos = prev.end;
    while(pos < bodyLength){
        var code = body.charCodeAt(pos);
        var _line = lexer.line;
        var _col = 1 + pos - lexer.lineStart; // SourceCharacter
        switch(code){
            case 65279:
            case 9:
            case 32:
            case 44:
                //  ,
                ++pos;
                continue;
            case 10:
                //  \n
                ++pos;
                ++lexer.line;
                lexer.lineStart = pos;
                continue;
            case 13:
                //  \r
                if (body.charCodeAt(pos + 1) === 10) pos += 2;
                else ++pos;
                ++lexer.line;
                lexer.lineStart = pos;
                continue;
            case 33:
                //  !
                return new _astMjs.Token(_tokenKindMjs.TokenKind.BANG, pos, pos + 1, _line, _col, prev);
            case 35:
                //  #
                return readComment(source, pos, _line, _col, prev);
            case 36:
                //  $
                return new _astMjs.Token(_tokenKindMjs.TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);
            case 38:
                //  &
                return new _astMjs.Token(_tokenKindMjs.TokenKind.AMP, pos, pos + 1, _line, _col, prev);
            case 40:
                //  (
                return new _astMjs.Token(_tokenKindMjs.TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);
            case 41:
                //  )
                return new _astMjs.Token(_tokenKindMjs.TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);
            case 46:
                //  .
                if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) return new _astMjs.Token(_tokenKindMjs.TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
                break;
            case 58:
                //  :
                return new _astMjs.Token(_tokenKindMjs.TokenKind.COLON, pos, pos + 1, _line, _col, prev);
            case 61:
                //  =
                return new _astMjs.Token(_tokenKindMjs.TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);
            case 64:
                //  @
                return new _astMjs.Token(_tokenKindMjs.TokenKind.AT, pos, pos + 1, _line, _col, prev);
            case 91:
                //  [
                return new _astMjs.Token(_tokenKindMjs.TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);
            case 93:
                //  ]
                return new _astMjs.Token(_tokenKindMjs.TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);
            case 123:
                // {
                return new _astMjs.Token(_tokenKindMjs.TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);
            case 124:
                // |
                return new _astMjs.Token(_tokenKindMjs.TokenKind.PIPE, pos, pos + 1, _line, _col, prev);
            case 125:
                // }
                return new _astMjs.Token(_tokenKindMjs.TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);
            case 34:
                //  "
                if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) return readBlockString(source, pos, _line, _col, prev, lexer);
                return readString(source, pos, _line, _col, prev);
            case 45:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
                //  9
                return readNumber(source, pos, code, _line, _col, prev);
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 95:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
                // z
                return readName(source, pos, _line, _col, prev);
        }
        throw _syntaxErrorMjs.syntaxError(source, pos, unexpectedCharacterMessage(code));
    }
    var line = lexer.line;
    var col = 1 + pos - lexer.lineStart;
    return new _astMjs.Token(_tokenKindMjs.TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
}
/**
 * Report a message that an unexpected character was encountered.
 */ function unexpectedCharacterMessage(code) {
    if (code < 32 && code !== 9 && code !== 10 && code !== 13) return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
    if (code === 39) // '
    return 'Unexpected single quote character (\'), did you mean to use a double quote (")?';
    return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
}
/**
 * Reads a comment token from the source file.
 *
 * #[\u0009\u0020-\uFFFF]*
 */ function readComment(source, start, line, col, prev) {
    var body = source.body;
    var code;
    var position = start;
    do code = body.charCodeAt(++position);
    while (!isNaN(code) && (code > 31 || code === 9))
    return new _astMjs.Token(_tokenKindMjs.TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
}
/**
 * Reads a number token from the source file, either a float
 * or an int depending on whether a decimal point appears.
 *
 * Int:   -?(0|[1-9][0-9]*)
 * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
 */ function readNumber(source, start, firstCode, line, col, prev) {
    var body = source.body;
    var code = firstCode;
    var position = start;
    var isFloat = false;
    if (code === 45) // -
    code = body.charCodeAt(++position);
    if (code === 48) {
        // 0
        code = body.charCodeAt(++position);
        if (code >= 48 && code <= 57) throw _syntaxErrorMjs.syntaxError(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
    } else {
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
    }
    if (code === 46) {
        // .
        isFloat = true;
        code = body.charCodeAt(++position);
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
    }
    if (code === 69 || code === 101) {
        // E e
        isFloat = true;
        code = body.charCodeAt(++position);
        if (code === 43 || code === 45) // + -
        code = body.charCodeAt(++position);
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
    } // Numbers cannot be followed by . or NameStart
    if (code === 46 || isNameStart(code)) throw _syntaxErrorMjs.syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
    return new _astMjs.Token(isFloat ? _tokenKindMjs.TokenKind.FLOAT : _tokenKindMjs.TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
}
/**
 * Returns the new position in the source after reading digits.
 */ function readDigits(source, start, firstCode) {
    var body = source.body;
    var position = start;
    var code = firstCode;
    if (code >= 48 && code <= 57) {
        // 0 - 9
        do code = body.charCodeAt(++position);
        while (code >= 48 && code <= 57) // 0 - 9
        return position;
    }
    throw _syntaxErrorMjs.syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
}
/**
 * Reads a string token from the source file.
 *
 * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
 */ function readString(source, start, line, col, prev) {
    var body = source.body;
    var position = start + 1;
    var chunkStart = position;
    var code = 0;
    var value = '';
    while(position < body.length && !isNaN(code = body.charCodeAt(position)) && code !== 10 && code !== 13){
        // Closing Quote (")
        if (code === 34) {
            value += body.slice(chunkStart, position);
            return new _astMjs.Token(_tokenKindMjs.TokenKind.STRING, start, position + 1, line, col, prev, value);
        } // SourceCharacter
        if (code < 32 && code !== 9) throw _syntaxErrorMjs.syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        ++position;
        if (code === 92) {
            // \
            value += body.slice(chunkStart, position - 1);
            code = body.charCodeAt(position);
            switch(code){
                case 34:
                    value += '"';
                    break;
                case 47:
                    value += '/';
                    break;
                case 92:
                    value += '\\';
                    break;
                case 98:
                    value += '\b';
                    break;
                case 102:
                    value += '\f';
                    break;
                case 110:
                    value += '\n';
                    break;
                case 114:
                    value += '\r';
                    break;
                case 116:
                    value += '\t';
                    break;
                case 117:
                    // uXXXX
                    var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));
                    if (charCode < 0) {
                        var invalidSequence = body.slice(position + 1, position + 5);
                        throw _syntaxErrorMjs.syntaxError(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
                    }
                    value += String.fromCharCode(charCode);
                    position += 4;
                    break;
                default:
                    throw _syntaxErrorMjs.syntaxError(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
            }
            ++position;
            chunkStart = position;
        }
    }
    throw _syntaxErrorMjs.syntaxError(source, position, 'Unterminated string.');
}
/**
 * Reads a block string token from the source file.
 *
 * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
 */ function readBlockString(source, start, line, col, prev, lexer) {
    var body = source.body;
    var position = start + 3;
    var chunkStart = position;
    var code = 0;
    var rawValue = '';
    while(position < body.length && !isNaN(code = body.charCodeAt(position))){
        // Closing Triple-Quote (""")
        if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
            rawValue += body.slice(chunkStart, position);
            return new _astMjs.Token(_tokenKindMjs.TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, _blockStringMjs.dedentBlockStringValue(rawValue));
        } // SourceCharacter
        if (code < 32 && code !== 9 && code !== 10 && code !== 13) throw _syntaxErrorMjs.syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        if (code === 10) {
            // new line
            ++position;
            ++lexer.line;
            lexer.lineStart = position;
        } else if (code === 13) {
            // carriage return
            if (body.charCodeAt(position + 1) === 10) position += 2;
            else ++position;
            ++lexer.line;
            lexer.lineStart = position;
        } else if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
            rawValue += body.slice(chunkStart, position) + '"""';
            position += 4;
            chunkStart = position;
        } else ++position;
    }
    throw _syntaxErrorMjs.syntaxError(source, position, 'Unterminated string.');
}
/**
 * Converts four hexadecimal chars to the integer that the
 * string represents. For example, uniCharCode('0','0','0','f')
 * will return 15, and uniCharCode('0','0','f','f') returns 255.
 *
 * Returns a negative number on error, if a char was invalid.
 *
 * This is implemented by noting that char2hex() returns -1 on error,
 * which means the result of ORing the char2hex() will also be negative.
 */ function uniCharCode(a, b, c, d) {
    return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
}
/**
 * Converts a hex character to its integer value.
 * '0' becomes 0, '9' becomes 9
 * 'A' becomes 10, 'F' becomes 15
 * 'a' becomes 10, 'f' becomes 15
 *
 * Returns -1 on error.
 */ function char2hex(a) {
    return a >= 48 && a <= 57 ? a - 48 // 0-9
     : a >= 65 && a <= 70 ? a - 55 // A-F
     : a >= 97 && a <= 102 ? a - 87 // a-f
     : -1;
}
/**
 * Reads an alphanumeric + underscore name from the source.
 *
 * [_A-Za-z][_0-9A-Za-z]*
 */ function readName(source, start, line, col, prev) {
    var body = source.body;
    var bodyLength = body.length;
    var position = start + 1;
    var code = 0;
    while(position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) // a-z
    )++position;
    return new _astMjs.Token(_tokenKindMjs.TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
} // _ A-Z a-z
function isNameStart(code) {
    return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
}

},{"../error/syntaxError.mjs":"dJnXb","./ast.mjs":"avmJW","./tokenKind.mjs":"itJR8","./blockString.mjs":"2FyBa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2FyBa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */ parcelHelpers.export(exports, "dedentBlockStringValue", ()=>dedentBlockStringValue
);
/**
 * @internal
 */ parcelHelpers.export(exports, "getBlockStringIndentation", ()=>getBlockStringIndentation
);
/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */ parcelHelpers.export(exports, "printBlockString", ()=>printBlockString
);
function dedentBlockStringValue(rawString) {
    // Expand a block string's raw value into independent lines.
    var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.
    var commonIndent = getBlockStringIndentation(rawString);
    if (commonIndent !== 0) for(var i = 1; i < lines.length; i++)lines[i] = lines[i].slice(commonIndent);
     // Remove leading and trailing blank lines.
    var startLine = 0;
    while(startLine < lines.length && isBlank(lines[startLine]))++startLine;
    var endLine = lines.length;
    while(endLine > startLine && isBlank(lines[endLine - 1]))--endLine;
     // Return a string of the lines joined with U+000A.
    return lines.slice(startLine, endLine).join('\n');
}
function isBlank(str) {
    for(var i = 0; i < str.length; ++i){
        if (str[i] !== ' ' && str[i] !== '\t') return false;
    }
    return true;
}
function getBlockStringIndentation(value) {
    var _commonIndent;
    var isFirstLine = true;
    var isEmptyLine = true;
    var indent = 0;
    var commonIndent = null;
    for(var i = 0; i < value.length; ++i)switch(value.charCodeAt(i)){
        case 13:
            //  \r
            if (value.charCodeAt(i + 1) === 10) ++i; // skip \r\n as one symbol
        // falls through
        case 10:
            //  \n
            isFirstLine = false;
            isEmptyLine = true;
            indent = 0;
            break;
        case 9:
        case 32:
            //  <space>
            ++indent;
            break;
        default:
            if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) commonIndent = indent;
            isEmptyLine = false;
    }
    return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
}
function printBlockString(value) {
    var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var isSingleLine = value.indexOf('\n') === -1;
    var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
    var hasTrailingQuote = value[value.length - 1] === '"';
    var hasTrailingSlash = value[value.length - 1] === '\\';
    var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
    var result = ''; // Format a multi-line block quote to account for leading space.
    if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) result += '\n' + indentation;
    result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;
    if (printAsMultipleLines) result += '\n';
    return '"""' + result.replace(/"""/g, '\\"""') + '"""';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cJoEq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Implements the "Validation" section of the spec.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the document is valid.
 *
 * A list of specific validation rules may be provided. If not provided, the
 * default list of rules defined by the GraphQL specification will be used.
 *
 * Each validation rules is a function which returns a visitor
 * (see the language/visitor API). Visitor methods are expected to return
 * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
 *
 * Optionally a custom TypeInfo instance may be provided. If not provided, one
 * will be created from the provided schema.
 */ parcelHelpers.export(exports, "validate", ()=>validate
);
/**
 * @internal
 */ parcelHelpers.export(exports, "validateSDL", ()=>validateSDL
);
/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */ parcelHelpers.export(exports, "assertValidSDL", ()=>assertValidSDL
);
/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */ parcelHelpers.export(exports, "assertValidSDLExtension", ()=>assertValidSDLExtension
);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _visitorMjs = require("../language/visitor.mjs");
var _validateMjs = require("../type/validate.mjs");
var _typeInfoMjs = require("../utilities/TypeInfo.mjs");
var _specifiedRulesMjs = require("./specifiedRules.mjs");
var _validationContextMjs = require("./ValidationContext.mjs");
function validate(schema, documentAST) {
    var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRulesMjs.specifiedRules;
    var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _typeInfoMjs.TypeInfo(schema);
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        maxErrors: undefined
    };
    documentAST || _devAssertMjsDefault.default(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.
    _validateMjs.assertValidSchema(schema);
    var abortObj = Object.freeze({
    });
    var errors = [];
    var context = new _validationContextMjs.ValidationContext(schema, documentAST, typeInfo, function(error) {
        if (options.maxErrors != null && errors.length >= options.maxErrors) {
            errors.push(new _graphQLErrorMjs.GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));
            throw abortObj;
        }
        errors.push(error);
    }); // This uses a specialized visitor which runs multiple visitors in parallel,
    // while maintaining the visitor skip and break API.
    var visitor = _visitorMjs.visitInParallel(rules.map(function(rule) {
        return rule(context);
    })); // Visit the whole document with each instance of all provided rules.
    try {
        _visitorMjs.visit(documentAST, _typeInfoMjs.visitWithTypeInfo(typeInfo, visitor));
    } catch (e) {
        if (e !== abortObj) throw e;
    }
    return errors;
}
function validateSDL(documentAST, schemaToExtend) {
    var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRulesMjs.specifiedSDLRules;
    var errors = [];
    var context = new _validationContextMjs.SDLValidationContext(documentAST, schemaToExtend, function(error) {
        errors.push(error);
    });
    var visitors = rules.map(function(rule) {
        return rule(context);
    });
    _visitorMjs.visit(documentAST, _visitorMjs.visitInParallel(visitors));
    return errors;
}
function assertValidSDL(documentAST) {
    var errors = validateSDL(documentAST);
    if (errors.length !== 0) throw new Error(errors.map(function(error) {
        return error.message;
    }).join('\n\n'));
}
function assertValidSDLExtension(documentAST, schema) {
    var errors = validateSDL(documentAST, schema);
    if (errors.length !== 0) throw new Error(errors.map(function(error) {
        return error.message;
    }).join('\n\n'));
}

},{"../jsutils/devAssert.mjs":"iZbmm","../error/GraphQLError.mjs":"a8Vyv","../language/visitor.mjs":"bb6mn","../type/validate.mjs":"ak8ik","../utilities/TypeInfo.mjs":"lH2p6","./specifiedRules.mjs":"aOTpD","./ValidationContext.mjs":"1vmBo","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bb6mn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "QueryDocumentKeys", ()=>QueryDocumentKeys
);
parcelHelpers.export(exports, "BREAK", ()=>BREAK
);
/**
 * visit() will walk through an AST using a depth-first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 *     const editedAST = visit(ast, {
 *       enter(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: skip visiting this node
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       },
 *       leave(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: no action
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       }
 *     });
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to four permutations of the
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node of a specific kind.
 *
 *     visit(ast, {
 *       Kind(node) {
 *         // enter the "Kind" node
 *       }
 *     })
 *
 * 2) Named visitors that trigger upon entering and leaving a node of
 *    a specific kind.
 *
 *     visit(ast, {
 *       Kind: {
 *         enter(node) {
 *           // enter the "Kind" node
 *         }
 *         leave(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 *     visit(ast, {
 *       enter(node) {
 *         // enter any node
 *       },
 *       leave(node) {
 *         // leave any node
 *       }
 *     })
 *
 * 4) Parallel visitors for entering and leaving nodes of a specific kind.
 *
 *     visit(ast, {
 *       enter: {
 *         Kind(node) {
 *           // enter the "Kind" node
 *         }
 *       },
 *       leave: {
 *         Kind(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 */ parcelHelpers.export(exports, "visit", ()=>visit
);
/**
 * Creates a new visitor instance which delegates to many visitors to run in
 * parallel. Each visitor will be visited for each node before moving on.
 *
 * If a prior visitor edits a node, no following visitors will see that node.
 */ parcelHelpers.export(exports, "visitInParallel", ()=>visitInParallel
);
/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 */ parcelHelpers.export(exports, "getVisitFn", ()=>getVisitFn
);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _astMjs = require("./ast.mjs");
var QueryDocumentKeys = {
    Name: [],
    Document: [
        'definitions'
    ],
    OperationDefinition: [
        'name',
        'variableDefinitions',
        'directives',
        'selectionSet'
    ],
    VariableDefinition: [
        'variable',
        'type',
        'defaultValue',
        'directives'
    ],
    Variable: [
        'name'
    ],
    SelectionSet: [
        'selections'
    ],
    Field: [
        'alias',
        'name',
        'arguments',
        'directives',
        'selectionSet'
    ],
    Argument: [
        'name',
        'value'
    ],
    FragmentSpread: [
        'name',
        'directives'
    ],
    InlineFragment: [
        'typeCondition',
        'directives',
        'selectionSet'
    ],
    FragmentDefinition: [
        'name',
        // or removed in the future.
        'variableDefinitions',
        'typeCondition',
        'directives',
        'selectionSet'
    ],
    IntValue: [],
    FloatValue: [],
    StringValue: [],
    BooleanValue: [],
    NullValue: [],
    EnumValue: [],
    ListValue: [
        'values'
    ],
    ObjectValue: [
        'fields'
    ],
    ObjectField: [
        'name',
        'value'
    ],
    Directive: [
        'name',
        'arguments'
    ],
    NamedType: [
        'name'
    ],
    ListType: [
        'type'
    ],
    NonNullType: [
        'type'
    ],
    SchemaDefinition: [
        'description',
        'directives',
        'operationTypes'
    ],
    OperationTypeDefinition: [
        'type'
    ],
    ScalarTypeDefinition: [
        'description',
        'name',
        'directives'
    ],
    ObjectTypeDefinition: [
        'description',
        'name',
        'interfaces',
        'directives',
        'fields'
    ],
    FieldDefinition: [
        'description',
        'name',
        'arguments',
        'type',
        'directives'
    ],
    InputValueDefinition: [
        'description',
        'name',
        'type',
        'defaultValue',
        'directives'
    ],
    InterfaceTypeDefinition: [
        'description',
        'name',
        'interfaces',
        'directives',
        'fields'
    ],
    UnionTypeDefinition: [
        'description',
        'name',
        'directives',
        'types'
    ],
    EnumTypeDefinition: [
        'description',
        'name',
        'directives',
        'values'
    ],
    EnumValueDefinition: [
        'description',
        'name',
        'directives'
    ],
    InputObjectTypeDefinition: [
        'description',
        'name',
        'directives',
        'fields'
    ],
    DirectiveDefinition: [
        'description',
        'name',
        'arguments',
        'locations'
    ],
    SchemaExtension: [
        'directives',
        'operationTypes'
    ],
    ScalarTypeExtension: [
        'name',
        'directives'
    ],
    ObjectTypeExtension: [
        'name',
        'interfaces',
        'directives',
        'fields'
    ],
    InterfaceTypeExtension: [
        'name',
        'interfaces',
        'directives',
        'fields'
    ],
    UnionTypeExtension: [
        'name',
        'directives',
        'types'
    ],
    EnumTypeExtension: [
        'name',
        'directives',
        'values'
    ],
    InputObjectTypeExtension: [
        'name',
        'directives',
        'fields'
    ]
};
var BREAK = Object.freeze({
});
function visit(root, visitor) {
    var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;
    /* eslint-disable no-undef-init */ var stack = undefined;
    var inArray = Array.isArray(root);
    var keys = [
        root
    ];
    var index = -1;
    var edits = [];
    var node = undefined;
    var key = undefined;
    var parent = undefined;
    var path = [];
    var ancestors = [];
    var newRoot = root;
    /* eslint-enable no-undef-init */ do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;
        if (isLeaving) {
            key = ancestors.length === 0 ? undefined : path[path.length - 1];
            node = parent;
            parent = ancestors.pop();
            if (isEdited) {
                if (inArray) node = node.slice();
                else {
                    var clone = {
                    };
                    for(var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++){
                        var k = _Object$keys2[_i2];
                        clone[k] = node[k];
                    }
                    node = clone;
                }
                var editOffset = 0;
                for(var ii = 0; ii < edits.length; ii++){
                    var editKey = edits[ii][0];
                    var editValue = edits[ii][1];
                    if (inArray) editKey -= editOffset;
                    if (inArray && editValue === null) {
                        node.splice(editKey, 1);
                        editOffset++;
                    } else node[editKey] = editValue;
                }
            }
            index = stack.index;
            keys = stack.keys;
            edits = stack.edits;
            inArray = stack.inArray;
            stack = stack.prev;
        } else {
            key = parent ? inArray ? index : keys[index] : undefined;
            node = parent ? parent[key] : newRoot;
            if (node === null || node === undefined) continue;
            if (parent) path.push(key);
        }
        var result = void 0;
        if (!Array.isArray(node)) {
            if (!_astMjs.isNode(node)) throw new Error("Invalid AST Node: ".concat(_inspectMjsDefault.default(node), "."));
            var visitFn = getVisitFn(visitor, node.kind, isLeaving);
            if (visitFn) {
                result = visitFn.call(visitor, node, key, parent, path, ancestors);
                if (result === BREAK) break;
                if (result === false) {
                    if (!isLeaving) {
                        path.pop();
                        continue;
                    }
                } else if (result !== undefined) {
                    edits.push([
                        key,
                        result
                    ]);
                    if (!isLeaving) {
                        if (_astMjs.isNode(result)) node = result;
                        else {
                            path.pop();
                            continue;
                        }
                    }
                }
            }
        }
        if (result === undefined && isEdited) edits.push([
            key,
            node
        ]);
        if (isLeaving) path.pop();
        else {
            var _visitorKeys$node$kin;
            stack = {
                inArray: inArray,
                index: index,
                keys: keys,
                edits: edits,
                prev: stack
            };
            inArray = Array.isArray(node);
            keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
            index = -1;
            edits = [];
            if (parent) ancestors.push(parent);
            parent = node;
        }
    }while (stack !== undefined)
    if (edits.length !== 0) newRoot = edits[edits.length - 1][1];
    return newRoot;
}
function visitInParallel(visitors) {
    var skipping = new Array(visitors.length);
    return {
        enter: function enter(node) {
            for(var i = 0; i < visitors.length; i++)if (skipping[i] == null) {
                var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */ false);
                if (fn) {
                    var result = fn.apply(visitors[i], arguments);
                    if (result === false) skipping[i] = node;
                    else if (result === BREAK) skipping[i] = BREAK;
                    else if (result !== undefined) return result;
                }
            }
        },
        leave: function leave(node) {
            for(var i = 0; i < visitors.length; i++){
                if (skipping[i] == null) {
                    var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */ true);
                    if (fn) {
                        var result = fn.apply(visitors[i], arguments);
                        if (result === BREAK) skipping[i] = BREAK;
                        else if (result !== undefined && result !== false) return result;
                    }
                } else if (skipping[i] === node) skipping[i] = null;
            }
        }
    };
}
function getVisitFn(visitor, kind, isLeaving) {
    var kindVisitor = visitor[kind];
    if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === 'function') // { Kind() {} }
        return kindVisitor;
        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
        if (typeof kindSpecificVisitor === 'function') // { Kind: { enter() {}, leave() {} } }
        return kindSpecificVisitor;
    } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
        if (specificVisitor) {
            if (typeof specificVisitor === 'function') // { enter() {}, leave() {} }
            return specificVisitor;
            var specificKindVisitor = specificVisitor[kind];
            if (typeof specificKindVisitor === 'function') // { enter: { Kind() {} }, leave: { Kind() {} } }
            return specificKindVisitor;
        }
    }
}

},{"../jsutils/inspect.mjs":"doI9y","./ast.mjs":"avmJW","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ak8ik":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Implements the "Type Validation" sub-sections of the specification's
 * "Type System" section.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the Schema is valid.
 */ parcelHelpers.export(exports, "validateSchema", ()=>validateSchema
);
/**
 * Utility function which asserts a schema is valid by throwing an error if
 * it is invalid.
 */ parcelHelpers.export(exports, "assertValidSchema", ()=>assertValidSchema
);
var _findMjs = require("../polyfills/find.mjs");
var _findMjsDefault = parcelHelpers.interopDefault(_findMjs);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _locatedErrorMjs = require("../error/locatedError.mjs");
var _assertValidNameMjs = require("../utilities/assertValidName.mjs");
var _typeComparatorsMjs = require("../utilities/typeComparators.mjs");
var _schemaMjs = require("./schema.mjs");
var _introspectionMjs = require("./introspection.mjs");
var _directivesMjs = require("./directives.mjs");
var _definitionMjs = require("./definition.mjs");
function validateSchema(schema) {
    // First check to ensure the provided value is in fact a GraphQLSchema.
    _schemaMjs.assertSchema(schema); // If this Schema has already been validated, return the previous results.
    if (schema.__validationErrors) return schema.__validationErrors;
     // Validate the schema, producing a list of errors.
    var context = new SchemaValidationContext(schema);
    validateRootTypes(context);
    validateDirectives(context);
    validateTypes(context); // Persist the results of validation before returning to ensure validation
    // does not run multiple times for this schema.
    var errors = context.getErrors();
    schema.__validationErrors = errors;
    return errors;
}
function assertValidSchema(schema) {
    var errors = validateSchema(schema);
    if (errors.length !== 0) throw new Error(errors.map(function(error) {
        return error.message;
    }).join('\n\n'));
}
var SchemaValidationContext = /*#__PURE__*/ function() {
    function SchemaValidationContext1(schema) {
        this._errors = [];
        this.schema = schema;
    }
    var _proto = SchemaValidationContext1.prototype;
    _proto.reportError = function reportError(message, nodes) {
        var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
        this.addError(new _graphQLErrorMjs.GraphQLError(message, _nodes));
    };
    _proto.addError = function addError(error) {
        this._errors.push(error);
    };
    _proto.getErrors = function getErrors() {
        return this._errors;
    };
    return SchemaValidationContext1;
}();
function validateRootTypes(context) {
    var schema = context.schema;
    var queryType = schema.getQueryType();
    if (!queryType) context.reportError('Query root type must be provided.', schema.astNode);
    else if (!_definitionMjs.isObjectType(queryType)) {
        var _getOperationTypeNode;
        context.reportError("Query root type must be Object type, it cannot be ".concat(_inspectMjsDefault.default(queryType), "."), (_getOperationTypeNode = getOperationTypeNode(schema, 'query')) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
    }
    var mutationType = schema.getMutationType();
    if (mutationType && !_definitionMjs.isObjectType(mutationType)) {
        var _getOperationTypeNode2;
        context.reportError('Mutation root type must be Object type if provided, it cannot be ' + "".concat(_inspectMjsDefault.default(mutationType), "."), (_getOperationTypeNode2 = getOperationTypeNode(schema, 'mutation')) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
    }
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType && !_definitionMjs.isObjectType(subscriptionType)) {
        var _getOperationTypeNode3;
        context.reportError('Subscription root type must be Object type if provided, it cannot be ' + "".concat(_inspectMjsDefault.default(subscriptionType), "."), (_getOperationTypeNode3 = getOperationTypeNode(schema, 'subscription')) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
    }
}
function getOperationTypeNode(schema, operation) {
    var operationNodes = getAllSubNodes(schema, function(node) {
        return node.operationTypes;
    });
    for(var _i2 = 0; _i2 < operationNodes.length; _i2++){
        var node = operationNodes[_i2];
        if (node.operation === operation) return node.type;
    }
    return undefined;
}
function validateDirectives(context) {
    for(var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++){
        var directive = _context$schema$getDi2[_i4];
        // Ensure all directives are in fact GraphQL directives.
        if (!_directivesMjs.isDirective(directive)) {
            context.reportError("Expected directive but got: ".concat(_inspectMjsDefault.default(directive), "."), directive === null || directive === void 0 ? void 0 : directive.astNode);
            continue;
        } // Ensure they are named correctly.
        validateName(context, directive); // TODO: Ensure proper locations.
        // Ensure the arguments are valid.
        for(var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++){
            var arg = _directive$args2[_i6];
            // Ensure they are named correctly.
            validateName(context, arg); // Ensure the type is an input type.
            if (!_definitionMjs.isInputType(arg.type)) context.reportError("The type of @".concat(directive.name, "(").concat(arg.name, ":) must be Input Type ") + "but got: ".concat(_inspectMjsDefault.default(arg.type), "."), arg.astNode);
            if (_definitionMjs.isRequiredArgument(arg) && arg.deprecationReason != null) {
                var _arg$astNode;
                context.reportError("Required argument @".concat(directive.name, "(").concat(arg.name, ":) cannot be deprecated."), [
                    getDeprecatedDirectiveNode(arg.astNode),
                    (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type
                ]);
            }
        }
    }
}
function validateName(context, node) {
    // Ensure names are valid, however introspection types opt out.
    var error = _assertValidNameMjs.isValidNameError(node.name);
    if (error) context.addError(_locatedErrorMjs.locatedError(error, node.astNode));
}
function validateTypes(context) {
    var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
    var typeMap = context.schema.getTypeMap();
    for(var _i8 = 0, _objectValues2 = _objectValuesMjsDefault.default(typeMap); _i8 < _objectValues2.length; _i8++){
        var type = _objectValues2[_i8];
        // Ensure all provided types are in fact GraphQL type.
        if (!_definitionMjs.isNamedType(type)) {
            context.reportError("Expected GraphQL named type but got: ".concat(_inspectMjsDefault.default(type), "."), type.astNode);
            continue;
        } // Ensure it is named correctly (excluding introspection types).
        if (!_introspectionMjs.isIntrospectionType(type)) validateName(context, type);
        if (_definitionMjs.isObjectType(type)) {
            // Ensure fields are valid
            validateFields(context, type); // Ensure objects implement the interfaces they claim to.
            validateInterfaces(context, type);
        } else if (_definitionMjs.isInterfaceType(type)) {
            // Ensure fields are valid.
            validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.
            validateInterfaces(context, type);
        } else if (_definitionMjs.isUnionType(type)) // Ensure Unions include valid member types.
        validateUnionMembers(context, type);
        else if (_definitionMjs.isEnumType(type)) // Ensure Enums have valid values.
        validateEnumValues(context, type);
        else if (_definitionMjs.isInputObjectType(type)) {
            // Ensure Input Object fields are valid.
            validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references
            validateInputObjectCircularRefs(type);
        }
    }
}
function validateFields(context, type) {
    var fields = _objectValuesMjsDefault.default(type.getFields()); // Objects and Interfaces both must define one or more fields.
    if (fields.length === 0) context.reportError("Type ".concat(type.name, " must define one or more fields."), getAllNodes(type));
    for(var _i10 = 0; _i10 < fields.length; _i10++){
        var field = fields[_i10];
        // Ensure they are named correctly.
        validateName(context, field); // Ensure the type is an output type
        if (!_definitionMjs.isOutputType(field.type)) {
            var _field$astNode;
            context.reportError("The type of ".concat(type.name, ".").concat(field.name, " must be Output Type ") + "but got: ".concat(_inspectMjsDefault.default(field.type), "."), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
        } // Ensure the arguments are valid
        for(var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++){
            var arg = _field$args2[_i12];
            var argName = arg.name; // Ensure they are named correctly.
            validateName(context, arg); // Ensure the type is an input type
            if (!_definitionMjs.isInputType(arg.type)) {
                var _arg$astNode2;
                context.reportError("The type of ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) must be Input ") + "Type but got: ".concat(_inspectMjsDefault.default(arg.type), "."), (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
            }
            if (_definitionMjs.isRequiredArgument(arg) && arg.deprecationReason != null) {
                var _arg$astNode3;
                context.reportError("Required argument ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) cannot be deprecated."), [
                    getDeprecatedDirectiveNode(arg.astNode),
                    (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type
                ]);
            }
        }
    }
}
function validateInterfaces(context, type) {
    var ifaceTypeNames = Object.create(null);
    for(var _i14 = 0, _type$getInterfaces2 = type.getInterfaces(); _i14 < _type$getInterfaces2.length; _i14++){
        var iface = _type$getInterfaces2[_i14];
        if (!_definitionMjs.isInterfaceType(iface)) {
            context.reportError("Type ".concat(_inspectMjsDefault.default(type), " must only implement Interface types, ") + "it cannot implement ".concat(_inspectMjsDefault.default(iface), "."), getAllImplementsInterfaceNodes(type, iface));
            continue;
        }
        if (type === iface) {
            context.reportError("Type ".concat(type.name, " cannot implement itself because it would create a circular reference."), getAllImplementsInterfaceNodes(type, iface));
            continue;
        }
        if (ifaceTypeNames[iface.name]) {
            context.reportError("Type ".concat(type.name, " can only implement ").concat(iface.name, " once."), getAllImplementsInterfaceNodes(type, iface));
            continue;
        }
        ifaceTypeNames[iface.name] = true;
        validateTypeImplementsAncestors(context, type, iface);
        validateTypeImplementsInterface(context, type, iface);
    }
}
function validateTypeImplementsInterface(context, type, iface) {
    var typeFieldMap = type.getFields(); // Assert each interface field is implemented.
    for(var _i16 = 0, _objectValues4 = _objectValuesMjsDefault.default(iface.getFields()); _i16 < _objectValues4.length; _i16++){
        var ifaceField = _objectValues4[_i16];
        var fieldName = ifaceField.name;
        var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.
        if (!typeField) {
            context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expected but ").concat(type.name, " does not provide it."), [
                ifaceField.astNode
            ].concat(getAllNodes(type)));
            continue;
        } // Assert interface field type is satisfied by type field type, by being
        // a valid subtype. (covariant)
        if (!_typeComparatorsMjs.isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {
            var _ifaceField$astNode, _typeField$astNode;
            context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expects type ") + "".concat(_inspectMjsDefault.default(ifaceField.type), " but ").concat(type.name, ".").concat(fieldName, " ") + "is type ".concat(_inspectMjsDefault.default(typeField.type), "."), [
                (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type,
                (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type
            ]);
        } // Assert each interface field arg is implemented.
        var _loop = function _loop1(_i18, _ifaceField$args2) {
            var ifaceArg = _ifaceField$args2[_i18];
            var argName = ifaceArg.name;
            var typeArg = _findMjsDefault.default(typeField.args, function(arg) {
                return arg.name === argName;
            }); // Assert interface field arg exists on object field.
            if (!typeArg) {
                context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) expected but ").concat(type.name, ".").concat(fieldName, " does not provide it."), [
                    ifaceArg.astNode,
                    typeField.astNode
                ]);
                return "continue";
            } // Assert interface field arg type matches object field arg type.
            // (invariant)
            // TODO: change to contravariant?
            if (!_typeComparatorsMjs.isEqualType(ifaceArg.type, typeArg.type)) {
                var _ifaceArg$astNode, _typeArg$astNode;
                context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) ") + "expects type ".concat(_inspectMjsDefault.default(ifaceArg.type), " but ") + "".concat(type.name, ".").concat(fieldName, "(").concat(argName, ":) is type ") + "".concat(_inspectMjsDefault.default(typeArg.type), "."), [
                    (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type,
                    (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type
                ]);
            } // TODO: validate default values?
        };
        for(var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++){
            var _ret = _loop(_i18, _ifaceField$args2);
            if (_ret === "continue") continue;
        } // Assert additional arguments must not be required.
        var _loop2 = function _loop21(_i20, _typeField$args2) {
            var typeArg = _typeField$args2[_i20];
            var argName = typeArg.name;
            var ifaceArg = _findMjsDefault.default(ifaceField.args, function(arg) {
                return arg.name === argName;
            });
            if (!ifaceArg && _definitionMjs.isRequiredArgument(typeArg)) context.reportError("Object field ".concat(type.name, ".").concat(fieldName, " includes required argument ").concat(argName, " that is missing from the Interface field ").concat(iface.name, ".").concat(fieldName, "."), [
                typeArg.astNode,
                ifaceField.astNode
            ]);
        };
        for(var _i20 = 0, _typeField$args2 = typeField.args; _i20 < _typeField$args2.length; _i20++)_loop2(_i20, _typeField$args2);
    }
}
function validateTypeImplementsAncestors(context, type, iface) {
    var ifaceInterfaces = type.getInterfaces();
    for(var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces(); _i22 < _iface$getInterfaces2.length; _i22++){
        var transitive = _iface$getInterfaces2[_i22];
        if (ifaceInterfaces.indexOf(transitive) === -1) context.reportError(transitive === type ? "Type ".concat(type.name, " cannot implement ").concat(iface.name, " because it would create a circular reference.") : "Type ".concat(type.name, " must implement ").concat(transitive.name, " because it is implemented by ").concat(iface.name, "."), [].concat(getAllImplementsInterfaceNodes(iface, transitive), getAllImplementsInterfaceNodes(type, iface)));
    }
}
function validateUnionMembers(context, union) {
    var memberTypes = union.getTypes();
    if (memberTypes.length === 0) context.reportError("Union type ".concat(union.name, " must define one or more member types."), getAllNodes(union));
    var includedTypeNames = Object.create(null);
    for(var _i24 = 0; _i24 < memberTypes.length; _i24++){
        var memberType = memberTypes[_i24];
        if (includedTypeNames[memberType.name]) {
            context.reportError("Union type ".concat(union.name, " can only include type ").concat(memberType.name, " once."), getUnionMemberTypeNodes(union, memberType.name));
            continue;
        }
        includedTypeNames[memberType.name] = true;
        if (!_definitionMjs.isObjectType(memberType)) context.reportError("Union type ".concat(union.name, " can only include Object types, ") + "it cannot include ".concat(_inspectMjsDefault.default(memberType), "."), getUnionMemberTypeNodes(union, String(memberType)));
    }
}
function validateEnumValues(context, enumType) {
    var enumValues = enumType.getValues();
    if (enumValues.length === 0) context.reportError("Enum type ".concat(enumType.name, " must define one or more values."), getAllNodes(enumType));
    for(var _i26 = 0; _i26 < enumValues.length; _i26++){
        var enumValue = enumValues[_i26];
        var valueName = enumValue.name; // Ensure valid name.
        validateName(context, enumValue);
        if (valueName === 'true' || valueName === 'false' || valueName === 'null') context.reportError("Enum type ".concat(enumType.name, " cannot include value: ").concat(valueName, "."), enumValue.astNode);
    }
}
function validateInputFields(context, inputObj) {
    var fields = _objectValuesMjsDefault.default(inputObj.getFields());
    if (fields.length === 0) context.reportError("Input Object type ".concat(inputObj.name, " must define one or more fields."), getAllNodes(inputObj));
     // Ensure the arguments are valid
    for(var _i28 = 0; _i28 < fields.length; _i28++){
        var field = fields[_i28];
        // Ensure they are named correctly.
        validateName(context, field); // Ensure the type is an input type
        if (!_definitionMjs.isInputType(field.type)) {
            var _field$astNode2;
            context.reportError("The type of ".concat(inputObj.name, ".").concat(field.name, " must be Input Type ") + "but got: ".concat(_inspectMjsDefault.default(field.type), "."), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
        }
        if (_definitionMjs.isRequiredInputField(field) && field.deprecationReason != null) {
            var _field$astNode3;
            context.reportError("Required input field ".concat(inputObj.name, ".").concat(field.name, " cannot be deprecated."), [
                getDeprecatedDirectiveNode(field.astNode),
                (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type
            ]);
        }
    }
}
function createInputObjectCircularRefsValidator(context) {
    // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
    // Tracks already visited types to maintain O(N) and to ensure that cycles
    // are not redundantly reported.
    var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors
    var fieldPath = []; // Position in the type path
    var fieldPathIndexByTypeName = Object.create(null);
    // It does not terminate when a cycle was found but continues to explore
    // the graph to find all possible cycles.
    function detectCycleRecursive(inputObj) {
        if (visitedTypes[inputObj.name]) {
            return;
        }
        visitedTypes[inputObj.name] = true;
        fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
        var fields = _objectValuesMjsDefault.default(inputObj.getFields());
        for(var _i30 = 0; _i30 < fields.length; _i30++){
            var field = fields[_i30];
            if (_definitionMjs.isNonNullType(field.type) && _definitionMjs.isInputObjectType(field.type.ofType)) {
                var fieldType = field.type.ofType;
                var cycleIndex = fieldPathIndexByTypeName[fieldType.name];
                fieldPath.push(field);
                if (cycleIndex === undefined) {
                    detectCycleRecursive(fieldType);
                } else {
                    var cyclePath = fieldPath.slice(cycleIndex);
                    var pathStr = cyclePath.map(function(fieldObj) {
                        return fieldObj.name;
                    }).join('.');
                    context.reportError("Cannot reference Input Object \"".concat(fieldType.name, "\" within itself through a series of non-null fields: \"").concat(pathStr, "\"."), cyclePath.map(function(fieldObj) {
                        return fieldObj.astNode;
                    }));
                }
                fieldPath.pop();
            }
        }
        fieldPathIndexByTypeName[inputObj.name] = undefined;
    }
    return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
}
function getAllNodes(object) {
    var astNode = object.astNode, extensionASTNodes = object.extensionASTNodes;
    return astNode ? extensionASTNodes ? [
        astNode
    ].concat(extensionASTNodes) : [
        astNode
    ] : extensionASTNodes !== null && extensionASTNodes !== void 0 ? extensionASTNodes : [];
}
function getAllSubNodes(object, getter) {
    var subNodes = [];
    for(var _i32 = 0, _getAllNodes2 = getAllNodes(object); _i32 < _getAllNodes2.length; _i32++){
        var _getter;
        var node = _getAllNodes2[_i32];
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        subNodes = subNodes.concat((_getter = getter(node)) !== null && _getter !== void 0 ? _getter : []);
    }
    return subNodes;
}
function getAllImplementsInterfaceNodes(type, iface) {
    return getAllSubNodes(type, function(typeNode) {
        return typeNode.interfaces;
    }).filter(function(ifaceNode) {
        return ifaceNode.name.value === iface.name;
    });
}
function getUnionMemberTypeNodes(union, typeName) {
    return getAllSubNodes(union, function(unionNode) {
        return unionNode.types;
    }).filter(function(typeNode) {
        return typeNode.name.value === typeName;
    });
}
function getDeprecatedDirectiveNode(definitionNode) {
    var _definitionNode$direc;
    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
    return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(function(node) {
        return node.name.value === _directivesMjs.GraphQLDeprecatedDirective.name;
    });
}

},{"../polyfills/find.mjs":"SBobE","../polyfills/objectValues.mjs":"1MvGb","../jsutils/inspect.mjs":"doI9y","../error/GraphQLError.mjs":"a8Vyv","../error/locatedError.mjs":"hNmuj","../utilities/assertValidName.mjs":"4I7iN","../utilities/typeComparators.mjs":"abM5v","./schema.mjs":"jMEya","./introspection.mjs":"ezRs8","./directives.mjs":"crfoz","./definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"SBobE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-redeclare */ // $FlowFixMe[name-already-bound]
var find = Array.prototype.find ? function(list, predicate) {
    return Array.prototype.find.call(list, predicate);
} : function(list, predicate) {
    for(var _i2 = 0; _i2 < list.length; _i2++){
        var value = list[_i2];
        if (predicate(value)) return value;
    }
};
exports.default = find;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1MvGb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-redeclare */ // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var objectValues = Object.values || function(obj) {
    return Object.keys(obj).map(function(key) {
        return obj[key];
    });
};
exports.default = objectValues;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hNmuj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given an arbitrary value, presumably thrown while attempting to execute a
 * GraphQL operation, produce a new GraphQLError aware of the location in the
 * document responsible for the original Error.
 */ parcelHelpers.export(exports, "locatedError", ()=>locatedError
);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _graphQLErrorMjs = require("./GraphQLError.mjs");
function locatedError(rawOriginalError, nodes, path) {
    var _nodes;
    // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.
    var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + _inspectMjsDefault.default(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.
    if (Array.isArray(originalError.path)) return originalError;
    return new _graphQLErrorMjs.GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);
}

},{"../jsutils/inspect.mjs":"doI9y","./GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4I7iN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Upholds the spec rules about naming.
 */ parcelHelpers.export(exports, "assertValidName", ()=>assertValidName
);
/**
 * Returns an Error if a name is invalid.
 */ parcelHelpers.export(exports, "isValidNameError", ()=>isValidNameError
);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
function assertValidName(name) {
    var error = isValidNameError(name);
    if (error) throw error;
    return name;
}
function isValidNameError(name) {
    typeof name === 'string' || _devAssertMjsDefault.default(0, 'Expected name to be a string.');
    if (name.length > 1 && name[0] === '_' && name[1] === '_') return new _graphQLErrorMjs.GraphQLError("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
    if (!NAME_RX.test(name)) return new _graphQLErrorMjs.GraphQLError("Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"".concat(name, "\" does not."));
}

},{"../jsutils/devAssert.mjs":"iZbmm","../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"abM5v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Provided two types, return true if the types are equal (invariant).
 */ parcelHelpers.export(exports, "isEqualType", ()=>isEqualType
);
/**
 * Provided a type and a super type, return true if the first type is either
 * equal or a subset of the second super type (covariant).
 */ parcelHelpers.export(exports, "isTypeSubTypeOf", ()=>isTypeSubTypeOf
);
/**
 * Provided two composite types, determine if they "overlap". Two composite
 * types overlap when the Sets of possible concrete types for each intersect.
 *
 * This is often used to determine if a fragment of a given type could possibly
 * be visited in a context of another type.
 *
 * This function is commutative.
 */ parcelHelpers.export(exports, "doTypesOverlap", ()=>doTypesOverlap
);
var _definitionMjs = require("../type/definition.mjs");
function isEqualType(typeA, typeB) {
    // Equivalent types are equal.
    if (typeA === typeB) return true;
     // If either type is non-null, the other must also be non-null.
    if (_definitionMjs.isNonNullType(typeA) && _definitionMjs.isNonNullType(typeB)) return isEqualType(typeA.ofType, typeB.ofType);
     // If either type is a list, the other must also be a list.
    if (_definitionMjs.isListType(typeA) && _definitionMjs.isListType(typeB)) return isEqualType(typeA.ofType, typeB.ofType);
     // Otherwise the types are not equal.
    return false;
}
function isTypeSubTypeOf(schema, maybeSubType, superType) {
    // Equivalent type is a valid subtype
    if (maybeSubType === superType) return true;
     // If superType is non-null, maybeSubType must also be non-null.
    if (_definitionMjs.isNonNullType(superType)) {
        if (_definitionMjs.isNonNullType(maybeSubType)) return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        return false;
    }
    if (_definitionMjs.isNonNullType(maybeSubType)) // If superType is nullable, maybeSubType may be non-null or nullable.
    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
     // If superType type is a list, maybeSubType type must also be a list.
    if (_definitionMjs.isListType(superType)) {
        if (_definitionMjs.isListType(maybeSubType)) return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        return false;
    }
    if (_definitionMjs.isListType(maybeSubType)) // If superType is not a list, maybeSubType must also be not a list.
    return false;
     // If superType type is an abstract type, check if it is super type of maybeSubType.
    // Otherwise, the child type is not a valid subtype of the parent type.
    return _definitionMjs.isAbstractType(superType) && (_definitionMjs.isInterfaceType(maybeSubType) || _definitionMjs.isObjectType(maybeSubType)) && schema.isSubType(superType, maybeSubType);
}
function doTypesOverlap(schema, typeA, typeB) {
    // Equivalent types overlap
    if (typeA === typeB) return true;
    if (_definitionMjs.isAbstractType(typeA)) {
        if (_definitionMjs.isAbstractType(typeB)) // If both types are abstract, then determine if there is any intersection
        // between possible concrete types of each.
        return schema.getPossibleTypes(typeA).some(function(type) {
            return schema.isSubType(typeB, type);
        });
         // Determine if the latter type is a possible concrete type of the former.
        return schema.isSubType(typeA, typeB);
    }
    if (_definitionMjs.isAbstractType(typeB)) // Determine if the former type is a possible concrete type of the latter.
    return schema.isSubType(typeB, typeA);
     // Otherwise the types do not overlap.
    return false;
}

},{"../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6PVmH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isType", ()=>isType
);
parcelHelpers.export(exports, "assertType", ()=>assertType
);
/**
 * There are predicates for each kind of GraphQL type.
 */ // eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isScalarType", ()=>isScalarType
);
parcelHelpers.export(exports, "assertScalarType", ()=>assertScalarType
);
// eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isObjectType", ()=>isObjectType
);
parcelHelpers.export(exports, "assertObjectType", ()=>assertObjectType
);
// eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isInterfaceType", ()=>isInterfaceType
);
parcelHelpers.export(exports, "assertInterfaceType", ()=>assertInterfaceType
);
// eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isUnionType", ()=>isUnionType
);
parcelHelpers.export(exports, "assertUnionType", ()=>assertUnionType
);
// eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isEnumType", ()=>isEnumType
);
parcelHelpers.export(exports, "assertEnumType", ()=>assertEnumType
);
// eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isInputObjectType", ()=>isInputObjectType
);
parcelHelpers.export(exports, "assertInputObjectType", ()=>assertInputObjectType
);
// eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isListType", ()=>isListType
);
parcelHelpers.export(exports, "assertListType", ()=>assertListType
);
// eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isNonNullType", ()=>isNonNullType
);
parcelHelpers.export(exports, "assertNonNullType", ()=>assertNonNullType
);
/**
 * These types may be used as input types for arguments and directives.
 */ parcelHelpers.export(exports, "isInputType", ()=>isInputType
);
parcelHelpers.export(exports, "assertInputType", ()=>assertInputType
);
/**
 * These types may be used as output types as the result of fields.
 */ parcelHelpers.export(exports, "isOutputType", ()=>isOutputType
);
parcelHelpers.export(exports, "assertOutputType", ()=>assertOutputType
);
/**
 * These types may describe types which may be leaf values.
 */ parcelHelpers.export(exports, "isLeafType", ()=>isLeafType
);
parcelHelpers.export(exports, "assertLeafType", ()=>assertLeafType
);
/**
 * These types may describe the parent context of a selection set.
 */ parcelHelpers.export(exports, "isCompositeType", ()=>isCompositeType
);
parcelHelpers.export(exports, "assertCompositeType", ()=>assertCompositeType
);
/**
 * These types may describe the parent context of a selection set.
 */ parcelHelpers.export(exports, "isAbstractType", ()=>isAbstractType
);
parcelHelpers.export(exports, "assertAbstractType", ()=>assertAbstractType
);
/**
 * List Type Wrapper
 *
 * A list is a wrapping type which points to another type.
 * Lists are often created within the context of defining the fields of
 * an object type.
 *
 * Example:
 *
 *     const PersonType = new GraphQLObjectType({
 *       name: 'Person',
 *       fields: () => ({
 *         parents: { type: new GraphQLList(PersonType) },
 *         children: { type: new GraphQLList(PersonType) },
 *       })
 *     })
 *
 */ // FIXME: workaround to fix issue with Babel parser
/* ::
declare class GraphQLList<+T: GraphQLType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLList<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/ parcelHelpers.export(exports, "GraphQLList", ()=>GraphQLList
) // Need to cast through any to alter the prototype.
;
/**
 * Non-Null Type Wrapper
 *
 * A non-null is a wrapping type which points to another type.
 * Non-null types enforce that their values are never null and can ensure
 * an error is raised if this ever occurs during a request. It is useful for
 * fields which you can make a strong guarantee on non-nullability, for example
 * usually the id field of a database row will never be null.
 *
 * Example:
 *
 *     const RowType = new GraphQLObjectType({
 *       name: 'Row',
 *       fields: () => ({
 *         id: { type: new GraphQLNonNull(GraphQLString) },
 *       })
 *     })
 *
 * Note: the enforcement of non-nullability occurs within the executor.
 */ // FIXME: workaround to fix issue with Babel parser
/* ::
declare class GraphQLNonNull<+T: GraphQLNullableType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLNonNull<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/ parcelHelpers.export(exports, "GraphQLNonNull", ()=>GraphQLNonNull
) // Need to cast through any to alter the prototype.
;
/**
 * These types wrap and modify other types
 */ parcelHelpers.export(exports, "isWrappingType", ()=>isWrappingType
);
parcelHelpers.export(exports, "assertWrappingType", ()=>assertWrappingType
);
/**
 * These types can all accept null as a value.
 */ parcelHelpers.export(exports, "isNullableType", ()=>isNullableType
);
parcelHelpers.export(exports, "assertNullableType", ()=>assertNullableType
);
/* eslint-disable no-redeclare */ parcelHelpers.export(exports, "getNullableType", ()=>getNullableType
);
/**
 * These named types do not include modifiers like List or NonNull.
 */ parcelHelpers.export(exports, "isNamedType", ()=>isNamedType
);
parcelHelpers.export(exports, "assertNamedType", ()=>assertNamedType
);
/* eslint-disable no-redeclare */ parcelHelpers.export(exports, "getNamedType", ()=>getNamedType
);
parcelHelpers.export(exports, "GraphQLScalarType", ()=>GraphQLScalarType
);
parcelHelpers.export(exports, "GraphQLObjectType", ()=>GraphQLObjectType
);
/**
 * @internal
 */ parcelHelpers.export(exports, "argsToArgsConfig", ()=>argsToArgsConfig
);
parcelHelpers.export(exports, "isRequiredArgument", ()=>isRequiredArgument
);
parcelHelpers.export(exports, "GraphQLInterfaceType", ()=>GraphQLInterfaceType
);
parcelHelpers.export(exports, "GraphQLUnionType", ()=>GraphQLUnionType
);
parcelHelpers.export(exports, "GraphQLEnumType", ()=>GraphQLEnumType
);
parcelHelpers.export(exports, "GraphQLInputObjectType", ()=>GraphQLInputObjectType
);
parcelHelpers.export(exports, "isRequiredInputField", ()=>isRequiredInputField
);
var _objectEntriesMjs = require("../polyfills/objectEntries.mjs");
var _objectEntriesMjsDefault = parcelHelpers.interopDefault(_objectEntriesMjs);
var _symbolsMjs = require("../polyfills/symbols.mjs");
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _keyMapMjs = require("../jsutils/keyMap.mjs");
var _keyMapMjsDefault = parcelHelpers.interopDefault(_keyMapMjs);
var _mapValueMjs = require("../jsutils/mapValue.mjs");
var _mapValueMjsDefault = parcelHelpers.interopDefault(_mapValueMjs);
var _toObjMapMjs = require("../jsutils/toObjMap.mjs");
var _toObjMapMjsDefault = parcelHelpers.interopDefault(_toObjMapMjs);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _keyValMapMjs = require("../jsutils/keyValMap.mjs");
var _keyValMapMjsDefault = parcelHelpers.interopDefault(_keyValMapMjs);
var _instanceOfMjs = require("../jsutils/instanceOf.mjs");
var _instanceOfMjsDefault = parcelHelpers.interopDefault(_instanceOfMjs);
var _didYouMeanMjs = require("../jsutils/didYouMean.mjs");
var _didYouMeanMjsDefault = parcelHelpers.interopDefault(_didYouMeanMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _identityFuncMjs = require("../jsutils/identityFunc.mjs");
var _identityFuncMjsDefault = parcelHelpers.interopDefault(_identityFuncMjs);
var _defineInspectMjs = require("../jsutils/defineInspect.mjs");
var _defineInspectMjsDefault = parcelHelpers.interopDefault(_defineInspectMjs);
var _suggestionListMjs = require("../jsutils/suggestionList.mjs");
var _suggestionListMjsDefault = parcelHelpers.interopDefault(_suggestionListMjs);
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _kindsMjs = require("../language/kinds.mjs");
var _printerMjs = require("../language/printer.mjs");
var _valueFromASTUntypedMjs = require("../utilities/valueFromASTUntyped.mjs");
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function isType(type) {
    return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
}
function assertType(type) {
    if (!isType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL type."));
    return type;
}
function isScalarType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLScalarType);
}
function assertScalarType(type) {
    if (!isScalarType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL Scalar type."));
    return type;
}
function isObjectType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLObjectType);
}
function assertObjectType(type) {
    if (!isObjectType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL Object type."));
    return type;
}
function isInterfaceType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLInterfaceType);
}
function assertInterfaceType(type) {
    if (!isInterfaceType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL Interface type."));
    return type;
}
function isUnionType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLUnionType);
}
function assertUnionType(type) {
    if (!isUnionType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL Union type."));
    return type;
}
function isEnumType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLEnumType);
}
function assertEnumType(type) {
    if (!isEnumType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL Enum type."));
    return type;
}
function isInputObjectType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLInputObjectType);
}
function assertInputObjectType(type) {
    if (!isInputObjectType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL Input Object type."));
    return type;
}
function isListType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLList);
}
function assertListType(type) {
    if (!isListType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL List type."));
    return type;
}
function isNonNullType(type) {
    return _instanceOfMjsDefault.default(type, GraphQLNonNull);
}
function assertNonNullType(type) {
    if (!isNonNullType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL Non-Null type."));
    return type;
}
function isInputType(type) {
    return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
}
function assertInputType(type) {
    if (!isInputType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL input type."));
    return type;
}
function isOutputType(type) {
    return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
}
function assertOutputType(type) {
    if (!isOutputType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL output type."));
    return type;
}
function isLeafType(type) {
    return isScalarType(type) || isEnumType(type);
}
function assertLeafType(type) {
    if (!isLeafType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL leaf type."));
    return type;
}
function isCompositeType(type) {
    return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
}
function assertCompositeType(type) {
    if (!isCompositeType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL composite type."));
    return type;
}
function isAbstractType(type) {
    return isInterfaceType(type) || isUnionType(type);
}
function assertAbstractType(type) {
    if (!isAbstractType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL abstract type."));
    return type;
}
function GraphQLList(ofType) {
    // istanbul ignore else (to be removed in v16.0.0)
    if (this instanceof GraphQLList) this.ofType = assertType(ofType);
    else return new GraphQLList(ofType);
}
GraphQLList.prototype.toString = function toString() {
    return '[' + String(this.ofType) + ']';
};
GraphQLList.prototype.toJSON = function toJSON() {
    return this.toString();
};
Object.defineProperty(GraphQLList.prototype, _symbolsMjs.SYMBOL_TO_STRING_TAG, {
    get: function get() {
        return 'GraphQLList';
    }
}); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLList);
function GraphQLNonNull(ofType) {
    // istanbul ignore else (to be removed in v16.0.0)
    if (this instanceof GraphQLNonNull) this.ofType = assertNullableType(ofType);
    else return new GraphQLNonNull(ofType);
}
GraphQLNonNull.prototype.toString = function toString1() {
    return String(this.ofType) + '!';
};
GraphQLNonNull.prototype.toJSON = function toJSON1() {
    return this.toString();
};
Object.defineProperty(GraphQLNonNull.prototype, _symbolsMjs.SYMBOL_TO_STRING_TAG, {
    get: function get() {
        return 'GraphQLNonNull';
    }
}); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLNonNull);
function isWrappingType(type) {
    return isListType(type) || isNonNullType(type);
}
function assertWrappingType(type) {
    if (!isWrappingType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL wrapping type."));
    return type;
}
function isNullableType(type) {
    return isType(type) && !isNonNullType(type);
}
function assertNullableType(type) {
    if (!isNullableType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL nullable type."));
    return type;
}
function getNullableType(type) {
    /* eslint-enable no-redeclare */ if (type) return isNonNullType(type) ? type.ofType : type;
}
function isNamedType(type) {
    return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
}
function assertNamedType(type) {
    if (!isNamedType(type)) throw new Error("Expected ".concat(_inspectMjsDefault.default(type), " to be a GraphQL named type."));
    return type;
}
function getNamedType(type) {
    /* eslint-enable no-redeclare */ if (type) {
        var unwrappedType = type;
        while(isWrappingType(unwrappedType))unwrappedType = unwrappedType.ofType;
        return unwrappedType;
    }
}
/**
 * Used while defining GraphQL types to allow for circular references in
 * otherwise immutable type definitions.
 */ function resolveThunk(thunk) {
    // $FlowFixMe[incompatible-use]
    return typeof thunk === 'function' ? thunk() : thunk;
}
function undefineIfEmpty(arr) {
    return arr && arr.length > 0 ? arr : undefined;
}
var GraphQLScalarType = /*#__PURE__*/ function() {
    function GraphQLScalarType1(config) {
        var _config$parseValue, _config$serialize, _config$parseLiteral;
        var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFuncMjsDefault.default;
        this.name = config.name;
        this.description = config.description;
        this.specifiedByUrl = config.specifiedByUrl;
        this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFuncMjsDefault.default;
        this.parseValue = parseValue;
        this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function(node, variables) {
            return parseValue(_valueFromASTUntypedMjs.valueFromASTUntyped(node, variables));
        };
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        typeof config.name === 'string' || _devAssertMjsDefault.default(0, 'Must provide name.');
        config.specifiedByUrl == null || typeof config.specifiedByUrl === 'string' || _devAssertMjsDefault.default(0, "".concat(this.name, " must provide \"specifiedByUrl\" as a string, ") + "but got: ".concat(_inspectMjsDefault.default(config.specifiedByUrl), "."));
        config.serialize == null || typeof config.serialize === 'function' || _devAssertMjsDefault.default(0, "".concat(this.name, " must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided."));
        if (config.parseLiteral) typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || _devAssertMjsDefault.default(0, "".concat(this.name, " must provide both \"parseValue\" and \"parseLiteral\" functions."));
    }
    var _proto = GraphQLScalarType1.prototype;
    _proto.toConfig = function toConfig() {
        var _this$extensionASTNod;
        return {
            name: this.name,
            description: this.description,
            specifiedByUrl: this.specifiedByUrl,
            serialize: this.serialize,
            parseValue: this.parseValue,
            parseLiteral: this.parseLiteral,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []
        };
    };
    _proto.toString = function toString2() {
        return this.name;
    };
    _proto.toJSON = function toJSON2() {
        return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLScalarType1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLScalarType';
            }
        }
    ]);
    return GraphQLScalarType1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLScalarType);
var GraphQLObjectType = /*#__PURE__*/ function() {
    function GraphQLObjectType1(config) {
        this.name = config.name;
        this.description = config.description;
        this.isTypeOf = config.isTypeOf;
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineFieldMap.bind(undefined, config);
        this._interfaces = defineInterfaces.bind(undefined, config);
        typeof config.name === 'string' || _devAssertMjsDefault.default(0, 'Must provide name.');
        config.isTypeOf == null || typeof config.isTypeOf === 'function' || _devAssertMjsDefault.default(0, "".concat(this.name, " must provide \"isTypeOf\" as a function, ") + "but got: ".concat(_inspectMjsDefault.default(config.isTypeOf), "."));
    }
    var _proto2 = GraphQLObjectType1.prototype;
    _proto2.getFields = function getFields() {
        if (typeof this._fields === 'function') this._fields = this._fields();
        return this._fields;
    };
    _proto2.getInterfaces = function getInterfaces() {
        if (typeof this._interfaces === 'function') this._interfaces = this._interfaces();
        return this._interfaces;
    };
    _proto2.toConfig = function toConfig() {
        return {
            name: this.name,
            description: this.description,
            interfaces: this.getInterfaces(),
            fields: fieldsToFieldsConfig(this.getFields()),
            isTypeOf: this.isTypeOf,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: this.extensionASTNodes || []
        };
    };
    _proto2.toString = function toString2() {
        return this.name;
    };
    _proto2.toJSON = function toJSON2() {
        return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLObjectType1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLObjectType';
            }
        }
    ]);
    return GraphQLObjectType1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLObjectType);
function defineInterfaces(config) {
    var _resolveThunk;
    var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];
    Array.isArray(interfaces) || _devAssertMjsDefault.default(0, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
    return interfaces;
}
function defineFieldMap(config) {
    var fieldMap = resolveThunk(config.fields);
    isPlainObj(fieldMap) || _devAssertMjsDefault.default(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
    return _mapValueMjsDefault.default(fieldMap, function(fieldConfig, fieldName) {
        var _fieldConfig$args;
        isPlainObj(fieldConfig) || _devAssertMjsDefault.default(0, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
        !('isDeprecated' in fieldConfig) || _devAssertMjsDefault.default(0, "".concat(config.name, ".").concat(fieldName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
        fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || _devAssertMjsDefault.default(0, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat(_inspectMjsDefault.default(fieldConfig.resolve), "."));
        var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {
        };
        isPlainObj(argsConfig) || _devAssertMjsDefault.default(0, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
        var args = _objectEntriesMjsDefault.default(argsConfig).map(function(_ref) {
            var argName = _ref[0], argConfig = _ref[1];
            return {
                name: argName,
                description: argConfig.description,
                type: argConfig.type,
                defaultValue: argConfig.defaultValue,
                deprecationReason: argConfig.deprecationReason,
                extensions: argConfig.extensions && _toObjMapMjsDefault.default(argConfig.extensions),
                astNode: argConfig.astNode
            };
        });
        return {
            name: fieldName,
            description: fieldConfig.description,
            type: fieldConfig.type,
            args: args,
            resolve: fieldConfig.resolve,
            subscribe: fieldConfig.subscribe,
            isDeprecated: fieldConfig.deprecationReason != null,
            deprecationReason: fieldConfig.deprecationReason,
            extensions: fieldConfig.extensions && _toObjMapMjsDefault.default(fieldConfig.extensions),
            astNode: fieldConfig.astNode
        };
    });
}
function isPlainObj(obj) {
    return _isObjectLikeMjsDefault.default(obj) && !Array.isArray(obj);
}
function fieldsToFieldsConfig(fields) {
    return _mapValueMjsDefault.default(fields, function(field) {
        return {
            description: field.description,
            type: field.type,
            args: argsToArgsConfig(field.args),
            resolve: field.resolve,
            subscribe: field.subscribe,
            deprecationReason: field.deprecationReason,
            extensions: field.extensions,
            astNode: field.astNode
        };
    });
}
function argsToArgsConfig(args) {
    return _keyValMapMjsDefault.default(args, function(arg) {
        return arg.name;
    }, function(arg) {
        return {
            description: arg.description,
            type: arg.type,
            defaultValue: arg.defaultValue,
            deprecationReason: arg.deprecationReason,
            extensions: arg.extensions,
            astNode: arg.astNode
        };
    });
}
function isRequiredArgument(arg) {
    return isNonNullType(arg.type) && arg.defaultValue === undefined;
}
var GraphQLInterfaceType = /*#__PURE__*/ function() {
    function GraphQLInterfaceType1(config) {
        this.name = config.name;
        this.description = config.description;
        this.resolveType = config.resolveType;
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineFieldMap.bind(undefined, config);
        this._interfaces = defineInterfaces.bind(undefined, config);
        typeof config.name === 'string' || _devAssertMjsDefault.default(0, 'Must provide name.');
        config.resolveType == null || typeof config.resolveType === 'function' || _devAssertMjsDefault.default(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat(_inspectMjsDefault.default(config.resolveType), "."));
    }
    var _proto3 = GraphQLInterfaceType1.prototype;
    _proto3.getFields = function getFields() {
        if (typeof this._fields === 'function') this._fields = this._fields();
        return this._fields;
    };
    _proto3.getInterfaces = function getInterfaces() {
        if (typeof this._interfaces === 'function') this._interfaces = this._interfaces();
        return this._interfaces;
    };
    _proto3.toConfig = function toConfig() {
        var _this$extensionASTNod2;
        return {
            name: this.name,
            description: this.description,
            interfaces: this.getInterfaces(),
            fields: fieldsToFieldsConfig(this.getFields()),
            resolveType: this.resolveType,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []
        };
    };
    _proto3.toString = function toString2() {
        return this.name;
    };
    _proto3.toJSON = function toJSON2() {
        return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLInterfaceType1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLInterfaceType';
            }
        }
    ]);
    return GraphQLInterfaceType1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLInterfaceType);
var GraphQLUnionType = /*#__PURE__*/ function() {
    function GraphQLUnionType1(config) {
        this.name = config.name;
        this.description = config.description;
        this.resolveType = config.resolveType;
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._types = defineTypes.bind(undefined, config);
        typeof config.name === 'string' || _devAssertMjsDefault.default(0, 'Must provide name.');
        config.resolveType == null || typeof config.resolveType === 'function' || _devAssertMjsDefault.default(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat(_inspectMjsDefault.default(config.resolveType), "."));
    }
    var _proto4 = GraphQLUnionType1.prototype;
    _proto4.getTypes = function getTypes() {
        if (typeof this._types === 'function') this._types = this._types();
        return this._types;
    };
    _proto4.toConfig = function toConfig() {
        var _this$extensionASTNod3;
        return {
            name: this.name,
            description: this.description,
            types: this.getTypes(),
            resolveType: this.resolveType,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []
        };
    };
    _proto4.toString = function toString2() {
        return this.name;
    };
    _proto4.toJSON = function toJSON2() {
        return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLUnionType1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLUnionType';
            }
        }
    ]);
    return GraphQLUnionType1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLUnionType);
function defineTypes(config) {
    var types = resolveThunk(config.types);
    Array.isArray(types) || _devAssertMjsDefault.default(0, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
    return types;
}
var GraphQLEnumType = /*#__PURE__*/ function() {
    function GraphQLEnumType1(config) {
        this.name = config.name;
        this.description = config.description;
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._values = defineEnumValues(this.name, config.values);
        this._valueLookup = new Map(this._values.map(function(enumValue) {
            return [
                enumValue.value,
                enumValue
            ];
        }));
        this._nameLookup = _keyMapMjsDefault.default(this._values, function(value) {
            return value.name;
        });
        typeof config.name === 'string' || _devAssertMjsDefault.default(0, 'Must provide name.');
    }
    var _proto5 = GraphQLEnumType1.prototype;
    _proto5.getValues = function getValues() {
        return this._values;
    };
    _proto5.getValue = function getValue(name) {
        return this._nameLookup[name];
    };
    _proto5.serialize = function serialize(outputValue) {
        var enumValue = this._valueLookup.get(outputValue);
        if (enumValue === undefined) throw new _graphQLErrorMjs.GraphQLError("Enum \"".concat(this.name, "\" cannot represent value: ").concat(_inspectMjsDefault.default(outputValue)));
        return enumValue.name;
    };
    _proto5.parseValue = function parseValue(inputValue) /* T */ {
        if (typeof inputValue !== 'string') {
            var valueStr = _inspectMjsDefault.default(inputValue);
            throw new _graphQLErrorMjs.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-string value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
        }
        var enumValue = this.getValue(inputValue);
        if (enumValue == null) throw new _graphQLErrorMjs.GraphQLError("Value \"".concat(inputValue, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, inputValue));
        return enumValue.value;
    };
    _proto5.parseLiteral = function parseLiteral(valueNode, _variables) /* T */ {
        // Note: variables will be resolved to a value before calling this function.
        if (valueNode.kind !== _kindsMjs.Kind.ENUM) {
            var valueStr = _printerMjs.print(valueNode);
            throw new _graphQLErrorMjs.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-enum value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), valueNode);
        }
        var enumValue = this.getValue(valueNode.value);
        if (enumValue == null) {
            var _valueStr = _printerMjs.print(valueNode);
            throw new _graphQLErrorMjs.GraphQLError("Value \"".concat(_valueStr, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, _valueStr), valueNode);
        }
        return enumValue.value;
    };
    _proto5.toConfig = function toConfig() {
        var _this$extensionASTNod4;
        var values = _keyValMapMjsDefault.default(this.getValues(), function(value) {
            return value.name;
        }, function(value) {
            return {
                description: value.description,
                value: value.value,
                deprecationReason: value.deprecationReason,
                extensions: value.extensions,
                astNode: value.astNode
            };
        });
        return {
            name: this.name,
            description: this.description,
            values: values,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []
        };
    };
    _proto5.toString = function toString2() {
        return this.name;
    };
    _proto5.toJSON = function toJSON2() {
        return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLEnumType1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLEnumType';
            }
        }
    ]);
    return GraphQLEnumType1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLEnumType);
function didYouMeanEnumValue(enumType, unknownValueStr) {
    var allNames = enumType.getValues().map(function(value) {
        return value.name;
    });
    var suggestedValues = _suggestionListMjsDefault.default(unknownValueStr, allNames);
    return _didYouMeanMjsDefault.default('the enum value', suggestedValues);
}
function defineEnumValues(typeName, valueMap) {
    isPlainObj(valueMap) || _devAssertMjsDefault.default(0, "".concat(typeName, " values must be an object with value names as keys."));
    return _objectEntriesMjsDefault.default(valueMap).map(function(_ref2) {
        var valueName = _ref2[0], valueConfig = _ref2[1];
        isPlainObj(valueConfig) || _devAssertMjsDefault.default(0, "".concat(typeName, ".").concat(valueName, " must refer to an object with a \"value\" key ") + "representing an internal value but got: ".concat(_inspectMjsDefault.default(valueConfig), "."));
        !('isDeprecated' in valueConfig) || _devAssertMjsDefault.default(0, "".concat(typeName, ".").concat(valueName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
        return {
            name: valueName,
            description: valueConfig.description,
            value: valueConfig.value !== undefined ? valueConfig.value : valueName,
            isDeprecated: valueConfig.deprecationReason != null,
            deprecationReason: valueConfig.deprecationReason,
            extensions: valueConfig.extensions && _toObjMapMjsDefault.default(valueConfig.extensions),
            astNode: valueConfig.astNode
        };
    });
}
var GraphQLInputObjectType = /*#__PURE__*/ function() {
    function GraphQLInputObjectType1(config) {
        this.name = config.name;
        this.description = config.description;
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
        this._fields = defineInputFieldMap.bind(undefined, config);
        typeof config.name === 'string' || _devAssertMjsDefault.default(0, 'Must provide name.');
    }
    var _proto6 = GraphQLInputObjectType1.prototype;
    _proto6.getFields = function getFields() {
        if (typeof this._fields === 'function') this._fields = this._fields();
        return this._fields;
    };
    _proto6.toConfig = function toConfig() {
        var _this$extensionASTNod5;
        var fields = _mapValueMjsDefault.default(this.getFields(), function(field) {
            return {
                description: field.description,
                type: field.type,
                defaultValue: field.defaultValue,
                extensions: field.extensions,
                astNode: field.astNode
            };
        });
        return {
            name: this.name,
            description: this.description,
            fields: fields,
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []
        };
    };
    _proto6.toString = function toString2() {
        return this.name;
    };
    _proto6.toJSON = function toJSON2() {
        return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLInputObjectType1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLInputObjectType';
            }
        }
    ]);
    return GraphQLInputObjectType1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLInputObjectType);
function defineInputFieldMap(config) {
    var fieldMap = resolveThunk(config.fields);
    isPlainObj(fieldMap) || _devAssertMjsDefault.default(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
    return _mapValueMjsDefault.default(fieldMap, function(fieldConfig, fieldName) {
        !('resolve' in fieldConfig) || _devAssertMjsDefault.default(0, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
        return {
            name: fieldName,
            description: fieldConfig.description,
            type: fieldConfig.type,
            defaultValue: fieldConfig.defaultValue,
            deprecationReason: fieldConfig.deprecationReason,
            extensions: fieldConfig.extensions && _toObjMapMjsDefault.default(fieldConfig.extensions),
            astNode: fieldConfig.astNode
        };
    });
}
function isRequiredInputField(field) {
    return isNonNullType(field.type) && field.defaultValue === undefined;
}

},{"../polyfills/objectEntries.mjs":"74LtV","../polyfills/symbols.mjs":"e9VHS","../jsutils/inspect.mjs":"doI9y","../jsutils/keyMap.mjs":"53ed0","../jsutils/mapValue.mjs":"2eY8U","../jsutils/toObjMap.mjs":"5hBPA","../jsutils/devAssert.mjs":"iZbmm","../jsutils/keyValMap.mjs":"cP1oT","../jsutils/instanceOf.mjs":"e6Poo","../jsutils/didYouMean.mjs":"gdq7w","../jsutils/isObjectLike.mjs":"6kDBW","../jsutils/identityFunc.mjs":"bcZdu","../jsutils/defineInspect.mjs":"cobf8","../jsutils/suggestionList.mjs":"fxmKg","../error/GraphQLError.mjs":"a8Vyv","../language/kinds.mjs":"3gRFP","../language/printer.mjs":"bEnFw","../utilities/valueFromASTUntyped.mjs":"2WaUG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"74LtV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-redeclare */ // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var objectEntries = Object.entries || function(obj) {
    return Object.keys(obj).map(function(key) {
        return [
            key,
            obj[key]
        ];
    });
};
exports.default = objectEntries;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"53ed0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function keyMap(list, keyFn) {
    return list.reduce(function(map, item) {
        map[keyFn(item)] = item;
        return map;
    }, Object.create(null));
}
exports.default = keyMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2eY8U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectEntriesMjs = require("../polyfills/objectEntries.mjs");
var _objectEntriesMjsDefault = parcelHelpers.interopDefault(_objectEntriesMjs);
function mapValue(map, fn) {
    var result = Object.create(null);
    for(var _i2 = 0, _objectEntries2 = _objectEntriesMjsDefault.default(map); _i2 < _objectEntries2.length; _i2++){
        var _ref2 = _objectEntries2[_i2];
        var _key = _ref2[0];
        var _value = _ref2[1];
        result[_key] = fn(_value, _key);
    }
    return result;
}
exports.default = mapValue;

},{"../polyfills/objectEntries.mjs":"74LtV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5hBPA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectEntriesMjs = require("../polyfills/objectEntries.mjs");
var _objectEntriesMjsDefault = parcelHelpers.interopDefault(_objectEntriesMjs);
function toObjMap(obj) {
    /* eslint-enable no-redeclare */ if (Object.getPrototypeOf(obj) === null) return obj;
    var map = Object.create(null);
    for(var _i2 = 0, _objectEntries2 = _objectEntriesMjsDefault.default(obj); _i2 < _objectEntries2.length; _i2++){
        var _ref2 = _objectEntries2[_i2];
        var key = _ref2[0];
        var value = _ref2[1];
        map[key] = value;
    }
    return map;
}
exports.default = toObjMap;

},{"../polyfills/objectEntries.mjs":"74LtV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cP1oT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function keyValMap(list, keyFn, valFn) {
    return list.reduce(function(map, item) {
        map[keyFn(item)] = valFn(item);
        return map;
    }, Object.create(null));
}
exports.default = keyValMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gdq7w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var MAX_SUGGESTIONS = 5;
function didYouMean(firstArg, secondArg) {
    var _ref = typeof firstArg === 'string' ? [
        firstArg,
        secondArg
    ] : [
        undefined,
        firstArg
    ], subMessage = _ref[0], suggestionsArg = _ref[1];
    var message = ' Did you mean ';
    if (subMessage) message += subMessage + ' ';
    var suggestions = suggestionsArg.map(function(x) {
        return "\"".concat(x, "\"");
    });
    switch(suggestions.length){
        case 0:
            return '';
        case 1:
            return message + suggestions[0] + '?';
        case 2:
            return message + suggestions[0] + ' or ' + suggestions[1] + '?';
    }
    var selected = suggestions.slice(0, MAX_SUGGESTIONS);
    var lastItem = selected.pop();
    return message + selected.join(', ') + ', or ' + lastItem + '?';
}
exports.default = didYouMean;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bcZdu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function identityFunc(x) {
    return x;
}
exports.default = identityFunc;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fxmKg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _naturalCompareMjs = require("./naturalCompare.mjs");
var _naturalCompareMjsDefault = parcelHelpers.interopDefault(_naturalCompareMjs);
function suggestionList(input, options) {
    var optionsByDistance = Object.create(null);
    var lexicalDistance = new LexicalDistance(input);
    var threshold = Math.floor(input.length * 0.4) + 1;
    for(var _i2 = 0; _i2 < options.length; _i2++){
        var option = options[_i2];
        var distance = lexicalDistance.measure(option, threshold);
        if (distance !== undefined) optionsByDistance[option] = distance;
    }
    return Object.keys(optionsByDistance).sort(function(a, b) {
        var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
        return distanceDiff !== 0 ? distanceDiff : _naturalCompareMjsDefault.default(a, b);
    });
}
exports.default = suggestionList;
/**
 * Computes the lexical distance between strings A and B.
 *
 * The "distance" between two strings is given by counting the minimum number
 * of edits needed to transform string A into string B. An edit can be an
 * insertion, deletion, or substitution of a single character, or a swap of two
 * adjacent characters.
 *
 * Includes a custom alteration from Damerau-Levenshtein to treat case changes
 * as a single edit which helps identify mis-cased values with an edit distance
 * of 1.
 *
 * This distance can be useful for detecting typos in input or sorting
 */ var LexicalDistance = /*#__PURE__*/ function() {
    function LexicalDistance1(input) {
        this._input = input;
        this._inputLowerCase = input.toLowerCase();
        this._inputArray = stringToArray(this._inputLowerCase);
        this._rows = [
            new Array(input.length + 1).fill(0),
            new Array(input.length + 1).fill(0),
            new Array(input.length + 1).fill(0)
        ];
    }
    var _proto = LexicalDistance1.prototype;
    _proto.measure = function measure(option, threshold) {
        if (this._input === option) return 0;
        var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit
        if (this._inputLowerCase === optionLowerCase) return 1;
        var a = stringToArray(optionLowerCase);
        var b = this._inputArray;
        if (a.length < b.length) {
            var tmp = a;
            a = b;
            b = tmp;
        }
        var aLength = a.length;
        var bLength = b.length;
        if (aLength - bLength > threshold) return undefined;
        var rows = this._rows;
        for(var j = 0; j <= bLength; j++)rows[0][j] = j;
        for(var i = 1; i <= aLength; i++){
            var upRow = rows[(i - 1) % 3];
            var currentRow = rows[i % 3];
            var smallestCell = currentRow[0] = i;
            for(var _j = 1; _j <= bLength; _j++){
                var cost = a[i - 1] === b[_j - 1] ? 0 : 1;
                var currentCell = Math.min(upRow[_j] + 1, currentRow[_j - 1] + 1, upRow[_j - 1] + cost // substitute
                );
                if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {
                    // transposition
                    var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];
                    currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
                }
                if (currentCell < smallestCell) smallestCell = currentCell;
                currentRow[_j] = currentCell;
            } // Early exit, since distance can't go smaller than smallest element of the previous row.
            if (smallestCell > threshold) return undefined;
        }
        var distance = rows[aLength % 3][bLength];
        return distance <= threshold ? distance : undefined;
    };
    return LexicalDistance1;
}();
function stringToArray(str) {
    var strLength = str.length;
    var array = new Array(strLength);
    for(var i = 0; i < strLength; ++i)array[i] = str.charCodeAt(i);
    return array;
}

},{"./naturalCompare.mjs":"bpKPt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bpKPt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function naturalCompare(aStr, bStr) {
    var aIdx = 0;
    var bIdx = 0;
    while(aIdx < aStr.length && bIdx < bStr.length){
        var aChar = aStr.charCodeAt(aIdx);
        var bChar = bStr.charCodeAt(bIdx);
        if (isDigit(aChar) && isDigit(bChar)) {
            var aNum = 0;
            do {
                ++aIdx;
                aNum = aNum * 10 + aChar - DIGIT_0;
                aChar = aStr.charCodeAt(aIdx);
            }while (isDigit(aChar) && aNum > 0)
            var bNum = 0;
            do {
                ++bIdx;
                bNum = bNum * 10 + bChar - DIGIT_0;
                bChar = bStr.charCodeAt(bIdx);
            }while (isDigit(bChar) && bNum > 0)
            if (aNum < bNum) return -1;
            if (aNum > bNum) return 1;
        } else {
            if (aChar < bChar) return -1;
            if (aChar > bChar) return 1;
            ++aIdx;
            ++bIdx;
        }
    }
    return aStr.length - bStr.length;
}
exports.default = naturalCompare;
var DIGIT_0 = 48;
var DIGIT_9 = 57;
function isDigit(code) {
    return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bEnFw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */ parcelHelpers.export(exports, "print", ()=>print
);
var _visitorMjs = require("./visitor.mjs");
var _blockStringMjs = require("./blockString.mjs");
function print(ast) {
    return _visitorMjs.visit(ast, {
        leave: printDocASTReducer
    });
}
var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future
var printDocASTReducer = {
    Name: function Name(node) {
        return node.value;
    },
    Variable: function Variable(node) {
        return '$' + node.name;
    },
    // Document
    Document: function Document1(node) {
        return join(node.definitions, '\n\n') + '\n';
    },
    OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        var directives = join(node.directives, ' ');
        var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
        // the query short form.
        return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([
            op,
            join([
                name,
                varDefs
            ]),
            directives,
            selectionSet
        ], ' ');
    },
    VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable, type = _ref.type, defaultValue = _ref.defaultValue, directives = _ref.directives;
        return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
    },
    SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
    },
    Field: function Field(_ref3) {
        var alias = _ref3.alias, name = _ref3.name, args = _ref3.arguments, directives = _ref3.directives, selectionSet = _ref3.selectionSet;
        var prefix = wrap('', alias, ': ') + name;
        var argsLine = prefix + wrap('(', join(args, ', '), ')');
        if (argsLine.length > MAX_LINE_LENGTH) argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
        return join([
            argsLine,
            join(directives, ' '),
            selectionSet
        ], ' ');
    },
    Argument: function Argument(_ref4) {
        var name = _ref4.name, value = _ref4.value;
        return name + ': ' + value;
    },
    // Fragments
    FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name, directives = _ref5.directives;
        return '...' + name + wrap(' ', join(directives, ' '));
    },
    InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition, directives = _ref6.directives, selectionSet = _ref6.selectionSet;
        return join([
            '...',
            wrap('on ', typeCondition),
            join(directives, ' '),
            selectionSet
        ], ' ');
    },
    FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name, typeCondition = _ref7.typeCondition, variableDefinitions = _ref7.variableDefinitions, directives = _ref7.directives, selectionSet = _ref7.selectionSet;
        return(// or removed in the future.
        "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet);
    },
    // Value
    IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
    },
    FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
    },
    StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value, isBlockString = _ref10.block;
        return isBlockString ? _blockStringMjs.printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
    },
    BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? 'true' : 'false';
    },
    NullValue: function NullValue() {
        return 'null';
    },
    EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
    },
    ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return '[' + join(values, ', ') + ']';
    },
    ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return '{' + join(fields, ', ') + '}';
    },
    ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name, value = _ref15.value;
        return name + ': ' + value;
    },
    // Directive
    Directive: function Directive(_ref16) {
        var name = _ref16.name, args = _ref16.arguments;
        return '@' + name + wrap('(', join(args, ', '), ')');
    },
    // Type
    NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
    },
    ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return '[' + type + ']';
    },
    NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + '!';
    },
    // Type System Definitions
    SchemaDefinition: addDescription(function(_ref20) {
        var directives = _ref20.directives, operationTypes = _ref20.operationTypes;
        return join([
            'schema',
            join(directives, ' '),
            block(operationTypes)
        ], ' ');
    }),
    OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation, type = _ref21.type;
        return operation + ': ' + type;
    },
    ScalarTypeDefinition: addDescription(function(_ref22) {
        var name = _ref22.name, directives = _ref22.directives;
        return join([
            'scalar',
            name,
            join(directives, ' ')
        ], ' ');
    }),
    ObjectTypeDefinition: addDescription(function(_ref23) {
        var name = _ref23.name, interfaces = _ref23.interfaces, directives = _ref23.directives, fields = _ref23.fields;
        return join([
            'type',
            name,
            wrap('implements ', join(interfaces, ' & ')),
            join(directives, ' '),
            block(fields)
        ], ' ');
    }),
    FieldDefinition: addDescription(function(_ref24) {
        var name = _ref24.name, args = _ref24.arguments, type = _ref24.type, directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
    }),
    InputValueDefinition: addDescription(function(_ref25) {
        var name = _ref25.name, type = _ref25.type, defaultValue = _ref25.defaultValue, directives = _ref25.directives;
        return join([
            name + ': ' + type,
            wrap('= ', defaultValue),
            join(directives, ' ')
        ], ' ');
    }),
    InterfaceTypeDefinition: addDescription(function(_ref26) {
        var name = _ref26.name, interfaces = _ref26.interfaces, directives = _ref26.directives, fields = _ref26.fields;
        return join([
            'interface',
            name,
            wrap('implements ', join(interfaces, ' & ')),
            join(directives, ' '),
            block(fields)
        ], ' ');
    }),
    UnionTypeDefinition: addDescription(function(_ref27) {
        var name = _ref27.name, directives = _ref27.directives, types = _ref27.types;
        return join([
            'union',
            name,
            join(directives, ' '),
            types && types.length !== 0 ? '= ' + join(types, ' | ') : ''
        ], ' ');
    }),
    EnumTypeDefinition: addDescription(function(_ref28) {
        var name = _ref28.name, directives = _ref28.directives, values = _ref28.values;
        return join([
            'enum',
            name,
            join(directives, ' '),
            block(values)
        ], ' ');
    }),
    EnumValueDefinition: addDescription(function(_ref29) {
        var name = _ref29.name, directives = _ref29.directives;
        return join([
            name,
            join(directives, ' ')
        ], ' ');
    }),
    InputObjectTypeDefinition: addDescription(function(_ref30) {
        var name = _ref30.name, directives = _ref30.directives, fields = _ref30.fields;
        return join([
            'input',
            name,
            join(directives, ' '),
            block(fields)
        ], ' ');
    }),
    DirectiveDefinition: addDescription(function(_ref31) {
        var name = _ref31.name, args = _ref31.arguments, repeatable = _ref31.repeatable, locations = _ref31.locations;
        return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
    }),
    SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives, operationTypes = _ref32.operationTypes;
        return join([
            'extend schema',
            join(directives, ' '),
            block(operationTypes)
        ], ' ');
    },
    ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name, directives = _ref33.directives;
        return join([
            'extend scalar',
            name,
            join(directives, ' ')
        ], ' ');
    },
    ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name, interfaces = _ref34.interfaces, directives = _ref34.directives, fields = _ref34.fields;
        return join([
            'extend type',
            name,
            wrap('implements ', join(interfaces, ' & ')),
            join(directives, ' '),
            block(fields)
        ], ' ');
    },
    InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name, interfaces = _ref35.interfaces, directives = _ref35.directives, fields = _ref35.fields;
        return join([
            'extend interface',
            name,
            wrap('implements ', join(interfaces, ' & ')),
            join(directives, ' '),
            block(fields)
        ], ' ');
    },
    UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name, directives = _ref36.directives, types = _ref36.types;
        return join([
            'extend union',
            name,
            join(directives, ' '),
            types && types.length !== 0 ? '= ' + join(types, ' | ') : ''
        ], ' ');
    },
    EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name, directives = _ref37.directives, values = _ref37.values;
        return join([
            'extend enum',
            name,
            join(directives, ' '),
            block(values)
        ], ' ');
    },
    InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name, directives = _ref38.directives, fields = _ref38.fields;
        return join([
            'extend input',
            name,
            join(directives, ' '),
            block(fields)
        ], ' ');
    }
};
function addDescription(cb) {
    return function(node) {
        return join([
            node.description,
            cb(node)
        ], '\n');
    };
}
/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */ function join(maybeArray) {
    var _maybeArray$filter$jo;
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function(x) {
        return x;
    }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
}
/**
 * Given array, print each item on its own line, wrapped in an
 * indented "{ }" block.
 */ function block(array) {
    return wrap('{\n', indent(join(array, '\n')), '\n}');
}
/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
 */ function wrap(start, maybeString) {
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
}
function indent(str) {
    return wrap('  ', str.replace(/\n/g, '\n  '));
}
function isMultiline(str) {
    return str.indexOf('\n') !== -1;
}
function hasMultilineItems(maybeArray) {
    return maybeArray != null && maybeArray.some(isMultiline);
}

},{"./visitor.mjs":"bb6mn","./blockString.mjs":"2FyBa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2WaUG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
 * will reflect the provided GraphQL value AST.
 *
 * | GraphQL Value        | JavaScript Value |
 * | -------------------- | ---------------- |
 * | Input Object         | Object           |
 * | List                 | Array            |
 * | Boolean              | Boolean          |
 * | String / Enum        | String           |
 * | Int / Float          | Number           |
 * | Null                 | null             |
 *
 */ parcelHelpers.export(exports, "valueFromASTUntyped", ()=>valueFromASTUntyped
);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _keyValMapMjs = require("../jsutils/keyValMap.mjs");
var _keyValMapMjsDefault = parcelHelpers.interopDefault(_keyValMapMjs);
var _kindsMjs = require("../language/kinds.mjs");
function valueFromASTUntyped(valueNode, variables) {
    switch(valueNode.kind){
        case _kindsMjs.Kind.NULL:
            return null;
        case _kindsMjs.Kind.INT:
            return parseInt(valueNode.value, 10);
        case _kindsMjs.Kind.FLOAT:
            return parseFloat(valueNode.value);
        case _kindsMjs.Kind.STRING:
        case _kindsMjs.Kind.ENUM:
        case _kindsMjs.Kind.BOOLEAN:
            return valueNode.value;
        case _kindsMjs.Kind.LIST:
            return valueNode.values.map(function(node) {
                return valueFromASTUntyped(node, variables);
            });
        case _kindsMjs.Kind.OBJECT:
            return _keyValMapMjsDefault.default(valueNode.fields, function(field) {
                return field.name.value;
            }, function(field) {
                return valueFromASTUntyped(field.value, variables);
            });
        case _kindsMjs.Kind.VARIABLE:
            return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
    } // istanbul ignore next (Not reachable. All possible value nodes have been considered)
    _invariantMjsDefault.default(0, 'Unexpected value node: ' + _inspectMjsDefault.default(valueNode));
}

},{"../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../jsutils/keyValMap.mjs":"cP1oT","../language/kinds.mjs":"3gRFP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jMEya":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Test if the given value is a GraphQL schema.
 */ // eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isSchema", ()=>isSchema
);
parcelHelpers.export(exports, "assertSchema", ()=>assertSchema
);
parcelHelpers.export(exports, "GraphQLSchema", ()=>GraphQLSchema
);
var _findMjs = require("../polyfills/find.mjs");
var _findMjsDefault = parcelHelpers.interopDefault(_findMjs);
var _arrayFromMjs = require("../polyfills/arrayFrom.mjs");
var _arrayFromMjsDefault = parcelHelpers.interopDefault(_arrayFromMjs);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _symbolsMjs = require("../polyfills/symbols.mjs");
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _toObjMapMjs = require("../jsutils/toObjMap.mjs");
var _toObjMapMjsDefault = parcelHelpers.interopDefault(_toObjMapMjs);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _instanceOfMjs = require("../jsutils/instanceOf.mjs");
var _instanceOfMjsDefault = parcelHelpers.interopDefault(_instanceOfMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _introspectionMjs = require("./introspection.mjs");
var _directivesMjs = require("./directives.mjs");
var _definitionMjs = require("./definition.mjs");
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function isSchema(schema) {
    return _instanceOfMjsDefault.default(schema, GraphQLSchema);
}
function assertSchema(schema) {
    if (!isSchema(schema)) throw new Error("Expected ".concat(_inspectMjsDefault.default(schema), " to be a GraphQL schema."));
    return schema;
}
var GraphQLSchema = /*#__PURE__*/ function() {
    // Used as a cache for validateSchema().
    function GraphQLSchema1(config) {
        var _config$directives;
        // If this schema was built from a source known to be valid, then it may be
        // marked with assumeValid to avoid an additional type system validation.
        this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.
        _isObjectLikeMjsDefault.default(config) || _devAssertMjsDefault.default(0, 'Must provide configuration object.');
        !config.types || Array.isArray(config.types) || _devAssertMjsDefault.default(0, "\"types\" must be Array if provided but got: ".concat(_inspectMjsDefault.default(config.types), "."));
        !config.directives || Array.isArray(config.directives) || _devAssertMjsDefault.default(0, '"directives" must be Array if provided but got: ' + "".concat(_inspectMjsDefault.default(config.directives), "."));
        this.description = config.description;
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        this.extensionASTNodes = config.extensionASTNodes;
        this._queryType = config.query;
        this._mutationType = config.mutation;
        this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.
        this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directivesMjs.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
        // the set of "collected" types, so `collectReferencedTypes` ignore them.
        var allReferencedTypes = new Set(config.types);
        if (config.types != null) for(var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++){
            var type = _config$types2[_i2];
            // When we ready to process this type, we remove it from "collected" types
            // and then add it together with all dependent types in the correct position.
            allReferencedTypes.delete(type);
            collectReferencedTypes(type, allReferencedTypes);
        }
        if (this._queryType != null) collectReferencedTypes(this._queryType, allReferencedTypes);
        if (this._mutationType != null) collectReferencedTypes(this._mutationType, allReferencedTypes);
        if (this._subscriptionType != null) collectReferencedTypes(this._subscriptionType, allReferencedTypes);
        for(var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++){
            var directive = _this$_directives2[_i4];
            // Directives are not validated until validateSchema() is called.
            if (_directivesMjs.isDirective(directive)) for(var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++){
                var arg = _directive$args2[_i6];
                collectReferencedTypes(arg.type, allReferencedTypes);
            }
        }
        collectReferencedTypes(_introspectionMjs.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.
        this._typeMap = Object.create(null);
        this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.
        this._implementationsMap = Object.create(null);
        for(var _i8 = 0, _arrayFrom2 = _arrayFromMjsDefault.default(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++){
            var namedType = _arrayFrom2[_i8];
            if (namedType == null) continue;
            var typeName = namedType.name;
            typeName || _devAssertMjsDefault.default(0, 'One of the provided types for building the Schema is missing a name.');
            if (this._typeMap[typeName] !== undefined) throw new Error("Schema must contain uniquely named types but contains multiple types named \"".concat(typeName, "\"."));
            this._typeMap[typeName] = namedType;
            if (_definitionMjs.isInterfaceType(namedType)) // Store implementations by interface.
            for(var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++){
                var iface = _namedType$getInterfa2[_i10];
                if (_definitionMjs.isInterfaceType(iface)) {
                    var implementations = this._implementationsMap[iface.name];
                    if (implementations === undefined) implementations = this._implementationsMap[iface.name] = {
                        objects: [],
                        interfaces: []
                    };
                    implementations.interfaces.push(namedType);
                }
            }
            else if (_definitionMjs.isObjectType(namedType)) // Store implementations by objects.
            for(var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++){
                var _iface = _namedType$getInterfa4[_i12];
                if (_definitionMjs.isInterfaceType(_iface)) {
                    var _implementations = this._implementationsMap[_iface.name];
                    if (_implementations === undefined) _implementations = this._implementationsMap[_iface.name] = {
                        objects: [],
                        interfaces: []
                    };
                    _implementations.objects.push(namedType);
                }
            }
        }
    }
    var _proto = GraphQLSchema1.prototype;
    _proto.getQueryType = function getQueryType() {
        return this._queryType;
    };
    _proto.getMutationType = function getMutationType() {
        return this._mutationType;
    };
    _proto.getSubscriptionType = function getSubscriptionType() {
        return this._subscriptionType;
    };
    _proto.getTypeMap = function getTypeMap() {
        return this._typeMap;
    };
    _proto.getType = function getType(name) {
        return this.getTypeMap()[name];
    };
    _proto.getPossibleTypes = function getPossibleTypes(abstractType) {
        return _definitionMjs.isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
    };
    _proto.getImplementations = function getImplementations(interfaceType) {
        var implementations = this._implementationsMap[interfaceType.name];
        return implementations !== null && implementations !== void 0 ? implementations : {
            objects: [],
            interfaces: []
        };
    } // @deprecated: use isSubType instead - will be removed in v16.
    ;
    _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {
        return this.isSubType(abstractType, possibleType);
    };
    _proto.isSubType = function isSubType(abstractType, maybeSubType) {
        var map = this._subTypeMap[abstractType.name];
        if (map === undefined) {
            map = Object.create(null);
            if (_definitionMjs.isUnionType(abstractType)) for(var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++){
                var type = _abstractType$getType2[_i14];
                map[type.name] = true;
            }
            else {
                var implementations = this.getImplementations(abstractType);
                for(var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++){
                    var _type = _implementations$obje2[_i16];
                    map[_type.name] = true;
                }
                for(var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++){
                    var _type2 = _implementations$inte2[_i18];
                    map[_type2.name] = true;
                }
            }
            this._subTypeMap[abstractType.name] = map;
        }
        return map[maybeSubType.name] !== undefined;
    };
    _proto.getDirectives = function getDirectives() {
        return this._directives;
    };
    _proto.getDirective = function getDirective(name) {
        return _findMjsDefault.default(this.getDirectives(), function(directive) {
            return directive.name === name;
        });
    };
    _proto.toConfig = function toConfig() {
        var _this$extensionASTNod;
        return {
            description: this.description,
            query: this.getQueryType(),
            mutation: this.getMutationType(),
            subscription: this.getSubscriptionType(),
            types: _objectValuesMjsDefault.default(this.getTypeMap()),
            directives: this.getDirectives().slice(),
            extensions: this.extensions,
            astNode: this.astNode,
            extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],
            assumeValid: this.__validationErrors !== undefined
        };
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLSchema1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLSchema';
            }
        }
    ]);
    return GraphQLSchema1;
}();
function collectReferencedTypes(type, typeSet) {
    var namedType = _definitionMjs.getNamedType(type);
    if (!typeSet.has(namedType)) {
        typeSet.add(namedType);
        if (_definitionMjs.isUnionType(namedType)) for(var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++){
            var memberType = _namedType$getTypes2[_i20];
            collectReferencedTypes(memberType, typeSet);
        }
        else if (_definitionMjs.isObjectType(namedType) || _definitionMjs.isInterfaceType(namedType)) {
            for(var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++){
                var interfaceType = _namedType$getInterfa6[_i22];
                collectReferencedTypes(interfaceType, typeSet);
            }
            for(var _i24 = 0, _objectValues2 = _objectValuesMjsDefault.default(namedType.getFields()); _i24 < _objectValues2.length; _i24++){
                var field = _objectValues2[_i24];
                collectReferencedTypes(field.type, typeSet);
                for(var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++){
                    var arg = _field$args2[_i26];
                    collectReferencedTypes(arg.type, typeSet);
                }
            }
        } else if (_definitionMjs.isInputObjectType(namedType)) for(var _i28 = 0, _objectValues4 = _objectValuesMjsDefault.default(namedType.getFields()); _i28 < _objectValues4.length; _i28++){
            var _field = _objectValues4[_i28];
            collectReferencedTypes(_field.type, typeSet);
        }
    }
    return typeSet;
}

},{"../polyfills/find.mjs":"SBobE","../polyfills/arrayFrom.mjs":"V443D","../polyfills/objectValues.mjs":"1MvGb","../polyfills/symbols.mjs":"e9VHS","../jsutils/inspect.mjs":"doI9y","../jsutils/toObjMap.mjs":"5hBPA","../jsutils/devAssert.mjs":"iZbmm","../jsutils/instanceOf.mjs":"e6Poo","../jsutils/isObjectLike.mjs":"6kDBW","./introspection.mjs":"ezRs8","./directives.mjs":"crfoz","./definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"V443D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolsMjs = require("./symbols.mjs");
/* eslint-disable no-redeclare */ // $FlowFixMe[name-already-bound]
var arrayFrom = Array.from || function(obj, mapFn, thisArg) {
    if (obj == null) throw new TypeError('Array.from requires an array-like object - not null or undefined');
     // Is Iterable?
    var iteratorMethod = obj[_symbolsMjs.SYMBOL_ITERATOR];
    if (typeof iteratorMethod === 'function') {
        var iterator = iteratorMethod.call(obj);
        var result = [];
        var step;
        for(var i = 0; !(step = iterator.next()).done; ++i){
            result.push(mapFn.call(thisArg, step.value, i)); // Infinite Iterators could cause forEach to run forever.
            // After a very large number of iterations, produce an error.
            // istanbul ignore if (Too big to actually test)
            if (i > 9999999) throw new TypeError('Near-infinite iteration.');
        }
        return result;
    } // Is Array like?
    var length = obj.length;
    if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
        var _result = [];
        for(var _i = 0; _i < length; ++_i)if (Object.prototype.hasOwnProperty.call(obj, _i)) _result.push(mapFn.call(thisArg, obj[_i], _i));
        return _result;
    }
    return [];
};
exports.default = arrayFrom;

},{"./symbols.mjs":"e9VHS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ezRs8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__Schema", ()=>__Schema
);
parcelHelpers.export(exports, "__Directive", ()=>__Directive
);
parcelHelpers.export(exports, "__DirectiveLocation", ()=>__DirectiveLocation
);
parcelHelpers.export(exports, "__Type", ()=>__Type
);
parcelHelpers.export(exports, "__Field", ()=>__Field
);
parcelHelpers.export(exports, "__InputValue", ()=>__InputValue
);
parcelHelpers.export(exports, "__EnumValue", ()=>__EnumValue
);
parcelHelpers.export(exports, "TypeKind", ()=>TypeKind
);
parcelHelpers.export(exports, "__TypeKind", ()=>__TypeKind
);
parcelHelpers.export(exports, "SchemaMetaFieldDef", ()=>SchemaMetaFieldDef
);
parcelHelpers.export(exports, "TypeMetaFieldDef", ()=>TypeMetaFieldDef
);
parcelHelpers.export(exports, "TypeNameMetaFieldDef", ()=>TypeNameMetaFieldDef
);
parcelHelpers.export(exports, "introspectionTypes", ()=>introspectionTypes
);
parcelHelpers.export(exports, "isIntrospectionType", ()=>isIntrospectionType
);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _printerMjs = require("../language/printer.mjs");
var _directiveLocationMjs = require("../language/directiveLocation.mjs");
var _astFromValueMjs = require("../utilities/astFromValue.mjs");
var _scalarsMjs = require("./scalars.mjs");
var _definitionMjs = require("./definition.mjs");
var __Schema = new _definitionMjs.GraphQLObjectType({
    name: '__Schema',
    description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
    fields: function fields() {
        return {
            description: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(schema) {
                    return schema.description;
                }
            },
            types: {
                description: 'A list of all types supported by this server.',
                type: new _definitionMjs.GraphQLNonNull(new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__Type))),
                resolve: function resolve(schema) {
                    return _objectValuesMjsDefault.default(schema.getTypeMap());
                }
            },
            queryType: {
                description: 'The type that query operations will be rooted at.',
                type: new _definitionMjs.GraphQLNonNull(__Type),
                resolve: function resolve(schema) {
                    return schema.getQueryType();
                }
            },
            mutationType: {
                description: 'If this server supports mutation, the type that mutation operations will be rooted at.',
                type: __Type,
                resolve: function resolve(schema) {
                    return schema.getMutationType();
                }
            },
            subscriptionType: {
                description: 'If this server support subscription, the type that subscription operations will be rooted at.',
                type: __Type,
                resolve: function resolve(schema) {
                    return schema.getSubscriptionType();
                }
            },
            directives: {
                description: 'A list of all directives supported by this server.',
                type: new _definitionMjs.GraphQLNonNull(new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__Directive))),
                resolve: function resolve(schema) {
                    return schema.getDirectives();
                }
            }
        };
    }
});
var __Directive = new _definitionMjs.GraphQLObjectType({
    name: '__Directive',
    description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
    fields: function fields() {
        return {
            name: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLString),
                resolve: function resolve(directive) {
                    return directive.name;
                }
            },
            description: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(directive) {
                    return directive.description;
                }
            },
            isRepeatable: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLBoolean),
                resolve: function resolve(directive) {
                    return directive.isRepeatable;
                }
            },
            locations: {
                type: new _definitionMjs.GraphQLNonNull(new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__DirectiveLocation))),
                resolve: function resolve(directive) {
                    return directive.locations;
                }
            },
            args: {
                type: new _definitionMjs.GraphQLNonNull(new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__InputValue))),
                resolve: function resolve(directive) {
                    return directive.args;
                }
            }
        };
    }
});
var __DirectiveLocation = new _definitionMjs.GraphQLEnumType({
    name: '__DirectiveLocation',
    description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',
    values: {
        QUERY: {
            value: _directiveLocationMjs.DirectiveLocation.QUERY,
            description: 'Location adjacent to a query operation.'
        },
        MUTATION: {
            value: _directiveLocationMjs.DirectiveLocation.MUTATION,
            description: 'Location adjacent to a mutation operation.'
        },
        SUBSCRIPTION: {
            value: _directiveLocationMjs.DirectiveLocation.SUBSCRIPTION,
            description: 'Location adjacent to a subscription operation.'
        },
        FIELD: {
            value: _directiveLocationMjs.DirectiveLocation.FIELD,
            description: 'Location adjacent to a field.'
        },
        FRAGMENT_DEFINITION: {
            value: _directiveLocationMjs.DirectiveLocation.FRAGMENT_DEFINITION,
            description: 'Location adjacent to a fragment definition.'
        },
        FRAGMENT_SPREAD: {
            value: _directiveLocationMjs.DirectiveLocation.FRAGMENT_SPREAD,
            description: 'Location adjacent to a fragment spread.'
        },
        INLINE_FRAGMENT: {
            value: _directiveLocationMjs.DirectiveLocation.INLINE_FRAGMENT,
            description: 'Location adjacent to an inline fragment.'
        },
        VARIABLE_DEFINITION: {
            value: _directiveLocationMjs.DirectiveLocation.VARIABLE_DEFINITION,
            description: 'Location adjacent to a variable definition.'
        },
        SCHEMA: {
            value: _directiveLocationMjs.DirectiveLocation.SCHEMA,
            description: 'Location adjacent to a schema definition.'
        },
        SCALAR: {
            value: _directiveLocationMjs.DirectiveLocation.SCALAR,
            description: 'Location adjacent to a scalar definition.'
        },
        OBJECT: {
            value: _directiveLocationMjs.DirectiveLocation.OBJECT,
            description: 'Location adjacent to an object type definition.'
        },
        FIELD_DEFINITION: {
            value: _directiveLocationMjs.DirectiveLocation.FIELD_DEFINITION,
            description: 'Location adjacent to a field definition.'
        },
        ARGUMENT_DEFINITION: {
            value: _directiveLocationMjs.DirectiveLocation.ARGUMENT_DEFINITION,
            description: 'Location adjacent to an argument definition.'
        },
        INTERFACE: {
            value: _directiveLocationMjs.DirectiveLocation.INTERFACE,
            description: 'Location adjacent to an interface definition.'
        },
        UNION: {
            value: _directiveLocationMjs.DirectiveLocation.UNION,
            description: 'Location adjacent to a union definition.'
        },
        ENUM: {
            value: _directiveLocationMjs.DirectiveLocation.ENUM,
            description: 'Location adjacent to an enum definition.'
        },
        ENUM_VALUE: {
            value: _directiveLocationMjs.DirectiveLocation.ENUM_VALUE,
            description: 'Location adjacent to an enum value definition.'
        },
        INPUT_OBJECT: {
            value: _directiveLocationMjs.DirectiveLocation.INPUT_OBJECT,
            description: 'Location adjacent to an input object type definition.'
        },
        INPUT_FIELD_DEFINITION: {
            value: _directiveLocationMjs.DirectiveLocation.INPUT_FIELD_DEFINITION,
            description: 'Location adjacent to an input object field definition.'
        }
    }
});
var __Type = new _definitionMjs.GraphQLObjectType({
    name: '__Type',
    description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',
    fields: function fields() {
        return {
            kind: {
                type: new _definitionMjs.GraphQLNonNull(__TypeKind),
                resolve: function resolve(type) {
                    if (_definitionMjs.isScalarType(type)) return TypeKind.SCALAR;
                    if (_definitionMjs.isObjectType(type)) return TypeKind.OBJECT;
                    if (_definitionMjs.isInterfaceType(type)) return TypeKind.INTERFACE;
                    if (_definitionMjs.isUnionType(type)) return TypeKind.UNION;
                    if (_definitionMjs.isEnumType(type)) return TypeKind.ENUM;
                    if (_definitionMjs.isInputObjectType(type)) return TypeKind.INPUT_OBJECT;
                    if (_definitionMjs.isListType(type)) return TypeKind.LIST;
                     // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
                    if (_definitionMjs.isNonNullType(type)) return TypeKind.NON_NULL;
                     // istanbul ignore next (Not reachable. All possible types have been considered)
                    _invariantMjsDefault.default(0, "Unexpected type: \"".concat(_inspectMjsDefault.default(type), "\"."));
                }
            },
            name: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(type) {
                    return type.name !== undefined ? type.name : undefined;
                }
            },
            description: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(type) {
                    return type.description !== undefined ? type.description : undefined;
                }
            },
            specifiedByUrl: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(obj) {
                    return obj.specifiedByUrl !== undefined ? obj.specifiedByUrl : undefined;
                }
            },
            fields: {
                type: new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__Field)),
                args: {
                    includeDeprecated: {
                        type: _scalarsMjs.GraphQLBoolean,
                        defaultValue: false
                    }
                },
                resolve: function resolve(type, _ref) {
                    var includeDeprecated = _ref.includeDeprecated;
                    if (_definitionMjs.isObjectType(type) || _definitionMjs.isInterfaceType(type)) {
                        var fields1 = _objectValuesMjsDefault.default(type.getFields());
                        return includeDeprecated ? fields1 : fields1.filter(function(field) {
                            return field.deprecationReason == null;
                        });
                    }
                }
            },
            interfaces: {
                type: new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__Type)),
                resolve: function resolve(type) {
                    if (_definitionMjs.isObjectType(type) || _definitionMjs.isInterfaceType(type)) return type.getInterfaces();
                }
            },
            possibleTypes: {
                type: new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__Type)),
                resolve: function resolve(type, _args, _context, _ref2) {
                    var schema = _ref2.schema;
                    if (_definitionMjs.isAbstractType(type)) return schema.getPossibleTypes(type);
                }
            },
            enumValues: {
                type: new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__EnumValue)),
                args: {
                    includeDeprecated: {
                        type: _scalarsMjs.GraphQLBoolean,
                        defaultValue: false
                    }
                },
                resolve: function resolve(type, _ref3) {
                    var includeDeprecated = _ref3.includeDeprecated;
                    if (_definitionMjs.isEnumType(type)) {
                        var values = type.getValues();
                        return includeDeprecated ? values : values.filter(function(field) {
                            return field.deprecationReason == null;
                        });
                    }
                }
            },
            inputFields: {
                type: new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__InputValue)),
                args: {
                    includeDeprecated: {
                        type: _scalarsMjs.GraphQLBoolean,
                        defaultValue: false
                    }
                },
                resolve: function resolve(type, _ref4) {
                    var includeDeprecated = _ref4.includeDeprecated;
                    if (_definitionMjs.isInputObjectType(type)) {
                        var values = _objectValuesMjsDefault.default(type.getFields());
                        return includeDeprecated ? values : values.filter(function(field) {
                            return field.deprecationReason == null;
                        });
                    }
                }
            },
            ofType: {
                type: __Type,
                resolve: function resolve(type) {
                    return type.ofType !== undefined ? type.ofType : undefined;
                }
            }
        };
    }
});
var __Field = new _definitionMjs.GraphQLObjectType({
    name: '__Field',
    description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',
    fields: function fields2() {
        return {
            name: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLString),
                resolve: function resolve(field) {
                    return field.name;
                }
            },
            description: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(field) {
                    return field.description;
                }
            },
            args: {
                type: new _definitionMjs.GraphQLNonNull(new _definitionMjs.GraphQLList(new _definitionMjs.GraphQLNonNull(__InputValue))),
                args: {
                    includeDeprecated: {
                        type: _scalarsMjs.GraphQLBoolean,
                        defaultValue: false
                    }
                },
                resolve: function resolve(field, _ref5) {
                    var includeDeprecated = _ref5.includeDeprecated;
                    return includeDeprecated ? field.args : field.args.filter(function(arg) {
                        return arg.deprecationReason == null;
                    });
                }
            },
            type: {
                type: new _definitionMjs.GraphQLNonNull(__Type),
                resolve: function resolve(field) {
                    return field.type;
                }
            },
            isDeprecated: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLBoolean),
                resolve: function resolve(field) {
                    return field.deprecationReason != null;
                }
            },
            deprecationReason: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(field) {
                    return field.deprecationReason;
                }
            }
        };
    }
});
var __InputValue = new _definitionMjs.GraphQLObjectType({
    name: '__InputValue',
    description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',
    fields: function fields2() {
        return {
            name: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLString),
                resolve: function resolve(inputValue) {
                    return inputValue.name;
                }
            },
            description: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(inputValue) {
                    return inputValue.description;
                }
            },
            type: {
                type: new _definitionMjs.GraphQLNonNull(__Type),
                resolve: function resolve(inputValue) {
                    return inputValue.type;
                }
            },
            defaultValue: {
                type: _scalarsMjs.GraphQLString,
                description: 'A GraphQL-formatted string representing the default value for this input value.',
                resolve: function resolve(inputValue) {
                    var type = inputValue.type, defaultValue = inputValue.defaultValue;
                    var valueAST = _astFromValueMjs.astFromValue(defaultValue, type);
                    return valueAST ? _printerMjs.print(valueAST) : null;
                }
            },
            isDeprecated: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLBoolean),
                resolve: function resolve(field) {
                    return field.deprecationReason != null;
                }
            },
            deprecationReason: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(obj) {
                    return obj.deprecationReason;
                }
            }
        };
    }
});
var __EnumValue = new _definitionMjs.GraphQLObjectType({
    name: '__EnumValue',
    description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',
    fields: function fields2() {
        return {
            name: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLString),
                resolve: function resolve(enumValue) {
                    return enumValue.name;
                }
            },
            description: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(enumValue) {
                    return enumValue.description;
                }
            },
            isDeprecated: {
                type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLBoolean),
                resolve: function resolve(enumValue) {
                    return enumValue.deprecationReason != null;
                }
            },
            deprecationReason: {
                type: _scalarsMjs.GraphQLString,
                resolve: function resolve(enumValue) {
                    return enumValue.deprecationReason;
                }
            }
        };
    }
});
var TypeKind = Object.freeze({
    SCALAR: 'SCALAR',
    OBJECT: 'OBJECT',
    INTERFACE: 'INTERFACE',
    UNION: 'UNION',
    ENUM: 'ENUM',
    INPUT_OBJECT: 'INPUT_OBJECT',
    LIST: 'LIST',
    NON_NULL: 'NON_NULL'
});
var __TypeKind = new _definitionMjs.GraphQLEnumType({
    name: '__TypeKind',
    description: 'An enum describing what kind of type a given `__Type` is.',
    values: {
        SCALAR: {
            value: TypeKind.SCALAR,
            description: 'Indicates this type is a scalar.'
        },
        OBJECT: {
            value: TypeKind.OBJECT,
            description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'
        },
        INTERFACE: {
            value: TypeKind.INTERFACE,
            description: 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.'
        },
        UNION: {
            value: TypeKind.UNION,
            description: 'Indicates this type is a union. `possibleTypes` is a valid field.'
        },
        ENUM: {
            value: TypeKind.ENUM,
            description: 'Indicates this type is an enum. `enumValues` is a valid field.'
        },
        INPUT_OBJECT: {
            value: TypeKind.INPUT_OBJECT,
            description: 'Indicates this type is an input object. `inputFields` is a valid field.'
        },
        LIST: {
            value: TypeKind.LIST,
            description: 'Indicates this type is a list. `ofType` is a valid field.'
        },
        NON_NULL: {
            value: TypeKind.NON_NULL,
            description: 'Indicates this type is a non-null. `ofType` is a valid field.'
        }
    }
});
var SchemaMetaFieldDef = {
    name: '__schema',
    type: new _definitionMjs.GraphQLNonNull(__Schema),
    description: 'Access the current type schema of this server.',
    args: [],
    resolve: function resolve(_source, _args, _context, _ref6) {
        var schema = _ref6.schema;
        return schema;
    },
    isDeprecated: false,
    deprecationReason: undefined,
    extensions: undefined,
    astNode: undefined
};
var TypeMetaFieldDef = {
    name: '__type',
    type: __Type,
    description: 'Request the type information of a single type.',
    args: [
        {
            name: 'name',
            description: undefined,
            type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLString),
            defaultValue: undefined,
            deprecationReason: undefined,
            extensions: undefined,
            astNode: undefined
        }
    ],
    resolve: function resolve(_source, _ref7, _context, _ref8) {
        var name = _ref7.name;
        var schema = _ref8.schema;
        return schema.getType(name);
    },
    isDeprecated: false,
    deprecationReason: undefined,
    extensions: undefined,
    astNode: undefined
};
var TypeNameMetaFieldDef = {
    name: '__typename',
    type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLString),
    description: 'The name of the current Object type at runtime.',
    args: [],
    resolve: function resolve(_source, _args, _context, _ref9) {
        var parentType = _ref9.parentType;
        return parentType.name;
    },
    isDeprecated: false,
    deprecationReason: undefined,
    extensions: undefined,
    astNode: undefined
};
var introspectionTypes = Object.freeze([
    __Schema,
    __Directive,
    __DirectiveLocation,
    __Type,
    __Field,
    __InputValue,
    __EnumValue,
    __TypeKind
]);
function isIntrospectionType(type) {
    return introspectionTypes.some(function(_ref10) {
        var name = _ref10.name;
        return type.name === name;
    });
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../language/printer.mjs":"bEnFw","../language/directiveLocation.mjs":"dhp4e","../utilities/astFromValue.mjs":"bQ66F","./scalars.mjs":"hLZ76","./definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bQ66F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Produces a GraphQL Value AST given a JavaScript object.
 * Function will match JavaScript/JSON values to GraphQL AST schema format
 * by using suggested GraphQLInputType. For example:
 *
 *     astFromValue("value", GraphQLString)
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * JavaScript values.
 *
 * | JSON Value    | GraphQL Value        |
 * | ------------- | -------------------- |
 * | Object        | Input Object         |
 * | Array         | List                 |
 * | Boolean       | Boolean              |
 * | String        | String / Enum Value  |
 * | Number        | Int / Float          |
 * | Mixed         | Enum Value           |
 * | null          | NullValue            |
 *
 */ parcelHelpers.export(exports, "astFromValue", ()=>astFromValue
);
var _isFiniteMjs = require("../polyfills/isFinite.mjs");
var _isFiniteMjsDefault = parcelHelpers.interopDefault(_isFiniteMjs);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _safeArrayFromMjs = require("../jsutils/safeArrayFrom.mjs");
var _safeArrayFromMjsDefault = parcelHelpers.interopDefault(_safeArrayFromMjs);
var _kindsMjs = require("../language/kinds.mjs");
var _scalarsMjs = require("../type/scalars.mjs");
var _definitionMjs = require("../type/definition.mjs");
function astFromValue(value, type) {
    if (_definitionMjs.isNonNullType(type)) {
        var astValue = astFromValue(value, type.ofType);
        if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kindsMjs.Kind.NULL) return null;
        return astValue;
    } // only explicit null, not undefined, NaN
    if (value === null) return {
        kind: _kindsMjs.Kind.NULL
    };
     // undefined
    if (value === undefined) return null;
     // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
    // the value is not an array, convert the value using the list's item type.
    if (_definitionMjs.isListType(type)) {
        var itemType = type.ofType;
        var items = _safeArrayFromMjsDefault.default(value);
        if (items != null) {
            var valuesNodes = [];
            for(var _i2 = 0; _i2 < items.length; _i2++){
                var item = items[_i2];
                var itemNode = astFromValue(item, itemType);
                if (itemNode != null) valuesNodes.push(itemNode);
            }
            return {
                kind: _kindsMjs.Kind.LIST,
                values: valuesNodes
            };
        }
        return astFromValue(value, itemType);
    } // Populate the fields of the input object by creating ASTs from each value
    // in the JavaScript object according to the fields in the input type.
    if (_definitionMjs.isInputObjectType(type)) {
        if (!_isObjectLikeMjsDefault.default(value)) return null;
        var fieldNodes = [];
        for(var _i4 = 0, _objectValues2 = _objectValuesMjsDefault.default(type.getFields()); _i4 < _objectValues2.length; _i4++){
            var field = _objectValues2[_i4];
            var fieldValue = astFromValue(value[field.name], field.type);
            if (fieldValue) fieldNodes.push({
                kind: _kindsMjs.Kind.OBJECT_FIELD,
                name: {
                    kind: _kindsMjs.Kind.NAME,
                    value: field.name
                },
                value: fieldValue
            });
        }
        return {
            kind: _kindsMjs.Kind.OBJECT,
            fields: fieldNodes
        };
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (_definitionMjs.isLeafType(type)) {
        // Since value is an internally represented value, it must be serialized
        // to an externally represented value before converting into an AST.
        var serialized = type.serialize(value);
        if (serialized == null) return null;
         // Others serialize based on their corresponding JavaScript scalar types.
        if (typeof serialized === 'boolean') return {
            kind: _kindsMjs.Kind.BOOLEAN,
            value: serialized
        };
         // JavaScript numbers can be Int or Float values.
        if (typeof serialized === 'number' && _isFiniteMjsDefault.default(serialized)) {
            var stringNum = String(serialized);
            return integerStringRegExp.test(stringNum) ? {
                kind: _kindsMjs.Kind.INT,
                value: stringNum
            } : {
                kind: _kindsMjs.Kind.FLOAT,
                value: stringNum
            };
        }
        if (typeof serialized === 'string') {
            // Enum types use Enum literals.
            if (_definitionMjs.isEnumType(type)) return {
                kind: _kindsMjs.Kind.ENUM,
                value: serialized
            };
             // ID types can use Int literals.
            if (type === _scalarsMjs.GraphQLID && integerStringRegExp.test(serialized)) return {
                kind: _kindsMjs.Kind.INT,
                value: serialized
            };
            return {
                kind: _kindsMjs.Kind.STRING,
                value: serialized
            };
        }
        throw new TypeError("Cannot convert value to AST: ".concat(_inspectMjsDefault.default(serialized), "."));
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected input type: ' + _inspectMjsDefault.default(type));
}
/**
 * IntValue:
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit ( Digit+ )?
 */ var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

},{"../polyfills/isFinite.mjs":"aH9WZ","../polyfills/objectValues.mjs":"1MvGb","../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../jsutils/isObjectLike.mjs":"6kDBW","../jsutils/safeArrayFrom.mjs":"kM2Ni","../language/kinds.mjs":"3gRFP","../type/scalars.mjs":"hLZ76","../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aH9WZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-redeclare */ // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var isFinitePolyfill = Number.isFinite || function(value) {
    return typeof value === 'number' && isFinite(value);
};
exports.default = isFinitePolyfill;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kM2Ni":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolsMjs = require("../polyfills/symbols.mjs");
function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function _typeof1(obj1) {
        return typeof obj1;
    };
    else _typeof = function _typeof2(obj1) {
        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
    };
    return _typeof(obj);
}
function safeArrayFrom(collection) {
    var mapFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function(item) {
        return item;
    };
    if (collection == null || _typeof(collection) !== 'object') return null;
    if (Array.isArray(collection)) return collection.map(mapFn);
     // Is Iterable?
    var iteratorMethod = collection[_symbolsMjs.SYMBOL_ITERATOR];
    if (typeof iteratorMethod === 'function') {
        // $FlowFixMe[incompatible-use]
        var iterator = iteratorMethod.call(collection);
        var result = [];
        var step;
        for(var i = 0; !(step = iterator.next()).done; ++i)result.push(mapFn(step.value, i));
        return result;
    } // Is Array like?
    var length = collection.length;
    if (typeof length === 'number' && length >= 0 && length % 1 === 0) {
        var _result = [];
        for(var _i = 0; _i < length; ++_i){
            if (!Object.prototype.hasOwnProperty.call(collection, _i)) return null;
            _result.push(mapFn(collection[String(_i)], _i));
        }
        return _result;
    }
    return null;
}
exports.default = safeArrayFrom;

},{"../polyfills/symbols.mjs":"e9VHS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hLZ76":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GraphQLInt", ()=>GraphQLInt
);
parcelHelpers.export(exports, "GraphQLFloat", ()=>GraphQLFloat
);
parcelHelpers.export(exports, "GraphQLString", ()=>GraphQLString
);
parcelHelpers.export(exports, "GraphQLBoolean", ()=>GraphQLBoolean
);
parcelHelpers.export(exports, "GraphQLID", ()=>GraphQLID
);
parcelHelpers.export(exports, "specifiedScalarTypes", ()=>specifiedScalarTypes
);
parcelHelpers.export(exports, "isSpecifiedScalarType", ()=>isSpecifiedScalarType
);
var _isFiniteMjs = require("../polyfills/isFinite.mjs");
var _isFiniteMjsDefault = parcelHelpers.interopDefault(_isFiniteMjs);
var _isIntegerMjs = require("../polyfills/isInteger.mjs");
var _isIntegerMjsDefault = parcelHelpers.interopDefault(_isIntegerMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _kindsMjs = require("../language/kinds.mjs");
var _printerMjs = require("../language/printer.mjs");
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _definitionMjs = require("./definition.mjs"); // As per the GraphQL Spec, Integers are only treated as valid when a valid
// 32-bit signed integer, providing the broadest support across platforms.
//
// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because
// they are internally represented as IEEE 754 doubles.
var MAX_INT = 2147483647;
var MIN_INT = -2147483648;
function serializeInt(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'boolean') return coercedValue ? 1 : 0;
    var num = coercedValue;
    if (typeof coercedValue === 'string' && coercedValue !== '') num = Number(coercedValue);
    if (!_isIntegerMjsDefault.default(num)) throw new _graphQLErrorMjs.GraphQLError("Int cannot represent non-integer value: ".concat(_inspectMjsDefault.default(coercedValue)));
    if (num > MAX_INT || num < MIN_INT) throw new _graphQLErrorMjs.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + _inspectMjsDefault.default(coercedValue));
    return num;
}
function coerceInt(inputValue) {
    if (!_isIntegerMjsDefault.default(inputValue)) throw new _graphQLErrorMjs.GraphQLError("Int cannot represent non-integer value: ".concat(_inspectMjsDefault.default(inputValue)));
    if (inputValue > MAX_INT || inputValue < MIN_INT) throw new _graphQLErrorMjs.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(inputValue));
    return inputValue;
}
var GraphQLInt = new _definitionMjs.GraphQLScalarType({
    name: 'Int',
    description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',
    serialize: serializeInt,
    parseValue: coerceInt,
    parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kindsMjs.Kind.INT) throw new _graphQLErrorMjs.GraphQLError("Int cannot represent non-integer value: ".concat(_printerMjs.print(valueNode)), valueNode);
        var num = parseInt(valueNode.value, 10);
        if (num > MAX_INT || num < MIN_INT) throw new _graphQLErrorMjs.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(valueNode.value), valueNode);
        return num;
    }
});
function serializeFloat(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'boolean') return coercedValue ? 1 : 0;
    var num = coercedValue;
    if (typeof coercedValue === 'string' && coercedValue !== '') num = Number(coercedValue);
    if (!_isFiniteMjsDefault.default(num)) throw new _graphQLErrorMjs.GraphQLError("Float cannot represent non numeric value: ".concat(_inspectMjsDefault.default(coercedValue)));
    return num;
}
function coerceFloat(inputValue) {
    if (!_isFiniteMjsDefault.default(inputValue)) throw new _graphQLErrorMjs.GraphQLError("Float cannot represent non numeric value: ".concat(_inspectMjsDefault.default(inputValue)));
    return inputValue;
}
var GraphQLFloat = new _definitionMjs.GraphQLScalarType({
    name: 'Float',
    description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',
    serialize: serializeFloat,
    parseValue: coerceFloat,
    parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kindsMjs.Kind.FLOAT && valueNode.kind !== _kindsMjs.Kind.INT) throw new _graphQLErrorMjs.GraphQLError("Float cannot represent non numeric value: ".concat(_printerMjs.print(valueNode)), valueNode);
        return parseFloat(valueNode.value);
    }
}); // Support serializing objects with custom valueOf() or toJSON() functions -
// a common way to represent a complex value which can be represented as
// a string (ex: MongoDB id objects).
function serializeObject(outputValue) {
    if (_isObjectLikeMjsDefault.default(outputValue)) {
        if (typeof outputValue.valueOf === 'function') {
            var valueOfResult = outputValue.valueOf();
            if (!_isObjectLikeMjsDefault.default(valueOfResult)) return valueOfResult;
        }
        if (typeof outputValue.toJSON === 'function') // $FlowFixMe[incompatible-use]
        return outputValue.toJSON();
    }
    return outputValue;
}
function serializeString(outputValue) {
    var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
    // attempt to coerce object, function, symbol, or other types as strings.
    if (typeof coercedValue === 'string') return coercedValue;
    if (typeof coercedValue === 'boolean') return coercedValue ? 'true' : 'false';
    if (_isFiniteMjsDefault.default(coercedValue)) return coercedValue.toString();
    throw new _graphQLErrorMjs.GraphQLError("String cannot represent value: ".concat(_inspectMjsDefault.default(outputValue)));
}
function coerceString(inputValue) {
    if (typeof inputValue !== 'string') throw new _graphQLErrorMjs.GraphQLError("String cannot represent a non string value: ".concat(_inspectMjsDefault.default(inputValue)));
    return inputValue;
}
var GraphQLString = new _definitionMjs.GraphQLScalarType({
    name: 'String',
    description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',
    serialize: serializeString,
    parseValue: coerceString,
    parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kindsMjs.Kind.STRING) throw new _graphQLErrorMjs.GraphQLError("String cannot represent a non string value: ".concat(_printerMjs.print(valueNode)), valueNode);
        return valueNode.value;
    }
});
function serializeBoolean(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'boolean') return coercedValue;
    if (_isFiniteMjsDefault.default(coercedValue)) return coercedValue !== 0;
    throw new _graphQLErrorMjs.GraphQLError("Boolean cannot represent a non boolean value: ".concat(_inspectMjsDefault.default(coercedValue)));
}
function coerceBoolean(inputValue) {
    if (typeof inputValue !== 'boolean') throw new _graphQLErrorMjs.GraphQLError("Boolean cannot represent a non boolean value: ".concat(_inspectMjsDefault.default(inputValue)));
    return inputValue;
}
var GraphQLBoolean = new _definitionMjs.GraphQLScalarType({
    name: 'Boolean',
    description: 'The `Boolean` scalar type represents `true` or `false`.',
    serialize: serializeBoolean,
    parseValue: coerceBoolean,
    parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kindsMjs.Kind.BOOLEAN) throw new _graphQLErrorMjs.GraphQLError("Boolean cannot represent a non boolean value: ".concat(_printerMjs.print(valueNode)), valueNode);
        return valueNode.value;
    }
});
function serializeID(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'string') return coercedValue;
    if (_isIntegerMjsDefault.default(coercedValue)) return String(coercedValue);
    throw new _graphQLErrorMjs.GraphQLError("ID cannot represent value: ".concat(_inspectMjsDefault.default(outputValue)));
}
function coerceID(inputValue) {
    if (typeof inputValue === 'string') return inputValue;
    if (_isIntegerMjsDefault.default(inputValue)) return inputValue.toString();
    throw new _graphQLErrorMjs.GraphQLError("ID cannot represent value: ".concat(_inspectMjsDefault.default(inputValue)));
}
var GraphQLID = new _definitionMjs.GraphQLScalarType({
    name: 'ID',
    description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
    serialize: serializeID,
    parseValue: coerceID,
    parseLiteral: function parseLiteral(valueNode) {
        if (valueNode.kind !== _kindsMjs.Kind.STRING && valueNode.kind !== _kindsMjs.Kind.INT) throw new _graphQLErrorMjs.GraphQLError('ID cannot represent a non-string and non-integer value: ' + _printerMjs.print(valueNode), valueNode);
        return valueNode.value;
    }
});
var specifiedScalarTypes = Object.freeze([
    GraphQLString,
    GraphQLInt,
    GraphQLFloat,
    GraphQLBoolean,
    GraphQLID
]);
function isSpecifiedScalarType(type) {
    return specifiedScalarTypes.some(function(_ref) {
        var name = _ref.name;
        return type.name === name;
    });
}

},{"../polyfills/isFinite.mjs":"aH9WZ","../polyfills/isInteger.mjs":"aVOJQ","../jsutils/inspect.mjs":"doI9y","../jsutils/isObjectLike.mjs":"6kDBW","../language/kinds.mjs":"3gRFP","../language/printer.mjs":"bEnFw","../error/GraphQLError.mjs":"a8Vyv","./definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aVOJQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-redeclare */ // $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var isInteger = Number.isInteger || function(value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};
exports.default = isInteger;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"crfoz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Test if the given value is a GraphQL directive.
 */ // eslint-disable-next-line no-redeclare
parcelHelpers.export(exports, "isDirective", ()=>isDirective
);
parcelHelpers.export(exports, "assertDirective", ()=>assertDirective
);
parcelHelpers.export(exports, "GraphQLDirective", ()=>GraphQLDirective
);
parcelHelpers.export(exports, "GraphQLIncludeDirective", ()=>GraphQLIncludeDirective
);
parcelHelpers.export(exports, "GraphQLSkipDirective", ()=>GraphQLSkipDirective
);
parcelHelpers.export(exports, "DEFAULT_DEPRECATION_REASON", ()=>DEFAULT_DEPRECATION_REASON
);
parcelHelpers.export(exports, "GraphQLDeprecatedDirective", ()=>GraphQLDeprecatedDirective
);
parcelHelpers.export(exports, "GraphQLSpecifiedByDirective", ()=>GraphQLSpecifiedByDirective
);
parcelHelpers.export(exports, "specifiedDirectives", ()=>specifiedDirectives
);
parcelHelpers.export(exports, "isSpecifiedDirective", ()=>isSpecifiedDirective
);
var _objectEntriesMjs = require("../polyfills/objectEntries.mjs");
var _objectEntriesMjsDefault = parcelHelpers.interopDefault(_objectEntriesMjs);
var _symbolsMjs = require("../polyfills/symbols.mjs");
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _toObjMapMjs = require("../jsutils/toObjMap.mjs");
var _toObjMapMjsDefault = parcelHelpers.interopDefault(_toObjMapMjs);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _instanceOfMjs = require("../jsutils/instanceOf.mjs");
var _instanceOfMjsDefault = parcelHelpers.interopDefault(_instanceOfMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _defineInspectMjs = require("../jsutils/defineInspect.mjs");
var _defineInspectMjsDefault = parcelHelpers.interopDefault(_defineInspectMjs);
var _directiveLocationMjs = require("../language/directiveLocation.mjs");
var _scalarsMjs = require("./scalars.mjs");
var _definitionMjs = require("./definition.mjs");
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function isDirective(directive) {
    return _instanceOfMjsDefault.default(directive, GraphQLDirective);
}
function assertDirective(directive) {
    if (!isDirective(directive)) throw new Error("Expected ".concat(_inspectMjsDefault.default(directive), " to be a GraphQL directive."));
    return directive;
}
var GraphQLDirective = /*#__PURE__*/ function() {
    function GraphQLDirective1(config) {
        var _config$isRepeatable, _config$args;
        this.name = config.name;
        this.description = config.description;
        this.locations = config.locations;
        this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
        this.extensions = config.extensions && _toObjMapMjsDefault.default(config.extensions);
        this.astNode = config.astNode;
        config.name || _devAssertMjsDefault.default(0, 'Directive must be named.');
        Array.isArray(config.locations) || _devAssertMjsDefault.default(0, "@".concat(config.name, " locations must be an Array."));
        var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {
        };
        _isObjectLikeMjsDefault.default(args) && !Array.isArray(args) || _devAssertMjsDefault.default(0, "@".concat(config.name, " args must be an object with argument names as keys."));
        this.args = _objectEntriesMjsDefault.default(args).map(function(_ref) {
            var argName = _ref[0], argConfig = _ref[1];
            return {
                name: argName,
                description: argConfig.description,
                type: argConfig.type,
                defaultValue: argConfig.defaultValue,
                deprecationReason: argConfig.deprecationReason,
                extensions: argConfig.extensions && _toObjMapMjsDefault.default(argConfig.extensions),
                astNode: argConfig.astNode
            };
        });
    }
    var _proto = GraphQLDirective1.prototype;
    _proto.toConfig = function toConfig() {
        return {
            name: this.name,
            description: this.description,
            locations: this.locations,
            args: _definitionMjs.argsToArgsConfig(this.args),
            isRepeatable: this.isRepeatable,
            extensions: this.extensions,
            astNode: this.astNode
        };
    };
    _proto.toString = function toString() {
        return '@' + this.name;
    };
    _proto.toJSON = function toJSON() {
        return this.toString();
    } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
    ;
    _createClass(GraphQLDirective1, [
        {
            key: _symbolsMjs.SYMBOL_TO_STRING_TAG,
            get: function get() {
                return 'GraphQLDirective';
            }
        }
    ]);
    return GraphQLDirective1;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.
_defineInspectMjsDefault.default(GraphQLDirective);
var GraphQLIncludeDirective = new GraphQLDirective({
    name: 'include',
    description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',
    locations: [
        _directiveLocationMjs.DirectiveLocation.FIELD,
        _directiveLocationMjs.DirectiveLocation.FRAGMENT_SPREAD,
        _directiveLocationMjs.DirectiveLocation.INLINE_FRAGMENT
    ],
    args: {
        if: {
            type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLBoolean),
            description: 'Included when true.'
        }
    }
});
var GraphQLSkipDirective = new GraphQLDirective({
    name: 'skip',
    description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',
    locations: [
        _directiveLocationMjs.DirectiveLocation.FIELD,
        _directiveLocationMjs.DirectiveLocation.FRAGMENT_SPREAD,
        _directiveLocationMjs.DirectiveLocation.INLINE_FRAGMENT
    ],
    args: {
        if: {
            type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLBoolean),
            description: 'Skipped when true.'
        }
    }
});
var DEFAULT_DEPRECATION_REASON = 'No longer supported';
var GraphQLDeprecatedDirective = new GraphQLDirective({
    name: 'deprecated',
    description: 'Marks an element of a GraphQL schema as no longer supported.',
    locations: [
        _directiveLocationMjs.DirectiveLocation.FIELD_DEFINITION,
        _directiveLocationMjs.DirectiveLocation.ARGUMENT_DEFINITION,
        _directiveLocationMjs.DirectiveLocation.INPUT_FIELD_DEFINITION,
        _directiveLocationMjs.DirectiveLocation.ENUM_VALUE
    ],
    args: {
        reason: {
            type: _scalarsMjs.GraphQLString,
            description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',
            defaultValue: DEFAULT_DEPRECATION_REASON
        }
    }
});
var GraphQLSpecifiedByDirective = new GraphQLDirective({
    name: 'specifiedBy',
    description: 'Exposes a URL that specifies the behaviour of this scalar.',
    locations: [
        _directiveLocationMjs.DirectiveLocation.SCALAR
    ],
    args: {
        url: {
            type: new _definitionMjs.GraphQLNonNull(_scalarsMjs.GraphQLString),
            description: 'The URL that specifies the behaviour of this scalar.'
        }
    }
});
var specifiedDirectives = Object.freeze([
    GraphQLIncludeDirective,
    GraphQLSkipDirective,
    GraphQLDeprecatedDirective,
    GraphQLSpecifiedByDirective
]);
function isSpecifiedDirective(directive) {
    return specifiedDirectives.some(function(_ref2) {
        var name = _ref2.name;
        return name === directive.name;
    });
}

},{"../polyfills/objectEntries.mjs":"74LtV","../polyfills/symbols.mjs":"e9VHS","../jsutils/inspect.mjs":"doI9y","../jsutils/toObjMap.mjs":"5hBPA","../jsutils/devAssert.mjs":"iZbmm","../jsutils/instanceOf.mjs":"e6Poo","../jsutils/isObjectLike.mjs":"6kDBW","../jsutils/defineInspect.mjs":"cobf8","../language/directiveLocation.mjs":"dhp4e","./scalars.mjs":"hLZ76","./definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lH2p6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypeInfo", ()=>TypeInfo
);
/**
 * Creates a new visitor instance which maintains a provided TypeInfo instance
 * along with visiting visitor.
 */ parcelHelpers.export(exports, "visitWithTypeInfo", ()=>visitWithTypeInfo
);
var _findMjs = require("../polyfills/find.mjs");
var _findMjsDefault = parcelHelpers.interopDefault(_findMjs);
var _kindsMjs = require("../language/kinds.mjs");
var _astMjs = require("../language/ast.mjs");
var _visitorMjs = require("../language/visitor.mjs");
var _definitionMjs = require("../type/definition.mjs");
var _introspectionMjs = require("../type/introspection.mjs");
var _typeFromASTMjs = require("./typeFromAST.mjs");
var TypeInfo = /*#__PURE__*/ function() {
    function TypeInfo1(schema, // to support non-spec-compliant code bases. You should never need to use it.
    // It may disappear in the future.
    getFieldDefFn, // beginning somewhere other than documents.
    initialType) {
        this._schema = schema;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._defaultValueStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
        if (initialType) {
            if (_definitionMjs.isInputType(initialType)) this._inputTypeStack.push(initialType);
            if (_definitionMjs.isCompositeType(initialType)) this._parentTypeStack.push(initialType);
            if (_definitionMjs.isOutputType(initialType)) this._typeStack.push(initialType);
        }
    }
    var _proto = TypeInfo1.prototype;
    _proto.getType = function getType() {
        if (this._typeStack.length > 0) return this._typeStack[this._typeStack.length - 1];
    };
    _proto.getParentType = function getParentType() {
        if (this._parentTypeStack.length > 0) return this._parentTypeStack[this._parentTypeStack.length - 1];
    };
    _proto.getInputType = function getInputType() {
        if (this._inputTypeStack.length > 0) return this._inputTypeStack[this._inputTypeStack.length - 1];
    };
    _proto.getParentInputType = function getParentInputType() {
        if (this._inputTypeStack.length > 1) return this._inputTypeStack[this._inputTypeStack.length - 2];
    };
    _proto.getFieldDef = function getFieldDef() {
        if (this._fieldDefStack.length > 0) return this._fieldDefStack[this._fieldDefStack.length - 1];
    };
    _proto.getDefaultValue = function getDefaultValue() {
        if (this._defaultValueStack.length > 0) return this._defaultValueStack[this._defaultValueStack.length - 1];
    };
    _proto.getDirective = function getDirective() {
        return this._directive;
    };
    _proto.getArgument = function getArgument() {
        return this._argument;
    };
    _proto.getEnumValue = function getEnumValue() {
        return this._enumValue;
    };
    _proto.enter = function enter(node) {
        var schema = this._schema; // Note: many of the types below are explicitly typed as "mixed" to drop
        // any assumptions of a valid schema to ensure runtime types are properly
        // checked before continuing since TypeInfo is used as part of validation
        // which occurs before guarantees of schema and document validity.
        switch(node.kind){
            case _kindsMjs.Kind.SELECTION_SET:
                var namedType = _definitionMjs.getNamedType(this.getType());
                this._parentTypeStack.push(_definitionMjs.isCompositeType(namedType) ? namedType : undefined);
                break;
            case _kindsMjs.Kind.FIELD:
                var parentType = this.getParentType();
                var fieldDef;
                var fieldType;
                if (parentType) {
                    fieldDef = this._getFieldDef(schema, parentType, node);
                    if (fieldDef) fieldType = fieldDef.type;
                }
                this._fieldDefStack.push(fieldDef);
                this._typeStack.push(_definitionMjs.isOutputType(fieldType) ? fieldType : undefined);
                break;
            case _kindsMjs.Kind.DIRECTIVE:
                this._directive = schema.getDirective(node.name.value);
                break;
            case _kindsMjs.Kind.OPERATION_DEFINITION:
                var type;
                switch(node.operation){
                    case 'query':
                        type = schema.getQueryType();
                        break;
                    case 'mutation':
                        type = schema.getMutationType();
                        break;
                    case 'subscription':
                        type = schema.getSubscriptionType();
                        break;
                }
                this._typeStack.push(_definitionMjs.isObjectType(type) ? type : undefined);
                break;
            case _kindsMjs.Kind.INLINE_FRAGMENT:
            case _kindsMjs.Kind.FRAGMENT_DEFINITION:
                var typeConditionAST = node.typeCondition;
                var outputType = typeConditionAST ? _typeFromASTMjs.typeFromAST(schema, typeConditionAST) : _definitionMjs.getNamedType(this.getType());
                this._typeStack.push(_definitionMjs.isOutputType(outputType) ? outputType : undefined);
                break;
            case _kindsMjs.Kind.VARIABLE_DEFINITION:
                var inputType = _typeFromASTMjs.typeFromAST(schema, node.type);
                this._inputTypeStack.push(_definitionMjs.isInputType(inputType) ? inputType : undefined);
                break;
            case _kindsMjs.Kind.ARGUMENT:
                var _this$getDirective;
                var argDef;
                var argType;
                var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
                if (fieldOrDirective) {
                    argDef = _findMjsDefault.default(fieldOrDirective.args, function(arg) {
                        return arg.name === node.name.value;
                    });
                    if (argDef) argType = argDef.type;
                }
                this._argument = argDef;
                this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);
                this._inputTypeStack.push(_definitionMjs.isInputType(argType) ? argType : undefined);
                break;
            case _kindsMjs.Kind.LIST:
                var listType = _definitionMjs.getNullableType(this.getInputType());
                var itemType = _definitionMjs.isListType(listType) ? listType.ofType : listType; // List positions never have a default value.
                this._defaultValueStack.push(undefined);
                this._inputTypeStack.push(_definitionMjs.isInputType(itemType) ? itemType : undefined);
                break;
            case _kindsMjs.Kind.OBJECT_FIELD:
                var objectType = _definitionMjs.getNamedType(this.getInputType());
                var inputFieldType;
                var inputField;
                if (_definitionMjs.isInputObjectType(objectType)) {
                    inputField = objectType.getFields()[node.name.value];
                    if (inputField) inputFieldType = inputField.type;
                }
                this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);
                this._inputTypeStack.push(_definitionMjs.isInputType(inputFieldType) ? inputFieldType : undefined);
                break;
            case _kindsMjs.Kind.ENUM:
                var enumType = _definitionMjs.getNamedType(this.getInputType());
                var enumValue;
                if (_definitionMjs.isEnumType(enumType)) enumValue = enumType.getValue(node.value);
                this._enumValue = enumValue;
                break;
        }
    };
    _proto.leave = function leave(node) {
        switch(node.kind){
            case _kindsMjs.Kind.SELECTION_SET:
                this._parentTypeStack.pop();
                break;
            case _kindsMjs.Kind.FIELD:
                this._fieldDefStack.pop();
                this._typeStack.pop();
                break;
            case _kindsMjs.Kind.DIRECTIVE:
                this._directive = null;
                break;
            case _kindsMjs.Kind.OPERATION_DEFINITION:
            case _kindsMjs.Kind.INLINE_FRAGMENT:
            case _kindsMjs.Kind.FRAGMENT_DEFINITION:
                this._typeStack.pop();
                break;
            case _kindsMjs.Kind.VARIABLE_DEFINITION:
                this._inputTypeStack.pop();
                break;
            case _kindsMjs.Kind.ARGUMENT:
                this._argument = null;
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
            case _kindsMjs.Kind.LIST:
            case _kindsMjs.Kind.OBJECT_FIELD:
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
            case _kindsMjs.Kind.ENUM:
                this._enumValue = null;
                break;
        }
    };
    return TypeInfo1;
}();
/**
 * Not exactly the same as the executor's definition of getFieldDef, in this
 * statically evaluated environment we do not always have an Object type,
 * and need to handle Interface and Union types.
 */ function getFieldDef(schema, parentType, fieldNode) {
    var name = fieldNode.name.value;
    if (name === _introspectionMjs.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) return _introspectionMjs.SchemaMetaFieldDef;
    if (name === _introspectionMjs.TypeMetaFieldDef.name && schema.getQueryType() === parentType) return _introspectionMjs.TypeMetaFieldDef;
    if (name === _introspectionMjs.TypeNameMetaFieldDef.name && _definitionMjs.isCompositeType(parentType)) return _introspectionMjs.TypeNameMetaFieldDef;
    if (_definitionMjs.isObjectType(parentType) || _definitionMjs.isInterfaceType(parentType)) return parentType.getFields()[name];
}
function visitWithTypeInfo(typeInfo, visitor) {
    return {
        enter: function enter(node) {
            typeInfo.enter(node);
            var fn = _visitorMjs.getVisitFn(visitor, node.kind, /* isLeaving */ false);
            if (fn) {
                var result = fn.apply(visitor, arguments);
                if (result !== undefined) {
                    typeInfo.leave(node);
                    if (_astMjs.isNode(result)) typeInfo.enter(result);
                }
                return result;
            }
        },
        leave: function leave(node) {
            var fn = _visitorMjs.getVisitFn(visitor, node.kind, /* isLeaving */ true);
            var result;
            if (fn) result = fn.apply(visitor, arguments);
            typeInfo.leave(node);
            return result;
        }
    };
}

},{"../polyfills/find.mjs":"SBobE","../language/kinds.mjs":"3gRFP","../language/ast.mjs":"avmJW","../language/visitor.mjs":"bb6mn","../type/definition.mjs":"6PVmH","../type/introspection.mjs":"ezRs8","./typeFromAST.mjs":"3VgoG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3VgoG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given a Schema and an AST node describing a type, return a GraphQLType
 * definition which applies to that type. For example, if provided the parsed
 * AST node for `[User]`, a GraphQLList instance will be returned, containing
 * the type called "User" found in the schema. If a type called "User" is not
 * found in the schema, then undefined will be returned.
 */ /* eslint-disable no-redeclare */ parcelHelpers.export(exports, "typeFromAST", ()=>typeFromAST
);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _kindsMjs = require("../language/kinds.mjs");
var _definitionMjs = require("../type/definition.mjs");
function typeFromAST(schema, typeNode) {
    /* eslint-enable no-redeclare */ var innerType;
    if (typeNode.kind === _kindsMjs.Kind.LIST_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && new _definitionMjs.GraphQLList(innerType);
    }
    if (typeNode.kind === _kindsMjs.Kind.NON_NULL_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && new _definitionMjs.GraphQLNonNull(innerType);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (typeNode.kind === _kindsMjs.Kind.NAMED_TYPE) return schema.getType(typeNode.name.value);
     // istanbul ignore next (Not reachable. All possible type nodes have been considered)
    _invariantMjsDefault.default(0, 'Unexpected type node: ' + _inspectMjsDefault.default(typeNode));
}

},{"../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../language/kinds.mjs":"3gRFP","../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aOTpD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "specifiedRules", ()=>specifiedRules
);
parcelHelpers.export(exports, "specifiedSDLRules", ()=>specifiedSDLRules
);
// Spec Section: "Executable Definitions"
var _executableDefinitionsRuleMjs = require("./rules/ExecutableDefinitionsRule.mjs"); // Spec Section: "Operation Name Uniqueness"
var _uniqueOperationNamesRuleMjs = require("./rules/UniqueOperationNamesRule.mjs"); // Spec Section: "Lone Anonymous Operation"
var _loneAnonymousOperationRuleMjs = require("./rules/LoneAnonymousOperationRule.mjs"); // Spec Section: "Subscriptions with Single Root Field"
var _singleFieldSubscriptionsRuleMjs = require("./rules/SingleFieldSubscriptionsRule.mjs"); // Spec Section: "Fragment Spread Type Existence"
var _knownTypeNamesRuleMjs = require("./rules/KnownTypeNamesRule.mjs"); // Spec Section: "Fragments on Composite Types"
var _fragmentsOnCompositeTypesRuleMjs = require("./rules/FragmentsOnCompositeTypesRule.mjs"); // Spec Section: "Variables are Input Types"
var _variablesAreInputTypesRuleMjs = require("./rules/VariablesAreInputTypesRule.mjs"); // Spec Section: "Leaf Field Selections"
var _scalarLeafsRuleMjs = require("./rules/ScalarLeafsRule.mjs"); // Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"
var _fieldsOnCorrectTypeRuleMjs = require("./rules/FieldsOnCorrectTypeRule.mjs"); // Spec Section: "Fragment Name Uniqueness"
var _uniqueFragmentNamesRuleMjs = require("./rules/UniqueFragmentNamesRule.mjs"); // Spec Section: "Fragment spread target defined"
var _knownFragmentNamesRuleMjs = require("./rules/KnownFragmentNamesRule.mjs"); // Spec Section: "Fragments must be used"
var _noUnusedFragmentsRuleMjs = require("./rules/NoUnusedFragmentsRule.mjs"); // Spec Section: "Fragment spread is possible"
var _possibleFragmentSpreadsRuleMjs = require("./rules/PossibleFragmentSpreadsRule.mjs"); // Spec Section: "Fragments must not form cycles"
var _noFragmentCyclesRuleMjs = require("./rules/NoFragmentCyclesRule.mjs"); // Spec Section: "Variable Uniqueness"
var _uniqueVariableNamesRuleMjs = require("./rules/UniqueVariableNamesRule.mjs"); // Spec Section: "All Variable Used Defined"
var _noUndefinedVariablesRuleMjs = require("./rules/NoUndefinedVariablesRule.mjs"); // Spec Section: "All Variables Used"
var _noUnusedVariablesRuleMjs = require("./rules/NoUnusedVariablesRule.mjs"); // Spec Section: "Directives Are Defined"
var _knownDirectivesRuleMjs = require("./rules/KnownDirectivesRule.mjs"); // Spec Section: "Directives Are Unique Per Location"
var _uniqueDirectivesPerLocationRuleMjs = require("./rules/UniqueDirectivesPerLocationRule.mjs"); // Spec Section: "Argument Names"
var _knownArgumentNamesRuleMjs = require("./rules/KnownArgumentNamesRule.mjs"); // Spec Section: "Argument Uniqueness"
var _uniqueArgumentNamesRuleMjs = require("./rules/UniqueArgumentNamesRule.mjs"); // Spec Section: "Value Type Correctness"
var _valuesOfCorrectTypeRuleMjs = require("./rules/ValuesOfCorrectTypeRule.mjs"); // Spec Section: "Argument Optionality"
var _providedRequiredArgumentsRuleMjs = require("./rules/ProvidedRequiredArgumentsRule.mjs"); // Spec Section: "All Variable Usages Are Allowed"
var _variablesInAllowedPositionRuleMjs = require("./rules/VariablesInAllowedPositionRule.mjs"); // Spec Section: "Field Selection Merging"
var _overlappingFieldsCanBeMergedRuleMjs = require("./rules/OverlappingFieldsCanBeMergedRule.mjs"); // Spec Section: "Input Object Field Uniqueness"
var _uniqueInputFieldNamesRuleMjs = require("./rules/UniqueInputFieldNamesRule.mjs"); // SDL-specific validation rules
var _loneSchemaDefinitionRuleMjs = require("./rules/LoneSchemaDefinitionRule.mjs");
var _uniqueOperationTypesRuleMjs = require("./rules/UniqueOperationTypesRule.mjs");
var _uniqueTypeNamesRuleMjs = require("./rules/UniqueTypeNamesRule.mjs");
var _uniqueEnumValueNamesRuleMjs = require("./rules/UniqueEnumValueNamesRule.mjs");
var _uniqueFieldDefinitionNamesRuleMjs = require("./rules/UniqueFieldDefinitionNamesRule.mjs");
var _uniqueDirectiveNamesRuleMjs = require("./rules/UniqueDirectiveNamesRule.mjs");
var _possibleTypeExtensionsRuleMjs = require("./rules/PossibleTypeExtensionsRule.mjs");
var specifiedRules = Object.freeze([_executableDefinitionsRuleMjs.ExecutableDefinitionsRule, _uniqueOperationNamesRuleMjs.UniqueOperationNamesRule, _loneAnonymousOperationRuleMjs.LoneAnonymousOperationRule, _singleFieldSubscriptionsRuleMjs.SingleFieldSubscriptionsRule, _knownTypeNamesRuleMjs.KnownTypeNamesRule, _fragmentsOnCompositeTypesRuleMjs.FragmentsOnCompositeTypesRule, _variablesAreInputTypesRuleMjs.VariablesAreInputTypesRule, _scalarLeafsRuleMjs.ScalarLeafsRule, _fieldsOnCorrectTypeRuleMjs.FieldsOnCorrectTypeRule, _uniqueFragmentNamesRuleMjs.UniqueFragmentNamesRule, _knownFragmentNamesRuleMjs.KnownFragmentNamesRule, _noUnusedFragmentsRuleMjs.NoUnusedFragmentsRule, _possibleFragmentSpreadsRuleMjs.PossibleFragmentSpreadsRule, _noFragmentCyclesRuleMjs.NoFragmentCyclesRule, _uniqueVariableNamesRuleMjs.UniqueVariableNamesRule, _noUndefinedVariablesRuleMjs.NoUndefinedVariablesRule, _noUnusedVariablesRuleMjs.NoUnusedVariablesRule, _knownDirectivesRuleMjs.KnownDirectivesRule, _uniqueDirectivesPerLocationRuleMjs.UniqueDirectivesPerLocationRule, _knownArgumentNamesRuleMjs.KnownArgumentNamesRule, _uniqueArgumentNamesRuleMjs.UniqueArgumentNamesRule, _valuesOfCorrectTypeRuleMjs.ValuesOfCorrectTypeRule, _providedRequiredArgumentsRuleMjs.ProvidedRequiredArgumentsRule, _variablesInAllowedPositionRuleMjs.VariablesInAllowedPositionRule, _overlappingFieldsCanBeMergedRuleMjs.OverlappingFieldsCanBeMergedRule, _uniqueInputFieldNamesRuleMjs.UniqueInputFieldNamesRule]);
var specifiedSDLRules = Object.freeze([_loneSchemaDefinitionRuleMjs.LoneSchemaDefinitionRule, _uniqueOperationTypesRuleMjs.UniqueOperationTypesRule, _uniqueTypeNamesRuleMjs.UniqueTypeNamesRule, _uniqueEnumValueNamesRuleMjs.UniqueEnumValueNamesRule, _uniqueFieldDefinitionNamesRuleMjs.UniqueFieldDefinitionNamesRule, _uniqueDirectiveNamesRuleMjs.UniqueDirectiveNamesRule, _knownTypeNamesRuleMjs.KnownTypeNamesRule, _knownDirectivesRuleMjs.KnownDirectivesRule, _uniqueDirectivesPerLocationRuleMjs.UniqueDirectivesPerLocationRule, _possibleTypeExtensionsRuleMjs.PossibleTypeExtensionsRule, _knownArgumentNamesRuleMjs.KnownArgumentNamesOnDirectivesRule, _uniqueArgumentNamesRuleMjs.UniqueArgumentNamesRule, _uniqueInputFieldNamesRuleMjs.UniqueInputFieldNamesRule, _providedRequiredArgumentsRuleMjs.ProvidedRequiredArgumentsOnDirectivesRule]);

},{"./rules/ExecutableDefinitionsRule.mjs":"eeM2X","./rules/UniqueOperationNamesRule.mjs":"jcmsJ","./rules/LoneAnonymousOperationRule.mjs":"8iQUA","./rules/SingleFieldSubscriptionsRule.mjs":"arkF3","./rules/KnownTypeNamesRule.mjs":"TpYBe","./rules/FragmentsOnCompositeTypesRule.mjs":"kzrs3","./rules/VariablesAreInputTypesRule.mjs":"kfrWg","./rules/ScalarLeafsRule.mjs":"5twor","./rules/FieldsOnCorrectTypeRule.mjs":"cnA9P","./rules/UniqueFragmentNamesRule.mjs":"lylFy","./rules/KnownFragmentNamesRule.mjs":"lJvph","./rules/NoUnusedFragmentsRule.mjs":"5J9IW","./rules/PossibleFragmentSpreadsRule.mjs":"f8i4C","./rules/NoFragmentCyclesRule.mjs":"5VzA0","./rules/UniqueVariableNamesRule.mjs":"ezCLx","./rules/NoUndefinedVariablesRule.mjs":"afnlY","./rules/NoUnusedVariablesRule.mjs":"uxdB6","./rules/KnownDirectivesRule.mjs":"1KNrM","./rules/UniqueDirectivesPerLocationRule.mjs":"7d7Xo","./rules/KnownArgumentNamesRule.mjs":"37m0w","./rules/UniqueArgumentNamesRule.mjs":"h9gNL","./rules/ValuesOfCorrectTypeRule.mjs":"7Qfmy","./rules/ProvidedRequiredArgumentsRule.mjs":"iYWY7","./rules/VariablesInAllowedPositionRule.mjs":"mc85l","./rules/OverlappingFieldsCanBeMergedRule.mjs":"kaqI6","./rules/UniqueInputFieldNamesRule.mjs":"1pQoQ","./rules/LoneSchemaDefinitionRule.mjs":"az4LR","./rules/UniqueOperationTypesRule.mjs":"dtHU7","./rules/UniqueTypeNamesRule.mjs":"3hl9V","./rules/UniqueEnumValueNamesRule.mjs":"jOBgt","./rules/UniqueFieldDefinitionNamesRule.mjs":"glazh","./rules/UniqueDirectiveNamesRule.mjs":"6ab3O","./rules/PossibleTypeExtensionsRule.mjs":"1aIrI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eeM2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Executable definitions
 *
 * A GraphQL document is only valid for execution if all definitions are either
 * operation or fragment definitions.
 */ parcelHelpers.export(exports, "ExecutableDefinitionsRule", ()=>ExecutableDefinitionsRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _predicatesMjs = require("../../language/predicates.mjs");
function ExecutableDefinitionsRule(context) {
    return {
        Document: function Document1(node) {
            for(var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++){
                var definition = _node$definitions2[_i2];
                if (!_predicatesMjs.isExecutableDefinitionNode(definition)) {
                    var defName = definition.kind === _kindsMjs.Kind.SCHEMA_DEFINITION || definition.kind === _kindsMjs.Kind.SCHEMA_EXTENSION ? 'schema' : '"' + definition.name.value + '"';
                    context.reportError(new _graphQLErrorMjs.GraphQLError("The ".concat(defName, " definition is not executable."), definition));
                }
            }
            return false;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../language/predicates.mjs":"6AiDB","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6AiDB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isDefinitionNode", ()=>isDefinitionNode
);
parcelHelpers.export(exports, "isExecutableDefinitionNode", ()=>isExecutableDefinitionNode
);
parcelHelpers.export(exports, "isSelectionNode", ()=>isSelectionNode
);
parcelHelpers.export(exports, "isValueNode", ()=>isValueNode
);
parcelHelpers.export(exports, "isTypeNode", ()=>isTypeNode
);
parcelHelpers.export(exports, "isTypeSystemDefinitionNode", ()=>isTypeSystemDefinitionNode
);
parcelHelpers.export(exports, "isTypeDefinitionNode", ()=>isTypeDefinitionNode
);
parcelHelpers.export(exports, "isTypeSystemExtensionNode", ()=>isTypeSystemExtensionNode
);
parcelHelpers.export(exports, "isTypeExtensionNode", ()=>isTypeExtensionNode
);
var _kindsMjs = require("./kinds.mjs");
function isDefinitionNode(node) {
    return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
}
function isExecutableDefinitionNode(node) {
    return node.kind === _kindsMjs.Kind.OPERATION_DEFINITION || node.kind === _kindsMjs.Kind.FRAGMENT_DEFINITION;
}
function isSelectionNode(node) {
    return node.kind === _kindsMjs.Kind.FIELD || node.kind === _kindsMjs.Kind.FRAGMENT_SPREAD || node.kind === _kindsMjs.Kind.INLINE_FRAGMENT;
}
function isValueNode(node) {
    return node.kind === _kindsMjs.Kind.VARIABLE || node.kind === _kindsMjs.Kind.INT || node.kind === _kindsMjs.Kind.FLOAT || node.kind === _kindsMjs.Kind.STRING || node.kind === _kindsMjs.Kind.BOOLEAN || node.kind === _kindsMjs.Kind.NULL || node.kind === _kindsMjs.Kind.ENUM || node.kind === _kindsMjs.Kind.LIST || node.kind === _kindsMjs.Kind.OBJECT;
}
function isTypeNode(node) {
    return node.kind === _kindsMjs.Kind.NAMED_TYPE || node.kind === _kindsMjs.Kind.LIST_TYPE || node.kind === _kindsMjs.Kind.NON_NULL_TYPE;
}
function isTypeSystemDefinitionNode(node) {
    return node.kind === _kindsMjs.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kindsMjs.Kind.DIRECTIVE_DEFINITION;
}
function isTypeDefinitionNode(node) {
    return node.kind === _kindsMjs.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kindsMjs.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kindsMjs.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kindsMjs.Kind.UNION_TYPE_DEFINITION || node.kind === _kindsMjs.Kind.ENUM_TYPE_DEFINITION || node.kind === _kindsMjs.Kind.INPUT_OBJECT_TYPE_DEFINITION;
}
function isTypeSystemExtensionNode(node) {
    return node.kind === _kindsMjs.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
}
function isTypeExtensionNode(node) {
    return node.kind === _kindsMjs.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kindsMjs.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kindsMjs.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kindsMjs.Kind.UNION_TYPE_EXTENSION || node.kind === _kindsMjs.Kind.ENUM_TYPE_EXTENSION || node.kind === _kindsMjs.Kind.INPUT_OBJECT_TYPE_EXTENSION;
}

},{"./kinds.mjs":"3gRFP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jcmsJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique operation names
 *
 * A GraphQL document is only valid if all defined operations have unique names.
 */ parcelHelpers.export(exports, "UniqueOperationNamesRule", ()=>UniqueOperationNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueOperationNamesRule(context) {
    var knownOperationNames = Object.create(null);
    return {
        OperationDefinition: function OperationDefinition(node) {
            var operationName = node.name;
            if (operationName) {
                if (knownOperationNames[operationName.value]) context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one operation named \"".concat(operationName.value, "\"."), [
                    knownOperationNames[operationName.value],
                    operationName
                ]));
                else knownOperationNames[operationName.value] = operationName;
            }
            return false;
        },
        FragmentDefinition: function FragmentDefinition() {
            return false;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8iQUA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Lone anonymous operation
 *
 * A GraphQL document is only valid if when it contains an anonymous operation
 * (the query short-hand) that it contains only that one operation definition.
 */ parcelHelpers.export(exports, "LoneAnonymousOperationRule", ()=>LoneAnonymousOperationRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
function LoneAnonymousOperationRule(context) {
    var operationCount = 0;
    return {
        Document: function Document1(node) {
            operationCount = node.definitions.filter(function(definition) {
                return definition.kind === _kindsMjs.Kind.OPERATION_DEFINITION;
            }).length;
        },
        OperationDefinition: function OperationDefinition(node) {
            if (!node.name && operationCount > 1) context.reportError(new _graphQLErrorMjs.GraphQLError('This anonymous operation must be the only defined operation.', node));
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"arkF3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Subscriptions must only include one field.
 *
 * A GraphQL subscription is valid only if it contains a single root field.
 */ parcelHelpers.export(exports, "SingleFieldSubscriptionsRule", ()=>SingleFieldSubscriptionsRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function SingleFieldSubscriptionsRule(context) {
    return {
        OperationDefinition: function OperationDefinition(node) {
            if (node.operation === 'subscription') {
                if (node.selectionSet.selections.length !== 1) context.reportError(new _graphQLErrorMjs.GraphQLError(node.name ? "Subscription \"".concat(node.name.value, "\" must select only one top level field.") : 'Anonymous Subscription must select only one top level field.', node.selectionSet.selections.slice(1)));
            }
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"TpYBe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Known type names
 *
 * A GraphQL document is only valid if referenced types (specifically
 * variable definitions and fragment conditions) are defined by the type schema.
 */ parcelHelpers.export(exports, "KnownTypeNamesRule", ()=>KnownTypeNamesRule
);
var _didYouMeanMjs = require("../../jsutils/didYouMean.mjs");
var _didYouMeanMjsDefault = parcelHelpers.interopDefault(_didYouMeanMjs);
var _suggestionListMjs = require("../../jsutils/suggestionList.mjs");
var _suggestionListMjsDefault = parcelHelpers.interopDefault(_suggestionListMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _predicatesMjs = require("../../language/predicates.mjs");
var _scalarsMjs = require("../../type/scalars.mjs");
var _introspectionMjs = require("../../type/introspection.mjs");
function KnownTypeNamesRule(context) {
    var schema = context.getSchema();
    var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
    var definedTypes = Object.create(null);
    for(var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++){
        var def = _context$getDocument$2[_i2];
        if (_predicatesMjs.isTypeDefinitionNode(def)) definedTypes[def.name.value] = true;
    }
    var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));
    return {
        NamedType: function NamedType(node, _1, parent, _2, ancestors) {
            var typeName = node.name.value;
            if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
                var _ancestors$;
                var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
                var isSDL = definitionNode != null && isSDLNode(definitionNode);
                if (isSDL && isStandardTypeName(typeName)) return;
                var suggestedTypes = _suggestionListMjsDefault.default(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Unknown type \"".concat(typeName, "\".") + _didYouMeanMjsDefault.default(suggestedTypes), node));
            }
        }
    };
}
var standardTypeNames = [].concat(_scalarsMjs.specifiedScalarTypes, _introspectionMjs.introspectionTypes).map(function(type) {
    return type.name;
});
function isStandardTypeName(typeName) {
    return standardTypeNames.indexOf(typeName) !== -1;
}
function isSDLNode(value) {
    return !Array.isArray(value) && (_predicatesMjs.isTypeSystemDefinitionNode(value) || _predicatesMjs.isTypeSystemExtensionNode(value));
}

},{"../../jsutils/didYouMean.mjs":"gdq7w","../../jsutils/suggestionList.mjs":"fxmKg","../../error/GraphQLError.mjs":"a8Vyv","../../language/predicates.mjs":"6AiDB","../../type/scalars.mjs":"hLZ76","../../type/introspection.mjs":"ezRs8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kzrs3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Fragments on composite type
 *
 * Fragments use a type condition to determine if they apply, since fragments
 * can only be spread into a composite type (object, interface, or union), the
 * type condition must also be a composite type.
 */ parcelHelpers.export(exports, "FragmentsOnCompositeTypesRule", ()=>FragmentsOnCompositeTypesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _printerMjs = require("../../language/printer.mjs");
var _definitionMjs = require("../../type/definition.mjs");
var _typeFromASTMjs = require("../../utilities/typeFromAST.mjs");
function FragmentsOnCompositeTypesRule(context) {
    return {
        InlineFragment: function InlineFragment(node) {
            var typeCondition = node.typeCondition;
            if (typeCondition) {
                var type = _typeFromASTMjs.typeFromAST(context.getSchema(), typeCondition);
                if (type && !_definitionMjs.isCompositeType(type)) {
                    var typeStr = _printerMjs.print(typeCondition);
                    context.reportError(new _graphQLErrorMjs.GraphQLError("Fragment cannot condition on non composite type \"".concat(typeStr, "\"."), typeCondition));
                }
            }
        },
        FragmentDefinition: function FragmentDefinition(node) {
            var type = _typeFromASTMjs.typeFromAST(context.getSchema(), node.typeCondition);
            if (type && !_definitionMjs.isCompositeType(type)) {
                var typeStr = _printerMjs.print(node.typeCondition);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Fragment \"".concat(node.name.value, "\" cannot condition on non composite type \"").concat(typeStr, "\"."), node.typeCondition));
            }
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","../../language/printer.mjs":"bEnFw","../../type/definition.mjs":"6PVmH","../../utilities/typeFromAST.mjs":"3VgoG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kfrWg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Variables are input types
 *
 * A GraphQL operation is only valid if all the variables it defines are of
 * input types (scalar, enum, or input object).
 */ parcelHelpers.export(exports, "VariablesAreInputTypesRule", ()=>VariablesAreInputTypesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _printerMjs = require("../../language/printer.mjs");
var _definitionMjs = require("../../type/definition.mjs");
var _typeFromASTMjs = require("../../utilities/typeFromAST.mjs");
function VariablesAreInputTypesRule(context) {
    return {
        VariableDefinition: function VariableDefinition(node) {
            var type = _typeFromASTMjs.typeFromAST(context.getSchema(), node.type);
            if (type && !_definitionMjs.isInputType(type)) {
                var variableName = node.variable.name.value;
                var typeName = _printerMjs.print(node.type);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Variable \"$".concat(variableName, "\" cannot be non-input type \"").concat(typeName, "\"."), node.type));
            }
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","../../language/printer.mjs":"bEnFw","../../type/definition.mjs":"6PVmH","../../utilities/typeFromAST.mjs":"3VgoG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5twor":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Scalar leafs
 *
 * A GraphQL document is valid only if all leaf fields (fields without
 * sub selections) are of scalar or enum types.
 */ parcelHelpers.export(exports, "ScalarLeafsRule", ()=>ScalarLeafsRule
);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _definitionMjs = require("../../type/definition.mjs");
function ScalarLeafsRule(context) {
    return {
        Field: function Field(node) {
            var type = context.getType();
            var selectionSet = node.selectionSet;
            if (type) {
                if (_definitionMjs.isLeafType(_definitionMjs.getNamedType(type))) {
                    if (selectionSet) {
                        var fieldName = node.name.value;
                        var typeStr = _inspectMjsDefault.default(type);
                        context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(fieldName, "\" must not have a selection since type \"").concat(typeStr, "\" has no subfields."), selectionSet));
                    }
                } else if (!selectionSet) {
                    var _fieldName = node.name.value;
                    var _typeStr = _inspectMjsDefault.default(type);
                    context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(_fieldName, "\" of type \"").concat(_typeStr, "\" must have a selection of subfields. Did you mean \"").concat(_fieldName, " { ... }\"?"), node));
                }
            }
        }
    };
}

},{"../../jsutils/inspect.mjs":"doI9y","../../error/GraphQLError.mjs":"a8Vyv","../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cnA9P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Fields on correct type
 *
 * A GraphQL document is only valid if all fields selected are defined by the
 * parent type, or are an allowed meta field such as __typename.
 */ parcelHelpers.export(exports, "FieldsOnCorrectTypeRule", ()=>FieldsOnCorrectTypeRule
);
var _arrayFromMjs = require("../../polyfills/arrayFrom.mjs");
var _arrayFromMjsDefault = parcelHelpers.interopDefault(_arrayFromMjs);
var _didYouMeanMjs = require("../../jsutils/didYouMean.mjs");
var _didYouMeanMjsDefault = parcelHelpers.interopDefault(_didYouMeanMjs);
var _suggestionListMjs = require("../../jsutils/suggestionList.mjs");
var _suggestionListMjsDefault = parcelHelpers.interopDefault(_suggestionListMjs);
var _naturalCompareMjs = require("../../jsutils/naturalCompare.mjs");
var _naturalCompareMjsDefault = parcelHelpers.interopDefault(_naturalCompareMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _definitionMjs = require("../../type/definition.mjs");
function FieldsOnCorrectTypeRule(context) {
    return {
        Field: function Field(node) {
            var type = context.getParentType();
            if (type) {
                var fieldDef = context.getFieldDef();
                if (!fieldDef) {
                    // This field doesn't exist, lets look for suggestions.
                    var schema = context.getSchema();
                    var fieldName = node.name.value; // First determine if there are any suggested types to condition on.
                    var suggestion = _didYouMeanMjsDefault.default('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?
                    if (suggestion === '') suggestion = _didYouMeanMjsDefault.default(getSuggestedFieldNames(type, fieldName));
                     // Report an error, including helpful suggestions.
                    context.reportError(new _graphQLErrorMjs.GraphQLError("Cannot query field \"".concat(fieldName, "\" on type \"").concat(type.name, "\".") + suggestion, node));
                }
            }
        }
    };
}
/**
 * Go through all of the implementations of type, as well as the interfaces that
 * they implement. If any of those types include the provided field, suggest them,
 * sorted by how often the type is referenced.
 */ function getSuggestedTypeNames(schema, type, fieldName) {
    if (!_definitionMjs.isAbstractType(type)) // Must be an Object type, which does not have possible fields.
    return [];
    var suggestedTypes = new Set();
    var usageCount = Object.create(null);
    for(var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++){
        var possibleType = _schema$getPossibleTy2[_i2];
        if (!possibleType.getFields()[fieldName]) continue;
         // This object type defines this field.
        suggestedTypes.add(possibleType);
        usageCount[possibleType.name] = 1;
        for(var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++){
            var _usageCount$possibleI;
            var possibleInterface = _possibleType$getInte2[_i4];
            if (!possibleInterface.getFields()[fieldName]) continue;
             // This interface type defines this field.
            suggestedTypes.add(possibleInterface);
            usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
        }
    }
    return _arrayFromMjsDefault.default(suggestedTypes).sort(function(typeA, typeB) {
        // Suggest both interface and object types based on how common they are.
        var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
        if (usageCountDiff !== 0) return usageCountDiff;
         // Suggest super types first followed by subtypes
        if (_definitionMjs.isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) return -1;
        if (_definitionMjs.isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) return 1;
        return _naturalCompareMjsDefault.default(typeA.name, typeB.name);
    }).map(function(x) {
        return x.name;
    });
}
/**
 * For the field name provided, determine if there are any similar field names
 * that may be the result of a typo.
 */ function getSuggestedFieldNames(type, fieldName) {
    if (_definitionMjs.isObjectType(type) || _definitionMjs.isInterfaceType(type)) {
        var possibleFieldNames = Object.keys(type.getFields());
        return _suggestionListMjsDefault.default(fieldName, possibleFieldNames);
    } // Otherwise, must be a Union type, which does not define fields.
    return [];
}

},{"../../polyfills/arrayFrom.mjs":"V443D","../../jsutils/didYouMean.mjs":"gdq7w","../../jsutils/suggestionList.mjs":"fxmKg","../../jsutils/naturalCompare.mjs":"bpKPt","../../error/GraphQLError.mjs":"a8Vyv","../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lylFy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique fragment names
 *
 * A GraphQL document is only valid if all defined fragments have unique names.
 */ parcelHelpers.export(exports, "UniqueFragmentNamesRule", ()=>UniqueFragmentNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueFragmentNamesRule(context) {
    var knownFragmentNames = Object.create(null);
    return {
        OperationDefinition: function OperationDefinition() {
            return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
            var fragmentName = node.name.value;
            if (knownFragmentNames[fragmentName]) context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one fragment named \"".concat(fragmentName, "\"."), [
                knownFragmentNames[fragmentName],
                node.name
            ]));
            else knownFragmentNames[fragmentName] = node.name;
            return false;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lJvph":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Known fragment names
 *
 * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
 * to fragments defined in the same document.
 */ parcelHelpers.export(exports, "KnownFragmentNamesRule", ()=>KnownFragmentNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function KnownFragmentNamesRule(context) {
    return {
        FragmentSpread: function FragmentSpread(node) {
            var fragmentName = node.name.value;
            var fragment = context.getFragment(fragmentName);
            if (!fragment) context.reportError(new _graphQLErrorMjs.GraphQLError("Unknown fragment \"".concat(fragmentName, "\"."), node.name));
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5J9IW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * No unused fragments
 *
 * A GraphQL document is only valid if all fragment definitions are spread
 * within operations, or spread within other fragments spread within operations.
 */ parcelHelpers.export(exports, "NoUnusedFragmentsRule", ()=>NoUnusedFragmentsRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function NoUnusedFragmentsRule(context) {
    var operationDefs = [];
    var fragmentDefs = [];
    return {
        OperationDefinition: function OperationDefinition(node) {
            operationDefs.push(node);
            return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
            fragmentDefs.push(node);
            return false;
        },
        Document: {
            leave: function leave() {
                var fragmentNameUsed = Object.create(null);
                for(var _i2 = 0; _i2 < operationDefs.length; _i2++){
                    var operation = operationDefs[_i2];
                    for(var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++){
                        var fragment = _context$getRecursive2[_i4];
                        fragmentNameUsed[fragment.name.value] = true;
                    }
                }
                for(var _i6 = 0; _i6 < fragmentDefs.length; _i6++){
                    var fragmentDef = fragmentDefs[_i6];
                    var fragName = fragmentDef.name.value;
                    if (fragmentNameUsed[fragName] !== true) context.reportError(new _graphQLErrorMjs.GraphQLError("Fragment \"".concat(fragName, "\" is never used."), fragmentDef));
                }
            }
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f8i4C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Possible fragment spread
 *
 * A fragment spread is only valid if the type condition could ever possibly
 * be true: if there is a non-empty intersection of the possible parent types,
 * and possible types which pass the type condition.
 */ parcelHelpers.export(exports, "PossibleFragmentSpreadsRule", ()=>PossibleFragmentSpreadsRule
);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _definitionMjs = require("../../type/definition.mjs");
var _typeFromASTMjs = require("../../utilities/typeFromAST.mjs");
var _typeComparatorsMjs = require("../../utilities/typeComparators.mjs");
function PossibleFragmentSpreadsRule(context) {
    return {
        InlineFragment: function InlineFragment(node) {
            var fragType = context.getType();
            var parentType = context.getParentType();
            if (_definitionMjs.isCompositeType(fragType) && _definitionMjs.isCompositeType(parentType) && !_typeComparatorsMjs.doTypesOverlap(context.getSchema(), fragType, parentType)) {
                var parentTypeStr = _inspectMjsDefault.default(parentType);
                var fragTypeStr = _inspectMjsDefault.default(fragType);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Fragment cannot be spread here as objects of type \"".concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
            }
        },
        FragmentSpread: function FragmentSpread(node) {
            var fragName = node.name.value;
            var fragType = getFragmentType(context, fragName);
            var parentType = context.getParentType();
            if (fragType && parentType && !_typeComparatorsMjs.doTypesOverlap(context.getSchema(), fragType, parentType)) {
                var parentTypeStr = _inspectMjsDefault.default(parentType);
                var fragTypeStr = _inspectMjsDefault.default(fragType);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Fragment \"".concat(fragName, "\" cannot be spread here as objects of type \"").concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), node));
            }
        }
    };
}
function getFragmentType(context, name) {
    var frag = context.getFragment(name);
    if (frag) {
        var type = _typeFromASTMjs.typeFromAST(context.getSchema(), frag.typeCondition);
        if (_definitionMjs.isCompositeType(type)) return type;
    }
}

},{"../../jsutils/inspect.mjs":"doI9y","../../error/GraphQLError.mjs":"a8Vyv","../../type/definition.mjs":"6PVmH","../../utilities/typeFromAST.mjs":"3VgoG","../../utilities/typeComparators.mjs":"abM5v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5VzA0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NoFragmentCyclesRule", ()=>NoFragmentCyclesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function NoFragmentCyclesRule(context) {
    // Tracks already visited fragments to maintain O(N) and to ensure that cycles
    // are not redundantly reported.
    var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors
    var spreadPath = []; // Position in the spread path
    var spreadPathIndexByName = Object.create(null);
    // It does not terminate when a cycle was found but continues to explore
    // the graph to find all possible cycles.
    function detectCycleRecursive(fragment) {
        if (visitedFrags[fragment.name.value]) {
            return;
        }
        var fragmentName = fragment.name.value;
        visitedFrags[fragmentName] = true;
        var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
        if (spreadNodes.length === 0) {
            return;
        }
        spreadPathIndexByName[fragmentName] = spreadPath.length;
        for(var _i2 = 0; _i2 < spreadNodes.length; _i2++){
            var spreadNode = spreadNodes[_i2];
            var spreadName = spreadNode.name.value;
            var cycleIndex = spreadPathIndexByName[spreadName];
            spreadPath.push(spreadNode);
            if (cycleIndex === undefined) {
                var spreadFragment = context.getFragment(spreadName);
                if (spreadFragment) {
                    detectCycleRecursive(spreadFragment);
                }
            } else {
                var cyclePath = spreadPath.slice(cycleIndex);
                var viaPath = cyclePath.slice(0, -1).map(function(s) {
                    return '"' + s.name.value + '"';
                }).join(', ');
                context.reportError(new _graphQLErrorMjs.GraphQLError("Cannot spread fragment \"".concat(spreadName, "\" within itself") + (viaPath !== '' ? " via ".concat(viaPath, ".") : '.'), cyclePath));
            }
            spreadPath.pop();
        }
        spreadPathIndexByName[fragmentName] = undefined;
    }
    return {
        OperationDefinition: function OperationDefinition() {
            return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
            detectCycleRecursive(node);
            return false;
        }
    }; // This does a straight-forward DFS to find cycles.
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ezCLx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique variable names
 *
 * A GraphQL operation is only valid if all its variables are uniquely named.
 */ parcelHelpers.export(exports, "UniqueVariableNamesRule", ()=>UniqueVariableNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueVariableNamesRule(context) {
    var knownVariableNames = Object.create(null);
    return {
        OperationDefinition: function OperationDefinition() {
            knownVariableNames = Object.create(null);
        },
        VariableDefinition: function VariableDefinition(node) {
            var variableName = node.variable.name.value;
            if (knownVariableNames[variableName]) context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one variable named \"$".concat(variableName, "\"."), [
                knownVariableNames[variableName],
                node.variable.name
            ]));
            else knownVariableNames[variableName] = node.variable.name;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"afnlY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * No undefined variables
 *
 * A GraphQL operation is only valid if all variables encountered, both directly
 * and via fragment spreads, are defined by that operation.
 */ parcelHelpers.export(exports, "NoUndefinedVariablesRule", ()=>NoUndefinedVariablesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function NoUndefinedVariablesRule(context) {
    var variableNameDefined = Object.create(null);
    return {
        OperationDefinition: {
            enter: function enter() {
                variableNameDefined = Object.create(null);
            },
            leave: function leave(operation) {
                var usages = context.getRecursiveVariableUsages(operation);
                for(var _i2 = 0; _i2 < usages.length; _i2++){
                    var _ref2 = usages[_i2];
                    var node = _ref2.node;
                    var varName = node.name.value;
                    if (variableNameDefined[varName] !== true) context.reportError(new _graphQLErrorMjs.GraphQLError(operation.name ? "Variable \"$".concat(varName, "\" is not defined by operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(varName, "\" is not defined."), [
                        node,
                        operation
                    ]));
                }
            }
        },
        VariableDefinition: function VariableDefinition(node) {
            variableNameDefined[node.variable.name.value] = true;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"uxdB6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * No unused variables
 *
 * A GraphQL operation is only valid if all variables defined by an operation
 * are used, either directly or within a spread fragment.
 */ parcelHelpers.export(exports, "NoUnusedVariablesRule", ()=>NoUnusedVariablesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function NoUnusedVariablesRule(context) {
    var variableDefs = [];
    return {
        OperationDefinition: {
            enter: function enter() {
                variableDefs = [];
            },
            leave: function leave(operation) {
                var variableNameUsed = Object.create(null);
                var usages = context.getRecursiveVariableUsages(operation);
                for(var _i2 = 0; _i2 < usages.length; _i2++){
                    var _ref2 = usages[_i2];
                    var node = _ref2.node;
                    variableNameUsed[node.name.value] = true;
                }
                for(var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++){
                    var variableDef = _variableDefs2[_i4];
                    var variableName = variableDef.variable.name.value;
                    if (variableNameUsed[variableName] !== true) context.reportError(new _graphQLErrorMjs.GraphQLError(operation.name ? "Variable \"$".concat(variableName, "\" is never used in operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(variableName, "\" is never used."), variableDef));
                }
            }
        },
        VariableDefinition: function VariableDefinition(def) {
            variableDefs.push(def);
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1KNrM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Known directives
 *
 * A GraphQL document is only valid if all `@directives` are known by the
 * schema and legally positioned.
 */ parcelHelpers.export(exports, "KnownDirectivesRule", ()=>KnownDirectivesRule
);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _directiveLocationMjs = require("../../language/directiveLocation.mjs");
var _directivesMjs = require("../../type/directives.mjs");
function KnownDirectivesRule(context) {
    var locationsMap = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directivesMjs.specifiedDirectives;
    for(var _i2 = 0; _i2 < definedDirectives.length; _i2++){
        var directive = definedDirectives[_i2];
        locationsMap[directive.name] = directive.locations;
    }
    var astDefinitions = context.getDocument().definitions;
    for(var _i4 = 0; _i4 < astDefinitions.length; _i4++){
        var def = astDefinitions[_i4];
        if (def.kind === _kindsMjs.Kind.DIRECTIVE_DEFINITION) locationsMap[def.name.value] = def.locations.map(function(name) {
            return name.value;
        });
    }
    return {
        Directive: function Directive(node, _key, _parent, _path, ancestors) {
            var name = node.name.value;
            var locations = locationsMap[name];
            if (!locations) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("Unknown directive \"@".concat(name, "\"."), node));
                return;
            }
            var candidateLocation = getDirectiveLocationForASTPath(ancestors);
            if (candidateLocation && locations.indexOf(candidateLocation) === -1) context.reportError(new _graphQLErrorMjs.GraphQLError("Directive \"@".concat(name, "\" may not be used on ").concat(candidateLocation, "."), node));
        }
    };
}
function getDirectiveLocationForASTPath(ancestors) {
    var appliedTo = ancestors[ancestors.length - 1];
    !Array.isArray(appliedTo) || _invariantMjsDefault.default(0);
    switch(appliedTo.kind){
        case _kindsMjs.Kind.OPERATION_DEFINITION:
            return getDirectiveLocationForOperation(appliedTo.operation);
        case _kindsMjs.Kind.FIELD:
            return _directiveLocationMjs.DirectiveLocation.FIELD;
        case _kindsMjs.Kind.FRAGMENT_SPREAD:
            return _directiveLocationMjs.DirectiveLocation.FRAGMENT_SPREAD;
        case _kindsMjs.Kind.INLINE_FRAGMENT:
            return _directiveLocationMjs.DirectiveLocation.INLINE_FRAGMENT;
        case _kindsMjs.Kind.FRAGMENT_DEFINITION:
            return _directiveLocationMjs.DirectiveLocation.FRAGMENT_DEFINITION;
        case _kindsMjs.Kind.VARIABLE_DEFINITION:
            return _directiveLocationMjs.DirectiveLocation.VARIABLE_DEFINITION;
        case _kindsMjs.Kind.SCHEMA_DEFINITION:
        case _kindsMjs.Kind.SCHEMA_EXTENSION:
            return _directiveLocationMjs.DirectiveLocation.SCHEMA;
        case _kindsMjs.Kind.SCALAR_TYPE_DEFINITION:
        case _kindsMjs.Kind.SCALAR_TYPE_EXTENSION:
            return _directiveLocationMjs.DirectiveLocation.SCALAR;
        case _kindsMjs.Kind.OBJECT_TYPE_DEFINITION:
        case _kindsMjs.Kind.OBJECT_TYPE_EXTENSION:
            return _directiveLocationMjs.DirectiveLocation.OBJECT;
        case _kindsMjs.Kind.FIELD_DEFINITION:
            return _directiveLocationMjs.DirectiveLocation.FIELD_DEFINITION;
        case _kindsMjs.Kind.INTERFACE_TYPE_DEFINITION:
        case _kindsMjs.Kind.INTERFACE_TYPE_EXTENSION:
            return _directiveLocationMjs.DirectiveLocation.INTERFACE;
        case _kindsMjs.Kind.UNION_TYPE_DEFINITION:
        case _kindsMjs.Kind.UNION_TYPE_EXTENSION:
            return _directiveLocationMjs.DirectiveLocation.UNION;
        case _kindsMjs.Kind.ENUM_TYPE_DEFINITION:
        case _kindsMjs.Kind.ENUM_TYPE_EXTENSION:
            return _directiveLocationMjs.DirectiveLocation.ENUM;
        case _kindsMjs.Kind.ENUM_VALUE_DEFINITION:
            return _directiveLocationMjs.DirectiveLocation.ENUM_VALUE;
        case _kindsMjs.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case _kindsMjs.Kind.INPUT_OBJECT_TYPE_EXTENSION:
            return _directiveLocationMjs.DirectiveLocation.INPUT_OBJECT;
        case _kindsMjs.Kind.INPUT_VALUE_DEFINITION:
            var parentNode = ancestors[ancestors.length - 3];
            return parentNode.kind === _kindsMjs.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocationMjs.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocationMjs.DirectiveLocation.ARGUMENT_DEFINITION;
    }
}
function getDirectiveLocationForOperation(operation) {
    switch(operation){
        case 'query':
            return _directiveLocationMjs.DirectiveLocation.QUERY;
        case 'mutation':
            return _directiveLocationMjs.DirectiveLocation.MUTATION;
        case 'subscription':
            return _directiveLocationMjs.DirectiveLocation.SUBSCRIPTION;
    } // istanbul ignore next (Not reachable. All possible types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected operation: ' + _inspectMjsDefault.default(operation));
}

},{"../../jsutils/inspect.mjs":"doI9y","../../jsutils/invariant.mjs":"gb46A","../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../language/directiveLocation.mjs":"dhp4e","../../type/directives.mjs":"crfoz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7d7Xo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique directive names per location
 *
 * A GraphQL document is only valid if all non-repeatable directives at
 * a given location are uniquely named.
 */ parcelHelpers.export(exports, "UniqueDirectivesPerLocationRule", ()=>UniqueDirectivesPerLocationRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _predicatesMjs = require("../../language/predicates.mjs");
var _directivesMjs = require("../../type/directives.mjs");
function UniqueDirectivesPerLocationRule(context) {
    var uniqueDirectiveMap = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directivesMjs.specifiedDirectives;
    for(var _i2 = 0; _i2 < definedDirectives.length; _i2++){
        var directive = definedDirectives[_i2];
        uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
    }
    var astDefinitions = context.getDocument().definitions;
    for(var _i4 = 0; _i4 < astDefinitions.length; _i4++){
        var def = astDefinitions[_i4];
        if (def.kind === _kindsMjs.Kind.DIRECTIVE_DEFINITION) uniqueDirectiveMap[def.name.value] = !def.repeatable;
    }
    var schemaDirectives = Object.create(null);
    var typeDirectivesMap = Object.create(null);
    return {
        // Many different AST nodes may contain directives. Rather than listing
        // them all, just listen for entering any node, and check to see if it
        // defines any directives.
        enter: function enter(node) {
            if (node.directives == null) return;
            var seenDirectives;
            if (node.kind === _kindsMjs.Kind.SCHEMA_DEFINITION || node.kind === _kindsMjs.Kind.SCHEMA_EXTENSION) seenDirectives = schemaDirectives;
            else if (_predicatesMjs.isTypeDefinitionNode(node) || _predicatesMjs.isTypeExtensionNode(node)) {
                var typeName = node.name.value;
                seenDirectives = typeDirectivesMap[typeName];
                if (seenDirectives === undefined) typeDirectivesMap[typeName] = seenDirectives = Object.create(null);
            } else seenDirectives = Object.create(null);
            for(var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++){
                var _directive = _node$directives2[_i6];
                var directiveName = _directive.name.value;
                if (uniqueDirectiveMap[directiveName]) {
                    if (seenDirectives[directiveName]) context.reportError(new _graphQLErrorMjs.GraphQLError("The directive \"@".concat(directiveName, "\" can only be used once at this location."), [
                        seenDirectives[directiveName],
                        _directive
                    ]));
                    else seenDirectives[directiveName] = _directive;
                }
            }
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../language/predicates.mjs":"6AiDB","../../type/directives.mjs":"crfoz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"37m0w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Known argument names
 *
 * A GraphQL field is only valid if all supplied arguments are defined by
 * that field.
 */ parcelHelpers.export(exports, "KnownArgumentNamesRule", ()=>KnownArgumentNamesRule
);
/**
 * @internal
 */ parcelHelpers.export(exports, "KnownArgumentNamesOnDirectivesRule", ()=>KnownArgumentNamesOnDirectivesRule
);
var _didYouMeanMjs = require("../../jsutils/didYouMean.mjs");
var _didYouMeanMjsDefault = parcelHelpers.interopDefault(_didYouMeanMjs);
var _suggestionListMjs = require("../../jsutils/suggestionList.mjs");
var _suggestionListMjsDefault = parcelHelpers.interopDefault(_suggestionListMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _directivesMjs = require("../../type/directives.mjs");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function KnownArgumentNamesRule(context) {
    return _objectSpread(_objectSpread({
    }, KnownArgumentNamesOnDirectivesRule(context)), {
    }, {
        Argument: function Argument(argNode) {
            var argDef = context.getArgument();
            var fieldDef = context.getFieldDef();
            var parentType = context.getParentType();
            if (!argDef && fieldDef && parentType) {
                var argName = argNode.name.value;
                var knownArgsNames = fieldDef.args.map(function(arg) {
                    return arg.name;
                });
                var suggestions = _suggestionListMjsDefault.default(argName, knownArgsNames);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Unknown argument \"".concat(argName, "\" on field \"").concat(parentType.name, ".").concat(fieldDef.name, "\".") + _didYouMeanMjsDefault.default(suggestions), argNode));
            }
        }
    });
}
function KnownArgumentNamesOnDirectivesRule(context) {
    var directiveArgs = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directivesMjs.specifiedDirectives;
    for(var _i2 = 0; _i2 < definedDirectives.length; _i2++){
        var directive = definedDirectives[_i2];
        directiveArgs[directive.name] = directive.args.map(function(arg) {
            return arg.name;
        });
    }
    var astDefinitions = context.getDocument().definitions;
    for(var _i4 = 0; _i4 < astDefinitions.length; _i4++){
        var def = astDefinitions[_i4];
        if (def.kind === _kindsMjs.Kind.DIRECTIVE_DEFINITION) {
            var _def$arguments;
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
            directiveArgs[def.name.value] = argsNodes.map(function(arg) {
                return arg.name.value;
            });
        }
    }
    return {
        Directive: function Directive(directiveNode) {
            var directiveName = directiveNode.name.value;
            var knownArgs = directiveArgs[directiveName];
            if (directiveNode.arguments && knownArgs) for(var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++){
                var argNode = _directiveNode$argume2[_i6];
                var argName = argNode.name.value;
                if (knownArgs.indexOf(argName) === -1) {
                    var suggestions = _suggestionListMjsDefault.default(argName, knownArgs);
                    context.reportError(new _graphQLErrorMjs.GraphQLError("Unknown argument \"".concat(argName, "\" on directive \"@").concat(directiveName, "\".") + _didYouMeanMjsDefault.default(suggestions), argNode));
                }
            }
            return false;
        }
    };
}

},{"../../jsutils/didYouMean.mjs":"gdq7w","../../jsutils/suggestionList.mjs":"fxmKg","../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../type/directives.mjs":"crfoz","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h9gNL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique argument names
 *
 * A GraphQL field or directive is only valid if all supplied arguments are
 * uniquely named.
 */ parcelHelpers.export(exports, "UniqueArgumentNamesRule", ()=>UniqueArgumentNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueArgumentNamesRule(context) {
    var knownArgNames = Object.create(null);
    return {
        Field: function Field() {
            knownArgNames = Object.create(null);
        },
        Directive: function Directive() {
            knownArgNames = Object.create(null);
        },
        Argument: function Argument(node) {
            var argName = node.name.value;
            if (knownArgNames[argName]) context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one argument named \"".concat(argName, "\"."), [
                knownArgNames[argName],
                node.name
            ]));
            else knownArgNames[argName] = node.name;
            return false;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7Qfmy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Value literals of correct type
 *
 * A GraphQL document is only valid if all value literals are of the type
 * expected at their position.
 */ parcelHelpers.export(exports, "ValuesOfCorrectTypeRule", ()=>ValuesOfCorrectTypeRule
);
var _objectValuesMjs = require("../../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _keyMapMjs = require("../../jsutils/keyMap.mjs");
var _keyMapMjsDefault = parcelHelpers.interopDefault(_keyMapMjs);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _didYouMeanMjs = require("../../jsutils/didYouMean.mjs");
var _didYouMeanMjsDefault = parcelHelpers.interopDefault(_didYouMeanMjs);
var _suggestionListMjs = require("../../jsutils/suggestionList.mjs");
var _suggestionListMjsDefault = parcelHelpers.interopDefault(_suggestionListMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _printerMjs = require("../../language/printer.mjs");
var _definitionMjs = require("../../type/definition.mjs");
function ValuesOfCorrectTypeRule(context) {
    return {
        ListValue: function ListValue(node) {
            // Note: TypeInfo will traverse into a list's item type, so look to the
            // parent input type to check if it is a list.
            var type = _definitionMjs.getNullableType(context.getParentInputType());
            if (!_definitionMjs.isListType(type)) {
                isValidValueNode(context, node);
                return false; // Don't traverse further.
            }
        },
        ObjectValue: function ObjectValue(node) {
            var type = _definitionMjs.getNamedType(context.getInputType());
            if (!_definitionMjs.isInputObjectType(type)) {
                isValidValueNode(context, node);
                return false; // Don't traverse further.
            } // Ensure every required field exists.
            var fieldNodeMap = _keyMapMjsDefault.default(node.fields, function(field) {
                return field.name.value;
            });
            for(var _i2 = 0, _objectValues2 = _objectValuesMjsDefault.default(type.getFields()); _i2 < _objectValues2.length; _i2++){
                var fieldDef = _objectValues2[_i2];
                var fieldNode = fieldNodeMap[fieldDef.name];
                if (!fieldNode && _definitionMjs.isRequiredInputField(fieldDef)) {
                    var typeStr = _inspectMjsDefault.default(fieldDef.type);
                    context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(type.name, ".").concat(fieldDef.name, "\" of required type \"").concat(typeStr, "\" was not provided."), node));
                }
            }
        },
        ObjectField: function ObjectField(node) {
            var parentType = _definitionMjs.getNamedType(context.getParentInputType());
            var fieldType = context.getInputType();
            if (!fieldType && _definitionMjs.isInputObjectType(parentType)) {
                var suggestions = _suggestionListMjsDefault.default(node.name.value, Object.keys(parentType.getFields()));
                context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(node.name.value, "\" is not defined by type \"").concat(parentType.name, "\".") + _didYouMeanMjsDefault.default(suggestions), node));
            }
        },
        NullValue: function NullValue(node) {
            var type = context.getInputType();
            if (_definitionMjs.isNonNullType(type)) context.reportError(new _graphQLErrorMjs.GraphQLError("Expected value of type \"".concat(_inspectMjsDefault.default(type), "\", found ").concat(_printerMjs.print(node), "."), node));
        },
        EnumValue: function EnumValue(node) {
            return isValidValueNode(context, node);
        },
        IntValue: function IntValue(node) {
            return isValidValueNode(context, node);
        },
        FloatValue: function FloatValue(node) {
            return isValidValueNode(context, node);
        },
        StringValue: function StringValue(node) {
            return isValidValueNode(context, node);
        },
        BooleanValue: function BooleanValue(node) {
            return isValidValueNode(context, node);
        }
    };
}
/**
 * Any value literal may be a valid representation of a Scalar, depending on
 * that scalar type.
 */ function isValidValueNode(context, node) {
    // Report any error at the full type expected by the location.
    var locationType = context.getInputType();
    if (!locationType) return;
    var type = _definitionMjs.getNamedType(locationType);
    if (!_definitionMjs.isLeafType(type)) {
        var typeStr = _inspectMjsDefault.default(locationType);
        context.reportError(new _graphQLErrorMjs.GraphQLError("Expected value of type \"".concat(typeStr, "\", found ").concat(_printerMjs.print(node), "."), node));
        return;
    } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
    // which may throw or return an invalid value to indicate failure.
    try {
        var parseResult = type.parseLiteral(node, undefined);
        if (parseResult === undefined) {
            var _typeStr = _inspectMjsDefault.default(locationType);
            context.reportError(new _graphQLErrorMjs.GraphQLError("Expected value of type \"".concat(_typeStr, "\", found ").concat(_printerMjs.print(node), "."), node));
        }
    } catch (error) {
        var _typeStr2 = _inspectMjsDefault.default(locationType);
        if (error instanceof _graphQLErrorMjs.GraphQLError) context.reportError(error);
        else context.reportError(new _graphQLErrorMjs.GraphQLError("Expected value of type \"".concat(_typeStr2, "\", found ").concat(_printerMjs.print(node), "; ") + error.message, node, undefined, undefined, undefined, error));
    }
}

},{"../../polyfills/objectValues.mjs":"1MvGb","../../jsutils/keyMap.mjs":"53ed0","../../jsutils/inspect.mjs":"doI9y","../../jsutils/didYouMean.mjs":"gdq7w","../../jsutils/suggestionList.mjs":"fxmKg","../../error/GraphQLError.mjs":"a8Vyv","../../language/printer.mjs":"bEnFw","../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iYWY7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Provided required arguments
 *
 * A field or directive is only valid if all required (non-null without a
 * default value) field arguments have been provided.
 */ parcelHelpers.export(exports, "ProvidedRequiredArgumentsRule", ()=>ProvidedRequiredArgumentsRule
);
/**
 * @internal
 */ parcelHelpers.export(exports, "ProvidedRequiredArgumentsOnDirectivesRule", ()=>ProvidedRequiredArgumentsOnDirectivesRule
);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _keyMapMjs = require("../../jsutils/keyMap.mjs");
var _keyMapMjsDefault = parcelHelpers.interopDefault(_keyMapMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _printerMjs = require("../../language/printer.mjs");
var _directivesMjs = require("../../type/directives.mjs");
var _definitionMjs = require("../../type/definition.mjs");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function ProvidedRequiredArgumentsRule(context) {
    return _objectSpread(_objectSpread({
    }, ProvidedRequiredArgumentsOnDirectivesRule(context)), {
    }, {
        Field: {
            // Validate on leave to allow for deeper errors to appear first.
            leave: function leave(fieldNode) {
                var _fieldNode$arguments;
                var fieldDef = context.getFieldDef();
                if (!fieldDef) return false;
                 // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
                var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];
                var argNodeMap = _keyMapMjsDefault.default(argNodes, function(arg) {
                    return arg.name.value;
                });
                for(var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++){
                    var argDef = _fieldDef$args2[_i2];
                    var argNode = argNodeMap[argDef.name];
                    if (!argNode && _definitionMjs.isRequiredArgument(argDef)) {
                        var argTypeStr = _inspectMjsDefault.default(argDef.type);
                        context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), fieldNode));
                    }
                }
            }
        }
    });
}
function ProvidedRequiredArgumentsOnDirectivesRule(context) {
    var requiredArgsMap = Object.create(null);
    var schema = context.getSchema();
    var definedDirectives = schema ? schema.getDirectives() : _directivesMjs.specifiedDirectives;
    for(var _i4 = 0; _i4 < definedDirectives.length; _i4++){
        var directive = definedDirectives[_i4];
        requiredArgsMap[directive.name] = _keyMapMjsDefault.default(directive.args.filter(_definitionMjs.isRequiredArgument), function(arg) {
            return arg.name;
        });
    }
    var astDefinitions = context.getDocument().definitions;
    for(var _i6 = 0; _i6 < astDefinitions.length; _i6++){
        var def = astDefinitions[_i6];
        if (def.kind === _kindsMjs.Kind.DIRECTIVE_DEFINITION) {
            var _def$arguments;
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
            requiredArgsMap[def.name.value] = _keyMapMjsDefault.default(argNodes.filter(isRequiredArgumentNode), function(arg) {
                return arg.name.value;
            });
        }
    }
    return {
        Directive: {
            // Validate on leave to allow for deeper errors to appear first.
            leave: function leave(directiveNode) {
                var directiveName = directiveNode.name.value;
                var requiredArgs = requiredArgsMap[directiveName];
                if (requiredArgs) {
                    var _directiveNode$argume;
                    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
                    var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
                    var argNodeMap = _keyMapMjsDefault.default(_argNodes, function(arg) {
                        return arg.name.value;
                    });
                    for(var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++){
                        var argName = _Object$keys2[_i8];
                        if (!argNodeMap[argName]) {
                            var argType = requiredArgs[argName].type;
                            var argTypeStr = _definitionMjs.isType(argType) ? _inspectMjsDefault.default(argType) : _printerMjs.print(argType);
                            context.reportError(new _graphQLErrorMjs.GraphQLError("Directive \"@".concat(directiveName, "\" argument \"").concat(argName, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), directiveNode));
                        }
                    }
                }
            }
        }
    };
}
function isRequiredArgumentNode(arg) {
    return arg.type.kind === _kindsMjs.Kind.NON_NULL_TYPE && arg.defaultValue == null;
}

},{"../../jsutils/inspect.mjs":"doI9y","../../jsutils/keyMap.mjs":"53ed0","../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../language/printer.mjs":"bEnFw","../../type/directives.mjs":"crfoz","../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"mc85l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Variables passed to field arguments conform to type
 */ parcelHelpers.export(exports, "VariablesInAllowedPositionRule", ()=>VariablesInAllowedPositionRule
);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _definitionMjs = require("../../type/definition.mjs");
var _typeFromASTMjs = require("../../utilities/typeFromAST.mjs");
var _typeComparatorsMjs = require("../../utilities/typeComparators.mjs");
function VariablesInAllowedPositionRule(context) {
    var varDefMap = Object.create(null);
    return {
        OperationDefinition: {
            enter: function enter() {
                varDefMap = Object.create(null);
            },
            leave: function leave(operation) {
                var usages = context.getRecursiveVariableUsages(operation);
                for(var _i2 = 0; _i2 < usages.length; _i2++){
                    var _ref2 = usages[_i2];
                    var node = _ref2.node;
                    var type = _ref2.type;
                    var defaultValue = _ref2.defaultValue;
                    var varName = node.name.value;
                    var varDef = varDefMap[varName];
                    if (varDef && type) {
                        // A var type is allowed if it is the same or more strict (e.g. is
                        // a subtype of) than the expected type. It can be more strict if
                        // the variable type is non-null when the expected type is nullable.
                        // If both are list types, the variable item type can be more strict
                        // than the expected item type (contravariant).
                        var schema = context.getSchema();
                        var varType = _typeFromASTMjs.typeFromAST(schema, varDef.type);
                        if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {
                            var varTypeStr = _inspectMjsDefault.default(varType);
                            var typeStr = _inspectMjsDefault.default(type);
                            context.reportError(new _graphQLErrorMjs.GraphQLError("Variable \"$".concat(varName, "\" of type \"").concat(varTypeStr, "\" used in position expecting type \"").concat(typeStr, "\"."), [
                                varDef,
                                node
                            ]));
                        }
                    }
                }
            }
        },
        VariableDefinition: function VariableDefinition(node) {
            varDefMap[node.variable.name.value] = node;
        }
    };
}
/**
 * Returns true if the variable is allowed in the location it was found,
 * which includes considering if default values exist for either the variable
 * or the location at which it is located.
 */ function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
    if (_definitionMjs.isNonNullType(locationType) && !_definitionMjs.isNonNullType(varType)) {
        var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kindsMjs.Kind.NULL;
        var hasLocationDefaultValue = locationDefaultValue !== undefined;
        if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) return false;
        var nullableLocationType = locationType.ofType;
        return _typeComparatorsMjs.isTypeSubTypeOf(schema, varType, nullableLocationType);
    }
    return _typeComparatorsMjs.isTypeSubTypeOf(schema, varType, locationType);
}

},{"../../jsutils/inspect.mjs":"doI9y","../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../type/definition.mjs":"6PVmH","../../utilities/typeFromAST.mjs":"3VgoG","../../utilities/typeComparators.mjs":"abM5v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kaqI6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Overlapping fields can be merged
 *
 * A selection set is only valid if all fields (including spreading any
 * fragments) either correspond to distinct response names or can be merged
 * without ambiguity.
 */ parcelHelpers.export(exports, "OverlappingFieldsCanBeMergedRule", ()=>OverlappingFieldsCanBeMergedRule
);
var _findMjs = require("../../polyfills/find.mjs");
var _findMjsDefault = parcelHelpers.interopDefault(_findMjs);
var _objectEntriesMjs = require("../../polyfills/objectEntries.mjs");
var _objectEntriesMjsDefault = parcelHelpers.interopDefault(_objectEntriesMjs);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _printerMjs = require("../../language/printer.mjs");
var _definitionMjs = require("../../type/definition.mjs");
var _typeFromASTMjs = require("../../utilities/typeFromAST.mjs");
function reasonMessage(reason) {
    if (Array.isArray(reason)) return reason.map(function(_ref) {
        var responseName = _ref[0], subReason = _ref[1];
        return "subfields \"".concat(responseName, "\" conflict because ") + reasonMessage(subReason);
    }).join(' and ');
    return reason;
}
function OverlappingFieldsCanBeMergedRule(context) {
    // A memoization for when two fragments are compared "between" each other for
    // conflicts. Two fragments may be compared many times, so memoizing this can
    // dramatically improve the performance of this validator.
    var comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
    // selection set. Selection sets may be asked for this information multiple
    // times, so this improves the performance of this validator.
    var cachedFieldsAndFragmentNames = new Map();
    return {
        SelectionSet: function SelectionSet(selectionSet) {
            var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
            for(var _i2 = 0; _i2 < conflicts.length; _i2++){
                var _ref3 = conflicts[_i2];
                var _ref2$ = _ref3[0];
                var responseName = _ref2$[0];
                var reason = _ref2$[1];
                var fields1 = _ref3[1];
                var fields2 = _ref3[2];
                var reasonMsg = reasonMessage(reason);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Fields \"".concat(responseName, "\" conflict because ").concat(reasonMsg, ". Use different aliases on the fields to fetch both if this was intentional."), fields1.concat(fields2)));
            }
        }
    };
}
/**
 * Algorithm:
 *
 * Conflicts occur when two fields exist in a query which will produce the same
 * response name, but represent differing values, thus creating a conflict.
 * The algorithm below finds all conflicts via making a series of comparisons
 * between fields. In order to compare as few fields as possible, this makes
 * a series of comparisons "within" sets of fields and "between" sets of fields.
 *
 * Given any selection set, a collection produces both a set of fields by
 * also including all inline fragments, as well as a list of fragments
 * referenced by fragment spreads.
 *
 * A) Each selection set represented in the document first compares "within" its
 * collected set of fields, finding any conflicts between every pair of
 * overlapping fields.
 * Note: This is the *only time* that a the fields "within" a set are compared
 * to each other. After this only fields "between" sets are compared.
 *
 * B) Also, if any fragment is referenced in a selection set, then a
 * comparison is made "between" the original set of fields and the
 * referenced fragment.
 *
 * C) Also, if multiple fragments are referenced, then comparisons
 * are made "between" each referenced fragment.
 *
 * D) When comparing "between" a set of fields and a referenced fragment, first
 * a comparison is made between each field in the original set of fields and
 * each field in the the referenced set of fields.
 *
 * E) Also, if any fragment is referenced in the referenced selection set,
 * then a comparison is made "between" the original set of fields and the
 * referenced fragment (recursively referring to step D).
 *
 * F) When comparing "between" two fragments, first a comparison is made between
 * each field in the first referenced set of fields and each field in the the
 * second referenced set of fields.
 *
 * G) Also, any fragments referenced by the first must be compared to the
 * second, and any fragments referenced by the second must be compared to the
 * first (recursively referring to step F).
 *
 * H) When comparing two fields, if both have selection sets, then a comparison
 * is made "between" both selection sets, first comparing the set of fields in
 * the first selection set with the set of fields in the second.
 *
 * I) Also, if any fragment is referenced in either selection set, then a
 * comparison is made "between" the other set of fields and the
 * referenced fragment.
 *
 * J) Also, if two fragments are referenced in both selection sets, then a
 * comparison is made "between" the two fragments.
 *
 */ // Find all conflicts found "within" a selection set, including those found
// via spreading in fragments. Called when visiting each SelectionSet in the
// GraphQL Document.
function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
    var conflicts = [];
    var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet), fieldMap = _getFieldsAndFragment[0], fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts "within" the fields of this selection set.
    // Note: this is the *only place* `collectConflictsWithin` is called.
    collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);
    if (fragmentNames.length !== 0) // (B) Then collect conflicts between these fields and those represented by
    // each spread fragment name found.
    for(var i = 0; i < fragmentNames.length; i++){
        collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this
        // selection set to collect conflicts between fragments spread together.
        // This compares each item in the list of fragment names to every other
        // item in that same list (except for itself).
        for(var j = i + 1; j < fragmentNames.length; j++)collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
    }
    return conflicts;
} // Collect all conflicts found between a set of fields and a fragment reference
// including via spreading in any nested fragments.
function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
    var fragment = context.getFragment(fragmentName);
    if (!fragment) return;
    var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment), fieldMap2 = _getReferencedFieldsA[0], fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.
    if (fieldMap === fieldMap2) return;
     // (D) First collect any conflicts between the provided collection of fields
    // and the collection of fields represented by the given fragment.
    collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields
    // and any fragment names found in the given fragment.
    for(var i = 0; i < fragmentNames2.length; i++)collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);
} // Collect all conflicts found between two fragments, including via spreading in
// any nested fragments.
function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
    // No need to compare a fragment to itself.
    if (fragmentName1 === fragmentName2) return;
     // Memoize so two fragments are not compared for conflicts more than once.
    if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) return;
    comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
    var fragment1 = context.getFragment(fragmentName1);
    var fragment2 = context.getFragment(fragmentName2);
    if (!fragment1 || !fragment2) return;
    var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1), fieldMap1 = _getReferencedFieldsA2[0], fragmentNames1 = _getReferencedFieldsA2[1];
    var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2), fieldMap2 = _getReferencedFieldsA3[0], fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields
    // (not including any nested fragments).
    collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested
    // fragments spread in the second fragment.
    for(var j = 0; j < fragmentNames2.length; j++)collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
     // (G) Then collect conflicts between the second fragment and any nested
    // fragments spread in the first fragment.
    for(var i = 0; i < fragmentNames1.length; i++)collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);
} // Find all conflicts found between two selection sets, including those found
// via spreading in fragments. Called when determining if conflicts exist
// between the sub-fields of two overlapping fields.
function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
    var conflicts = [];
    var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1), fieldMap1 = _getFieldsAndFragment2[0], fragmentNames1 = _getFieldsAndFragment2[1];
    var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2), fieldMap2 = _getFieldsAndFragment3[0], fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.
    collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and
    // those referenced by each fragment name associated with the second.
    if (fragmentNames2.length !== 0) for(var j = 0; j < fragmentNames2.length; j++)collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
     // (I) Then collect conflicts between the second collection of fields and
    // those referenced by each fragment name associated with the first.
    if (fragmentNames1.length !== 0) for(var i = 0; i < fragmentNames1.length; i++)collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);
     // (J) Also collect conflicts between any fragment names by the first and
    // fragment names by the second. This compares each item in the first set of
    // names to each item in the second set of names.
    for(var _i3 = 0; _i3 < fragmentNames1.length; _i3++)for(var _j = 0; _j < fragmentNames2.length; _j++)collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);
    return conflicts;
} // Collect all Conflicts "within" one collection of fields.
function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
    // A field map is a keyed collection, where each key represents a response
    // name and the value at that key is a list of all fields which provide that
    // response name. For every response name, if there are multiple fields, they
    // must be compared to find a potential conflict.
    for(var _i5 = 0, _objectEntries2 = _objectEntriesMjsDefault.default(fieldMap); _i5 < _objectEntries2.length; _i5++){
        var _ref5 = _objectEntries2[_i5];
        var responseName = _ref5[0];
        var fields = _ref5[1];
        // This compares every field in the list to every other field in this list
        // (except to itself). If the list only has one item, nothing needs to
        // be compared.
        if (fields.length > 1) {
            for(var i = 0; i < fields.length; i++)for(var j = i + 1; j < fields.length; j++){
                var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, responseName, fields[i], fields[j]);
                if (conflict) conflicts.push(conflict);
            }
        }
    }
} // Collect all Conflicts between two collections of fields. This is similar to,
// but different from the `collectConflictsWithin` function above. This check
// assumes that `collectConflictsWithin` has already been called on each
// provided collection of fields. This is true because this validator traverses
// each individual selection set.
function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
    // A field map is a keyed collection, where each key represents a response
    // name and the value at that key is a list of all fields which provide that
    // response name. For any response name which appears in both provided field
    // maps, each field from the first field map must be compared to every field
    // in the second field map to find potential conflicts.
    for(var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++){
        var responseName = _Object$keys2[_i7];
        var fields2 = fieldMap2[responseName];
        if (fields2) {
            var fields1 = fieldMap1[responseName];
            for(var i = 0; i < fields1.length; i++)for(var j = 0; j < fields2.length; j++){
                var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);
                if (conflict) conflicts.push(conflict);
            }
        }
    }
} // Determines if there is a conflict between two particular fields, including
// comparing their sub-fields.
function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
    var parentType1 = field1[0], node1 = field1[1], def1 = field1[2];
    var parentType2 = field2[0], node2 = field2[1], def2 = field2[2]; // If it is known that two fields could not possibly apply at the same
    // time, due to the parent types, then it is safe to permit them to diverge
    // in aliased field or arguments used as they will not present any ambiguity
    // by differing.
    // It is known that two parent types could never overlap if they are
    // different Object types. Interface or Union types might overlap - if not
    // in the current state of the schema, then perhaps in some future version,
    // thus may not safely diverge.
    var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && _definitionMjs.isObjectType(parentType1) && _definitionMjs.isObjectType(parentType2);
    if (!areMutuallyExclusive) {
        var _node1$arguments, _node2$arguments;
        // Two aliases must refer to the same field.
        var name1 = node1.name.value;
        var name2 = node2.name.value;
        if (name1 !== name2) return [
            [
                responseName,
                "\"".concat(name1, "\" and \"").concat(name2, "\" are different fields")
            ],
            [
                node1
            ],
            [
                node2
            ]
        ];
         // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.
        if (!sameArguments(args1, args2)) return [
            [
                responseName,
                'they have differing arguments'
            ],
            [
                node1
            ],
            [
                node2
            ]
        ];
    } // The return type for each field.
    var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
    var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;
    if (type1 && type2 && doTypesConflict(type1, type2)) return [
        [
            responseName,
            "they return conflicting types \"".concat(_inspectMjsDefault.default(type1), "\" and \"").concat(_inspectMjsDefault.default(type2), "\"")
        ],
        [
            node1
        ],
        [
            node2
        ]
    ];
     // Collect and compare sub-fields. Use the same "visited fragment names" list
    // for both collections so fields in a fragment reference are never
    // compared to themselves.
    var selectionSet1 = node1.selectionSet;
    var selectionSet2 = node2.selectionSet;
    if (selectionSet1 && selectionSet2) {
        var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, _definitionMjs.getNamedType(type1), selectionSet1, _definitionMjs.getNamedType(type2), selectionSet2);
        return subfieldConflicts(conflicts, responseName, node1, node2);
    }
}
function sameArguments(arguments1, arguments2) {
    if (arguments1.length !== arguments2.length) return false;
    return arguments1.every(function(argument1) {
        var argument2 = _findMjsDefault.default(arguments2, function(argument) {
            return argument.name.value === argument1.name.value;
        });
        if (!argument2) return false;
        return sameValue(argument1.value, argument2.value);
    });
}
function sameValue(value1, value2) {
    return _printerMjs.print(value1) === _printerMjs.print(value2);
} // Two types conflict if both types could not apply to a value simultaneously.
// Composite types are ignored as their individual field types will be compared
// later recursively. However List and Non-Null types must match.
function doTypesConflict(type1, type2) {
    if (_definitionMjs.isListType(type1)) return _definitionMjs.isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
    if (_definitionMjs.isListType(type2)) return true;
    if (_definitionMjs.isNonNullType(type1)) return _definitionMjs.isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
    if (_definitionMjs.isNonNullType(type2)) return true;
    if (_definitionMjs.isLeafType(type1) || _definitionMjs.isLeafType(type2)) return type1 !== type2;
    return false;
} // Given a selection set, return the collection of fields (a mapping of response
// name to field nodes and definitions) as well as a list of fragment names
// referenced via fragment spreads.
function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
    var cached = cachedFieldsAndFragmentNames.get(selectionSet);
    if (!cached) {
        var nodeAndDefs = Object.create(null);
        var fragmentNames = Object.create(null);
        _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
        cached = [
            nodeAndDefs,
            Object.keys(fragmentNames)
        ];
        cachedFieldsAndFragmentNames.set(selectionSet, cached);
    }
    return cached;
} // Given a reference to a fragment, return the represented collection of fields
// as well as a list of nested fragment names referenced via fragment spreads.
function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
    // Short-circuit building a type from the node if possible.
    var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
    if (cached) return cached;
    var fragmentType = _typeFromASTMjs.typeFromAST(context.getSchema(), fragment.typeCondition);
    return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
}
function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
    for(var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++){
        var selection = _selectionSet$selecti2[_i9];
        switch(selection.kind){
            case _kindsMjs.Kind.FIELD:
                var fieldName = selection.name.value;
                var fieldDef = void 0;
                if (_definitionMjs.isObjectType(parentType) || _definitionMjs.isInterfaceType(parentType)) fieldDef = parentType.getFields()[fieldName];
                var responseName = selection.alias ? selection.alias.value : fieldName;
                if (!nodeAndDefs[responseName]) nodeAndDefs[responseName] = [];
                nodeAndDefs[responseName].push([
                    parentType,
                    selection,
                    fieldDef
                ]);
                break;
            case _kindsMjs.Kind.FRAGMENT_SPREAD:
                fragmentNames[selection.name.value] = true;
                break;
            case _kindsMjs.Kind.INLINE_FRAGMENT:
                var typeCondition = selection.typeCondition;
                var inlineFragmentType = typeCondition ? _typeFromASTMjs.typeFromAST(context.getSchema(), typeCondition) : parentType;
                _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
                break;
        }
    }
} // Given a series of Conflicts which occurred between two sub-fields, generate
// a single Conflict.
function subfieldConflicts(conflicts, responseName, node1, node2) {
    if (conflicts.length > 0) return [
        [
            responseName,
            conflicts.map(function(_ref6) {
                var reason = _ref6[0];
                return reason;
            })
        ],
        conflicts.reduce(function(allFields, _ref7) {
            var fields1 = _ref7[1];
            return allFields.concat(fields1);
        }, [
            node1
        ]),
        conflicts.reduce(function(allFields, _ref8) {
            var fields2 = _ref8[2];
            return allFields.concat(fields2);
        }, [
            node2
        ])
    ];
}
/**
 * A way to keep track of pairs of things when the ordering of the pair does
 * not matter. We do this by maintaining a sort of double adjacency sets.
 */ var PairSet = /*#__PURE__*/ function() {
    function PairSet1() {
        this._data = Object.create(null);
    }
    var _proto = PairSet1.prototype;
    _proto.has = function has(a, b, areMutuallyExclusive) {
        var first = this._data[a];
        var result = first && first[b];
        if (result === undefined) return false;
         // areMutuallyExclusive being false is a superset of being true,
        // hence if we want to know if this PairSet "has" these two with no
        // exclusivity, we have to ensure it was added as such.
        if (areMutuallyExclusive === false) return result === false;
        return true;
    };
    _proto.add = function add(a, b, areMutuallyExclusive) {
        this._pairSetAdd(a, b, areMutuallyExclusive);
        this._pairSetAdd(b, a, areMutuallyExclusive);
    };
    _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {
        var map = this._data[a];
        if (!map) {
            map = Object.create(null);
            this._data[a] = map;
        }
        map[b] = areMutuallyExclusive;
    };
    return PairSet1;
}();

},{"../../polyfills/find.mjs":"SBobE","../../polyfills/objectEntries.mjs":"74LtV","../../jsutils/inspect.mjs":"doI9y","../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../language/printer.mjs":"bEnFw","../../type/definition.mjs":"6PVmH","../../utilities/typeFromAST.mjs":"3VgoG","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1pQoQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique input field names
 *
 * A GraphQL input object value is only valid if all supplied fields are
 * uniquely named.
 */ parcelHelpers.export(exports, "UniqueInputFieldNamesRule", ()=>UniqueInputFieldNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueInputFieldNamesRule(context) {
    var knownNameStack = [];
    var knownNames = Object.create(null);
    return {
        ObjectValue: {
            enter: function enter() {
                knownNameStack.push(knownNames);
                knownNames = Object.create(null);
            },
            leave: function leave() {
                knownNames = knownNameStack.pop();
            }
        },
        ObjectField: function ObjectField(node) {
            var fieldName = node.name.value;
            if (knownNames[fieldName]) context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one input field named \"".concat(fieldName, "\"."), [
                knownNames[fieldName],
                node.name
            ]));
            else knownNames[fieldName] = node.name;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"az4LR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Lone Schema definition
 *
 * A GraphQL document is only valid if it contains only one schema definition.
 */ parcelHelpers.export(exports, "LoneSchemaDefinitionRule", ()=>LoneSchemaDefinitionRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function LoneSchemaDefinitionRule(context) {
    var _ref, _ref2, _oldSchema$astNode;
    var oldSchema = context.getSchema();
    var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
    var schemaDefinitionsCount = 0;
    return {
        SchemaDefinition: function SchemaDefinition(node) {
            if (alreadyDefined) {
                context.reportError(new _graphQLErrorMjs.GraphQLError('Cannot define a new schema within a schema extension.', node));
                return;
            }
            if (schemaDefinitionsCount > 0) context.reportError(new _graphQLErrorMjs.GraphQLError('Must provide only one schema definition.', node));
            ++schemaDefinitionsCount;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dtHU7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique operation types
 *
 * A GraphQL document is only valid if it has only one type per operation.
 */ parcelHelpers.export(exports, "UniqueOperationTypesRule", ()=>UniqueOperationTypesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueOperationTypesRule(context) {
    var schema = context.getSchema();
    var definedOperationTypes = Object.create(null);
    var existingOperationTypes = schema ? {
        query: schema.getQueryType(),
        mutation: schema.getMutationType(),
        subscription: schema.getSubscriptionType()
    } : {
    };
    function checkOperationTypes(node) {
        var _node$operationTypes;
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
        for(var _i2 = 0; _i2 < operationTypesNodes.length; _i2++){
            var operationType = operationTypesNodes[_i2];
            var operation = operationType.operation;
            var alreadyDefinedOperationType = definedOperationTypes[operation];
            if (existingOperationTypes[operation]) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("Type for ".concat(operation, " already defined in the schema. It cannot be redefined."), operationType));
            } else if (alreadyDefinedOperationType) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one ".concat(operation, " type in schema."), [
                    alreadyDefinedOperationType,
                    operationType
                ]));
            } else {
                definedOperationTypes[operation] = operationType;
            }
        }
        return false;
    }
    return {
        SchemaDefinition: checkOperationTypes,
        SchemaExtension: checkOperationTypes
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3hl9V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique type names
 *
 * A GraphQL document is only valid if all defined types have unique names.
 */ parcelHelpers.export(exports, "UniqueTypeNamesRule", ()=>UniqueTypeNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueTypeNamesRule(context) {
    var knownTypeNames = Object.create(null);
    var schema = context.getSchema();
    function checkTypeName(node) {
        var typeName = node.name.value;
        if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
            context.reportError(new _graphQLErrorMjs.GraphQLError("Type \"".concat(typeName, "\" already exists in the schema. It cannot also be defined in this type definition."), node.name));
            return;
        }
        if (knownTypeNames[typeName]) {
            context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one type named \"".concat(typeName, "\"."), [
                knownTypeNames[typeName],
                node.name
            ]));
        } else {
            knownTypeNames[typeName] = node.name;
        }
        return false;
    }
    return {
        ScalarTypeDefinition: checkTypeName,
        ObjectTypeDefinition: checkTypeName,
        InterfaceTypeDefinition: checkTypeName,
        UnionTypeDefinition: checkTypeName,
        EnumTypeDefinition: checkTypeName,
        InputObjectTypeDefinition: checkTypeName
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jOBgt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique enum value names
 *
 * A GraphQL enum type is only valid if all its values are uniquely named.
 */ parcelHelpers.export(exports, "UniqueEnumValueNamesRule", ()=>UniqueEnumValueNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _definitionMjs = require("../../type/definition.mjs");
function UniqueEnumValueNamesRule(context) {
    var schema = context.getSchema();
    var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
    var knownValueNames = Object.create(null);
    function checkValueUniqueness(node) {
        var _node$values;
        var typeName = node.name.value;
        if (!knownValueNames[typeName]) {
            knownValueNames[typeName] = Object.create(null);
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
        var valueNames = knownValueNames[typeName];
        for(var _i2 = 0; _i2 < valueNodes.length; _i2++){
            var valueDef = valueNodes[_i2];
            var valueName = valueDef.name.value;
            var existingType = existingTypeMap[typeName];
            if (_definitionMjs.isEnumType(existingType) && existingType.getValue(valueName)) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" already exists in the schema. It cannot also be defined in this type extension."), valueDef.name));
            } else if (valueNames[valueName]) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" can only be defined once."), [
                    valueNames[valueName],
                    valueDef.name
                ]));
            } else {
                valueNames[valueName] = valueDef.name;
            }
        }
        return false;
    }
    return {
        EnumTypeDefinition: checkValueUniqueness,
        EnumTypeExtension: checkValueUniqueness
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"glazh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique field definition names
 *
 * A GraphQL complex type is only valid if all its fields are uniquely named.
 */ parcelHelpers.export(exports, "UniqueFieldDefinitionNamesRule", ()=>UniqueFieldDefinitionNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _definitionMjs = require("../../type/definition.mjs");
function UniqueFieldDefinitionNamesRule(context) {
    var schema = context.getSchema();
    var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
    var knownFieldNames = Object.create(null);
    function checkFieldUniqueness(node) {
        var _node$fields;
        var typeName = node.name.value;
        if (!knownFieldNames[typeName]) {
            knownFieldNames[typeName] = Object.create(null);
        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
        var fieldNames = knownFieldNames[typeName];
        for(var _i2 = 0; _i2 < fieldNodes.length; _i2++){
            var fieldDef = fieldNodes[_i2];
            var fieldName = fieldDef.name.value;
            if (hasField(existingTypeMap[typeName], fieldName)) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" already exists in the schema. It cannot also be defined in this type extension."), fieldDef.name));
            } else if (fieldNames[fieldName]) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" can only be defined once."), [
                    fieldNames[fieldName],
                    fieldDef.name
                ]));
            } else {
                fieldNames[fieldName] = fieldDef.name;
            }
        }
        return false;
    }
    return {
        InputObjectTypeDefinition: checkFieldUniqueness,
        InputObjectTypeExtension: checkFieldUniqueness,
        InterfaceTypeDefinition: checkFieldUniqueness,
        InterfaceTypeExtension: checkFieldUniqueness,
        ObjectTypeDefinition: checkFieldUniqueness,
        ObjectTypeExtension: checkFieldUniqueness
    };
}
function hasField(type, fieldName) {
    if (_definitionMjs.isObjectType(type) || _definitionMjs.isInterfaceType(type) || _definitionMjs.isInputObjectType(type)) return type.getFields()[fieldName] != null;
    return false;
}

},{"../../error/GraphQLError.mjs":"a8Vyv","../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6ab3O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Unique directive names
 *
 * A GraphQL document is only valid if all defined directives have unique names.
 */ parcelHelpers.export(exports, "UniqueDirectiveNamesRule", ()=>UniqueDirectiveNamesRule
);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
function UniqueDirectiveNamesRule(context) {
    var knownDirectiveNames = Object.create(null);
    var schema = context.getSchema();
    return {
        DirectiveDefinition: function DirectiveDefinition(node) {
            var directiveName = node.name.value;
            if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {
                context.reportError(new _graphQLErrorMjs.GraphQLError("Directive \"@".concat(directiveName, "\" already exists in the schema. It cannot be redefined."), node.name));
                return;
            }
            if (knownDirectiveNames[directiveName]) context.reportError(new _graphQLErrorMjs.GraphQLError("There can be only one directive named \"@".concat(directiveName, "\"."), [
                knownDirectiveNames[directiveName],
                node.name
            ]));
            else knownDirectiveNames[directiveName] = node.name;
            return false;
        }
    };
}

},{"../../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1aIrI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Possible type extension
 *
 * A type extension is only valid if the type is defined and has the same kind.
 */ parcelHelpers.export(exports, "PossibleTypeExtensionsRule", ()=>PossibleTypeExtensionsRule
);
var _inspectMjs = require("../../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _didYouMeanMjs = require("../../jsutils/didYouMean.mjs");
var _didYouMeanMjsDefault = parcelHelpers.interopDefault(_didYouMeanMjs);
var _suggestionListMjs = require("../../jsutils/suggestionList.mjs");
var _suggestionListMjsDefault = parcelHelpers.interopDefault(_suggestionListMjs);
var _graphQLErrorMjs = require("../../error/GraphQLError.mjs");
var _kindsMjs = require("../../language/kinds.mjs");
var _predicatesMjs = require("../../language/predicates.mjs");
var _definitionMjs = require("../../type/definition.mjs");
var _defKindToExtKind;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function PossibleTypeExtensionsRule(context) {
    var schema = context.getSchema();
    var definedTypes = Object.create(null);
    for(var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++){
        var def = _context$getDocument$2[_i2];
        if (_predicatesMjs.isTypeDefinitionNode(def)) definedTypes[def.name.value] = def;
    }
    function checkExtension(node) {
        var typeName = node.name.value;
        var defNode = definedTypes[typeName];
        var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
        var expectedKind;
        if (defNode) {
            expectedKind = defKindToExtKind[defNode.kind];
        } else if (existingType) {
            expectedKind = typeToExtKind(existingType);
        }
        if (expectedKind) {
            if (expectedKind !== node.kind) {
                var kindStr = extensionKindToTypeName(node.kind);
                context.reportError(new _graphQLErrorMjs.GraphQLError("Cannot extend non-".concat(kindStr, " type \"").concat(typeName, "\"."), defNode ? [
                    defNode,
                    node
                ] : node));
            }
        } else {
            var allTypeNames = Object.keys(definedTypes);
            if (schema) {
                allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));
            }
            var suggestedTypes = _suggestionListMjsDefault.default(typeName, allTypeNames);
            context.reportError(new _graphQLErrorMjs.GraphQLError("Cannot extend type \"".concat(typeName, "\" because it is not defined.") + _didYouMeanMjsDefault.default(suggestedTypes), node.name));
        }
    }
    return {
        ScalarTypeExtension: checkExtension,
        ObjectTypeExtension: checkExtension,
        InterfaceTypeExtension: checkExtension,
        UnionTypeExtension: checkExtension,
        EnumTypeExtension: checkExtension,
        InputObjectTypeExtension: checkExtension
    };
}
var defKindToExtKind = (_defKindToExtKind = {
}, _defineProperty(_defKindToExtKind, _kindsMjs.Kind.SCALAR_TYPE_DEFINITION, _kindsMjs.Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kindsMjs.Kind.OBJECT_TYPE_DEFINITION, _kindsMjs.Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kindsMjs.Kind.INTERFACE_TYPE_DEFINITION, _kindsMjs.Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kindsMjs.Kind.UNION_TYPE_DEFINITION, _kindsMjs.Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kindsMjs.Kind.ENUM_TYPE_DEFINITION, _kindsMjs.Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, _kindsMjs.Kind.INPUT_OBJECT_TYPE_DEFINITION, _kindsMjs.Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);
function typeToExtKind(type) {
    if (_definitionMjs.isScalarType(type)) return _kindsMjs.Kind.SCALAR_TYPE_EXTENSION;
    if (_definitionMjs.isObjectType(type)) return _kindsMjs.Kind.OBJECT_TYPE_EXTENSION;
    if (_definitionMjs.isInterfaceType(type)) return _kindsMjs.Kind.INTERFACE_TYPE_EXTENSION;
    if (_definitionMjs.isUnionType(type)) return _kindsMjs.Kind.UNION_TYPE_EXTENSION;
    if (_definitionMjs.isEnumType(type)) return _kindsMjs.Kind.ENUM_TYPE_EXTENSION;
     // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (_definitionMjs.isInputObjectType(type)) return _kindsMjs.Kind.INPUT_OBJECT_TYPE_EXTENSION;
     // istanbul ignore next (Not reachable. All possible types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected type: ' + _inspectMjsDefault.default(type));
}
function extensionKindToTypeName(kind) {
    switch(kind){
        case _kindsMjs.Kind.SCALAR_TYPE_EXTENSION:
            return 'scalar';
        case _kindsMjs.Kind.OBJECT_TYPE_EXTENSION:
            return 'object';
        case _kindsMjs.Kind.INTERFACE_TYPE_EXTENSION:
            return 'interface';
        case _kindsMjs.Kind.UNION_TYPE_EXTENSION:
            return 'union';
        case _kindsMjs.Kind.ENUM_TYPE_EXTENSION:
            return 'enum';
        case _kindsMjs.Kind.INPUT_OBJECT_TYPE_EXTENSION:
            return 'input object';
    } // istanbul ignore next (Not reachable. All possible types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected kind: ' + _inspectMjsDefault.default(kind));
}

},{"../../jsutils/inspect.mjs":"doI9y","../../jsutils/invariant.mjs":"gb46A","../../jsutils/didYouMean.mjs":"gdq7w","../../jsutils/suggestionList.mjs":"fxmKg","../../error/GraphQLError.mjs":"a8Vyv","../../language/kinds.mjs":"3gRFP","../../language/predicates.mjs":"6AiDB","../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1vmBo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ASTValidationContext", ()=>ASTValidationContext
);
parcelHelpers.export(exports, "SDLValidationContext", ()=>SDLValidationContext1
);
parcelHelpers.export(exports, "ValidationContext", ()=>ValidationContext1
);
var _kindsMjs = require("../language/kinds.mjs");
var _visitorMjs = require("../language/visitor.mjs");
var _typeInfoMjs = require("../utilities/TypeInfo.mjs");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var ASTValidationContext = /*#__PURE__*/ function() {
    function ASTValidationContext1(ast, onError) {
        this._ast = ast;
        this._fragments = undefined;
        this._fragmentSpreads = new Map();
        this._recursivelyReferencedFragments = new Map();
        this._onError = onError;
    }
    var _proto = ASTValidationContext1.prototype;
    _proto.reportError = function reportError(error) {
        this._onError(error);
    };
    _proto.getDocument = function getDocument() {
        return this._ast;
    };
    _proto.getFragment = function getFragment(name) {
        var fragments = this._fragments;
        if (!fragments) this._fragments = fragments = this.getDocument().definitions.reduce(function(frags, statement) {
            if (statement.kind === _kindsMjs.Kind.FRAGMENT_DEFINITION) frags[statement.name.value] = statement;
            return frags;
        }, Object.create(null));
        return fragments[name];
    };
    _proto.getFragmentSpreads = function getFragmentSpreads(node) {
        var spreads = this._fragmentSpreads.get(node);
        if (!spreads) {
            spreads = [];
            var setsToVisit = [
                node
            ];
            while(setsToVisit.length !== 0){
                var set = setsToVisit.pop();
                for(var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++){
                    var selection = _set$selections2[_i2];
                    if (selection.kind === _kindsMjs.Kind.FRAGMENT_SPREAD) spreads.push(selection);
                    else if (selection.selectionSet) setsToVisit.push(selection.selectionSet);
                }
            }
            this._fragmentSpreads.set(node, spreads);
        }
        return spreads;
    };
    _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
        var fragments = this._recursivelyReferencedFragments.get(operation);
        if (!fragments) {
            fragments = [];
            var collectedNames = Object.create(null);
            var nodesToVisit = [
                operation.selectionSet
            ];
            while(nodesToVisit.length !== 0){
                var node = nodesToVisit.pop();
                for(var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++){
                    var spread = _this$getFragmentSpre2[_i4];
                    var fragName = spread.name.value;
                    if (collectedNames[fragName] !== true) {
                        collectedNames[fragName] = true;
                        var fragment = this.getFragment(fragName);
                        if (fragment) {
                            fragments.push(fragment);
                            nodesToVisit.push(fragment.selectionSet);
                        }
                    }
                }
            }
            this._recursivelyReferencedFragments.set(operation, fragments);
        }
        return fragments;
    };
    return ASTValidationContext1;
}();
var SDLValidationContext1 = /*#__PURE__*/ function(_ASTValidationContext) {
    _inheritsLoose(SDLValidationContext2, _ASTValidationContext);
    function SDLValidationContext2(ast, schema, onError) {
        var _this;
        _this = _ASTValidationContext.call(this, ast, onError) || this;
        _this._schema = schema;
        return _this;
    }
    var _proto2 = SDLValidationContext2.prototype;
    _proto2.getSchema = function getSchema() {
        return this._schema;
    };
    return SDLValidationContext2;
}(ASTValidationContext);
var ValidationContext1 = /*#__PURE__*/ function(_ASTValidationContext2) {
    _inheritsLoose(ValidationContext2, _ASTValidationContext2);
    function ValidationContext2(schema, ast, typeInfo, onError) {
        var _this2;
        _this2 = _ASTValidationContext2.call(this, ast, onError) || this;
        _this2._schema = schema;
        _this2._typeInfo = typeInfo;
        _this2._variableUsages = new Map();
        _this2._recursiveVariableUsages = new Map();
        return _this2;
    }
    var _proto3 = ValidationContext2.prototype;
    _proto3.getSchema = function getSchema() {
        return this._schema;
    };
    _proto3.getVariableUsages = function getVariableUsages(node) {
        var usages = this._variableUsages.get(node);
        if (!usages) {
            var newUsages = [];
            var typeInfo = new _typeInfoMjs.TypeInfo(this._schema);
            _visitorMjs.visit(node, _typeInfoMjs.visitWithTypeInfo(typeInfo, {
                VariableDefinition: function VariableDefinition() {
                    return false;
                },
                Variable: function Variable(variable) {
                    newUsages.push({
                        node: variable,
                        type: typeInfo.getInputType(),
                        defaultValue: typeInfo.getDefaultValue()
                    });
                }
            }));
            usages = newUsages;
            this._variableUsages.set(node, usages);
        }
        return usages;
    };
    _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
        var usages = this._recursiveVariableUsages.get(operation);
        if (!usages) {
            usages = this.getVariableUsages(operation);
            for(var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++){
                var frag = _this$getRecursivelyR2[_i6];
                usages = usages.concat(this.getVariableUsages(frag));
            }
            this._recursiveVariableUsages.set(operation, usages);
        }
        return usages;
    };
    _proto3.getType = function getType() {
        return this._typeInfo.getType();
    };
    _proto3.getParentType = function getParentType() {
        return this._typeInfo.getParentType();
    };
    _proto3.getInputType = function getInputType() {
        return this._typeInfo.getInputType();
    };
    _proto3.getParentInputType = function getParentInputType() {
        return this._typeInfo.getParentInputType();
    };
    _proto3.getFieldDef = function getFieldDef() {
        return this._typeInfo.getFieldDef();
    };
    _proto3.getDirective = function getDirective() {
        return this._typeInfo.getDirective();
    };
    _proto3.getArgument = function getArgument() {
        return this._typeInfo.getArgument();
    };
    _proto3.getEnumValue = function getEnumValue() {
        return this._typeInfo.getEnumValue();
    };
    return ValidationContext2;
}(ASTValidationContext);

},{"../language/kinds.mjs":"3gRFP","../language/visitor.mjs":"bb6mn","../utilities/TypeInfo.mjs":"lH2p6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kgSsA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Terminology
 *
 * "Definitions" are the generic name for top-level statements in the document.
 * Examples of this include:
 * 1) Operations (such as a query)
 * 2) Fragments
 *
 * "Operations" are a generic name for requests in the document.
 * Examples of this include:
 * 1) query,
 * 2) mutation
 *
 * "Selections" are the definitions that can appear legally and at
 * single level of the query. These include:
 * 1) field references e.g "a"
 * 2) fragment "spreads" e.g. "...c"
 * 3) inline fragment "spreads" e.g. "...on Type { a }"
 */ /**
 * Data that must be available at all points during query execution.
 *
 * Namely, schema of the type system that is currently executing,
 * and the fragments defined in the query document
 */ parcelHelpers.export(exports, "execute", ()=>execute
);
/**
 * Also implements the "Evaluating requests" section of the GraphQL specification.
 * However, it guarantees to complete synchronously (or throw an error) assuming
 * that all field resolvers are also synchronous.
 */ parcelHelpers.export(exports, "executeSync", ()=>executeSync
);
/**
 * Essential assertions before executing to provide developer feedback for
 * improper use of the GraphQL library.
 *
 * @internal
 */ parcelHelpers.export(exports, "assertValidExecutionArguments", ()=>assertValidExecutionArguments
);
/**
 * Constructs a ExecutionContext object from the arguments passed to
 * execute, which we will pass throughout the other execution methods.
 *
 * Throws a GraphQLError if a valid execution context cannot be created.
 *
 * @internal
 */ parcelHelpers.export(exports, "buildExecutionContext", ()=>buildExecutionContext
);
/**
 * Given a selectionSet, adds all of the fields in that selection to
 * the passed in map of fields, and returns it at the end.
 *
 * CollectFields requires the "runtime type" of an object. For a field which
 * returns an Interface or Union type, the "runtime type" will be the actual
 * Object type returned by that field.
 *
 * @internal
 */ parcelHelpers.export(exports, "collectFields", ()=>collectFields
);
/**
 * @internal
 */ parcelHelpers.export(exports, "buildResolveInfo", ()=>buildResolveInfo
);
parcelHelpers.export(exports, "defaultTypeResolver", ()=>defaultTypeResolver
);
parcelHelpers.export(exports, "defaultFieldResolver", ()=>defaultFieldResolver
);
/**
 * This method looks up the field on the given type definition.
 * It has special casing for the three introspection fields,
 * __schema, __type and __typename. __typename is special because
 * it can always be queried as a field, even in situations where no
 * other fields are allowed, like on a Union. __schema and __type
 * could get automatically added to the query type, but that would
 * require mutating type definitions, which would cause issues.
 *
 * @internal
 */ parcelHelpers.export(exports, "getFieldDef", ()=>getFieldDef
);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _memoize3Mjs = require("../jsutils/memoize3.mjs");
var _memoize3MjsDefault = parcelHelpers.interopDefault(_memoize3Mjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _isPromiseMjs = require("../jsutils/isPromise.mjs");
var _isPromiseMjsDefault = parcelHelpers.interopDefault(_isPromiseMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _safeArrayFromMjs = require("../jsutils/safeArrayFrom.mjs");
var _safeArrayFromMjsDefault = parcelHelpers.interopDefault(_safeArrayFromMjs);
var _promiseReduceMjs = require("../jsutils/promiseReduce.mjs");
var _promiseReduceMjsDefault = parcelHelpers.interopDefault(_promiseReduceMjs);
var _promiseForObjectMjs = require("../jsutils/promiseForObject.mjs");
var _promiseForObjectMjsDefault = parcelHelpers.interopDefault(_promiseForObjectMjs);
var _pathMjs = require("../jsutils/Path.mjs");
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _locatedErrorMjs = require("../error/locatedError.mjs");
var _kindsMjs = require("../language/kinds.mjs");
var _validateMjs = require("../type/validate.mjs");
var _introspectionMjs = require("../type/introspection.mjs");
var _directivesMjs = require("../type/directives.mjs");
var _definitionMjs = require("../type/definition.mjs");
var _typeFromASTMjs = require("../utilities/typeFromAST.mjs");
var _getOperationRootTypeMjs = require("../utilities/getOperationRootType.mjs");
var _valuesMjs = require("./values.mjs");
function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {
    /* eslint-enable no-redeclare */ // Extract arguments from object args if provided.
    return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({
        schema: argsOrSchema,
        document: document,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        typeResolver: typeResolver
    });
}
function executeSync(args) {
    var result = executeImpl(args); // Assert that the execution was synchronous.
    if (_isPromiseMjsDefault.default(result)) throw new Error('GraphQL execution failed to complete synchronously.');
    return result;
}
function executeImpl(args) {
    var schema = args.schema, document = args.document, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.
    assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
    // a "Response" with only errors is returned.
    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.
    if (Array.isArray(exeContext)) return {
        errors: exeContext
    };
     // Return a Promise that will eventually resolve to the data described by
    // The "Response" section of the GraphQL specification.
    //
    // If errors are encountered while executing a GraphQL field, only that
    // field and its descendants will be omitted, and sibling fields will still
    // be executed. An execution which encounters errors will still result in a
    // resolved Promise.
    var data = executeOperation(exeContext, exeContext.operation, rootValue);
    return buildResponse(exeContext, data);
}
/**
 * Given a completed execution context and data, build the { errors, data }
 * response defined by the "Response" section of the GraphQL specification.
 */ function buildResponse(exeContext, data) {
    if (_isPromiseMjsDefault.default(data)) return data.then(function(resolved) {
        return buildResponse(exeContext, resolved);
    });
    return exeContext.errors.length === 0 ? {
        data: data
    } : {
        errors: exeContext.errors,
        data: data
    };
}
function assertValidExecutionArguments(schema, document, rawVariableValues) {
    document || _devAssertMjsDefault.default(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.
    _validateMjs.assertValidSchema(schema); // Variables, if provided, must be an object.
    rawVariableValues == null || _isObjectLikeMjsDefault.default(rawVariableValues) || _devAssertMjsDefault.default(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');
}
function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {
    var _definition$name, _operation$variableDe;
    var operation;
    var fragments = Object.create(null);
    for(var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++){
        var definition = _document$definitions2[_i2];
        switch(definition.kind){
            case _kindsMjs.Kind.OPERATION_DEFINITION:
                if (operationName == null) {
                    if (operation !== undefined) return [
                        new _graphQLErrorMjs.GraphQLError('Must provide operation name if query contains multiple operations.')
                    ];
                    operation = definition;
                } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) operation = definition;
                break;
            case _kindsMjs.Kind.FRAGMENT_DEFINITION:
                fragments[definition.name.value] = definition;
                break;
        }
    }
    if (!operation) {
        if (operationName != null) return [
            new _graphQLErrorMjs.GraphQLError("Unknown operation named \"".concat(operationName, "\"."))
        ];
        return [
            new _graphQLErrorMjs.GraphQLError('Must provide an operation.')
        ];
    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
    var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
    var coercedVariableValues = _valuesMjs.getVariableValues(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {
    }, {
        maxErrors: 50
    });
    if (coercedVariableValues.errors) return coercedVariableValues.errors;
    return {
        schema: schema,
        fragments: fragments,
        rootValue: rootValue,
        contextValue: contextValue,
        operation: operation,
        variableValues: coercedVariableValues.coerced,
        fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
        typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
        errors: []
    };
}
/**
 * Implements the "Evaluating operations" section of the spec.
 */ function executeOperation(exeContext, operation, rootValue) {
    var type = _getOperationRootTypeMjs.getOperationRootType(exeContext.schema, operation);
    var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
    var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,
    // at which point we still log the error and null the parent field, which
    // in this case is the entire response.
    try {
        var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);
        if (_isPromiseMjsDefault.default(result)) return result.then(undefined, function(error) {
            exeContext.errors.push(error);
            return Promise.resolve(null);
        });
        return result;
    } catch (error) {
        exeContext.errors.push(error);
        return null;
    }
}
/**
 * Implements the "Evaluating selection sets" section of the spec
 * for "write" mode.
 */ function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
    return _promiseReduceMjsDefault.default(Object.keys(fields), function(results, responseName) {
        var fieldNodes = fields[responseName];
        var fieldPath = _pathMjs.addPath(path, responseName, parentType.name);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
        if (result === undefined) return results;
        if (_isPromiseMjsDefault.default(result)) return result.then(function(resolvedResult) {
            results[responseName] = resolvedResult;
            return results;
        });
        results[responseName] = result;
        return results;
    }, Object.create(null));
}
/**
 * Implements the "Evaluating selection sets" section of the spec
 * for "read" mode.
 */ function executeFields(exeContext, parentType, sourceValue, path, fields) {
    var results = Object.create(null);
    var containsPromise = false;
    for(var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++){
        var responseName = _Object$keys2[_i4];
        var fieldNodes = fields[responseName];
        var fieldPath = _pathMjs.addPath(path, responseName, parentType.name);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
        if (result !== undefined) {
            results[responseName] = result;
            if (_isPromiseMjsDefault.default(result)) containsPromise = true;
        }
    } // If there are no promises, we can just return the object
    if (!containsPromise) return results;
     // Otherwise, results is a map from field name to the result of resolving that
    // field, which is possibly a promise. Return a promise that will return this
    // same map, but with any promises replaced with the values they resolved to.
    return _promiseForObjectMjsDefault.default(results);
}
function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
    for(var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++){
        var selection = _selectionSet$selecti2[_i6];
        switch(selection.kind){
            case _kindsMjs.Kind.FIELD:
                if (!shouldIncludeNode(exeContext, selection)) continue;
                var name = getFieldEntryKey(selection);
                if (!fields[name]) fields[name] = [];
                fields[name].push(selection);
                break;
            case _kindsMjs.Kind.INLINE_FRAGMENT:
                if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) continue;
                collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
                break;
            case _kindsMjs.Kind.FRAGMENT_SPREAD:
                var fragName = selection.name.value;
                if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) continue;
                visitedFragmentNames[fragName] = true;
                var fragment = exeContext.fragments[fragName];
                if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) continue;
                collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
                break;
        }
    }
    return fields;
}
/**
 * Determines if a field should be included based on the @include and @skip
 * directives, where @skip has higher precedence than @include.
 */ function shouldIncludeNode(exeContext, node) {
    var skip = _valuesMjs.getDirectiveValues(_directivesMjs.GraphQLSkipDirective, node, exeContext.variableValues);
    if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) return false;
    var include = _valuesMjs.getDirectiveValues(_directivesMjs.GraphQLIncludeDirective, node, exeContext.variableValues);
    if ((include === null || include === void 0 ? void 0 : include.if) === false) return false;
    return true;
}
/**
 * Determines if a fragment is applicable to the given type.
 */ function doesFragmentConditionMatch(exeContext, fragment, type) {
    var typeConditionNode = fragment.typeCondition;
    if (!typeConditionNode) return true;
    var conditionalType = _typeFromASTMjs.typeFromAST(exeContext.schema, typeConditionNode);
    if (conditionalType === type) return true;
    if (_definitionMjs.isAbstractType(conditionalType)) return exeContext.schema.isSubType(conditionalType, type);
    return false;
}
/**
 * Implements the logic to compute the key of a given field's entry
 */ function getFieldEntryKey(node) {
    return node.alias ? node.alias.value : node.name.value;
}
/**
 * Resolves the field on the given source object. In particular, this
 * figures out the value that the field returns by calling its resolve function,
 * then calls completeValue to complete promises, serialize scalars, or execute
 * the sub-selection-set for objects.
 */ function resolveField(exeContext, parentType, source, fieldNodes, path) {
    var _fieldDef$resolve;
    var fieldNode = fieldNodes[0];
    var fieldName = fieldNode.name.value;
    var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);
    if (!fieldDef) return;
    var returnType = fieldDef.type;
    var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).
    try {
        // Build a JS object of arguments from the field.arguments AST, using the
        // variables scope to fulfill any variable references.
        // TODO: find a way to memoize, in case this field is within a List type.
        var args = _valuesMjs.getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that
        // is provided to every resolve function within an execution. It is commonly
        // used to represent an authenticated user, or request-specific caches.
        var _contextValue = exeContext.contextValue;
        var result = resolveFn(source, args, _contextValue, info);
        var completed;
        if (_isPromiseMjsDefault.default(result)) completed = result.then(function(resolved) {
            return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
        });
        else completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
        if (_isPromiseMjsDefault.default(completed)) // Note: we don't rely on a `catch` method, but we do expect "thenable"
        // to take a second callback for the error case.
        return completed.then(undefined, function(rawError) {
            var error = _locatedErrorMjs.locatedError(rawError, fieldNodes, _pathMjs.pathToArray(path));
            return handleFieldError(error, returnType, exeContext);
        });
        return completed;
    } catch (rawError) {
        var error = _locatedErrorMjs.locatedError(rawError, fieldNodes, _pathMjs.pathToArray(path));
        return handleFieldError(error, returnType, exeContext);
    }
}
function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
    // The resolve function's optional fourth argument is a collection of
    // information about the current execution state.
    return {
        fieldName: fieldDef.name,
        fieldNodes: fieldNodes,
        returnType: fieldDef.type,
        parentType: parentType,
        path: path,
        schema: exeContext.schema,
        fragments: exeContext.fragments,
        rootValue: exeContext.rootValue,
        operation: exeContext.operation,
        variableValues: exeContext.variableValues
    };
}
function handleFieldError(error, returnType, exeContext) {
    // If the field type is non-nullable, then it is resolved without any
    // protection from errors, however it still properly locates the error.
    if (_definitionMjs.isNonNullType(returnType)) throw error;
     // Otherwise, error protection is applied, logging the error and resolving
    // a null value for this field if one is encountered.
    exeContext.errors.push(error);
    return null;
}
/**
 * Implements the instructions for completeValue as defined in the
 * "Field entries" section of the spec.
 *
 * If the field type is Non-Null, then this recursively completes the value
 * for the inner type. It throws a field error if that completion returns null,
 * as per the "Nullability" section of the spec.
 *
 * If the field type is a List, then this recursively completes the value
 * for the inner type on each item in the list.
 *
 * If the field type is a Scalar or Enum, ensures the completed value is a legal
 * value of the type by calling the `serialize` method of GraphQL type
 * definition.
 *
 * If the field is an abstract type, determine the runtime type of the value
 * and then complete based on that type
 *
 * Otherwise, the field type expects a sub-selection set, and will complete the
 * value by evaluating all sub-selections.
 */ function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
    // If result is an Error, throw a located error.
    if (result instanceof Error) throw result;
     // If field type is NonNull, complete for inner type, and throw field error
    // if result is null.
    if (_definitionMjs.isNonNullType(returnType)) {
        var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);
        if (completed === null) throw new Error("Cannot return null for non-nullable field ".concat(info.parentType.name, ".").concat(info.fieldName, "."));
        return completed;
    } // If result value is null or undefined then return null.
    if (result == null) return null;
     // If field type is List, complete each item in the list with the inner type
    if (_definitionMjs.isListType(returnType)) return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
     // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
    // returning null if serialization is not possible.
    if (_definitionMjs.isLeafType(returnType)) return completeLeafValue(returnType, result);
     // If field type is an abstract type, Interface or Union, determine the
    // runtime Object type and complete for that type.
    if (_definitionMjs.isAbstractType(returnType)) return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
     // If field type is Object, execute and complete all sub-selections.
    // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (_definitionMjs.isObjectType(returnType)) return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
     // istanbul ignore next (Not reachable. All possible output types have been considered)
    _invariantMjsDefault.default(0, 'Cannot complete value of unexpected output type: ' + _inspectMjsDefault.default(returnType));
}
/**
 * Complete a list value by completing each item in the list with the
 * inner type
 */ function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
    // This is specified as a simple map, however we're optimizing the path
    // where the list contains no Promises by avoiding creating another Promise.
    var itemType = returnType.ofType;
    var containsPromise = false;
    var completedResults = _safeArrayFromMjsDefault.default(result, function(item, index) {
        // No need to modify the info object containing the path,
        // since from here on it is not ever accessed by resolver functions.
        var itemPath = _pathMjs.addPath(path, index, undefined);
        try {
            var completedItem;
            if (_isPromiseMjsDefault.default(item)) completedItem = item.then(function(resolved) {
                return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);
            });
            else completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
            if (_isPromiseMjsDefault.default(completedItem)) {
                containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
                // to take a second callback for the error case.
                return completedItem.then(undefined, function(rawError) {
                    var error = _locatedErrorMjs.locatedError(rawError, fieldNodes, _pathMjs.pathToArray(itemPath));
                    return handleFieldError(error, itemType, exeContext);
                });
            }
            return completedItem;
        } catch (rawError) {
            var error = _locatedErrorMjs.locatedError(rawError, fieldNodes, _pathMjs.pathToArray(itemPath));
            return handleFieldError(error, itemType, exeContext);
        }
    });
    if (completedResults == null) throw new _graphQLErrorMjs.GraphQLError("Expected Iterable, but did not find one for field \"".concat(info.parentType.name, ".").concat(info.fieldName, "\"."));
    return containsPromise ? Promise.all(completedResults) : completedResults;
}
/**
 * Complete a Scalar or Enum by serializing to a valid value, returning
 * null if serialization is not possible.
 */ function completeLeafValue(returnType, result) {
    var serializedResult = returnType.serialize(result);
    if (serializedResult === undefined) throw new Error("Expected a value of type \"".concat(_inspectMjsDefault.default(returnType), "\" but ") + "received: ".concat(_inspectMjsDefault.default(result)));
    return serializedResult;
}
/**
 * Complete a value of an abstract type by determining the runtime object type
 * of that value, then complete the value for that type.
 */ function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
    var _returnType$resolveTy;
    var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
    var contextValue = exeContext.contextValue;
    var runtimeType = resolveTypeFn(result, contextValue, info, returnType);
    if (_isPromiseMjsDefault.default(runtimeType)) return runtimeType.then(function(resolvedRuntimeType) {
        return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
    });
    return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
}
function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
    if (runtimeTypeOrName == null) throw new _graphQLErrorMjs.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\". Either the \"").concat(returnType.name, "\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function."), fieldNodes);
     // FIXME: temporary workaround until support for passing object types would be removed in v16.0.0
    var runtimeTypeName = _definitionMjs.isNamedType(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;
    if (typeof runtimeTypeName !== 'string') throw new _graphQLErrorMjs.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\" with ") + "value ".concat(_inspectMjsDefault.default(result), ", received \"").concat(_inspectMjsDefault.default(runtimeTypeOrName), "\"."));
    var runtimeType = exeContext.schema.getType(runtimeTypeName);
    if (runtimeType == null) throw new _graphQLErrorMjs.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a type \"").concat(runtimeTypeName, "\" that does not exist inside schema."), fieldNodes);
    if (!_definitionMjs.isObjectType(runtimeType)) throw new _graphQLErrorMjs.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolve to a non-object type \"").concat(runtimeTypeName, "\"."), fieldNodes);
    if (!exeContext.schema.isSubType(returnType, runtimeType)) throw new _graphQLErrorMjs.GraphQLError("Runtime Object type \"".concat(runtimeType.name, "\" is not a possible type for \"").concat(returnType.name, "\"."), fieldNodes);
    return runtimeType;
}
/**
 * Complete an Object value by executing all sub-selections.
 */ function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
    // If there is an isTypeOf predicate function, call it with the
    // current result. If isTypeOf returns false, then raise an error rather
    // than continuing execution.
    if (returnType.isTypeOf) {
        var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
        if (_isPromiseMjsDefault.default(isTypeOf)) return isTypeOf.then(function(resolvedIsTypeOf) {
            if (!resolvedIsTypeOf) throw invalidReturnTypeError(returnType, result, fieldNodes);
            return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
        });
        if (!isTypeOf) throw invalidReturnTypeError(returnType, result, fieldNodes);
    }
    return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);
}
function invalidReturnTypeError(returnType, result, fieldNodes) {
    return new _graphQLErrorMjs.GraphQLError("Expected value of type \"".concat(returnType.name, "\" but got: ").concat(_inspectMjsDefault.default(result), "."), fieldNodes);
}
function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {
    // Collect sub-fields to execute to complete this value.
    var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
    return executeFields(exeContext, returnType, result, path, subFieldNodes);
}
/**
 * A memoized collection of relevant subfields with regard to the return
 * type. Memoizing ensures the subfields are not repeatedly calculated, which
 * saves overhead when resolving lists of values.
 */ var collectSubfields = _memoize3MjsDefault.default(_collectSubfields);
function _collectSubfields(exeContext, returnType, fieldNodes) {
    var subFieldNodes = Object.create(null);
    var visitedFragmentNames = Object.create(null);
    for(var _i8 = 0; _i8 < fieldNodes.length; _i8++){
        var node = fieldNodes[_i8];
        if (node.selectionSet) subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
    }
    return subFieldNodes;
}
var defaultTypeResolver = function defaultTypeResolver1(value, contextValue, info, abstractType) {
    // First, look for `__typename`.
    if (_isObjectLikeMjsDefault.default(value) && typeof value.__typename === 'string') return value.__typename;
     // Otherwise, test each possible type.
    var possibleTypes = info.schema.getPossibleTypes(abstractType);
    var promisedIsTypeOfResults = [];
    for(var i = 0; i < possibleTypes.length; i++){
        var type = possibleTypes[i];
        if (type.isTypeOf) {
            var isTypeOfResult = type.isTypeOf(value, contextValue, info);
            if (_isPromiseMjsDefault.default(isTypeOfResult)) promisedIsTypeOfResults[i] = isTypeOfResult;
            else if (isTypeOfResult) return type.name;
        }
    }
    if (promisedIsTypeOfResults.length) return Promise.all(promisedIsTypeOfResults).then(function(isTypeOfResults) {
        for(var _i9 = 0; _i9 < isTypeOfResults.length; _i9++){
            if (isTypeOfResults[_i9]) return possibleTypes[_i9].name;
        }
    });
};
var defaultFieldResolver = function defaultFieldResolver1(source, args, contextValue, info) {
    // ensure source is a value for which property access is acceptable.
    if (_isObjectLikeMjsDefault.default(source) || typeof source === 'function') {
        var property = source[info.fieldName];
        if (typeof property === 'function') return source[info.fieldName](args, contextValue, info);
        return property;
    }
};
function getFieldDef(schema, parentType, fieldName) {
    if (fieldName === _introspectionMjs.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) return _introspectionMjs.SchemaMetaFieldDef;
    else if (fieldName === _introspectionMjs.TypeMetaFieldDef.name && schema.getQueryType() === parentType) return _introspectionMjs.TypeMetaFieldDef;
    else if (fieldName === _introspectionMjs.TypeNameMetaFieldDef.name) return _introspectionMjs.TypeNameMetaFieldDef;
    return parentType.getFields()[fieldName];
}

},{"../jsutils/inspect.mjs":"doI9y","../jsutils/memoize3.mjs":"coZYV","../jsutils/invariant.mjs":"gb46A","../jsutils/devAssert.mjs":"iZbmm","../jsutils/isPromise.mjs":"gwsPK","../jsutils/isObjectLike.mjs":"6kDBW","../jsutils/safeArrayFrom.mjs":"kM2Ni","../jsutils/promiseReduce.mjs":"3xJHA","../jsutils/promiseForObject.mjs":"3CqWE","../jsutils/Path.mjs":"cVvVA","../error/GraphQLError.mjs":"a8Vyv","../error/locatedError.mjs":"hNmuj","../language/kinds.mjs":"3gRFP","../type/validate.mjs":"ak8ik","../type/introspection.mjs":"ezRs8","../type/directives.mjs":"crfoz","../type/definition.mjs":"6PVmH","../utilities/typeFromAST.mjs":"3VgoG","../utilities/getOperationRootType.mjs":"9aJoa","./values.mjs":"jCwPJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"coZYV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function memoize3(fn) {
    var cache0;
    return function memoized(a1, a2, a3) {
        if (!cache0) cache0 = new WeakMap();
        var cache1 = cache0.get(a1);
        var cache2;
        if (cache1) {
            cache2 = cache1.get(a2);
            if (cache2) {
                var cachedValue = cache2.get(a3);
                if (cachedValue !== undefined) return cachedValue;
            }
        } else {
            cache1 = new WeakMap();
            cache0.set(a1, cache1);
        }
        if (!cache2) {
            cache2 = new WeakMap();
            cache1.set(a2, cache2);
        }
        var newValue = fn(a1, a2, a3);
        cache2.set(a3, newValue);
        return newValue;
    };
}
exports.default = memoize3;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3xJHA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPromiseMjs = require("./isPromise.mjs");
var _isPromiseMjsDefault = parcelHelpers.interopDefault(_isPromiseMjs);
function promiseReduce(values, callback, initialValue) {
    return values.reduce(function(previous, value) {
        return _isPromiseMjsDefault.default(previous) ? previous.then(function(resolved) {
            return callback(resolved, value);
        }) : callback(previous, value);
    }, initialValue);
}
exports.default = promiseReduce;

},{"./isPromise.mjs":"gwsPK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3CqWE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function promiseForObject(object) {
    var keys = Object.keys(object);
    var valuesAndPromises = keys.map(function(name) {
        return object[name];
    });
    return Promise.all(valuesAndPromises).then(function(values) {
        return values.reduce(function(resolvedObject, value, i) {
            resolvedObject[keys[i]] = value;
            return resolvedObject;
        }, Object.create(null));
    });
}
exports.default = promiseForObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cVvVA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given a Path and a key, return a new Path containing the new key.
 */ parcelHelpers.export(exports, "addPath", ()=>addPath
);
/**
 * Given a Path, return an Array of the path keys.
 */ parcelHelpers.export(exports, "pathToArray", ()=>pathToArray
);
function addPath(prev, key, typename) {
    return {
        prev: prev,
        key: key,
        typename: typename
    };
}
function pathToArray(path) {
    var flattened = [];
    var curr = path;
    while(curr){
        flattened.push(curr.key);
        curr = curr.prev;
    }
    return flattened.reverse();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9aJoa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Extracts the root type of the operation from the schema.
 */ parcelHelpers.export(exports, "getOperationRootType", ()=>getOperationRootType
);
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
function getOperationRootType(schema, operation) {
    if (operation.operation === 'query') {
        var queryType = schema.getQueryType();
        if (!queryType) throw new _graphQLErrorMjs.GraphQLError('Schema does not define the required query root type.', operation);
        return queryType;
    }
    if (operation.operation === 'mutation') {
        var mutationType = schema.getMutationType();
        if (!mutationType) throw new _graphQLErrorMjs.GraphQLError('Schema is not configured for mutations.', operation);
        return mutationType;
    }
    if (operation.operation === 'subscription') {
        var subscriptionType = schema.getSubscriptionType();
        if (!subscriptionType) throw new _graphQLErrorMjs.GraphQLError('Schema is not configured for subscriptions.', operation);
        return subscriptionType;
    }
    throw new _graphQLErrorMjs.GraphQLError('Can only have query, mutation and subscription operations.', operation);
}

},{"../error/GraphQLError.mjs":"a8Vyv","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jCwPJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Prepares an object map of variableValues of the correct type based on the
 * provided variable definitions and arbitrary input. If the input cannot be
 * parsed to match the variable definitions, a GraphQLError will be thrown.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 *
 * @internal
 */ parcelHelpers.export(exports, "getVariableValues", ()=>getVariableValues
);
/**
 * Prepares an object map of argument values given a list of argument
 * definitions and list of argument AST nodes.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 *
 * @internal
 */ parcelHelpers.export(exports, "getArgumentValues", ()=>getArgumentValues
);
/**
 * Prepares an object map of argument values given a directive definition
 * and a AST node which may contain directives. Optionally also accepts a map
 * of variable values.
 *
 * If the directive does not exist on the node, returns undefined.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */ parcelHelpers.export(exports, "getDirectiveValues", ()=>getDirectiveValues
);
var _findMjs = require("../polyfills/find.mjs");
var _findMjsDefault = parcelHelpers.interopDefault(_findMjs);
var _keyMapMjs = require("../jsutils/keyMap.mjs");
var _keyMapMjsDefault = parcelHelpers.interopDefault(_keyMapMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _printPathArrayMjs = require("../jsutils/printPathArray.mjs");
var _printPathArrayMjsDefault = parcelHelpers.interopDefault(_printPathArrayMjs);
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _kindsMjs = require("../language/kinds.mjs");
var _printerMjs = require("../language/printer.mjs");
var _definitionMjs = require("../type/definition.mjs");
var _typeFromASTMjs = require("../utilities/typeFromAST.mjs");
var _valueFromASTMjs = require("../utilities/valueFromAST.mjs");
var _coerceInputValueMjs = require("../utilities/coerceInputValue.mjs");
function getVariableValues(schema, varDefNodes, inputs, options) {
    var errors = [];
    var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;
    try {
        var coerced = coerceVariableValues(schema, varDefNodes, inputs, function(error) {
            if (maxErrors != null && errors.length >= maxErrors) throw new _graphQLErrorMjs.GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');
            errors.push(error);
        });
        if (errors.length === 0) return {
            coerced: coerced
        };
    } catch (error) {
        errors.push(error);
    }
    return {
        errors: errors
    };
}
function coerceVariableValues(schema, varDefNodes, inputs, onError) {
    var coercedValues = {
    };
    var _loop = function _loop1(_i2) {
        var varDefNode = varDefNodes[_i2];
        var varName = varDefNode.variable.name.value;
        var varType = _typeFromASTMjs.typeFromAST(schema, varDefNode.type);
        if (!_definitionMjs.isInputType(varType)) {
            // Must use input types for variables. This should be caught during
            // validation, however is checked again here for safety.
            var varTypeStr = _printerMjs.print(varDefNode.type);
            onError(new _graphQLErrorMjs.GraphQLError("Variable \"$".concat(varName, "\" expected value of type \"").concat(varTypeStr, "\" which cannot be used as an input type."), varDefNode.type));
            return "continue";
        }
        if (!hasOwnProperty(inputs, varName)) {
            if (varDefNode.defaultValue) coercedValues[varName] = _valueFromASTMjs.valueFromAST(varDefNode.defaultValue, varType);
            else if (_definitionMjs.isNonNullType(varType)) {
                var _varTypeStr = _inspectMjsDefault.default(varType);
                onError(new _graphQLErrorMjs.GraphQLError("Variable \"$".concat(varName, "\" of required type \"").concat(_varTypeStr, "\" was not provided."), varDefNode));
            }
            return "continue";
        }
        var value = inputs[varName];
        if (value === null && _definitionMjs.isNonNullType(varType)) {
            var _varTypeStr2 = _inspectMjsDefault.default(varType);
            onError(new _graphQLErrorMjs.GraphQLError("Variable \"$".concat(varName, "\" of non-null type \"").concat(_varTypeStr2, "\" must not be null."), varDefNode));
            return "continue";
        }
        coercedValues[varName] = _coerceInputValueMjs.coerceInputValue(value, varType, function(path, invalidValue, error) {
            var prefix = "Variable \"$".concat(varName, "\" got invalid value ") + _inspectMjsDefault.default(invalidValue);
            if (path.length > 0) prefix += " at \"".concat(varName).concat(_printPathArrayMjsDefault.default(path), "\"");
            onError(new _graphQLErrorMjs.GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));
        });
    };
    for(var _i2 = 0; _i2 < varDefNodes.length; _i2++){
        var _ret = _loop(_i2);
        if (_ret === "continue") continue;
    }
    return coercedValues;
}
function getArgumentValues(def, node, variableValues) {
    var _node$arguments;
    var coercedValues = {
    }; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
    var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
    var argNodeMap = _keyMapMjsDefault.default(argumentNodes, function(arg) {
        return arg.name.value;
    });
    for(var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++){
        var argDef = _def$args2[_i4];
        var name = argDef.name;
        var argType = argDef.type;
        var argumentNode = argNodeMap[name];
        if (!argumentNode) {
            if (argDef.defaultValue !== undefined) coercedValues[name] = argDef.defaultValue;
            else if (_definitionMjs.isNonNullType(argType)) throw new _graphQLErrorMjs.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat(_inspectMjsDefault.default(argType), "\" ") + 'was not provided.', node);
            continue;
        }
        var valueNode = argumentNode.value;
        var isNull = valueNode.kind === _kindsMjs.Kind.NULL;
        if (valueNode.kind === _kindsMjs.Kind.VARIABLE) {
            var variableName = valueNode.name.value;
            if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
                if (argDef.defaultValue !== undefined) coercedValues[name] = argDef.defaultValue;
                else if (_definitionMjs.isNonNullType(argType)) throw new _graphQLErrorMjs.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat(_inspectMjsDefault.default(argType), "\" ") + "was provided the variable \"$".concat(variableName, "\" which was not provided a runtime value."), valueNode);
                continue;
            }
            isNull = variableValues[variableName] == null;
        }
        if (isNull && _definitionMjs.isNonNullType(argType)) throw new _graphQLErrorMjs.GraphQLError("Argument \"".concat(name, "\" of non-null type \"").concat(_inspectMjsDefault.default(argType), "\" ") + 'must not be null.', valueNode);
        var coercedValue = _valueFromASTMjs.valueFromAST(valueNode, argType, variableValues);
        if (coercedValue === undefined) // Note: ValuesOfCorrectTypeRule validation should catch this before
        // execution. This is a runtime check to ensure execution does not
        // continue with an invalid argument value.
        throw new _graphQLErrorMjs.GraphQLError("Argument \"".concat(name, "\" has invalid value ").concat(_printerMjs.print(valueNode), "."), valueNode);
        coercedValues[name] = coercedValue;
    }
    return coercedValues;
}
function getDirectiveValues(directiveDef, node, variableValues) {
    var directiveNode = node.directives && _findMjsDefault.default(node.directives, function(directive) {
        return directive.name.value === directiveDef.name;
    });
    if (directiveNode) return getArgumentValues(directiveDef, directiveNode, variableValues);
}
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"../polyfills/find.mjs":"SBobE","../jsutils/keyMap.mjs":"53ed0","../jsutils/inspect.mjs":"doI9y","../jsutils/printPathArray.mjs":"8MjyQ","../error/GraphQLError.mjs":"a8Vyv","../language/kinds.mjs":"3gRFP","../language/printer.mjs":"bEnFw","../type/definition.mjs":"6PVmH","../utilities/typeFromAST.mjs":"3VgoG","../utilities/valueFromAST.mjs":"chd8v","../utilities/coerceInputValue.mjs":"gbRLE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8MjyQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function printPathArray(path) {
    return path.map(function(key) {
        return typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key;
    }).join('');
}
exports.default = printPathArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"chd8v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * GraphQL Value literals.
 *
 * Returns `undefined` when the value could not be validly coerced according to
 * the provided type.
 *
 * | GraphQL Value        | JSON Value    |
 * | -------------------- | ------------- |
 * | Input Object         | Object        |
 * | List                 | Array         |
 * | Boolean              | Boolean       |
 * | String               | String        |
 * | Int / Float          | Number        |
 * | Enum Value           | Mixed         |
 * | NullValue            | null          |
 *
 */ parcelHelpers.export(exports, "valueFromAST", ()=>valueFromAST
) // Returns true if the provided valueNode is a variable which is not defined
;
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _keyMapMjs = require("../jsutils/keyMap.mjs");
var _keyMapMjsDefault = parcelHelpers.interopDefault(_keyMapMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _kindsMjs = require("../language/kinds.mjs");
var _definitionMjs = require("../type/definition.mjs");
function valueFromAST(valueNode, type, variables) {
    if (!valueNode) // When there is no node, then there is also no value.
    // Importantly, this is different from returning the value null.
    return;
    if (valueNode.kind === _kindsMjs.Kind.VARIABLE) {
        var variableName = valueNode.name.value;
        if (variables == null || variables[variableName] === undefined) // No valid return value.
        return;
        var variableValue = variables[variableName];
        if (variableValue === null && _definitionMjs.isNonNullType(type)) return; // Invalid: intentionally return no value.
         // Note: This does no further checking that this variable is correct.
        // This assumes that this query has been validated and the variable
        // usage here is of the correct type.
        return variableValue;
    }
    if (_definitionMjs.isNonNullType(type)) {
        if (valueNode.kind === _kindsMjs.Kind.NULL) return; // Invalid: intentionally return no value.
        return valueFromAST(valueNode, type.ofType, variables);
    }
    if (valueNode.kind === _kindsMjs.Kind.NULL) // This is explicitly returning the value null.
    return null;
    if (_definitionMjs.isListType(type)) {
        var itemType = type.ofType;
        if (valueNode.kind === _kindsMjs.Kind.LIST) {
            var coercedValues = [];
            for(var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++){
                var itemNode = _valueNode$values2[_i2];
                if (isMissingVariable(itemNode, variables)) {
                    // If an array contains a missing variable, it is either coerced to
                    // null or if the item type is non-null, it considered invalid.
                    if (_definitionMjs.isNonNullType(itemType)) return; // Invalid: intentionally return no value.
                    coercedValues.push(null);
                } else {
                    var itemValue = valueFromAST(itemNode, itemType, variables);
                    if (itemValue === undefined) return; // Invalid: intentionally return no value.
                    coercedValues.push(itemValue);
                }
            }
            return coercedValues;
        }
        var coercedValue = valueFromAST(valueNode, itemType, variables);
        if (coercedValue === undefined) return; // Invalid: intentionally return no value.
        return [
            coercedValue
        ];
    }
    if (_definitionMjs.isInputObjectType(type)) {
        if (valueNode.kind !== _kindsMjs.Kind.OBJECT) return; // Invalid: intentionally return no value.
        var coercedObj = Object.create(null);
        var fieldNodes = _keyMapMjsDefault.default(valueNode.fields, function(field) {
            return field.name.value;
        });
        for(var _i4 = 0, _objectValues2 = _objectValuesMjsDefault.default(type.getFields()); _i4 < _objectValues2.length; _i4++){
            var field = _objectValues2[_i4];
            var fieldNode = fieldNodes[field.name];
            if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
                if (field.defaultValue !== undefined) coercedObj[field.name] = field.defaultValue;
                else if (_definitionMjs.isNonNullType(field.type)) return; // Invalid: intentionally return no value.
                continue;
            }
            var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
            if (fieldValue === undefined) return; // Invalid: intentionally return no value.
            coercedObj[field.name] = fieldValue;
        }
        return coercedObj;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (_definitionMjs.isLeafType(type)) {
        // Scalars and Enums fulfill parsing a literal value via parseLiteral().
        // Invalid values represent a failure to parse correctly, in which case
        // no value is returned.
        var result;
        try {
            result = type.parseLiteral(valueNode, variables);
        } catch (_error) {
            return; // Invalid: intentionally return no value.
        }
        if (result === undefined) return; // Invalid: intentionally return no value.
        return result;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected input type: ' + _inspectMjsDefault.default(type));
}
// in the set of variables.
function isMissingVariable(valueNode, variables) {
    return valueNode.kind === _kindsMjs.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/keyMap.mjs":"53ed0","../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../language/kinds.mjs":"3gRFP","../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gbRLE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Coerces a JavaScript value given a GraphQL Input Type.
 */ parcelHelpers.export(exports, "coerceInputValue", ()=>coerceInputValue
);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _didYouMeanMjs = require("../jsutils/didYouMean.mjs");
var _didYouMeanMjsDefault = parcelHelpers.interopDefault(_didYouMeanMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _safeArrayFromMjs = require("../jsutils/safeArrayFrom.mjs");
var _safeArrayFromMjsDefault = parcelHelpers.interopDefault(_safeArrayFromMjs);
var _suggestionListMjs = require("../jsutils/suggestionList.mjs");
var _suggestionListMjsDefault = parcelHelpers.interopDefault(_suggestionListMjs);
var _printPathArrayMjs = require("../jsutils/printPathArray.mjs");
var _printPathArrayMjsDefault = parcelHelpers.interopDefault(_printPathArrayMjs);
var _pathMjs = require("../jsutils/Path.mjs");
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _definitionMjs = require("../type/definition.mjs");
function coerceInputValue(inputValue, type) {
    var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;
    return coerceInputValueImpl(inputValue, type, onError);
}
function defaultOnError(path, invalidValue, error) {
    var errorPrefix = 'Invalid value ' + _inspectMjsDefault.default(invalidValue);
    if (path.length > 0) errorPrefix += " at \"value".concat(_printPathArrayMjsDefault.default(path), "\"");
    error.message = errorPrefix + ': ' + error.message;
    throw error;
}
function coerceInputValueImpl(inputValue, type, onError, path) {
    if (_definitionMjs.isNonNullType(type)) {
        if (inputValue != null) return coerceInputValueImpl(inputValue, type.ofType, onError, path);
        onError(_pathMjs.pathToArray(path), inputValue, new _graphQLErrorMjs.GraphQLError("Expected non-nullable type \"".concat(_inspectMjsDefault.default(type), "\" not to be null.")));
        return;
    }
    if (inputValue == null) // Explicitly return the value null.
    return null;
    if (_definitionMjs.isListType(type)) {
        var itemType = type.ofType;
        var coercedList = _safeArrayFromMjsDefault.default(inputValue, function(itemValue, index) {
            var itemPath = _pathMjs.addPath(path, index, undefined);
            return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
        });
        if (coercedList != null) return coercedList;
         // Lists accept a non-list value as a list of one.
        return [
            coerceInputValueImpl(inputValue, itemType, onError, path)
        ];
    }
    if (_definitionMjs.isInputObjectType(type)) {
        if (!_isObjectLikeMjsDefault.default(inputValue)) {
            onError(_pathMjs.pathToArray(path), inputValue, new _graphQLErrorMjs.GraphQLError("Expected type \"".concat(type.name, "\" to be an object.")));
            return;
        }
        var coercedValue = {
        };
        var fieldDefs = type.getFields();
        for(var _i2 = 0, _objectValues2 = _objectValuesMjsDefault.default(fieldDefs); _i2 < _objectValues2.length; _i2++){
            var field = _objectValues2[_i2];
            var fieldValue = inputValue[field.name];
            if (fieldValue === undefined) {
                if (field.defaultValue !== undefined) coercedValue[field.name] = field.defaultValue;
                else if (_definitionMjs.isNonNullType(field.type)) {
                    var typeStr = _inspectMjsDefault.default(field.type);
                    onError(_pathMjs.pathToArray(path), inputValue, new _graphQLErrorMjs.GraphQLError("Field \"".concat(field.name, "\" of required type \"").concat(typeStr, "\" was not provided.")));
                }
                continue;
            }
            coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, _pathMjs.addPath(path, field.name, type.name));
        } // Ensure every provided field is defined.
        for(var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++){
            var fieldName = _Object$keys2[_i4];
            if (!fieldDefs[fieldName]) {
                var suggestions = _suggestionListMjsDefault.default(fieldName, Object.keys(type.getFields()));
                onError(_pathMjs.pathToArray(path), inputValue, new _graphQLErrorMjs.GraphQLError("Field \"".concat(fieldName, "\" is not defined by type \"").concat(type.name, "\".") + _didYouMeanMjsDefault.default(suggestions)));
            }
        }
        return coercedValue;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (_definitionMjs.isLeafType(type)) {
        var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
        // which can throw to indicate failure. If it throws, maintain a reference
        // to the original error.
        try {
            parseResult = type.parseValue(inputValue);
        } catch (error) {
            if (error instanceof _graphQLErrorMjs.GraphQLError) onError(_pathMjs.pathToArray(path), inputValue, error);
            else onError(_pathMjs.pathToArray(path), inputValue, new _graphQLErrorMjs.GraphQLError("Expected type \"".concat(type.name, "\". ") + error.message, undefined, undefined, undefined, undefined, error));
            return;
        }
        if (parseResult === undefined) onError(_pathMjs.pathToArray(path), inputValue, new _graphQLErrorMjs.GraphQLError("Expected type \"".concat(type.name, "\".")));
        return parseResult;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected input type: ' + _inspectMjsDefault.default(type));
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../jsutils/didYouMean.mjs":"gdq7w","../jsutils/isObjectLike.mjs":"6kDBW","../jsutils/safeArrayFrom.mjs":"kM2Ni","../jsutils/suggestionList.mjs":"fxmKg","../jsutils/printPathArray.mjs":"8MjyQ","../jsutils/Path.mjs":"cVvVA","../error/GraphQLError.mjs":"a8Vyv","../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dgKM1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSchema", ()=>_schemaMjs.isSchema
);
parcelHelpers.export(exports, "assertSchema", ()=>_schemaMjs.assertSchema
);
parcelHelpers.export(exports, "GraphQLSchema", ()=>_schemaMjs.GraphQLSchema
);
parcelHelpers.export(exports, "isType", ()=>_definitionMjs.isType
);
parcelHelpers.export(exports, "isScalarType", ()=>_definitionMjs.isScalarType
);
parcelHelpers.export(exports, "isObjectType", ()=>_definitionMjs.isObjectType
);
parcelHelpers.export(exports, "isInterfaceType", ()=>_definitionMjs.isInterfaceType
);
parcelHelpers.export(exports, "isUnionType", ()=>_definitionMjs.isUnionType
);
parcelHelpers.export(exports, "isEnumType", ()=>_definitionMjs.isEnumType
);
parcelHelpers.export(exports, "isInputObjectType", ()=>_definitionMjs.isInputObjectType
);
parcelHelpers.export(exports, "isListType", ()=>_definitionMjs.isListType
);
parcelHelpers.export(exports, "isNonNullType", ()=>_definitionMjs.isNonNullType
);
parcelHelpers.export(exports, "isInputType", ()=>_definitionMjs.isInputType
);
parcelHelpers.export(exports, "isOutputType", ()=>_definitionMjs.isOutputType
);
parcelHelpers.export(exports, "isLeafType", ()=>_definitionMjs.isLeafType
);
parcelHelpers.export(exports, "isCompositeType", ()=>_definitionMjs.isCompositeType
);
parcelHelpers.export(exports, "isAbstractType", ()=>_definitionMjs.isAbstractType
);
parcelHelpers.export(exports, "isWrappingType", ()=>_definitionMjs.isWrappingType
);
parcelHelpers.export(exports, "isNullableType", ()=>_definitionMjs.isNullableType
);
parcelHelpers.export(exports, "isNamedType", ()=>_definitionMjs.isNamedType
);
parcelHelpers.export(exports, "isRequiredArgument", ()=>_definitionMjs.isRequiredArgument
);
parcelHelpers.export(exports, "isRequiredInputField", ()=>_definitionMjs.isRequiredInputField
);
parcelHelpers.export(exports, "assertType", ()=>_definitionMjs.assertType
);
parcelHelpers.export(exports, "assertScalarType", ()=>_definitionMjs.assertScalarType
);
parcelHelpers.export(exports, "assertObjectType", ()=>_definitionMjs.assertObjectType
);
parcelHelpers.export(exports, "assertInterfaceType", ()=>_definitionMjs.assertInterfaceType
);
parcelHelpers.export(exports, "assertUnionType", ()=>_definitionMjs.assertUnionType
);
parcelHelpers.export(exports, "assertEnumType", ()=>_definitionMjs.assertEnumType
);
parcelHelpers.export(exports, "assertInputObjectType", ()=>_definitionMjs.assertInputObjectType
);
parcelHelpers.export(exports, "assertListType", ()=>_definitionMjs.assertListType
);
parcelHelpers.export(exports, "assertNonNullType", ()=>_definitionMjs.assertNonNullType
);
parcelHelpers.export(exports, "assertInputType", ()=>_definitionMjs.assertInputType
);
parcelHelpers.export(exports, "assertOutputType", ()=>_definitionMjs.assertOutputType
);
parcelHelpers.export(exports, "assertLeafType", ()=>_definitionMjs.assertLeafType
);
parcelHelpers.export(exports, "assertCompositeType", ()=>_definitionMjs.assertCompositeType
);
parcelHelpers.export(exports, "assertAbstractType", ()=>_definitionMjs.assertAbstractType
);
parcelHelpers.export(exports, "assertWrappingType", ()=>_definitionMjs.assertWrappingType
);
parcelHelpers.export(exports, "assertNullableType", ()=>_definitionMjs.assertNullableType
);
parcelHelpers.export(exports, "assertNamedType", ()=>_definitionMjs.assertNamedType
);
parcelHelpers.export(exports, "getNullableType", ()=>_definitionMjs.getNullableType
);
parcelHelpers.export(exports, "getNamedType", ()=>_definitionMjs.getNamedType
);
parcelHelpers.export(exports, "GraphQLScalarType", ()=>_definitionMjs.GraphQLScalarType
);
parcelHelpers.export(exports, "GraphQLObjectType", ()=>_definitionMjs.GraphQLObjectType
);
parcelHelpers.export(exports, "GraphQLInterfaceType", ()=>_definitionMjs.GraphQLInterfaceType
);
parcelHelpers.export(exports, "GraphQLUnionType", ()=>_definitionMjs.GraphQLUnionType
);
parcelHelpers.export(exports, "GraphQLEnumType", ()=>_definitionMjs.GraphQLEnumType
);
parcelHelpers.export(exports, "GraphQLInputObjectType", ()=>_definitionMjs.GraphQLInputObjectType
);
parcelHelpers.export(exports, "GraphQLList", ()=>_definitionMjs.GraphQLList
);
parcelHelpers.export(exports, "GraphQLNonNull", ()=>_definitionMjs.GraphQLNonNull
);
parcelHelpers.export(exports, "isDirective", ()=>_directivesMjs.isDirective
);
parcelHelpers.export(exports, "assertDirective", ()=>_directivesMjs.assertDirective
);
parcelHelpers.export(exports, "GraphQLDirective", ()=>_directivesMjs.GraphQLDirective
);
parcelHelpers.export(exports, "isSpecifiedDirective", ()=>_directivesMjs.isSpecifiedDirective
);
parcelHelpers.export(exports, "specifiedDirectives", ()=>_directivesMjs.specifiedDirectives
);
parcelHelpers.export(exports, "GraphQLIncludeDirective", ()=>_directivesMjs.GraphQLIncludeDirective
);
parcelHelpers.export(exports, "GraphQLSkipDirective", ()=>_directivesMjs.GraphQLSkipDirective
);
parcelHelpers.export(exports, "GraphQLDeprecatedDirective", ()=>_directivesMjs.GraphQLDeprecatedDirective
);
parcelHelpers.export(exports, "GraphQLSpecifiedByDirective", ()=>_directivesMjs.GraphQLSpecifiedByDirective
);
parcelHelpers.export(exports, "DEFAULT_DEPRECATION_REASON", ()=>_directivesMjs.DEFAULT_DEPRECATION_REASON
);
// Common built-in scalar instances.
parcelHelpers.export(exports, "isSpecifiedScalarType", ()=>_scalarsMjs.isSpecifiedScalarType
);
parcelHelpers.export(exports, "specifiedScalarTypes", ()=>_scalarsMjs.specifiedScalarTypes
);
parcelHelpers.export(exports, "GraphQLInt", ()=>_scalarsMjs.GraphQLInt
);
parcelHelpers.export(exports, "GraphQLFloat", ()=>_scalarsMjs.GraphQLFloat
);
parcelHelpers.export(exports, "GraphQLString", ()=>_scalarsMjs.GraphQLString
);
parcelHelpers.export(exports, "GraphQLBoolean", ()=>_scalarsMjs.GraphQLBoolean
);
parcelHelpers.export(exports, "GraphQLID", ()=>_scalarsMjs.GraphQLID
);
parcelHelpers.export(exports, "isIntrospectionType", ()=>_introspectionMjs.isIntrospectionType
);
parcelHelpers.export(exports, "introspectionTypes", ()=>_introspectionMjs.introspectionTypes
);
parcelHelpers.export(exports, "__Schema", ()=>_introspectionMjs.__Schema
);
parcelHelpers.export(exports, "__Directive", ()=>_introspectionMjs.__Directive
);
parcelHelpers.export(exports, "__DirectiveLocation", ()=>_introspectionMjs.__DirectiveLocation
);
parcelHelpers.export(exports, "__Type", ()=>_introspectionMjs.__Type
);
parcelHelpers.export(exports, "__Field", ()=>_introspectionMjs.__Field
);
parcelHelpers.export(exports, "__InputValue", ()=>_introspectionMjs.__InputValue
);
parcelHelpers.export(exports, "__EnumValue", ()=>_introspectionMjs.__EnumValue
);
parcelHelpers.export(exports, "__TypeKind", ()=>_introspectionMjs.__TypeKind
);
parcelHelpers.export(exports, "TypeKind", ()=>_introspectionMjs.TypeKind
);
parcelHelpers.export(exports, "SchemaMetaFieldDef", ()=>_introspectionMjs.SchemaMetaFieldDef
);
parcelHelpers.export(exports, "TypeMetaFieldDef", ()=>_introspectionMjs.TypeMetaFieldDef
);
parcelHelpers.export(exports, "TypeNameMetaFieldDef", ()=>_introspectionMjs.TypeNameMetaFieldDef
);
// Validate GraphQL schema.
parcelHelpers.export(exports, "validateSchema", ()=>_validateMjs.validateSchema
);
parcelHelpers.export(exports, "assertValidSchema", ()=>_validateMjs.assertValidSchema
);
var _schemaMjs = require("./schema.mjs");
var _definitionMjs = require("./definition.mjs");
var _directivesMjs = require("./directives.mjs");
var _scalarsMjs = require("./scalars.mjs");
var _introspectionMjs = require("./introspection.mjs");
var _validateMjs = require("./validate.mjs");

},{"./schema.mjs":"jMEya","./definition.mjs":"6PVmH","./directives.mjs":"crfoz","./scalars.mjs":"hLZ76","./introspection.mjs":"ezRs8","./validate.mjs":"ak8ik","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gxEXF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Source", ()=>_sourceMjs.Source
);
parcelHelpers.export(exports, "getLocation", ()=>_locationMjs.getLocation
);
parcelHelpers.export(exports, "printLocation", ()=>_printLocationMjs.printLocation
);
parcelHelpers.export(exports, "printSourceLocation", ()=>_printLocationMjs.printSourceLocation
);
parcelHelpers.export(exports, "Kind", ()=>_kindsMjs.Kind
);
parcelHelpers.export(exports, "TokenKind", ()=>_tokenKindMjs.TokenKind
);
parcelHelpers.export(exports, "Lexer", ()=>_lexerMjs.Lexer
);
parcelHelpers.export(exports, "parse", ()=>_parserMjs.parse
);
parcelHelpers.export(exports, "parseValue", ()=>_parserMjs.parseValue
);
parcelHelpers.export(exports, "parseType", ()=>_parserMjs.parseType
);
parcelHelpers.export(exports, "print", ()=>_printerMjs.print
);
parcelHelpers.export(exports, "visit", ()=>_visitorMjs.visit
);
parcelHelpers.export(exports, "visitInParallel", ()=>_visitorMjs.visitInParallel
);
parcelHelpers.export(exports, "getVisitFn", ()=>_visitorMjs.getVisitFn
);
parcelHelpers.export(exports, "BREAK", ()=>_visitorMjs.BREAK
);
parcelHelpers.export(exports, "Location", ()=>_astMjs.Location
);
parcelHelpers.export(exports, "Token", ()=>_astMjs.Token
);
parcelHelpers.export(exports, "isDefinitionNode", ()=>_predicatesMjs.isDefinitionNode
);
parcelHelpers.export(exports, "isExecutableDefinitionNode", ()=>_predicatesMjs.isExecutableDefinitionNode
);
parcelHelpers.export(exports, "isSelectionNode", ()=>_predicatesMjs.isSelectionNode
);
parcelHelpers.export(exports, "isValueNode", ()=>_predicatesMjs.isValueNode
);
parcelHelpers.export(exports, "isTypeNode", ()=>_predicatesMjs.isTypeNode
);
parcelHelpers.export(exports, "isTypeSystemDefinitionNode", ()=>_predicatesMjs.isTypeSystemDefinitionNode
);
parcelHelpers.export(exports, "isTypeDefinitionNode", ()=>_predicatesMjs.isTypeDefinitionNode
);
parcelHelpers.export(exports, "isTypeSystemExtensionNode", ()=>_predicatesMjs.isTypeSystemExtensionNode
);
parcelHelpers.export(exports, "isTypeExtensionNode", ()=>_predicatesMjs.isTypeExtensionNode
);
parcelHelpers.export(exports, "DirectiveLocation", ()=>_directiveLocationMjs.DirectiveLocation
);
var _sourceMjs = require("./source.mjs");
var _locationMjs = require("./location.mjs");
var _printLocationMjs = require("./printLocation.mjs");
var _kindsMjs = require("./kinds.mjs");
var _tokenKindMjs = require("./tokenKind.mjs");
var _lexerMjs = require("./lexer.mjs");
var _parserMjs = require("./parser.mjs");
var _printerMjs = require("./printer.mjs");
var _visitorMjs = require("./visitor.mjs");
var _astMjs = require("./ast.mjs");
var _predicatesMjs = require("./predicates.mjs");
var _directiveLocationMjs = require("./directiveLocation.mjs");

},{"./source.mjs":"8rn4G","./location.mjs":"e78wy","./printLocation.mjs":"3Xx8f","./kinds.mjs":"3gRFP","./tokenKind.mjs":"itJR8","./lexer.mjs":"fx2Ap","./parser.mjs":"11ZrA","./printer.mjs":"bEnFw","./visitor.mjs":"bb6mn","./ast.mjs":"avmJW","./predicates.mjs":"6AiDB","./directiveLocation.mjs":"dhp4e","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8AmNx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "responsePathAsArray", ()=>_pathMjs.pathToArray
);
parcelHelpers.export(exports, "execute", ()=>_executeMjs.execute
);
parcelHelpers.export(exports, "executeSync", ()=>_executeMjs.executeSync
);
parcelHelpers.export(exports, "defaultFieldResolver", ()=>_executeMjs.defaultFieldResolver
);
parcelHelpers.export(exports, "defaultTypeResolver", ()=>_executeMjs.defaultTypeResolver
);
parcelHelpers.export(exports, "getDirectiveValues", ()=>_valuesMjs.getDirectiveValues
);
var _pathMjs = require("../jsutils/Path.mjs");
var _executeMjs = require("./execute.mjs");
var _valuesMjs = require("./values.mjs");

},{"../jsutils/Path.mjs":"cVvVA","./execute.mjs":"kgSsA","./values.mjs":"jCwPJ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fXM9R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subscribe", ()=>_subscribeMjs.subscribe
);
parcelHelpers.export(exports, "createSourceEventStream", ()=>_subscribeMjs.createSourceEventStream
);
var _subscribeMjs = require("./subscribe.mjs");

},{"./subscribe.mjs":"iheAK","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iheAK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subscribe", ()=>subscribe
);
/**
 * Implements the "CreateSourceEventStream" algorithm described in the
 * GraphQL specification, resolving the subscription source event stream.
 *
 * Returns a Promise which resolves to either an AsyncIterable (if successful)
 * or an ExecutionResult (error). The promise will be rejected if the schema or
 * other arguments to this function are invalid, or if the resolved event stream
 * is not an async iterable.
 *
 * If the client-provided arguments to this function do not result in a
 * compliant subscription, a GraphQL Response (ExecutionResult) with
 * descriptive errors and no data will be returned.
 *
 * If the the source stream could not be created due to faulty subscription
 * resolver logic or underlying systems, the promise will resolve to a single
 * ExecutionResult containing `errors` and no `data`.
 *
 * If the operation succeeded, the promise resolves to the AsyncIterable for the
 * event stream returned by the resolver.
 *
 * A Source Event Stream represents a sequence of events, each of which triggers
 * a GraphQL execution for that event.
 *
 * This may be useful when hosting the stateful subscription service in a
 * different process or machine than the stateless GraphQL execution engine,
 * or otherwise separating these two steps. For more on this, see the
 * "Supporting Subscriptions at Scale" information in the GraphQL specification.
 */ parcelHelpers.export(exports, "createSourceEventStream", ()=>createSourceEventStream
);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _isAsyncIterableMjs = require("../jsutils/isAsyncIterable.mjs");
var _isAsyncIterableMjsDefault = parcelHelpers.interopDefault(_isAsyncIterableMjs);
var _pathMjs = require("../jsutils/Path.mjs");
var _graphQLErrorMjs = require("../error/GraphQLError.mjs");
var _locatedErrorMjs = require("../error/locatedError.mjs");
var _valuesMjs = require("../execution/values.mjs");
var _executeMjs = require("../execution/execute.mjs");
var _getOperationRootTypeMjs = require("../utilities/getOperationRootType.mjs");
var _mapAsyncIteratorMjs = require("./mapAsyncIterator.mjs");
var _mapAsyncIteratorMjsDefault = parcelHelpers.interopDefault(_mapAsyncIteratorMjs);
function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
    /* eslint-enable no-redeclare */ // Extract arguments from object args if provided.
    return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({
        schema: argsOrSchema,
        document: document,
        rootValue: rootValue,
        contextValue: contextValue,
        variableValues: variableValues,
        operationName: operationName,
        fieldResolver: fieldResolver,
        subscribeFieldResolver: subscribeFieldResolver
    });
}
/**
 * This function checks if the error is a GraphQLError. If it is, report it as
 * an ExecutionResult, containing only errors and no data. Otherwise treat the
 * error as a system-class error and re-throw it.
 */ function reportGraphQLError(error) {
    if (error instanceof _graphQLErrorMjs.GraphQLError) return {
        errors: [
            error
        ]
    };
    throw error;
}
function subscribeImpl(args) {
    var schema = args.schema, document = args.document, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, subscribeFieldResolver = args.subscribeFieldResolver;
    var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal
    // GraphQL `execute` function, with `payload` as the rootValue.
    // This implements the "MapSourceToResponseEvent" algorithm described in
    // the GraphQL specification. The `execute` function provides the
    // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
    // "ExecuteQuery" algorithm, for which `execute` is also used.
    var mapSourceToResponse = function mapSourceToResponse1(payload) {
        return _executeMjs.execute({
            schema: schema,
            document: document,
            rootValue: payload,
            contextValue: contextValue,
            variableValues: variableValues,
            operationName: operationName,
            fieldResolver: fieldResolver
        });
    }; // Resolve the Source Stream, then map every source value to a
    // ExecutionResult value as described above.
    return sourcePromise.then(function(resultOrStream) {
        return _isAsyncIterableMjsDefault.default(resultOrStream) ? _mapAsyncIteratorMjsDefault.default(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream;
    });
}
function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
    // If arguments are missing or incorrectly typed, this is an internal
    // developer mistake which should throw an early error.
    _executeMjs.assertValidExecutionArguments(schema, document, variableValues);
    return new Promise(function(resolve) {
        // If a valid context cannot be created due to incorrect arguments,
        // this will throw an error.
        var exeContext = _executeMjs.buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
        resolve(Array.isArray(exeContext) ? {
            errors: exeContext
        } : executeSubscription(exeContext));
    }).catch(reportGraphQLError);
}
function executeSubscription(exeContext) {
    var schema = exeContext.schema, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;
    var type = _getOperationRootTypeMjs.getOperationRootType(schema, operation);
    var fields = _executeMjs.collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));
    var responseNames = Object.keys(fields);
    var responseName = responseNames[0];
    var fieldNodes = fields[responseName];
    var fieldNode = fieldNodes[0];
    var fieldName = fieldNode.name.value;
    var fieldDef = _executeMjs.getFieldDef(schema, type, fieldName);
    if (!fieldDef) throw new _graphQLErrorMjs.GraphQLError("The subscription field \"".concat(fieldName, "\" is not defined."), fieldNodes);
    var path = _pathMjs.addPath(undefined, responseName, type.name);
    var info = _executeMjs.buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // Coerce to Promise for easier error handling and consistent return type.
    return new Promise(function(resolveResult) {
        var _fieldDef$subscribe;
        // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
        // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
        // Build a JS object of arguments from the field.arguments AST, using the
        // variables scope to fulfill any variable references.
        var args = _valuesMjs.getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that
        // is provided to every resolve function within an execution. It is commonly
        // used to represent an authenticated user, or request-specific caches.
        var contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
        // AsyncIterable yielding raw payloads.
        var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;
        resolveResult(resolveFn(rootValue, args, contextValue, info));
    }).then(function(eventStream) {
        if (eventStream instanceof Error) throw _locatedErrorMjs.locatedError(eventStream, fieldNodes, _pathMjs.pathToArray(path));
         // Assert field returned an event stream, otherwise yield an error.
        if (!_isAsyncIterableMjsDefault.default(eventStream)) throw new Error('Subscription field must return Async Iterable. ' + "Received: ".concat(_inspectMjsDefault.default(eventStream), "."));
        return eventStream;
    }, function(error) {
        throw _locatedErrorMjs.locatedError(error, fieldNodes, _pathMjs.pathToArray(path));
    });
}

},{"../jsutils/inspect.mjs":"doI9y","../jsutils/isAsyncIterable.mjs":"djxMK","../jsutils/Path.mjs":"cVvVA","../error/GraphQLError.mjs":"a8Vyv","../error/locatedError.mjs":"hNmuj","../execution/values.mjs":"jCwPJ","../execution/execute.mjs":"kgSsA","../utilities/getOperationRootType.mjs":"9aJoa","./mapAsyncIterator.mjs":"2rtIp","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"djxMK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolsMjs = require("../polyfills/symbols.mjs");
function isAsyncIterable(maybeAsyncIterable) {
    return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[_symbolsMjs.SYMBOL_ASYNC_ITERATOR]) === 'function';
}
exports.default = isAsyncIterable;

},{"../polyfills/symbols.mjs":"e9VHS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2rtIp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolsMjs = require("../polyfills/symbols.mjs");
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function mapAsyncIterator(iterable, callback, rejectCallback) {
    // $FlowFixMe[prop-missing]
    var iteratorMethod = iterable[_symbolsMjs.SYMBOL_ASYNC_ITERATOR];
    var iterator = iteratorMethod.call(iterable);
    var $return;
    var abruptClose;
    if (typeof iterator.return === 'function') {
        $return = iterator.return;
        abruptClose = function abruptClose1(error) {
            var rethrow = function rethrow1() {
                return Promise.reject(error);
            };
            return $return.call(iterator).then(rethrow, rethrow);
        };
    }
    function mapResult(result) {
        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
    }
    var mapReject;
    if (rejectCallback) {
        // Capture rejectCallback to ensure it cannot be null.
        var reject = rejectCallback;
        mapReject = function mapReject1(error) {
            return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
        };
    }
    /* TODO: Flow doesn't support symbols as keys:
     https://github.com/facebook/flow/issues/3258 */ return _defineProperty({
        next: function next() {
            return iterator.next().then(mapResult, mapReject);
        },
        return: function _return() {
            return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({
                value: undefined,
                done: true
            });
        },
        throw: function _throw(error) {
            if (typeof iterator.throw === 'function') return iterator.throw(error).then(mapResult, mapReject);
            return Promise.reject(error).catch(abruptClose);
        }
    }, _symbolsMjs.SYMBOL_ASYNC_ITERATOR, function() {
        return this;
    });
}
exports.default = mapAsyncIterator;
function asyncMapValue(value, callback) {
    return new Promise(function(resolve) {
        return resolve(callback(value));
    });
}
function iteratorResult(value) {
    return {
        value: value,
        done: false
    };
}

},{"../polyfills/symbols.mjs":"e9VHS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cHlIV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validate", ()=>_validateMjs.validate
);
parcelHelpers.export(exports, "ValidationContext", ()=>_validationContextMjs.ValidationContext
);
// All validation rules in the GraphQL Specification.
parcelHelpers.export(exports, "specifiedRules", ()=>_specifiedRulesMjs.specifiedRules
) // Spec Section: "Executable Definitions"
;
parcelHelpers.export(exports, "ExecutableDefinitionsRule", ()=>_executableDefinitionsRuleMjs.ExecutableDefinitionsRule
) // Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"
;
parcelHelpers.export(exports, "FieldsOnCorrectTypeRule", ()=>_fieldsOnCorrectTypeRuleMjs.FieldsOnCorrectTypeRule
) // Spec Section: "Fragments on Composite Types"
;
parcelHelpers.export(exports, "FragmentsOnCompositeTypesRule", ()=>_fragmentsOnCompositeTypesRuleMjs.FragmentsOnCompositeTypesRule
) // Spec Section: "Argument Names"
;
parcelHelpers.export(exports, "KnownArgumentNamesRule", ()=>_knownArgumentNamesRuleMjs.KnownArgumentNamesRule
) // Spec Section: "Directives Are Defined"
;
parcelHelpers.export(exports, "KnownDirectivesRule", ()=>_knownDirectivesRuleMjs.KnownDirectivesRule
) // Spec Section: "Fragment spread target defined"
;
parcelHelpers.export(exports, "KnownFragmentNamesRule", ()=>_knownFragmentNamesRuleMjs.KnownFragmentNamesRule
) // Spec Section: "Fragment Spread Type Existence"
;
parcelHelpers.export(exports, "KnownTypeNamesRule", ()=>_knownTypeNamesRuleMjs.KnownTypeNamesRule
) // Spec Section: "Lone Anonymous Operation"
;
parcelHelpers.export(exports, "LoneAnonymousOperationRule", ()=>_loneAnonymousOperationRuleMjs.LoneAnonymousOperationRule
) // Spec Section: "Fragments must not form cycles"
;
parcelHelpers.export(exports, "NoFragmentCyclesRule", ()=>_noFragmentCyclesRuleMjs.NoFragmentCyclesRule
) // Spec Section: "All Variable Used Defined"
;
parcelHelpers.export(exports, "NoUndefinedVariablesRule", ()=>_noUndefinedVariablesRuleMjs.NoUndefinedVariablesRule
) // Spec Section: "Fragments must be used"
;
parcelHelpers.export(exports, "NoUnusedFragmentsRule", ()=>_noUnusedFragmentsRuleMjs.NoUnusedFragmentsRule
) // Spec Section: "All Variables Used"
;
parcelHelpers.export(exports, "NoUnusedVariablesRule", ()=>_noUnusedVariablesRuleMjs.NoUnusedVariablesRule
) // Spec Section: "Field Selection Merging"
;
parcelHelpers.export(exports, "OverlappingFieldsCanBeMergedRule", ()=>_overlappingFieldsCanBeMergedRuleMjs.OverlappingFieldsCanBeMergedRule
) // Spec Section: "Fragment spread is possible"
;
parcelHelpers.export(exports, "PossibleFragmentSpreadsRule", ()=>_possibleFragmentSpreadsRuleMjs.PossibleFragmentSpreadsRule
) // Spec Section: "Argument Optionality"
;
parcelHelpers.export(exports, "ProvidedRequiredArgumentsRule", ()=>_providedRequiredArgumentsRuleMjs.ProvidedRequiredArgumentsRule
) // Spec Section: "Leaf Field Selections"
;
parcelHelpers.export(exports, "ScalarLeafsRule", ()=>_scalarLeafsRuleMjs.ScalarLeafsRule
) // Spec Section: "Subscriptions with Single Root Field"
;
parcelHelpers.export(exports, "SingleFieldSubscriptionsRule", ()=>_singleFieldSubscriptionsRuleMjs.SingleFieldSubscriptionsRule
) // Spec Section: "Argument Uniqueness"
;
parcelHelpers.export(exports, "UniqueArgumentNamesRule", ()=>_uniqueArgumentNamesRuleMjs.UniqueArgumentNamesRule
) // Spec Section: "Directives Are Unique Per Location"
;
parcelHelpers.export(exports, "UniqueDirectivesPerLocationRule", ()=>_uniqueDirectivesPerLocationRuleMjs.UniqueDirectivesPerLocationRule
) // Spec Section: "Fragment Name Uniqueness"
;
parcelHelpers.export(exports, "UniqueFragmentNamesRule", ()=>_uniqueFragmentNamesRuleMjs.UniqueFragmentNamesRule
) // Spec Section: "Input Object Field Uniqueness"
;
parcelHelpers.export(exports, "UniqueInputFieldNamesRule", ()=>_uniqueInputFieldNamesRuleMjs.UniqueInputFieldNamesRule
) // Spec Section: "Operation Name Uniqueness"
;
parcelHelpers.export(exports, "UniqueOperationNamesRule", ()=>_uniqueOperationNamesRuleMjs.UniqueOperationNamesRule
) // Spec Section: "Variable Uniqueness"
;
parcelHelpers.export(exports, "UniqueVariableNamesRule", ()=>_uniqueVariableNamesRuleMjs.UniqueVariableNamesRule
) // Spec Section: "Values Type Correctness"
;
parcelHelpers.export(exports, "ValuesOfCorrectTypeRule", ()=>_valuesOfCorrectTypeRuleMjs.ValuesOfCorrectTypeRule
) // Spec Section: "Variables are Input Types"
;
parcelHelpers.export(exports, "VariablesAreInputTypesRule", ()=>_variablesAreInputTypesRuleMjs.VariablesAreInputTypesRule
) // Spec Section: "All Variable Usages Are Allowed"
;
parcelHelpers.export(exports, "VariablesInAllowedPositionRule", ()=>_variablesInAllowedPositionRuleMjs.VariablesInAllowedPositionRule
) // SDL-specific validation rules
;
parcelHelpers.export(exports, "LoneSchemaDefinitionRule", ()=>_loneSchemaDefinitionRuleMjs.LoneSchemaDefinitionRule
);
parcelHelpers.export(exports, "UniqueOperationTypesRule", ()=>_uniqueOperationTypesRuleMjs.UniqueOperationTypesRule
);
parcelHelpers.export(exports, "UniqueTypeNamesRule", ()=>_uniqueTypeNamesRuleMjs.UniqueTypeNamesRule
);
parcelHelpers.export(exports, "UniqueEnumValueNamesRule", ()=>_uniqueEnumValueNamesRuleMjs.UniqueEnumValueNamesRule
);
parcelHelpers.export(exports, "UniqueFieldDefinitionNamesRule", ()=>_uniqueFieldDefinitionNamesRuleMjs.UniqueFieldDefinitionNamesRule
);
parcelHelpers.export(exports, "UniqueDirectiveNamesRule", ()=>_uniqueDirectiveNamesRuleMjs.UniqueDirectiveNamesRule
);
parcelHelpers.export(exports, "PossibleTypeExtensionsRule", ()=>_possibleTypeExtensionsRuleMjs.PossibleTypeExtensionsRule
) // Optional rules not defined by the GraphQL Specification
;
parcelHelpers.export(exports, "NoDeprecatedCustomRule", ()=>_noDeprecatedCustomRuleMjs.NoDeprecatedCustomRule
);
parcelHelpers.export(exports, "NoSchemaIntrospectionCustomRule", ()=>_noSchemaIntrospectionCustomRuleMjs.NoSchemaIntrospectionCustomRule
);
var _validateMjs = require("./validate.mjs");
var _validationContextMjs = require("./ValidationContext.mjs");
var _specifiedRulesMjs = require("./specifiedRules.mjs");
var _executableDefinitionsRuleMjs = require("./rules/ExecutableDefinitionsRule.mjs");
var _fieldsOnCorrectTypeRuleMjs = require("./rules/FieldsOnCorrectTypeRule.mjs");
var _fragmentsOnCompositeTypesRuleMjs = require("./rules/FragmentsOnCompositeTypesRule.mjs");
var _knownArgumentNamesRuleMjs = require("./rules/KnownArgumentNamesRule.mjs");
var _knownDirectivesRuleMjs = require("./rules/KnownDirectivesRule.mjs");
var _knownFragmentNamesRuleMjs = require("./rules/KnownFragmentNamesRule.mjs");
var _knownTypeNamesRuleMjs = require("./rules/KnownTypeNamesRule.mjs");
var _loneAnonymousOperationRuleMjs = require("./rules/LoneAnonymousOperationRule.mjs");
var _noFragmentCyclesRuleMjs = require("./rules/NoFragmentCyclesRule.mjs");
var _noUndefinedVariablesRuleMjs = require("./rules/NoUndefinedVariablesRule.mjs");
var _noUnusedFragmentsRuleMjs = require("./rules/NoUnusedFragmentsRule.mjs");
var _noUnusedVariablesRuleMjs = require("./rules/NoUnusedVariablesRule.mjs");
var _overlappingFieldsCanBeMergedRuleMjs = require("./rules/OverlappingFieldsCanBeMergedRule.mjs");
var _possibleFragmentSpreadsRuleMjs = require("./rules/PossibleFragmentSpreadsRule.mjs");
var _providedRequiredArgumentsRuleMjs = require("./rules/ProvidedRequiredArgumentsRule.mjs");
var _scalarLeafsRuleMjs = require("./rules/ScalarLeafsRule.mjs");
var _singleFieldSubscriptionsRuleMjs = require("./rules/SingleFieldSubscriptionsRule.mjs");
var _uniqueArgumentNamesRuleMjs = require("./rules/UniqueArgumentNamesRule.mjs");
var _uniqueDirectivesPerLocationRuleMjs = require("./rules/UniqueDirectivesPerLocationRule.mjs");
var _uniqueFragmentNamesRuleMjs = require("./rules/UniqueFragmentNamesRule.mjs");
var _uniqueInputFieldNamesRuleMjs = require("./rules/UniqueInputFieldNamesRule.mjs");
var _uniqueOperationNamesRuleMjs = require("./rules/UniqueOperationNamesRule.mjs");
var _uniqueVariableNamesRuleMjs = require("./rules/UniqueVariableNamesRule.mjs");
var _valuesOfCorrectTypeRuleMjs = require("./rules/ValuesOfCorrectTypeRule.mjs");
var _variablesAreInputTypesRuleMjs = require("./rules/VariablesAreInputTypesRule.mjs");
var _variablesInAllowedPositionRuleMjs = require("./rules/VariablesInAllowedPositionRule.mjs");
var _loneSchemaDefinitionRuleMjs = require("./rules/LoneSchemaDefinitionRule.mjs");
var _uniqueOperationTypesRuleMjs = require("./rules/UniqueOperationTypesRule.mjs");
var _uniqueTypeNamesRuleMjs = require("./rules/UniqueTypeNamesRule.mjs");
var _uniqueEnumValueNamesRuleMjs = require("./rules/UniqueEnumValueNamesRule.mjs");
var _uniqueFieldDefinitionNamesRuleMjs = require("./rules/UniqueFieldDefinitionNamesRule.mjs");
var _uniqueDirectiveNamesRuleMjs = require("./rules/UniqueDirectiveNamesRule.mjs");
var _possibleTypeExtensionsRuleMjs = require("./rules/PossibleTypeExtensionsRule.mjs");
var _noDeprecatedCustomRuleMjs = require("./rules/custom/NoDeprecatedCustomRule.mjs");
var _noSchemaIntrospectionCustomRuleMjs = require("./rules/custom/NoSchemaIntrospectionCustomRule.mjs");

},{"./validate.mjs":"cJoEq","./ValidationContext.mjs":"1vmBo","./specifiedRules.mjs":"aOTpD","./rules/ExecutableDefinitionsRule.mjs":"eeM2X","./rules/FieldsOnCorrectTypeRule.mjs":"cnA9P","./rules/FragmentsOnCompositeTypesRule.mjs":"kzrs3","./rules/KnownArgumentNamesRule.mjs":"37m0w","./rules/KnownDirectivesRule.mjs":"1KNrM","./rules/KnownFragmentNamesRule.mjs":"lJvph","./rules/KnownTypeNamesRule.mjs":"TpYBe","./rules/LoneAnonymousOperationRule.mjs":"8iQUA","./rules/NoFragmentCyclesRule.mjs":"5VzA0","./rules/NoUndefinedVariablesRule.mjs":"afnlY","./rules/NoUnusedFragmentsRule.mjs":"5J9IW","./rules/NoUnusedVariablesRule.mjs":"uxdB6","./rules/OverlappingFieldsCanBeMergedRule.mjs":"kaqI6","./rules/PossibleFragmentSpreadsRule.mjs":"f8i4C","./rules/ProvidedRequiredArgumentsRule.mjs":"iYWY7","./rules/ScalarLeafsRule.mjs":"5twor","./rules/SingleFieldSubscriptionsRule.mjs":"arkF3","./rules/UniqueArgumentNamesRule.mjs":"h9gNL","./rules/UniqueDirectivesPerLocationRule.mjs":"7d7Xo","./rules/UniqueFragmentNamesRule.mjs":"lylFy","./rules/UniqueInputFieldNamesRule.mjs":"1pQoQ","./rules/UniqueOperationNamesRule.mjs":"jcmsJ","./rules/UniqueVariableNamesRule.mjs":"ezCLx","./rules/ValuesOfCorrectTypeRule.mjs":"7Qfmy","./rules/VariablesAreInputTypesRule.mjs":"kfrWg","./rules/VariablesInAllowedPositionRule.mjs":"mc85l","./rules/LoneSchemaDefinitionRule.mjs":"az4LR","./rules/UniqueOperationTypesRule.mjs":"dtHU7","./rules/UniqueTypeNamesRule.mjs":"3hl9V","./rules/UniqueEnumValueNamesRule.mjs":"jOBgt","./rules/UniqueFieldDefinitionNamesRule.mjs":"glazh","./rules/UniqueDirectiveNamesRule.mjs":"6ab3O","./rules/PossibleTypeExtensionsRule.mjs":"1aIrI","./rules/custom/NoDeprecatedCustomRule.mjs":"iGEum","./rules/custom/NoSchemaIntrospectionCustomRule.mjs":"9eEau","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iGEum":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * No deprecated
 *
 * A GraphQL document is only valid if all selected fields and all used enum values have not been
 * deprecated.
 *
 * Note: This rule is optional and is not part of the Validation section of the GraphQL
 * Specification. The main purpose of this rule is detection of deprecated usages and not
 * necessarily to forbid their use when querying a service.
 */ parcelHelpers.export(exports, "NoDeprecatedCustomRule", ()=>NoDeprecatedCustomRule
);
var _invariantMjs = require("../../../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _graphQLErrorMjs = require("../../../error/GraphQLError.mjs");
var _definitionMjs = require("../../../type/definition.mjs");
function NoDeprecatedCustomRule(context) {
    return {
        Field: function Field(node) {
            var fieldDef = context.getFieldDef();
            var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;
            if (fieldDef && deprecationReason != null) {
                var parentType = context.getParentType();
                parentType != null || _invariantMjsDefault.default(0);
                context.reportError(new _graphQLErrorMjs.GraphQLError("The field ".concat(parentType.name, ".").concat(fieldDef.name, " is deprecated. ").concat(deprecationReason), node));
            }
        },
        Argument: function Argument(node) {
            var argDef = context.getArgument();
            var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;
            if (argDef && deprecationReason != null) {
                var directiveDef = context.getDirective();
                if (directiveDef != null) context.reportError(new _graphQLErrorMjs.GraphQLError("Directive \"@".concat(directiveDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
                else {
                    var parentType = context.getParentType();
                    var fieldDef = context.getFieldDef();
                    parentType != null && fieldDef != null || _invariantMjsDefault.default(0);
                    context.reportError(new _graphQLErrorMjs.GraphQLError("Field \"".concat(parentType.name, ".").concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), node));
                }
            }
        },
        ObjectField: function ObjectField(node) {
            var inputObjectDef = _definitionMjs.getNamedType(context.getParentInputType());
            if (_definitionMjs.isInputObjectType(inputObjectDef)) {
                var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off
                var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;
                if (deprecationReason != null) context.reportError(new _graphQLErrorMjs.GraphQLError("The input field ".concat(inputObjectDef.name, ".").concat(inputFieldDef.name, " is deprecated. ").concat(deprecationReason), node));
            }
        },
        EnumValue: function EnumValue(node) {
            var enumValueDef = context.getEnumValue();
            var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;
            if (enumValueDef && deprecationReason != null) {
                var enumTypeDef = _definitionMjs.getNamedType(context.getInputType());
                enumTypeDef != null || _invariantMjsDefault.default(0);
                context.reportError(new _graphQLErrorMjs.GraphQLError("The enum value \"".concat(enumTypeDef.name, ".").concat(enumValueDef.name, "\" is deprecated. ").concat(deprecationReason), node));
            }
        }
    };
}

},{"../../../jsutils/invariant.mjs":"gb46A","../../../error/GraphQLError.mjs":"a8Vyv","../../../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9eEau":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Prohibit introspection queries
 *
 * A GraphQL document is only valid if all fields selected are not fields that
 * return an introspection type.
 *
 * Note: This rule is optional and is not part of the Validation section of the
 * GraphQL Specification. This rule effectively disables introspection, which
 * does not reflect best practices and should only be done if absolutely necessary.
 */ parcelHelpers.export(exports, "NoSchemaIntrospectionCustomRule", ()=>NoSchemaIntrospectionCustomRule
);
var _graphQLErrorMjs = require("../../../error/GraphQLError.mjs");
var _definitionMjs = require("../../../type/definition.mjs");
var _introspectionMjs = require("../../../type/introspection.mjs");
function NoSchemaIntrospectionCustomRule(context) {
    return {
        Field: function Field(node) {
            var type = _definitionMjs.getNamedType(context.getType());
            if (type && _introspectionMjs.isIntrospectionType(type)) context.reportError(new _graphQLErrorMjs.GraphQLError("GraphQL introspection has been disabled, but the requested query contained the field \"".concat(node.name.value, "\"."), node));
        }
    };
}

},{"../../../error/GraphQLError.mjs":"a8Vyv","../../../type/definition.mjs":"6PVmH","../../../type/introspection.mjs":"ezRs8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fkHfF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GraphQLError", ()=>_graphQLErrorMjs.GraphQLError
);
parcelHelpers.export(exports, "printError", ()=>_graphQLErrorMjs.printError
);
parcelHelpers.export(exports, "syntaxError", ()=>_syntaxErrorMjs.syntaxError
);
parcelHelpers.export(exports, "locatedError", ()=>_locatedErrorMjs.locatedError
);
parcelHelpers.export(exports, "formatError", ()=>_formatErrorMjs.formatError
);
var _graphQLErrorMjs = require("./GraphQLError.mjs");
var _syntaxErrorMjs = require("./syntaxError.mjs");
var _locatedErrorMjs = require("./locatedError.mjs");
var _formatErrorMjs = require("./formatError.mjs");

},{"./GraphQLError.mjs":"a8Vyv","./syntaxError.mjs":"dJnXb","./locatedError.mjs":"hNmuj","./formatError.mjs":"hz0Le","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hz0Le":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given a GraphQLError, format it according to the rules described by the
 * Response Format, Errors section of the GraphQL Specification.
 */ parcelHelpers.export(exports, "formatError", ()=>formatError
) /**
 * @see https://github.com/graphql/graphql-spec/blob/master/spec/Section%207%20--%20Response.md#errors
 */ ;
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
function formatError(error) {
    var _error$message;
    error || _devAssertMjsDefault.default(0, 'Received null or undefined error.');
    var message = (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'An unknown error occurred.';
    var locations = error.locations;
    var path = error.path;
    var extensions = error.extensions;
    return extensions ? {
        message: message,
        locations: locations,
        path: path,
        extensions: extensions
    } : {
        message: message,
        locations: locations,
        path: path
    };
}

},{"../jsutils/devAssert.mjs":"iZbmm","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"afKyD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Produce the GraphQL query recommended for a full schema introspection.
// Accepts optional IntrospectionOptions.
parcelHelpers.export(exports, "getIntrospectionQuery", ()=>_getIntrospectionQueryMjs.getIntrospectionQuery
);
// Gets the target Operation from a Document.
parcelHelpers.export(exports, "getOperationAST", ()=>_getOperationASTMjs.getOperationAST
) // Gets the Type for the target Operation AST.
;
parcelHelpers.export(exports, "getOperationRootType", ()=>_getOperationRootTypeMjs.getOperationRootType
) // Convert a GraphQLSchema to an IntrospectionQuery.
;
parcelHelpers.export(exports, "introspectionFromSchema", ()=>_introspectionFromSchemaMjs.introspectionFromSchema
) // Build a GraphQLSchema from an introspection result.
;
parcelHelpers.export(exports, "buildClientSchema", ()=>_buildClientSchemaMjs.buildClientSchema
) // Build a GraphQLSchema from GraphQL Schema language.
;
parcelHelpers.export(exports, "buildASTSchema", ()=>_buildASTSchemaMjs.buildASTSchema
);
parcelHelpers.export(exports, "buildSchema", ()=>_buildASTSchemaMjs.buildSchema
);
// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.
parcelHelpers.export(exports, "extendSchema", ()=>_extendSchemaMjs.extendSchema
) // Sort a GraphQLSchema.
;
parcelHelpers.export(exports, "getDescription", ()=>_extendSchemaMjs.getDescription
);
parcelHelpers.export(exports, "lexicographicSortSchema", ()=>_lexicographicSortSchemaMjs.lexicographicSortSchema
) // Print a GraphQLSchema to GraphQL Schema language.
;
parcelHelpers.export(exports, "printSchema", ()=>_printSchemaMjs.printSchema
) // Create a GraphQLType from a GraphQL language AST.
;
parcelHelpers.export(exports, "printType", ()=>_printSchemaMjs.printType
);
parcelHelpers.export(exports, "printIntrospectionSchema", ()=>_printSchemaMjs.printIntrospectionSchema
);
parcelHelpers.export(exports, "typeFromAST", ()=>_typeFromASTMjs.typeFromAST
) // Create a JavaScript value from a GraphQL language AST with a type.
;
parcelHelpers.export(exports, "valueFromAST", ()=>_valueFromASTMjs.valueFromAST
) // Create a JavaScript value from a GraphQL language AST without a type.
;
parcelHelpers.export(exports, "valueFromASTUntyped", ()=>_valueFromASTUntypedMjs.valueFromASTUntyped
) // Create a GraphQL language AST from a JavaScript value.
;
parcelHelpers.export(exports, "astFromValue", ()=>_astFromValueMjs.astFromValue
) // A helper to use within recursive-descent visitors which need to be aware of
;
// the GraphQL type system.
parcelHelpers.export(exports, "TypeInfo", ()=>_typeInfoMjs.TypeInfo
) // Coerces a JavaScript value to a GraphQL type, or produces errors.
;
parcelHelpers.export(exports, "visitWithTypeInfo", ()=>_typeInfoMjs.visitWithTypeInfo
);
parcelHelpers.export(exports, "coerceInputValue", ()=>_coerceInputValueMjs.coerceInputValue
) // Concatenates multiple AST together.
;
parcelHelpers.export(exports, "concatAST", ()=>_concatASTMjs.concatAST
) // Separates an AST into an AST per Operation.
;
parcelHelpers.export(exports, "separateOperations", ()=>_separateOperationsMjs.separateOperations
) // Strips characters that are not significant to the validity or execution
;
// of a GraphQL document.
parcelHelpers.export(exports, "stripIgnoredCharacters", ()=>_stripIgnoredCharactersMjs.stripIgnoredCharacters
) // Comparators for types
;
parcelHelpers.export(exports, "isEqualType", ()=>_typeComparatorsMjs.isEqualType
) // Asserts that a string is a valid GraphQL name
;
parcelHelpers.export(exports, "isTypeSubTypeOf", ()=>_typeComparatorsMjs.isTypeSubTypeOf
);
parcelHelpers.export(exports, "doTypesOverlap", ()=>_typeComparatorsMjs.doTypesOverlap
);
parcelHelpers.export(exports, "assertValidName", ()=>_assertValidNameMjs.assertValidName
) // Compares two GraphQLSchemas and detects breaking changes.
;
parcelHelpers.export(exports, "isValidNameError", ()=>_assertValidNameMjs.isValidNameError
);
parcelHelpers.export(exports, "BreakingChangeType", ()=>_findBreakingChangesMjs.BreakingChangeType
);
parcelHelpers.export(exports, "DangerousChangeType", ()=>_findBreakingChangesMjs.DangerousChangeType
);
parcelHelpers.export(exports, "findBreakingChanges", ()=>_findBreakingChangesMjs.findBreakingChanges
);
parcelHelpers.export(exports, "findDangerousChanges", ()=>_findBreakingChangesMjs.findDangerousChanges
);
// @deprecated: Report all deprecated usage within a GraphQL document.
parcelHelpers.export(exports, "findDeprecatedUsages", ()=>_findDeprecatedUsagesMjs.findDeprecatedUsages
);
var _getIntrospectionQueryMjs = require("./getIntrospectionQuery.mjs");
var _getOperationASTMjs = require("./getOperationAST.mjs");
var _getOperationRootTypeMjs = require("./getOperationRootType.mjs");
var _introspectionFromSchemaMjs = require("./introspectionFromSchema.mjs");
var _buildClientSchemaMjs = require("./buildClientSchema.mjs");
var _buildASTSchemaMjs = require("./buildASTSchema.mjs");
var _extendSchemaMjs = require("./extendSchema.mjs");
var _lexicographicSortSchemaMjs = require("./lexicographicSortSchema.mjs");
var _printSchemaMjs = require("./printSchema.mjs");
var _typeFromASTMjs = require("./typeFromAST.mjs");
var _valueFromASTMjs = require("./valueFromAST.mjs");
var _valueFromASTUntypedMjs = require("./valueFromASTUntyped.mjs");
var _astFromValueMjs = require("./astFromValue.mjs");
var _typeInfoMjs = require("./TypeInfo.mjs");
var _coerceInputValueMjs = require("./coerceInputValue.mjs");
var _concatASTMjs = require("./concatAST.mjs");
var _separateOperationsMjs = require("./separateOperations.mjs");
var _stripIgnoredCharactersMjs = require("./stripIgnoredCharacters.mjs");
var _typeComparatorsMjs = require("./typeComparators.mjs");
var _assertValidNameMjs = require("./assertValidName.mjs");
var _findBreakingChangesMjs = require("./findBreakingChanges.mjs");
var _findDeprecatedUsagesMjs = require("./findDeprecatedUsages.mjs");

},{"./getIntrospectionQuery.mjs":"2V2Jm","./getOperationAST.mjs":"c7kNc","./getOperationRootType.mjs":"9aJoa","./introspectionFromSchema.mjs":"41WJX","./buildClientSchema.mjs":"1cN3k","./buildASTSchema.mjs":"2H2UV","./extendSchema.mjs":"bLRA4","./lexicographicSortSchema.mjs":"egX2v","./printSchema.mjs":"8fvqM","./typeFromAST.mjs":"3VgoG","./valueFromAST.mjs":"chd8v","./valueFromASTUntyped.mjs":"2WaUG","./astFromValue.mjs":"bQ66F","./TypeInfo.mjs":"lH2p6","./coerceInputValue.mjs":"gbRLE","./concatAST.mjs":"bVaWC","./separateOperations.mjs":"QUy2X","./stripIgnoredCharacters.mjs":"gKD4C","./typeComparators.mjs":"abM5v","./assertValidName.mjs":"4I7iN","./findBreakingChanges.mjs":"hAGhq","./findDeprecatedUsages.mjs":"2CMeg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2V2Jm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getIntrospectionQuery", ()=>getIntrospectionQuery
);
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function getIntrospectionQuery(options) {
    var optionsWithDefault = _objectSpread({
        descriptions: true,
        specifiedByUrl: false,
        directiveIsRepeatable: false,
        schemaDescription: false,
        inputValueDeprecation: false
    }, options);
    var descriptions = optionsWithDefault.descriptions ? 'description' : '';
    var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByUrl' : '';
    var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
    var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';
    function inputDeprecation(str) {
        return optionsWithDefault.inputValueDeprecation ? str : '';
    }
    return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(inputDeprecation('(includeDeprecated: true)'), " {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n      ").concat(inputDeprecation('isDeprecated'), "\n      ").concat(inputDeprecation('deprecationReason'), "\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"c7kNc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns an operation AST given a document AST and optionally an operation
 * name. If a name is not provided, an operation is only returned if only one is
 * provided in the document.
 */ parcelHelpers.export(exports, "getOperationAST", ()=>getOperationAST
);
var _kindsMjs = require("../language/kinds.mjs");
function getOperationAST(documentAST, operationName) {
    var operation = null;
    for(var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++){
        var definition = _documentAST$definiti2[_i2];
        if (definition.kind === _kindsMjs.Kind.OPERATION_DEFINITION) {
            var _definition$name;
            if (operationName == null) {
                // If no operation name was provided, only return an Operation if there
                // is one defined in the document. Upon encountering the second, return
                // null.
                if (operation) return null;
                operation = definition;
            } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) return definition;
        }
    }
    return operation;
}

},{"../language/kinds.mjs":"3gRFP","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"41WJX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Build an IntrospectionQuery from a GraphQLSchema
 *
 * IntrospectionQuery is useful for utilities that care about type and field
 * relationships, but do not need to traverse through those relationships.
 *
 * This is the inverse of buildClientSchema. The primary use case is outside
 * of the server context, for instance when doing schema comparisons.
 */ parcelHelpers.export(exports, "introspectionFromSchema", ()=>introspectionFromSchema
);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _parserMjs = require("../language/parser.mjs");
var _executeMjs = require("../execution/execute.mjs");
var _getIntrospectionQueryMjs = require("./getIntrospectionQuery.mjs");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function introspectionFromSchema(schema, options) {
    var optionsWithDefaults = _objectSpread({
        specifiedByUrl: true,
        directiveIsRepeatable: true,
        schemaDescription: true,
        inputValueDeprecation: true
    }, options);
    var document = _parserMjs.parse(_getIntrospectionQueryMjs.getIntrospectionQuery(optionsWithDefaults));
    var result = _executeMjs.executeSync({
        schema: schema,
        document: document
    });
    !result.errors && result.data || _invariantMjsDefault.default(0);
    return result.data;
}

},{"../jsutils/invariant.mjs":"gb46A","../language/parser.mjs":"11ZrA","../execution/execute.mjs":"kgSsA","./getIntrospectionQuery.mjs":"2V2Jm","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1cN3k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Build a GraphQLSchema for use by client tools.
 *
 * Given the result of a client running the introspection query, creates and
 * returns a GraphQLSchema instance which can be then used with all graphql-js
 * tools, but cannot be used to execute a query, as introspection does not
 * represent the "resolver", "parse" or "serialize" functions or any other
 * server-internal mechanisms.
 *
 * This function expects a complete introspection result. Don't forget to check
 * the "errors" field of a server response before calling this function.
 */ parcelHelpers.export(exports, "buildClientSchema", ()=>buildClientSchema
);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _keyValMapMjs = require("../jsutils/keyValMap.mjs");
var _keyValMapMjsDefault = parcelHelpers.interopDefault(_keyValMapMjs);
var _isObjectLikeMjs = require("../jsutils/isObjectLike.mjs");
var _isObjectLikeMjsDefault = parcelHelpers.interopDefault(_isObjectLikeMjs);
var _parserMjs = require("../language/parser.mjs");
var _schemaMjs = require("../type/schema.mjs");
var _directivesMjs = require("../type/directives.mjs");
var _scalarsMjs = require("../type/scalars.mjs");
var _introspectionMjs = require("../type/introspection.mjs");
var _definitionMjs = require("../type/definition.mjs");
var _valueFromASTMjs = require("./valueFromAST.mjs");
function buildClientSchema(introspection, options) {
    _isObjectLikeMjsDefault.default(introspection) && _isObjectLikeMjsDefault.default(introspection.__schema) || _devAssertMjsDefault.default(0, "Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ".concat(_inspectMjsDefault.default(introspection), ".")); // Get the schema from the introspection result.
    var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.
    var typeMap = _keyValMapMjsDefault.default(schemaIntrospection.types, function(typeIntrospection) {
        return typeIntrospection.name;
    }, function(typeIntrospection) {
        return buildType(typeIntrospection);
    }); // Include standard types only if they are used.
    for(var _i2 = 0, _ref2 = [].concat(_scalarsMjs.specifiedScalarTypes, _introspectionMjs.introspectionTypes); _i2 < _ref2.length; _i2++){
        var stdType = _ref2[_i2];
        if (typeMap[stdType.name]) typeMap[stdType.name] = stdType;
    } // Get the root Query, Mutation, and Subscription types.
    var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
    var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
    var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
    // directives were not queried for.
    var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.
    // preferring cached instances before building new instances.
    function getType(typeRef) {
        if (typeRef.kind === _introspectionMjs.TypeKind.LIST) {
            var itemRef = typeRef.ofType;
            if (!itemRef) {
                throw new Error('Decorated type deeper than introspection query.');
            }
            return new _definitionMjs.GraphQLList(getType(itemRef));
        }
        if (typeRef.kind === _introspectionMjs.TypeKind.NON_NULL) {
            var nullableRef = typeRef.ofType;
            if (!nullableRef) {
                throw new Error('Decorated type deeper than introspection query.');
            }
            var nullableType = getType(nullableRef);
            return new _definitionMjs.GraphQLNonNull(_definitionMjs.assertNullableType(nullableType));
        }
        return getNamedType(typeRef);
    }
    function getNamedType(typeRef) {
        var typeName = typeRef.name;
        if (!typeName) {
            throw new Error("Unknown type reference: ".concat(_inspectMjsDefault.default(typeRef), "."));
        }
        var type = typeMap[typeName];
        if (!type) {
            throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
        }
        return type;
    }
    function getObjectType(typeRef) {
        return _definitionMjs.assertObjectType(getNamedType(typeRef));
    }
    function getInterfaceType(typeRef) {
        return _definitionMjs.assertInterfaceType(getNamedType(typeRef));
    } // Given a type's introspection result, construct the correct
    // GraphQLType instance.
    function buildType(type) {
        if (type != null && type.name != null && type.kind != null) {
            switch(type.kind){
                case _introspectionMjs.TypeKind.SCALAR:
                    return buildScalarDef(type);
                case _introspectionMjs.TypeKind.OBJECT:
                    return buildObjectDef(type);
                case _introspectionMjs.TypeKind.INTERFACE:
                    return buildInterfaceDef(type);
                case _introspectionMjs.TypeKind.UNION:
                    return buildUnionDef(type);
                case _introspectionMjs.TypeKind.ENUM:
                    return buildEnumDef(type);
                case _introspectionMjs.TypeKind.INPUT_OBJECT:
                    return buildInputObjectDef(type);
            }
        }
        var typeStr = _inspectMjsDefault.default(type);
        throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
    }
    function buildScalarDef(scalarIntrospection) {
        return new _definitionMjs.GraphQLScalarType({
            name: scalarIntrospection.name,
            description: scalarIntrospection.description,
            specifiedByUrl: scalarIntrospection.specifiedByUrl
        });
    }
    function buildImplementationsList(implementingIntrospection) {
        // TODO: Temporary workaround until GraphQL ecosystem will fully support
        // 'interfaces' on interface types.
        if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspectionMjs.TypeKind.INTERFACE) {
            return [];
        }
        if (!implementingIntrospection.interfaces) {
            var implementingIntrospectionStr = _inspectMjsDefault.default(implementingIntrospection);
            throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
        }
        return implementingIntrospection.interfaces.map(getInterfaceType);
    }
    function buildObjectDef(objectIntrospection) {
        return new _definitionMjs.GraphQLObjectType({
            name: objectIntrospection.name,
            description: objectIntrospection.description,
            interfaces: function interfaces() {
                return buildImplementationsList(objectIntrospection);
            },
            fields: function fields() {
                return buildFieldDefMap(objectIntrospection);
            }
        });
    }
    function buildInterfaceDef(interfaceIntrospection) {
        return new _definitionMjs.GraphQLInterfaceType({
            name: interfaceIntrospection.name,
            description: interfaceIntrospection.description,
            interfaces: function interfaces() {
                return buildImplementationsList(interfaceIntrospection);
            },
            fields: function fields() {
                return buildFieldDefMap(interfaceIntrospection);
            }
        });
    }
    function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
            var unionIntrospectionStr = _inspectMjsDefault.default(unionIntrospection);
            throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
        }
        return new _definitionMjs.GraphQLUnionType({
            name: unionIntrospection.name,
            description: unionIntrospection.description,
            types: function types() {
                return unionIntrospection.possibleTypes.map(getObjectType);
            }
        });
    }
    function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
            var enumIntrospectionStr = _inspectMjsDefault.default(enumIntrospection);
            throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
        }
        return new _definitionMjs.GraphQLEnumType({
            name: enumIntrospection.name,
            description: enumIntrospection.description,
            values: _keyValMapMjsDefault.default(enumIntrospection.enumValues, function(valueIntrospection) {
                return valueIntrospection.name;
            }, function(valueIntrospection) {
                return {
                    description: valueIntrospection.description,
                    deprecationReason: valueIntrospection.deprecationReason
                };
            })
        });
    }
    function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
            var inputObjectIntrospectionStr = _inspectMjsDefault.default(inputObjectIntrospection);
            throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
        }
        return new _definitionMjs.GraphQLInputObjectType({
            name: inputObjectIntrospection.name,
            description: inputObjectIntrospection.description,
            fields: function fields() {
                return buildInputValueDefMap(inputObjectIntrospection.inputFields);
            }
        });
    }
    function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields) {
            throw new Error("Introspection result missing fields: ".concat(_inspectMjsDefault.default(typeIntrospection), "."));
        }
        return _keyValMapMjsDefault.default(typeIntrospection.fields, function(fieldIntrospection) {
            return fieldIntrospection.name;
        }, buildField);
    }
    function buildField(fieldIntrospection) {
        var type = getType(fieldIntrospection.type);
        if (!_definitionMjs.isOutputType(type)) {
            var typeStr = _inspectMjsDefault.default(type);
            throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
        }
        if (!fieldIntrospection.args) {
            var fieldIntrospectionStr = _inspectMjsDefault.default(fieldIntrospection);
            throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
        }
        return {
            description: fieldIntrospection.description,
            deprecationReason: fieldIntrospection.deprecationReason,
            type: type,
            args: buildInputValueDefMap(fieldIntrospection.args)
        };
    }
    function buildInputValueDefMap(inputValueIntrospections) {
        return _keyValMapMjsDefault.default(inputValueIntrospections, function(inputValue) {
            return inputValue.name;
        }, buildInputValue);
    }
    function buildInputValue(inputValueIntrospection) {
        var type = getType(inputValueIntrospection.type);
        if (!_definitionMjs.isInputType(type)) {
            var typeStr = _inspectMjsDefault.default(type);
            throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
        }
        var defaultValue = inputValueIntrospection.defaultValue != null ? _valueFromASTMjs.valueFromAST(_parserMjs.parseValue(inputValueIntrospection.defaultValue), type) : undefined;
        return {
            description: inputValueIntrospection.description,
            type: type,
            defaultValue: defaultValue,
            deprecationReason: inputValueIntrospection.deprecationReason
        };
    }
    function buildDirective(directiveIntrospection) {
        if (!directiveIntrospection.args) {
            var directiveIntrospectionStr = _inspectMjsDefault.default(directiveIntrospection);
            throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
        }
        if (!directiveIntrospection.locations) {
            var _directiveIntrospectionStr = _inspectMjsDefault.default(directiveIntrospection);
            throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
        }
        return new _directivesMjs.GraphQLDirective({
            name: directiveIntrospection.name,
            description: directiveIntrospection.description,
            isRepeatable: directiveIntrospection.isRepeatable,
            locations: directiveIntrospection.locations.slice(),
            args: buildInputValueDefMap(directiveIntrospection.args)
        });
    }
    return new _schemaMjs.GraphQLSchema({
        description: schemaIntrospection.description,
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: _objectValuesMjsDefault.default(typeMap),
        directives: directives,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    }); // Given a type reference in introspection, return the GraphQLType instance.
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/inspect.mjs":"doI9y","../jsutils/devAssert.mjs":"iZbmm","../jsutils/keyValMap.mjs":"cP1oT","../jsutils/isObjectLike.mjs":"6kDBW","../language/parser.mjs":"11ZrA","../type/schema.mjs":"jMEya","../type/directives.mjs":"crfoz","../type/scalars.mjs":"hLZ76","../type/introspection.mjs":"ezRs8","../type/definition.mjs":"6PVmH","./valueFromAST.mjs":"chd8v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2H2UV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This takes the ast of a schema document produced by the parse function in
 * src/language/parser.js.
 *
 * If no schema definition is provided, then it will look for types named Query
 * and Mutation.
 *
 * Given that AST it constructs a GraphQLSchema. The resulting schema
 * has no resolve methods, so execution will use default resolvers.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ parcelHelpers.export(exports, "buildASTSchema", ()=>buildASTSchema
);
/**
 * A helper function to build a GraphQLSchema directly from a source
 * document.
 */ parcelHelpers.export(exports, "buildSchema", ()=>buildSchema
);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _kindsMjs = require("../language/kinds.mjs");
var _parserMjs = require("../language/parser.mjs");
var _validateMjs = require("../validation/validate.mjs");
var _schemaMjs = require("../type/schema.mjs");
var _directivesMjs = require("../type/directives.mjs");
var _extendSchemaMjs = require("./extendSchema.mjs");
function buildASTSchema(documentAST, options) {
    documentAST != null && documentAST.kind === _kindsMjs.Kind.DOCUMENT || _devAssertMjsDefault.default(0, 'Must provide valid Document AST.');
    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) _validateMjs.assertValidSDL(documentAST);
    var emptySchemaConfig = {
        description: undefined,
        types: [],
        directives: [],
        extensions: undefined,
        extensionASTNodes: [],
        assumeValid: false
    };
    var config = _extendSchemaMjs.extendSchemaImpl(emptySchemaConfig, documentAST, options);
    if (config.astNode == null) for(var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++){
        var type = _config$types2[_i2];
        switch(type.name){
            // Note: While this could make early assertions to get the correctly
            // typed values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable results.
            case 'Query':
                config.query = type;
                break;
            case 'Mutation':
                config.mutation = type;
                break;
            case 'Subscription':
                config.subscription = type;
                break;
        }
    }
    var directives = config.directives; // If specified directives were not explicitly declared, add them.
    var _loop = function _loop1(_i4) {
        var stdDirective = _directivesMjs.specifiedDirectives[_i4];
        if (directives.every(function(directive) {
            return directive.name !== stdDirective.name;
        })) directives.push(stdDirective);
    };
    for(var _i4 = 0; _i4 < _directivesMjs.specifiedDirectives.length; _i4++)_loop(_i4);
    return new _schemaMjs.GraphQLSchema(config);
}
function buildSchema(source, options) {
    var document = _parserMjs.parse(source, {
        noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
        allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,
        allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,
        experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables
    });
    return buildASTSchema(document, {
        commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,
        assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    });
}

},{"../jsutils/devAssert.mjs":"iZbmm","../language/kinds.mjs":"3gRFP","../language/parser.mjs":"11ZrA","../validation/validate.mjs":"cJoEq","../type/schema.mjs":"jMEya","../type/directives.mjs":"crfoz","./extendSchema.mjs":"bLRA4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bLRA4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Produces a new schema given an existing schema and a document which may
 * contain GraphQL type extensions and definitions. The original schema will
 * remain unaltered.
 *
 * Because a schema represents a graph of references, a schema cannot be
 * extended without effectively making an entire copy. We do not know until it's
 * too late if subgraphs remain unchanged.
 *
 * This algorithm copies the provided schema, applying extensions while
 * producing the copy. The original schema remains unaltered.
 *
 * Accepts options as a third argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ parcelHelpers.export(exports, "extendSchema", ()=>extendSchema
);
/**
 * @internal
 */ parcelHelpers.export(exports, "extendSchemaImpl", ()=>extendSchemaImpl
);
/**
 * Given an ast node, returns its string description.
 * @deprecated: provided to ease adoption and will be removed in v16.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ parcelHelpers.export(exports, "getDescription", ()=>getDescription
);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _keyMapMjs = require("../jsutils/keyMap.mjs");
var _keyMapMjsDefault = parcelHelpers.interopDefault(_keyMapMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _mapValueMjs = require("../jsutils/mapValue.mjs");
var _mapValueMjsDefault = parcelHelpers.interopDefault(_mapValueMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _devAssertMjs = require("../jsutils/devAssert.mjs");
var _devAssertMjsDefault = parcelHelpers.interopDefault(_devAssertMjs);
var _kindsMjs = require("../language/kinds.mjs");
var _tokenKindMjs = require("../language/tokenKind.mjs");
var _blockStringMjs = require("../language/blockString.mjs");
var _predicatesMjs = require("../language/predicates.mjs");
var _validateMjs = require("../validation/validate.mjs");
var _valuesMjs = require("../execution/values.mjs");
var _schemaMjs = require("../type/schema.mjs");
var _scalarsMjs = require("../type/scalars.mjs");
var _introspectionMjs = require("../type/introspection.mjs");
var _directivesMjs = require("../type/directives.mjs");
var _definitionMjs = require("../type/definition.mjs");
var _valueFromASTMjs = require("./valueFromAST.mjs");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function extendSchema(schema, documentAST, options) {
    _schemaMjs.assertSchema(schema);
    documentAST != null && documentAST.kind === _kindsMjs.Kind.DOCUMENT || _devAssertMjsDefault.default(0, 'Must provide valid Document AST.');
    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) _validateMjs.assertValidSDLExtension(documentAST, schema);
    var schemaConfig = schema.toConfig();
    var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
    return schemaConfig === extendedConfig ? schema : new _schemaMjs.GraphQLSchema(extendedConfig);
}
function extendSchemaImpl(schemaConfig, documentAST, options) {
    var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;
    // Collect the type definitions and extensions found in the document.
    var typeDefs = [];
    var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
    // have the same name. For example, a type named "skip".
    var directiveDefs = [];
    var schemaDef; // Schema extensions are collected which may add additional operation types.
    var schemaExtensions = [];
    for(var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++){
        var def = _documentAST$definiti2[_i2];
        if (def.kind === _kindsMjs.Kind.SCHEMA_DEFINITION) schemaDef = def;
        else if (def.kind === _kindsMjs.Kind.SCHEMA_EXTENSION) schemaExtensions.push(def);
        else if (_predicatesMjs.isTypeDefinitionNode(def)) typeDefs.push(def);
        else if (_predicatesMjs.isTypeExtensionNode(def)) {
            var extendedTypeName = def.name.value;
            var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
            typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([
                def
            ]) : [
                def
            ];
        } else if (def.kind === _kindsMjs.Kind.DIRECTIVE_DEFINITION) directiveDefs.push(def);
    } // If this document contains no new types, extensions, or directives then
    // return the same unmodified GraphQLSchema instance.
    if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) return schemaConfig;
    var typeMap = Object.create(null);
    for(var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++){
        var existingType = _schemaConfig$types2[_i4];
        typeMap[existingType.name] = extendNamedType(existingType);
    }
    for(var _i6 = 0; _i6 < typeDefs.length; _i6++){
        var _stdTypeMap$name;
        var typeNode = typeDefs[_i6];
        var name = typeNode.name.value;
        typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
    }
    var operationTypes = _objectSpread(_objectSpread({
        // Get the extended root operation types.
        query: schemaConfig.query && replaceNamedType(schemaConfig.query),
        mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
        subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
    }, schemaDef && getOperationTypes([
        schemaDef
    ])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.
    // this scope and have access to the schema, cache, and newly defined types.
    function replaceType(type) {
        if (_definitionMjs.isListType(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definitionMjs.GraphQLList(replaceType(type.ofType));
        }
        if (_definitionMjs.isNonNullType(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definitionMjs.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
    }
    function replaceNamedType(type) {
        // Note: While this could make early assertions to get the correctly
        // typed values, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        return typeMap[type.name];
    }
    function replaceDirective(directive) {
        var config = directive.toConfig();
        return new _directivesMjs.GraphQLDirective(_objectSpread(_objectSpread({
        }, config), {
        }, {
            args: _mapValueMjsDefault.default(config.args, extendArg)
        }));
    }
    function extendNamedType(type) {
        if (_introspectionMjs.isIntrospectionType(type) || _scalarsMjs.isSpecifiedScalarType(type)) {
            // Builtin types are not extended.
            return type;
        }
        if (_definitionMjs.isScalarType(type)) {
            return extendScalarType(type);
        }
        if (_definitionMjs.isObjectType(type)) {
            return extendObjectType(type);
        }
        if (_definitionMjs.isInterfaceType(type)) {
            return extendInterfaceType(type);
        }
        if (_definitionMjs.isUnionType(type)) {
            return extendUnionType(type);
        }
        if (_definitionMjs.isEnumType(type)) {
            return extendEnumType(type);
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
        if (_definitionMjs.isInputObjectType(type)) {
            return extendInputObjectType(type);
        } // istanbul ignore next (Not reachable. All possible types have been considered)
        _invariantMjsDefault.default(0, 'Unexpected type: ' + _inspectMjsDefault.default(type));
    }
    function extendInputObjectType(type) {
        var _typeExtensionsMap$co;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
        return new _definitionMjs.GraphQLInputObjectType(_objectSpread(_objectSpread({
        }, config), {
        }, {
            fields: function fields() {
                return _objectSpread(_objectSpread({
                }, _mapValueMjsDefault.default(config.fields, function(field) {
                    return _objectSpread(_objectSpread({
                    }, field), {
                    }, {
                        type: replaceType(field.type)
                    });
                })), buildInputFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendEnumType(type) {
        var _typeExtensionsMap$ty;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
        return new _definitionMjs.GraphQLEnumType(_objectSpread(_objectSpread({
        }, config), {
        }, {
            values: _objectSpread(_objectSpread({
            }, config.values), buildEnumValueMap(extensions)),
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendScalarType(type) {
        var _typeExtensionsMap$co2;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
        var specifiedByUrl = config.specifiedByUrl;
        for(var _i8 = 0; _i8 < extensions.length; _i8++){
            var _getSpecifiedByUrl;
            var extensionNode = extensions[_i8];
            specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;
        }
        return new _definitionMjs.GraphQLScalarType(_objectSpread(_objectSpread({
        }, config), {
        }, {
            specifiedByUrl: specifiedByUrl,
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendObjectType(type) {
        var _typeExtensionsMap$co3;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
        return new _definitionMjs.GraphQLObjectType(_objectSpread(_objectSpread({
        }, config), {
        }, {
            interfaces: function interfaces() {
                return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
            },
            fields: function fields() {
                return _objectSpread(_objectSpread({
                }, _mapValueMjsDefault.default(config.fields, extendField)), buildFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendInterfaceType(type) {
        var _typeExtensionsMap$co4;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
        return new _definitionMjs.GraphQLInterfaceType(_objectSpread(_objectSpread({
        }, config), {
        }, {
            interfaces: function interfaces() {
                return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
            },
            fields: function fields() {
                return _objectSpread(_objectSpread({
                }, _mapValueMjsDefault.default(config.fields, extendField)), buildFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendUnionType(type) {
        var _typeExtensionsMap$co5;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
        return new _definitionMjs.GraphQLUnionType(_objectSpread(_objectSpread({
        }, config), {
        }, {
            types: function types() {
                return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendField(field) {
        return _objectSpread(_objectSpread({
        }, field), {
        }, {
            type: replaceType(field.type),
            // $FlowFixMe[incompatible-call]
            args: _mapValueMjsDefault.default(field.args, extendArg)
        });
    }
    function extendArg(arg) {
        return _objectSpread(_objectSpread({
        }, arg), {
        }, {
            type: replaceType(arg.type)
        });
    }
    function getOperationTypes(nodes) {
        var opTypes = {
        };
        for(var _i10 = 0; _i10 < nodes.length; _i10++){
            var _node$operationTypes;
            var node = nodes[_i10];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
            for(var _i12 = 0; _i12 < operationTypesNodes.length; _i12++){
                var operationType = operationTypesNodes[_i12];
                opTypes[operationType.operation] = getNamedType(operationType.type);
            }
        } // Note: While this could make early assertions to get the correctly
        // typed values below, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        return opTypes;
    }
    function getNamedType(node) {
        var _stdTypeMap$name2;
        var name = node.name.value;
        var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
        if (type === undefined) {
            throw new Error("Unknown type: \"".concat(name, "\"."));
        }
        return type;
    }
    function getWrappedType(node) {
        if (node.kind === _kindsMjs.Kind.LIST_TYPE) {
            return new _definitionMjs.GraphQLList(getWrappedType(node.type));
        }
        if (node.kind === _kindsMjs.Kind.NON_NULL_TYPE) {
            return new _definitionMjs.GraphQLNonNull(getWrappedType(node.type));
        }
        return getNamedType(node);
    }
    function buildDirective(node) {
        var locations = node.locations.map(function(_ref) {
            var value = _ref.value;
            return value;
        });
        return new _directivesMjs.GraphQLDirective({
            name: node.name.value,
            description: getDescription(node, options),
            locations: locations,
            isRepeatable: node.repeatable,
            args: buildArgumentMap(node.arguments),
            astNode: node
        });
    }
    function buildFieldMap(nodes) {
        var fieldConfigMap = Object.create(null);
        for(var _i14 = 0; _i14 < nodes.length; _i14++){
            var _node$fields;
            var node = nodes[_i14];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
            for(var _i16 = 0; _i16 < nodeFields.length; _i16++){
                var field = nodeFields[_i16];
                fieldConfigMap[field.name.value] = {
                    // Note: While this could make assertions to get the correctly typed
                    // value, that would throw immediately while type system validation
                    // with validateSchema() will produce more actionable results.
                    type: getWrappedType(field.type),
                    description: getDescription(field, options),
                    args: buildArgumentMap(field.arguments),
                    deprecationReason: getDeprecationReason(field),
                    astNode: field
                };
            }
        }
        return fieldConfigMap;
    }
    function buildArgumentMap(args) {
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var argsNodes = args !== null && args !== void 0 ? args : [];
        var argConfigMap = Object.create(null);
        for(var _i18 = 0; _i18 < argsNodes.length; _i18++){
            var arg = argsNodes[_i18];
            // Note: While this could make assertions to get the correctly typed
            // value, that would throw immediately while type system validation
            // with validateSchema() will produce more actionable results.
            var type = getWrappedType(arg.type);
            argConfigMap[arg.name.value] = {
                type: type,
                description: getDescription(arg, options),
                defaultValue: _valueFromASTMjs.valueFromAST(arg.defaultValue, type),
                deprecationReason: getDeprecationReason(arg),
                astNode: arg
            };
        }
        return argConfigMap;
    }
    function buildInputFieldMap(nodes) {
        var inputFieldMap = Object.create(null);
        for(var _i20 = 0; _i20 < nodes.length; _i20++){
            var _node$fields2;
            var node = nodes[_i20];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];
            for(var _i22 = 0; _i22 < fieldsNodes.length; _i22++){
                var field = fieldsNodes[_i22];
                // Note: While this could make assertions to get the correctly typed
                // value, that would throw immediately while type system validation
                // with validateSchema() will produce more actionable results.
                var type = getWrappedType(field.type);
                inputFieldMap[field.name.value] = {
                    type: type,
                    description: getDescription(field, options),
                    defaultValue: _valueFromASTMjs.valueFromAST(field.defaultValue, type),
                    deprecationReason: getDeprecationReason(field),
                    astNode: field
                };
            }
        }
        return inputFieldMap;
    }
    function buildEnumValueMap(nodes) {
        var enumValueMap = Object.create(null);
        for(var _i24 = 0; _i24 < nodes.length; _i24++){
            var _node$values;
            var node = nodes[_i24];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
            for(var _i26 = 0; _i26 < valuesNodes.length; _i26++){
                var value = valuesNodes[_i26];
                enumValueMap[value.name.value] = {
                    description: getDescription(value, options),
                    deprecationReason: getDeprecationReason(value),
                    astNode: value
                };
            }
        }
        return enumValueMap;
    }
    function buildInterfaces(nodes) {
        var interfaces = [];
        for(var _i28 = 0; _i28 < nodes.length; _i28++){
            var _node$interfaces;
            var node = nodes[_i28];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];
            for(var _i30 = 0; _i30 < interfacesNodes.length; _i30++){
                var type = interfacesNodes[_i30];
                // Note: While this could make assertions to get the correctly typed
                // values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable
                // results.
                interfaces.push(getNamedType(type));
            }
        }
        return interfaces;
    }
    function buildUnionTypes(nodes) {
        var types = [];
        for(var _i32 = 0; _i32 < nodes.length; _i32++){
            var _node$types;
            var node = nodes[_i32];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];
            for(var _i34 = 0; _i34 < typeNodes.length; _i34++){
                var type = typeNodes[_i34];
                // Note: While this could make assertions to get the correctly typed
                // values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable
                // results.
                types.push(getNamedType(type));
            }
        }
        return types;
    }
    function buildType(astNode) {
        var _typeExtensionsMap$na;
        var name = astNode.name.value;
        var description = getDescription(astNode, options);
        var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
        switch(astNode.kind){
            case _kindsMjs.Kind.OBJECT_TYPE_DEFINITION:
                {
                    var extensionASTNodes = extensionNodes;
                    var allNodes = [
                        astNode
                    ].concat(extensionASTNodes);
                    return new _definitionMjs.GraphQLObjectType({
                        name: name,
                        description: description,
                        interfaces: function interfaces() {
                            return buildInterfaces(allNodes);
                        },
                        fields: function fields() {
                            return buildFieldMap(allNodes);
                        },
                        astNode: astNode,
                        extensionASTNodes: extensionASTNodes
                    });
                }
            case _kindsMjs.Kind.INTERFACE_TYPE_DEFINITION:
                {
                    var _extensionASTNodes = extensionNodes;
                    var _allNodes = [
                        astNode
                    ].concat(_extensionASTNodes);
                    return new _definitionMjs.GraphQLInterfaceType({
                        name: name,
                        description: description,
                        interfaces: function interfaces() {
                            return buildInterfaces(_allNodes);
                        },
                        fields: function fields() {
                            return buildFieldMap(_allNodes);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes
                    });
                }
            case _kindsMjs.Kind.ENUM_TYPE_DEFINITION:
                {
                    var _extensionASTNodes2 = extensionNodes;
                    var _allNodes2 = [
                        astNode
                    ].concat(_extensionASTNodes2);
                    return new _definitionMjs.GraphQLEnumType({
                        name: name,
                        description: description,
                        values: buildEnumValueMap(_allNodes2),
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes2
                    });
                }
            case _kindsMjs.Kind.UNION_TYPE_DEFINITION:
                {
                    var _extensionASTNodes3 = extensionNodes;
                    var _allNodes3 = [
                        astNode
                    ].concat(_extensionASTNodes3);
                    return new _definitionMjs.GraphQLUnionType({
                        name: name,
                        description: description,
                        types: function types() {
                            return buildUnionTypes(_allNodes3);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes3
                    });
                }
            case _kindsMjs.Kind.SCALAR_TYPE_DEFINITION:
                {
                    var _extensionASTNodes4 = extensionNodes;
                    return new _definitionMjs.GraphQLScalarType({
                        name: name,
                        description: description,
                        specifiedByUrl: getSpecifiedByUrl(astNode),
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes4
                    });
                }
            case _kindsMjs.Kind.INPUT_OBJECT_TYPE_DEFINITION:
                {
                    var _extensionASTNodes5 = extensionNodes;
                    var _allNodes4 = [
                        astNode
                    ].concat(_extensionASTNodes5);
                    return new _definitionMjs.GraphQLInputObjectType({
                        name: name,
                        description: description,
                        fields: function fields() {
                            return buildInputFieldMap(_allNodes4);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes5
                    });
                }
        } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)
        _invariantMjsDefault.default(0, 'Unexpected type definition node: ' + _inspectMjsDefault.default(astNode));
    }
    return _objectSpread(_objectSpread({
        description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
    }, operationTypes), {
    }, {
        types: _objectValuesMjsDefault.default(typeMap),
        directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),
        extensions: undefined,
        astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
        extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
        assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
    }); // Below are functions used for producing this schema that have closed over
}
var stdTypeMap = _keyMapMjsDefault.default(_scalarsMjs.specifiedScalarTypes.concat(_introspectionMjs.introspectionTypes), function(type) {
    return type.name;
});
/**
 * Given a field or enum value node, returns the string value for the
 * deprecation reason.
 */ function getDeprecationReason(node) {
    var deprecated = _valuesMjs.getDirectiveValues(_directivesMjs.GraphQLDeprecatedDirective, node);
    return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
}
/**
 * Given a scalar node, returns the string value for the specifiedByUrl.
 */ function getSpecifiedByUrl(node) {
    var specifiedBy = _valuesMjs.getDirectiveValues(_directivesMjs.GraphQLSpecifiedByDirective, node);
    return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
}
function getDescription(node, options) {
    if (node.description) return node.description.value;
    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        var rawValue = getLeadingCommentBlock(node);
        if (rawValue !== undefined) return _blockStringMjs.dedentBlockStringValue('\n' + rawValue);
    }
}
function getLeadingCommentBlock(node) {
    var loc = node.loc;
    if (!loc) return;
    var comments = [];
    var token = loc.startToken.prev;
    while(token != null && token.kind === _tokenKindMjs.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line){
        var value = String(token.value);
        comments.push(value);
        token = token.prev;
    }
    return comments.length > 0 ? comments.reverse().join('\n') : undefined;
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/keyMap.mjs":"53ed0","../jsutils/inspect.mjs":"doI9y","../jsutils/mapValue.mjs":"2eY8U","../jsutils/invariant.mjs":"gb46A","../jsutils/devAssert.mjs":"iZbmm","../language/kinds.mjs":"3gRFP","../language/tokenKind.mjs":"itJR8","../language/blockString.mjs":"2FyBa","../language/predicates.mjs":"6AiDB","../validation/validate.mjs":"cJoEq","../execution/values.mjs":"jCwPJ","../type/schema.mjs":"jMEya","../type/scalars.mjs":"hLZ76","../type/introspection.mjs":"ezRs8","../type/directives.mjs":"crfoz","../type/definition.mjs":"6PVmH","./valueFromAST.mjs":"chd8v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"egX2v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Sort GraphQLSchema.
 *
 * This function returns a sorted copy of the given GraphQLSchema.
 */ parcelHelpers.export(exports, "lexicographicSortSchema", ()=>lexicographicSortSchema
);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _keyValMapMjs = require("../jsutils/keyValMap.mjs");
var _keyValMapMjsDefault = parcelHelpers.interopDefault(_keyValMapMjs);
var _naturalCompareMjs = require("../jsutils/naturalCompare.mjs");
var _naturalCompareMjsDefault = parcelHelpers.interopDefault(_naturalCompareMjs);
var _schemaMjs = require("../type/schema.mjs");
var _directivesMjs = require("../type/directives.mjs");
var _introspectionMjs = require("../type/introspection.mjs");
var _definitionMjs = require("../type/definition.mjs");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function lexicographicSortSchema(schema) {
    var schemaConfig = schema.toConfig();
    var typeMap = _keyValMapMjsDefault.default(sortByName(schemaConfig.types), function(type) {
        return type.name;
    }, sortNamedType);
    function replaceType(type) {
        if (_definitionMjs.isListType(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definitionMjs.GraphQLList(replaceType(type.ofType));
        } else if (_definitionMjs.isNonNullType(type)) {
            // $FlowFixMe[incompatible-return]
            return new _definitionMjs.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
    }
    function replaceNamedType(type) {
        return typeMap[type.name];
    }
    function replaceMaybeType(maybeType) {
        return maybeType && replaceNamedType(maybeType);
    }
    function sortDirective(directive) {
        var config = directive.toConfig();
        return new _directivesMjs.GraphQLDirective(_objectSpread(_objectSpread({
        }, config), {
        }, {
            locations: sortBy(config.locations, function(x) {
                return x;
            }),
            args: sortArgs(config.args)
        }));
    }
    function sortArgs(args) {
        return sortObjMap(args, function(arg) {
            return _objectSpread(_objectSpread({
            }, arg), {
            }, {
                type: replaceType(arg.type)
            });
        });
    }
    function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(_objectSpread({
            }, field), {
            }, {
                type: replaceType(field.type),
                args: sortArgs(field.args)
            });
        });
    }
    function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(_objectSpread({
            }, field), {
            }, {
                type: replaceType(field.type)
            });
        });
    }
    function sortTypes(arr) {
        return sortByName(arr).map(replaceNamedType);
    }
    function sortNamedType(type) {
        if (_definitionMjs.isScalarType(type) || _introspectionMjs.isIntrospectionType(type)) {
            return type;
        }
        if (_definitionMjs.isObjectType(type)) {
            var config = type.toConfig();
            return new _definitionMjs.GraphQLObjectType(_objectSpread(_objectSpread({
            }, config), {
            }, {
                interfaces: function interfaces() {
                    return sortTypes(config.interfaces);
                },
                fields: function fields() {
                    return sortFields(config.fields);
                }
            }));
        }
        if (_definitionMjs.isInterfaceType(type)) {
            var _config = type.toConfig();
            return new _definitionMjs.GraphQLInterfaceType(_objectSpread(_objectSpread({
            }, _config), {
            }, {
                interfaces: function interfaces() {
                    return sortTypes(_config.interfaces);
                },
                fields: function fields() {
                    return sortFields(_config.fields);
                }
            }));
        }
        if (_definitionMjs.isUnionType(type)) {
            var _config2 = type.toConfig();
            return new _definitionMjs.GraphQLUnionType(_objectSpread(_objectSpread({
            }, _config2), {
            }, {
                types: function types() {
                    return sortTypes(_config2.types);
                }
            }));
        }
        if (_definitionMjs.isEnumType(type)) {
            var _config3 = type.toConfig();
            return new _definitionMjs.GraphQLEnumType(_objectSpread(_objectSpread({
            }, _config3), {
            }, {
                values: sortObjMap(_config3.values)
            }));
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
        if (_definitionMjs.isInputObjectType(type)) {
            var _config4 = type.toConfig();
            return new _definitionMjs.GraphQLInputObjectType(_objectSpread(_objectSpread({
            }, _config4), {
            }, {
                fields: function fields() {
                    return sortInputFields(_config4.fields);
                }
            }));
        } // istanbul ignore next (Not reachable. All possible types have been considered)
        _invariantMjsDefault.default(0, 'Unexpected type: ' + _inspectMjsDefault.default(type));
    }
    return new _schemaMjs.GraphQLSchema(_objectSpread(_objectSpread({
    }, schemaConfig), {
    }, {
        types: _objectValuesMjsDefault.default(typeMap),
        directives: sortByName(schemaConfig.directives).map(sortDirective),
        query: replaceMaybeType(schemaConfig.query),
        mutation: replaceMaybeType(schemaConfig.mutation),
        subscription: replaceMaybeType(schemaConfig.subscription)
    }));
}
function sortObjMap(map, sortValueFn) {
    var sortedMap = Object.create(null);
    var sortedKeys = sortBy(Object.keys(map), function(x) {
        return x;
    });
    for(var _i2 = 0; _i2 < sortedKeys.length; _i2++){
        var key = sortedKeys[_i2];
        var value = map[key];
        sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
    }
    return sortedMap;
}
function sortByName(array) {
    return sortBy(array, function(obj) {
        return obj.name;
    });
}
function sortBy(array, mapToKey) {
    return array.slice().sort(function(obj1, obj2) {
        var key1 = mapToKey(obj1);
        var key2 = mapToKey(obj2);
        return _naturalCompareMjsDefault.default(key1, key2);
    });
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../jsutils/keyValMap.mjs":"cP1oT","../jsutils/naturalCompare.mjs":"bpKPt","../type/schema.mjs":"jMEya","../type/directives.mjs":"crfoz","../type/introspection.mjs":"ezRs8","../type/definition.mjs":"6PVmH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8fvqM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ parcelHelpers.export(exports, "printSchema", ()=>printSchema
);
parcelHelpers.export(exports, "printIntrospectionSchema", ()=>printIntrospectionSchema
);
parcelHelpers.export(exports, "printType", ()=>printType
);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _printerMjs = require("../language/printer.mjs");
var _blockStringMjs = require("../language/blockString.mjs");
var _introspectionMjs = require("../type/introspection.mjs");
var _scalarsMjs = require("../type/scalars.mjs");
var _directivesMjs = require("../type/directives.mjs");
var _definitionMjs = require("../type/definition.mjs");
var _astFromValueMjs = require("./astFromValue.mjs");
function printSchema(schema, options) {
    return printFilteredSchema(schema, function(n) {
        return !_directivesMjs.isSpecifiedDirective(n);
    }, isDefinedType, options);
}
function printIntrospectionSchema(schema, options) {
    return printFilteredSchema(schema, _directivesMjs.isSpecifiedDirective, _introspectionMjs.isIntrospectionType, options);
}
function isDefinedType(type) {
    return !_scalarsMjs.isSpecifiedScalarType(type) && !_introspectionMjs.isIntrospectionType(type);
}
function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
    var directives = schema.getDirectives().filter(directiveFilter);
    var types = _objectValuesMjsDefault.default(schema.getTypeMap()).filter(typeFilter);
    return [
        printSchemaDefinition(schema)
    ].concat(directives.map(function(directive) {
        return printDirective(directive, options);
    }), types.map(function(type) {
        return printType(type, options);
    })).filter(Boolean).join('\n\n') + '\n';
}
function printSchemaDefinition(schema) {
    if (schema.description == null && isSchemaOfCommonNames(schema)) return;
    var operationTypes = [];
    var queryType = schema.getQueryType();
    if (queryType) operationTypes.push("  query: ".concat(queryType.name));
    var mutationType = schema.getMutationType();
    if (mutationType) operationTypes.push("  mutation: ".concat(mutationType.name));
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType) operationTypes.push("  subscription: ".concat(subscriptionType.name));
    return printDescription({
    }, schema) + "schema {\n".concat(operationTypes.join('\n'), "\n}");
}
/**
 * GraphQL schema define root types for each type of operation. These types are
 * the same as any other type and can be named in any manner, however there is
 * a common naming convention:
 *
 *   schema {
 *     query: Query
 *     mutation: Mutation
 *   }
 *
 * When using this naming convention, the schema description can be omitted.
 */ function isSchemaOfCommonNames(schema) {
    var queryType = schema.getQueryType();
    if (queryType && queryType.name !== 'Query') return false;
    var mutationType = schema.getMutationType();
    if (mutationType && mutationType.name !== 'Mutation') return false;
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType && subscriptionType.name !== 'Subscription') return false;
    return true;
}
function printType(type, options) {
    if (_definitionMjs.isScalarType(type)) return printScalar(type, options);
    if (_definitionMjs.isObjectType(type)) return printObject(type, options);
    if (_definitionMjs.isInterfaceType(type)) return printInterface(type, options);
    if (_definitionMjs.isUnionType(type)) return printUnion(type, options);
    if (_definitionMjs.isEnumType(type)) return printEnum(type, options);
     // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (_definitionMjs.isInputObjectType(type)) return printInputObject(type, options);
     // istanbul ignore next (Not reachable. All possible types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected type: ' + _inspectMjsDefault.default(type));
}
function printScalar(type, options) {
    return printDescription(options, type) + "scalar ".concat(type.name) + printSpecifiedByUrl(type);
}
function printImplementedInterfaces(type) {
    var interfaces = type.getInterfaces();
    return interfaces.length ? ' implements ' + interfaces.map(function(i) {
        return i.name;
    }).join(' & ') : '';
}
function printObject(type, options) {
    return printDescription(options, type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}
function printInterface(type, options) {
    return printDescription(options, type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}
function printUnion(type, options) {
    var types = type.getTypes();
    var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
    return printDescription(options, type) + 'union ' + type.name + possibleTypes;
}
function printEnum(type, options) {
    var values = type.getValues().map(function(value, i) {
        return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value.deprecationReason);
    });
    return printDescription(options, type) + "enum ".concat(type.name) + printBlock(values);
}
function printInputObject(type, options) {
    var fields = _objectValuesMjsDefault.default(type.getFields()).map(function(f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
    });
    return printDescription(options, type) + "input ".concat(type.name) + printBlock(fields);
}
function printFields(options, type) {
    var fields = _objectValuesMjsDefault.default(type.getFields()).map(function(f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f.deprecationReason);
    });
    return printBlock(fields);
}
function printBlock(items) {
    return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
}
function printArgs(options, args) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    if (args.length === 0) return '';
     // If every arg does not have a description, print them on one line.
    if (args.every(function(arg) {
        return !arg.description;
    })) return '(' + args.map(printInputValue).join(', ') + ')';
    return '(\n' + args.map(function(arg, i) {
        return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
    }).join('\n') + '\n' + indentation + ')';
}
function printInputValue(arg) {
    var defaultAST = _astFromValueMjs.astFromValue(arg.defaultValue, arg.type);
    var argDecl = arg.name + ': ' + String(arg.type);
    if (defaultAST) argDecl += " = ".concat(_printerMjs.print(defaultAST));
    return argDecl + printDeprecated(arg.deprecationReason);
}
function printDirective(directive, options) {
    return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
}
function printDeprecated(reason) {
    if (reason == null) return '';
    var reasonAST = _astFromValueMjs.astFromValue(reason, _scalarsMjs.GraphQLString);
    if (reasonAST && reason !== _directivesMjs.DEFAULT_DEPRECATION_REASON) return ' @deprecated(reason: ' + _printerMjs.print(reasonAST) + ')';
    return ' @deprecated';
}
function printSpecifiedByUrl(scalar) {
    if (scalar.specifiedByUrl == null) return '';
    var url = scalar.specifiedByUrl;
    var urlAST = _astFromValueMjs.astFromValue(url, _scalarsMjs.GraphQLString);
    urlAST || _invariantMjsDefault.default(0, 'Unexpected null value returned from `astFromValue` for specifiedByUrl');
    return ' @specifiedBy(url: ' + _printerMjs.print(urlAST) + ')';
}
function printDescription(options, def) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var description = def.description;
    if (description == null) return '';
    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) return printDescriptionWithComments(description, indentation, firstInBlock);
    var preferMultipleLines = description.length > 70;
    var blockString = _blockStringMjs.printBlockString(description, '', preferMultipleLines);
    var prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
    return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
}
function printDescriptionWithComments(description, indentation, firstInBlock) {
    var prefix = indentation && !firstInBlock ? '\n' : '';
    var comment = description.split('\n').map(function(line) {
        return indentation + (line !== '' ? '# ' + line : '#');
    }).join('\n');
    return prefix + comment + '\n';
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../language/printer.mjs":"bEnFw","../language/blockString.mjs":"2FyBa","../type/introspection.mjs":"ezRs8","../type/scalars.mjs":"hLZ76","../type/directives.mjs":"crfoz","../type/definition.mjs":"6PVmH","./astFromValue.mjs":"bQ66F","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bVaWC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Provided a collection of ASTs, presumably each from different files,
 * concatenate the ASTs together into batched AST, useful for validating many
 * GraphQL source files which together represent one conceptual application.
 */ parcelHelpers.export(exports, "concatAST", ()=>concatAST
);
function concatAST(documents) {
    var definitions = [];
    for(var _i2 = 0; _i2 < documents.length; _i2++){
        var doc = documents[_i2];
        definitions = definitions.concat(doc.definitions);
    }
    return {
        kind: 'Document',
        definitions: definitions
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"QUy2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * separateOperations accepts a single AST document which may contain many
 * operations and fragments and returns a collection of AST documents each of
 * which contains a single operation as well the fragment definitions it
 * refers to.
 */ parcelHelpers.export(exports, "separateOperations", ()=>separateOperations
);
var _kindsMjs = require("../language/kinds.mjs");
var _visitorMjs = require("../language/visitor.mjs");
function separateOperations(documentAST) {
    var operations = [];
    var depGraph = Object.create(null); // Populate metadata and build a dependency graph.
    for(var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++){
        var definitionNode = _documentAST$definiti2[_i2];
        switch(definitionNode.kind){
            case _kindsMjs.Kind.OPERATION_DEFINITION:
                operations.push(definitionNode);
                break;
            case _kindsMjs.Kind.FRAGMENT_DEFINITION:
                depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);
                break;
        }
    } // For each operation, produce a new synthesized AST which includes only what
    // is necessary for completing that operation.
    var separatedDocumentASTs = Object.create(null);
    var _loop = function _loop1(_i4) {
        var operation = operations[_i4];
        var dependencies = new Set();
        for(var _i6 = 0, _collectDependencies2 = collectDependencies(operation.selectionSet); _i6 < _collectDependencies2.length; _i6++){
            var fragmentName = _collectDependencies2[_i6];
            collectTransitiveDependencies(dependencies, depGraph, fragmentName);
        } // Provides the empty string for anonymous operations.
        var operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted
        // to retain the same order as the original document.
        separatedDocumentASTs[operationName] = {
            kind: _kindsMjs.Kind.DOCUMENT,
            definitions: documentAST.definitions.filter(function(node) {
                return node === operation || node.kind === _kindsMjs.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);
            })
        };
    };
    for(var _i4 = 0; _i4 < operations.length; _i4++)_loop(_i4);
    return separatedDocumentASTs;
}
// From a dependency graph, collects a list of transitive dependencies by
// recursing through a dependency graph.
function collectTransitiveDependencies(collected, depGraph, fromName) {
    if (!collected.has(fromName)) {
        collected.add(fromName);
        var immediateDeps = depGraph[fromName];
        if (immediateDeps !== undefined) for(var _i8 = 0; _i8 < immediateDeps.length; _i8++){
            var toName = immediateDeps[_i8];
            collectTransitiveDependencies(collected, depGraph, toName);
        }
    }
}
function collectDependencies(selectionSet) {
    var dependencies = [];
    _visitorMjs.visit(selectionSet, {
        FragmentSpread: function FragmentSpread(node) {
            dependencies.push(node.name.value);
        }
    });
    return dependencies;
}

},{"../language/kinds.mjs":"3gRFP","../language/visitor.mjs":"bb6mn","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gKD4C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Strips characters that are not significant to the validity or execution
 * of a GraphQL document:
 *   - UnicodeBOM
 *   - WhiteSpace
 *   - LineTerminator
 *   - Comment
 *   - Comma
 *   - BlockString indentation
 *
 * Note: It is required to have a delimiter character between neighboring
 * non-punctuator tokens and this function always uses single space as delimiter.
 *
 * It is guaranteed that both input and output documents if parsed would result
 * in the exact same AST except for nodes location.
 *
 * Warning: It is guaranteed that this function will always produce stable results.
 * However, it's not guaranteed that it will stay the same between different
 * releases due to bugfixes or changes in the GraphQL specification.
 *
 * Query example:
 *
 * query SomeQuery($foo: String!, $bar: String) {
 *   someField(foo: $foo, bar: $bar) {
 *     a
 *     b {
 *       c
 *       d
 *     }
 *   }
 * }
 *
 * Becomes:
 *
 * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
 *
 * SDL example:
 *
 * """
 * Type description
 * """
 * type Foo {
 *   """
 *   Field description
 *   """
 *   bar: String
 * }
 *
 * Becomes:
 *
 * """Type description""" type Foo{"""Field description""" bar:String}
 */ parcelHelpers.export(exports, "stripIgnoredCharacters", ()=>stripIgnoredCharacters
);
var _sourceMjs = require("../language/source.mjs");
var _tokenKindMjs = require("../language/tokenKind.mjs");
var _lexerMjs = require("../language/lexer.mjs");
var _blockStringMjs = require("../language/blockString.mjs");
function stripIgnoredCharacters(source) {
    var sourceObj = _sourceMjs.isSource(source) ? source : new _sourceMjs.Source(source);
    var body = sourceObj.body;
    var lexer = new _lexerMjs.Lexer(sourceObj);
    var strippedBody = '';
    var wasLastAddedTokenNonPunctuator = false;
    while(lexer.advance().kind !== _tokenKindMjs.TokenKind.EOF){
        var currentToken = lexer.token;
        var tokenKind = currentToken.kind;
        /**
     * Every two non-punctuator tokens should have space between them.
     * Also prevent case of non-punctuator token following by spread resulting
     * in invalid token (e.g. `1...` is invalid Float token).
     */ var isNonPunctuator = !_lexerMjs.isPunctuatorTokenKind(currentToken.kind);
        if (wasLastAddedTokenNonPunctuator) {
            if (isNonPunctuator || currentToken.kind === _tokenKindMjs.TokenKind.SPREAD) strippedBody += ' ';
        }
        var tokenBody = body.slice(currentToken.start, currentToken.end);
        if (tokenKind === _tokenKindMjs.TokenKind.BLOCK_STRING) strippedBody += dedentBlockString(tokenBody);
        else strippedBody += tokenBody;
        wasLastAddedTokenNonPunctuator = isNonPunctuator;
    }
    return strippedBody;
}
function dedentBlockString(blockStr) {
    // skip leading and trailing triple quotations
    var rawStr = blockStr.slice(3, -3);
    var body = _blockStringMjs.dedentBlockStringValue(rawStr);
    if (_blockStringMjs.getBlockStringIndentation(body) > 0) body = '\n' + body;
    var lastChar = body[body.length - 1];
    var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';
    if (hasTrailingQuote || lastChar === '\\') body += '\n';
    return '"""' + body + '"""';
}

},{"../language/source.mjs":"8rn4G","../language/tokenKind.mjs":"itJR8","../language/lexer.mjs":"fx2Ap","../language/blockString.mjs":"2FyBa","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hAGhq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BreakingChangeType", ()=>BreakingChangeType
);
parcelHelpers.export(exports, "DangerousChangeType", ()=>DangerousChangeType
);
/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of breaking changes covered by the other functions down below.
 */ parcelHelpers.export(exports, "findBreakingChanges", ()=>findBreakingChanges
);
/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of potentially dangerous changes covered by the other functions down below.
 */ parcelHelpers.export(exports, "findDangerousChanges", ()=>findDangerousChanges
);
var _objectValuesMjs = require("../polyfills/objectValues.mjs");
var _objectValuesMjsDefault = parcelHelpers.interopDefault(_objectValuesMjs);
var _keyMapMjs = require("../jsutils/keyMap.mjs");
var _keyMapMjsDefault = parcelHelpers.interopDefault(_keyMapMjs);
var _inspectMjs = require("../jsutils/inspect.mjs");
var _inspectMjsDefault = parcelHelpers.interopDefault(_inspectMjs);
var _invariantMjs = require("../jsutils/invariant.mjs");
var _invariantMjsDefault = parcelHelpers.interopDefault(_invariantMjs);
var _naturalCompareMjs = require("../jsutils/naturalCompare.mjs");
var _naturalCompareMjsDefault = parcelHelpers.interopDefault(_naturalCompareMjs);
var _printerMjs = require("../language/printer.mjs");
var _visitorMjs = require("../language/visitor.mjs");
var _scalarsMjs = require("../type/scalars.mjs");
var _definitionMjs = require("../type/definition.mjs");
var _astFromValueMjs = require("./astFromValue.mjs");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var BreakingChangeType = Object.freeze({
    TYPE_REMOVED: 'TYPE_REMOVED',
    TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
    TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
    VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
    REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',
    IMPLEMENTED_INTERFACE_REMOVED: 'IMPLEMENTED_INTERFACE_REMOVED',
    FIELD_REMOVED: 'FIELD_REMOVED',
    FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
    REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',
    ARG_REMOVED: 'ARG_REMOVED',
    ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
    DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
    DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
    REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',
    DIRECTIVE_REPEATABLE_REMOVED: 'DIRECTIVE_REPEATABLE_REMOVED',
    DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'
});
var DangerousChangeType = Object.freeze({
    VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
    TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
    OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',
    OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',
    IMPLEMENTED_INTERFACE_ADDED: 'IMPLEMENTED_INTERFACE_ADDED',
    ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'
});
function findBreakingChanges(oldSchema, newSchema) {
    var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in BreakingChangeType;
    });
    return breakingChanges;
}
function findDangerousChanges(oldSchema, newSchema) {
    var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in DangerousChangeType;
    });
    return dangerousChanges;
}
function findSchemaChanges(oldSchema, newSchema) {
    return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));
}
function findDirectiveChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());
    for(var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++){
        var oldDirective = _directivesDiff$remov2[_i2];
        schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REMOVED,
            description: "".concat(oldDirective.name, " was removed.")
        });
    }
    for(var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++){
        var _ref2 = _directivesDiff$persi2[_i4];
        var _oldDirective = _ref2[0];
        var newDirective = _ref2[1];
        var argsDiff = diff(_oldDirective.args, newDirective.args);
        for(var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++){
            var newArg = _argsDiff$added2[_i6];
            if (_definitionMjs.isRequiredArgument(newArg)) schemaChanges.push({
                type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
                description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
            });
        }
        for(var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++){
            var oldArg = _argsDiff$removed2[_i8];
            schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
                description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
            });
        }
        if (_oldDirective.isRepeatable && !newDirective.isRepeatable) schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
            description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
        });
        for(var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++){
            var location = _oldDirective$locatio2[_i10];
            if (newDirective.locations.indexOf(location) === -1) schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
                description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
            });
        }
    }
    return schemaChanges;
}
function findTypeChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var typesDiff = diff(_objectValuesMjsDefault.default(oldSchema.getTypeMap()), _objectValuesMjsDefault.default(newSchema.getTypeMap()));
    for(var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++){
        var oldType = _typesDiff$removed2[_i12];
        schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED,
            description: _scalarsMjs.isSpecifiedScalarType(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
        });
    }
    for(var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++){
        var _ref4 = _typesDiff$persisted2[_i14];
        var _oldType = _ref4[0];
        var newType = _ref4[1];
        if (_definitionMjs.isEnumType(_oldType) && _definitionMjs.isEnumType(newType)) schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));
        else if (_definitionMjs.isUnionType(_oldType) && _definitionMjs.isUnionType(newType)) schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));
        else if (_definitionMjs.isInputObjectType(_oldType) && _definitionMjs.isInputObjectType(newType)) schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));
        else if (_definitionMjs.isObjectType(_oldType) && _definitionMjs.isObjectType(newType)) schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        else if (_definitionMjs.isInterfaceType(_oldType) && _definitionMjs.isInterfaceType(newType)) schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        else if (_oldType.constructor !== newType.constructor) schemaChanges.push({
            type: BreakingChangeType.TYPE_CHANGED_KIND,
            description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
        });
    }
    return schemaChanges;
}
function findInputObjectTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff(_objectValuesMjsDefault.default(oldType.getFields()), _objectValuesMjsDefault.default(newType.getFields()));
    for(var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++){
        var newField = _fieldsDiff$added2[_i16];
        if (_definitionMjs.isRequiredInputField(newField)) schemaChanges.push({
            type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
            description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
        });
        else schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
            description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
        });
    }
    for(var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++){
        var oldField = _fieldsDiff$removed2[_i18];
        schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
    }
    for(var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++){
        var _ref6 = _fieldsDiff$persisted2[_i20];
        var _oldField = _ref6[0];
        var _newField = _ref6[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);
        if (!isSafe) schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
        });
    }
    return schemaChanges;
}
function findUnionTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
    for(var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++){
        var newPossibleType = _possibleTypesDiff$ad2[_i22];
        schemaChanges.push({
            type: DangerousChangeType.TYPE_ADDED_TO_UNION,
            description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
        });
    }
    for(var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++){
        var oldPossibleType = _possibleTypesDiff$re2[_i24];
        schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
            description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
        });
    }
    return schemaChanges;
}
function findEnumTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var valuesDiff = diff(oldType.getValues(), newType.getValues());
    for(var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++){
        var newValue = _valuesDiff$added2[_i26];
        schemaChanges.push({
            type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
            description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
        });
    }
    for(var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++){
        var oldValue = _valuesDiff$removed2[_i28];
        schemaChanges.push({
            type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
            description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
        });
    }
    return schemaChanges;
}
function findImplementedInterfacesChanges(oldType, newType) {
    var schemaChanges = [];
    var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
    for(var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++){
        var newInterface = _interfacesDiff$added2[_i30];
        schemaChanges.push({
            type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
            description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
        });
    }
    for(var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++){
        var oldInterface = _interfacesDiff$remov2[_i32];
        schemaChanges.push({
            type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
            description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
        });
    }
    return schemaChanges;
}
function findFieldChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff(_objectValuesMjsDefault.default(oldType.getFields()), _objectValuesMjsDefault.default(newType.getFields()));
    for(var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++){
        var oldField = _fieldsDiff$removed4[_i34];
        schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
    }
    for(var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++){
        var _ref8 = _fieldsDiff$persisted4[_i36];
        var _oldField2 = _ref8[0];
        var newField = _ref8[1];
        schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));
        var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);
        if (!isSafe) schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
        });
    }
    return schemaChanges;
}
function findArgChanges(oldType, oldField, newField) {
    var schemaChanges = [];
    var argsDiff = diff(oldField.args, newField.args);
    for(var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++){
        var oldArg = _argsDiff$removed4[_i38];
        schemaChanges.push({
            type: BreakingChangeType.ARG_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
        });
    }
    for(var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++){
        var _ref10 = _argsDiff$persisted2[_i40];
        var _oldArg = _ref10[0];
        var newArg = _ref10[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);
        if (!isSafe) schemaChanges.push({
            type: BreakingChangeType.ARG_CHANGED_KIND,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
        });
        else if (_oldArg.defaultValue !== undefined) {
            if (newArg.defaultValue === undefined) schemaChanges.push({
                type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
            });
            else {
                // Since we looking only for client's observable changes we should
                // compare default values in the same representation as they are
                // represented inside introspection.
                var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
                var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
                if (oldValueStr !== newValueStr) schemaChanges.push({
                    type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                    description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
                });
            }
        }
    }
    for(var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++){
        var _newArg = _argsDiff$added4[_i42];
        if (_definitionMjs.isRequiredArgument(_newArg)) schemaChanges.push({
            type: BreakingChangeType.REQUIRED_ARG_ADDED,
            description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
        });
        else schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_ARG_ADDED,
            description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
        });
    }
    return schemaChanges;
}
function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
    if (_definitionMjs.isListType(oldType)) return _definitionMjs.isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || _definitionMjs.isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
    if (_definitionMjs.isNonNullType(oldType)) // if they're both non-null, make sure the underlying types are compatible
    return _definitionMjs.isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
    return _definitionMjs.isNamedType(newType) && oldType.name === newType.name || _definitionMjs.isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
}
function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
    if (_definitionMjs.isListType(oldType)) // if they're both lists, make sure the underlying types are compatible
    return _definitionMjs.isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
    if (_definitionMjs.isNonNullType(oldType)) return(// compatible
    _definitionMjs.isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || !_definitionMjs.isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType));
     // if they're both named types, see if their names are equivalent
    return _definitionMjs.isNamedType(newType) && oldType.name === newType.name;
}
function typeKindName(type) {
    if (_definitionMjs.isScalarType(type)) return 'a Scalar type';
    if (_definitionMjs.isObjectType(type)) return 'an Object type';
    if (_definitionMjs.isInterfaceType(type)) return 'an Interface type';
    if (_definitionMjs.isUnionType(type)) return 'a Union type';
    if (_definitionMjs.isEnumType(type)) return 'an Enum type';
     // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (_definitionMjs.isInputObjectType(type)) return 'an Input type';
     // istanbul ignore next (Not reachable. All possible named types have been considered)
    _invariantMjsDefault.default(0, 'Unexpected type: ' + _inspectMjsDefault.default(type));
}
function stringifyValue(value, type) {
    var ast = _astFromValueMjs.astFromValue(value, type);
    ast != null || _invariantMjsDefault.default(0);
    var sortedAST = _visitorMjs.visit(ast, {
        ObjectValue: function ObjectValue(objectNode) {
            // Make a copy since sort mutates array
            var fields = [].concat(objectNode.fields);
            fields.sort(function(fieldA, fieldB) {
                return _naturalCompareMjsDefault.default(fieldA.name.value, fieldB.name.value);
            });
            return _objectSpread(_objectSpread({
            }, objectNode), {
            }, {
                fields: fields
            });
        }
    });
    return _printerMjs.print(sortedAST);
}
function diff(oldArray, newArray) {
    var added = [];
    var removed = [];
    var persisted = [];
    var oldMap = _keyMapMjsDefault.default(oldArray, function(_ref11) {
        var name = _ref11.name;
        return name;
    });
    var newMap = _keyMapMjsDefault.default(newArray, function(_ref12) {
        var name = _ref12.name;
        return name;
    });
    for(var _i44 = 0; _i44 < oldArray.length; _i44++){
        var oldItem = oldArray[_i44];
        var newItem = newMap[oldItem.name];
        if (newItem === undefined) removed.push(oldItem);
        else persisted.push([
            oldItem,
            newItem
        ]);
    }
    for(var _i46 = 0; _i46 < newArray.length; _i46++){
        var _newItem = newArray[_i46];
        if (oldMap[_newItem.name] === undefined) added.push(_newItem);
    }
    return {
        added: added,
        persisted: persisted,
        removed: removed
    };
}

},{"../polyfills/objectValues.mjs":"1MvGb","../jsutils/keyMap.mjs":"53ed0","../jsutils/inspect.mjs":"doI9y","../jsutils/invariant.mjs":"gb46A","../jsutils/naturalCompare.mjs":"bpKPt","../language/printer.mjs":"bEnFw","../language/visitor.mjs":"bb6mn","../type/scalars.mjs":"hLZ76","../type/definition.mjs":"6PVmH","./astFromValue.mjs":"bQ66F","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2CMeg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A validation rule which reports deprecated usages.
 *
 * Returns a list of GraphQLError instances describing each deprecated use.
 *
 * @deprecated Please use `validate` with `NoDeprecatedCustomRule` instead:
 *
 * ```
 * import { validate, NoDeprecatedCustomRule } from 'graphql'
 *
 * const errors = validate(schema, document, [NoDeprecatedCustomRule])
 * ```
 */ parcelHelpers.export(exports, "findDeprecatedUsages", ()=>findDeprecatedUsages
);
var _validateMjs = require("../validation/validate.mjs");
var _noDeprecatedCustomRuleMjs = require("../validation/rules/custom/NoDeprecatedCustomRule.mjs");
function findDeprecatedUsages(schema, ast) {
    return _validateMjs.validate(schema, ast, [_noDeprecatedCustomRuleMjs.NoDeprecatedCustomRule]);
}

},{"../validation/validate.mjs":"cJoEq","../validation/rules/custom/NoDeprecatedCustomRule.mjs":"iGEum","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"g7j7j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shouldInclude", ()=>shouldInclude
);
parcelHelpers.export(exports, "getDirectiveNames", ()=>getDirectiveNames
);
parcelHelpers.export(exports, "hasDirectives", ()=>hasDirectives
);
parcelHelpers.export(exports, "hasClientExports", ()=>hasClientExports
);
parcelHelpers.export(exports, "getInclusionDirectives", ()=>getInclusionDirectives
);
var _graphql = require("graphql");
var _tsInvariant = require("ts-invariant");
function shouldInclude(_a, variables) {
    var directives = _a.directives;
    if (!directives || !directives.length) return true;
    return getInclusionDirectives(directives).every(function(_a1) {
        var directive = _a1.directive, ifArgument = _a1.ifArgument;
        var evaledValue = false;
        if (ifArgument.value.kind === 'Variable') {
            evaledValue = variables && variables[ifArgument.value.name.value];
            __DEV__ ? _tsInvariant.invariant(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.") : _tsInvariant.invariant(evaledValue !== void 0, 43);
        } else evaledValue = ifArgument.value.value;
        return directive.name.value === 'skip' ? !evaledValue : evaledValue;
    });
}
function getDirectiveNames(root) {
    var names = [];
    _graphql.visit(root, {
        Directive: function(node) {
            names.push(node.name.value);
        }
    });
    return names;
}
function hasDirectives(names, root) {
    return getDirectiveNames(root).some(function(name) {
        return names.indexOf(name) > -1;
    });
}
function hasClientExports(document) {
    return document && hasDirectives([
        'client'
    ], document) && hasDirectives([
        'export'
    ], document);
}
function isInclusionDirective(_a) {
    var value = _a.name.value;
    return value === 'skip' || value === 'include';
}
function getInclusionDirectives(directives) {
    var result = [];
    if (directives && directives.length) directives.forEach(function(directive) {
        if (!isInclusionDirective(directive)) return;
        var directiveArguments = directive.arguments;
        var directiveName = directive.name.value;
        __DEV__ ? _tsInvariant.invariant(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.") : _tsInvariant.invariant(directiveArguments && directiveArguments.length === 1, 44);
        var ifArgument = directiveArguments[0];
        __DEV__ ? _tsInvariant.invariant(ifArgument.name && ifArgument.name.value === 'if', "Invalid argument for the @" + directiveName + " directive.") : _tsInvariant.invariant(ifArgument.name && ifArgument.name.value === 'if', 45);
        var ifValue = ifArgument.value;
        __DEV__ ? _tsInvariant.invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.") : _tsInvariant.invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 46);
        result.push({
            directive: directive,
            ifArgument: ifArgument
        });
    });
    return result;
}

},{"graphql":"6yWt3","ts-invariant":"eFYq1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8U80W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFragmentQueryDocument", ()=>getFragmentQueryDocument
);
parcelHelpers.export(exports, "createFragmentMap", ()=>createFragmentMap
);
parcelHelpers.export(exports, "getFragmentFromSelection", ()=>getFragmentFromSelection
);
var _tslib = require("tslib");
var _tsInvariant = require("ts-invariant");
function getFragmentQueryDocument(document, fragmentName) {
    var actualFragmentName = fragmentName;
    var fragments = [];
    document.definitions.forEach(function(definition) {
        if (definition.kind === 'OperationDefinition') throw __DEV__ ? new _tsInvariant.InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : '') + ". " + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new _tsInvariant.InvariantError(47);
        if (definition.kind === 'FragmentDefinition') fragments.push(definition);
    });
    if (typeof actualFragmentName === 'undefined') {
        __DEV__ ? _tsInvariant.invariant(fragments.length === 1, "Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.") : _tsInvariant.invariant(fragments.length === 1, 48);
        actualFragmentName = fragments[0].name.value;
    }
    var query = _tslib.__assign(_tslib.__assign({
    }, document), {
        definitions: _tslib.__spreadArray([
            {
                kind: 'OperationDefinition',
                operation: 'query',
                selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                        {
                            kind: 'FragmentSpread',
                            name: {
                                kind: 'Name',
                                value: actualFragmentName
                            }
                        }, 
                    ]
                }
            }
        ], document.definitions)
    });
    return query;
}
function createFragmentMap(fragments) {
    if (fragments === void 0) fragments = [];
    var symTable = {
    };
    fragments.forEach(function(fragment) {
        symTable[fragment.name.value] = fragment;
    });
    return symTable;
}
function getFragmentFromSelection(selection, fragmentMap) {
    switch(selection.kind){
        case 'InlineFragment':
            return selection;
        case 'FragmentSpread':
            var fragment = fragmentMap && fragmentMap[selection.name.value];
            __DEV__ ? _tsInvariant.invariant(fragment, "No fragment named " + selection.name.value + ".") : _tsInvariant.invariant(fragment, 49);
            return fragment;
        default:
            return null;
    }
}

},{"tslib":"bjkXk","ts-invariant":"eFYq1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1nIQK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkDocument", ()=>checkDocument
);
parcelHelpers.export(exports, "getOperationDefinition", ()=>getOperationDefinition
);
parcelHelpers.export(exports, "getOperationName", ()=>getOperationName
);
parcelHelpers.export(exports, "getFragmentDefinitions", ()=>getFragmentDefinitions
);
parcelHelpers.export(exports, "getQueryDefinition", ()=>getQueryDefinition
);
parcelHelpers.export(exports, "getFragmentDefinition", ()=>getFragmentDefinition
);
parcelHelpers.export(exports, "getMainDefinition", ()=>getMainDefinition
);
parcelHelpers.export(exports, "getDefaultValues", ()=>getDefaultValues
);
var _tsInvariant = require("ts-invariant");
var _storeUtilsJs = require("./storeUtils.js");
function checkDocument(doc) {
    __DEV__ ? _tsInvariant.invariant(doc && doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql") : _tsInvariant.invariant(doc && doc.kind === 'Document', 50);
    var operations = doc.definitions.filter(function(d) {
        return d.kind !== 'FragmentDefinition';
    }).map(function(definition) {
        if (definition.kind !== 'OperationDefinition') throw __DEV__ ? new _tsInvariant.InvariantError("Schema type definitions not allowed in queries. Found: \"" + definition.kind + "\"") : new _tsInvariant.InvariantError(51);
        return definition;
    });
    __DEV__ ? _tsInvariant.invariant(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations") : _tsInvariant.invariant(operations.length <= 1, 52);
    return doc;
}
function getOperationDefinition(doc) {
    checkDocument(doc);
    return doc.definitions.filter(function(definition) {
        return definition.kind === 'OperationDefinition';
    })[0];
}
function getOperationName(doc) {
    return doc.definitions.filter(function(definition) {
        return definition.kind === 'OperationDefinition' && definition.name;
    }).map(function(x) {
        return x.name.value;
    })[0] || null;
}
function getFragmentDefinitions(doc) {
    return doc.definitions.filter(function(definition) {
        return definition.kind === 'FragmentDefinition';
    });
}
function getQueryDefinition(doc) {
    var queryDef = getOperationDefinition(doc);
    __DEV__ ? _tsInvariant.invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : _tsInvariant.invariant(queryDef && queryDef.operation === 'query', 53);
    return queryDef;
}
function getFragmentDefinition(doc) {
    __DEV__ ? _tsInvariant.invariant(doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql") : _tsInvariant.invariant(doc.kind === 'Document', 54);
    __DEV__ ? _tsInvariant.invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : _tsInvariant.invariant(doc.definitions.length <= 1, 55);
    var fragmentDef = doc.definitions[0];
    __DEV__ ? _tsInvariant.invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : _tsInvariant.invariant(fragmentDef.kind === 'FragmentDefinition', 56);
    return fragmentDef;
}
function getMainDefinition(queryDoc) {
    checkDocument(queryDoc);
    var fragmentDefinition;
    for(var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++){
        var definition = _a[_i];
        if (definition.kind === 'OperationDefinition') {
            var operation = definition.operation;
            if (operation === 'query' || operation === 'mutation' || operation === 'subscription') return definition;
        }
        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) fragmentDefinition = definition;
    }
    if (fragmentDefinition) return fragmentDefinition;
    throw __DEV__ ? new _tsInvariant.InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new _tsInvariant.InvariantError(57);
}
function getDefaultValues(definition) {
    var defaultValues = Object.create(null);
    var defs = definition && definition.variableDefinitions;
    if (defs && defs.length) defs.forEach(function(def) {
        if (def.defaultValue) _storeUtilsJs.valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);
    });
    return defaultValues;
}

},{"ts-invariant":"eFYq1","./storeUtils.js":"2CHuR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2CHuR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeReference", ()=>makeReference
);
parcelHelpers.export(exports, "isReference", ()=>isReference
);
parcelHelpers.export(exports, "isDocumentNode", ()=>isDocumentNode
);
parcelHelpers.export(exports, "valueToObjectRepresentation", ()=>valueToObjectRepresentation
);
parcelHelpers.export(exports, "storeKeyNameFromField", ()=>storeKeyNameFromField
);
parcelHelpers.export(exports, "getStoreKeyName", ()=>getStoreKeyName
);
parcelHelpers.export(exports, "argumentsObjectFromField", ()=>argumentsObjectFromField
);
parcelHelpers.export(exports, "resultKeyNameFromField", ()=>resultKeyNameFromField
);
parcelHelpers.export(exports, "getTypenameFromResult", ()=>getTypenameFromResult
);
parcelHelpers.export(exports, "isField", ()=>isField
);
parcelHelpers.export(exports, "isInlineFragment", ()=>isInlineFragment
);
var _tsInvariant = require("ts-invariant");
var _objectsJs = require("../common/objects.js");
var _fragmentsJs = require("./fragments.js");
function makeReference(id) {
    return {
        __ref: String(id)
    };
}
function isReference(obj) {
    return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');
}
function isDocumentNode(value) {
    return _objectsJs.isNonNullObject(value) && value.kind === "Document" && Array.isArray(value.definitions);
}
function isStringValue(value) {
    return value.kind === 'StringValue';
}
function isBooleanValue(value) {
    return value.kind === 'BooleanValue';
}
function isIntValue(value) {
    return value.kind === 'IntValue';
}
function isFloatValue(value) {
    return value.kind === 'FloatValue';
}
function isVariable(value) {
    return value.kind === 'Variable';
}
function isObjectValue(value) {
    return value.kind === 'ObjectValue';
}
function isListValue(value) {
    return value.kind === 'ListValue';
}
function isEnumValue(value) {
    return value.kind === 'EnumValue';
}
function isNullValue(value) {
    return value.kind === 'NullValue';
}
function valueToObjectRepresentation(argObj, name, value, variables) {
    if (isIntValue(value) || isFloatValue(value)) argObj[name.value] = Number(value.value);
    else if (isBooleanValue(value) || isStringValue(value)) argObj[name.value] = value.value;
    else if (isObjectValue(value)) {
        var nestedArgObj_1 = {
        };
        value.fields.map(function(obj) {
            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
        });
        argObj[name.value] = nestedArgObj_1;
    } else if (isVariable(value)) {
        var variableValue = (variables || {
        })[value.name.value];
        argObj[name.value] = variableValue;
    } else if (isListValue(value)) argObj[name.value] = value.values.map(function(listValue) {
        var nestedArgArrayObj = {
        };
        valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
        return nestedArgArrayObj[name.value];
    });
    else if (isEnumValue(value)) argObj[name.value] = value.value;
    else if (isNullValue(value)) argObj[name.value] = null;
    else throw __DEV__ ? new _tsInvariant.InvariantError("The inline argument \"" + name.value + "\" of kind \"" + value.kind + "\"" + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.') : new _tsInvariant.InvariantError(58);
}
function storeKeyNameFromField(field, variables) {
    var directivesObj = null;
    if (field.directives) {
        directivesObj = {
        };
        field.directives.forEach(function(directive) {
            directivesObj[directive.name.value] = {
            };
            if (directive.arguments) directive.arguments.forEach(function(_a) {
                var name = _a.name, value = _a.value;
                return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
            });
        });
    }
    var argObj = null;
    if (field.arguments && field.arguments.length) {
        argObj = {
        };
        field.arguments.forEach(function(_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj, name, value, variables);
        });
    }
    return getStoreKeyName(field.name.value, argObj, directivesObj);
}
var KNOWN_DIRECTIVES = [
    'connection',
    'include',
    'skip',
    'client',
    'rest',
    'export', 
];
var getStoreKeyName = Object.assign(function(fieldName, args, directives) {
    if (args && directives && directives['connection'] && directives['connection']['key']) {
        if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {
            var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];
            filterKeys.sort();
            var filteredArgs_1 = {
            };
            filterKeys.forEach(function(key) {
                filteredArgs_1[key] = args[key];
            });
            return directives['connection']['key'] + "(" + stringify(filteredArgs_1) + ")";
        } else return directives['connection']['key'];
    }
    var completeFieldName = fieldName;
    if (args) {
        var stringifiedArgs = stringify(args);
        completeFieldName += "(" + stringifiedArgs + ")";
    }
    if (directives) Object.keys(directives).forEach(function(key) {
        if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;
        if (directives[key] && Object.keys(directives[key]).length) completeFieldName += "@" + key + "(" + stringify(directives[key]) + ")";
        else completeFieldName += "@" + key;
    });
    return completeFieldName;
}, {
    setStringify: function(s) {
        var previous = stringify;
        stringify = s;
        return previous;
    }
});
var stringify = function defaultStringify(value) {
    return JSON.stringify(value, stringifyReplacer);
};
function stringifyReplacer(_key, value) {
    if (_objectsJs.isNonNullObject(value) && !Array.isArray(value)) value = Object.keys(value).sort().reduce(function(copy, key) {
        copy[key] = value[key];
        return copy;
    }, {
    });
    return value;
}
function argumentsObjectFromField(field, variables) {
    if (field.arguments && field.arguments.length) {
        var argObj_1 = {
        };
        field.arguments.forEach(function(_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj_1, name, value, variables);
        });
        return argObj_1;
    }
    return null;
}
function resultKeyNameFromField(field) {
    return field.alias ? field.alias.value : field.name.value;
}
function getTypenameFromResult(result, selectionSet, fragmentMap) {
    if (typeof result.__typename === 'string') return result.__typename;
    for(var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++){
        var selection = _a[_i];
        if (isField(selection)) {
            if (selection.name.value === '__typename') return result[resultKeyNameFromField(selection)];
        } else {
            var typename = getTypenameFromResult(result, _fragmentsJs.getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);
            if (typeof typename === 'string') return typename;
        }
    }
}
function isField(selection) {
    return selection.kind === 'Field';
}
function isInlineFragment(selection) {
    return selection.kind === 'InlineFragment';
}

},{"ts-invariant":"eFYq1","../common/objects.js":"aYdMx","./fragments.js":"8U80W","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aYdMx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNonNullObject", ()=>isNonNullObject
);
function isNonNullObject(obj) {
    return obj !== null && typeof obj === 'object';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9gmed":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "removeDirectivesFromDocument", ()=>removeDirectivesFromDocument
);
parcelHelpers.export(exports, "addTypenameToDocument", ()=>addTypenameToDocument
);
parcelHelpers.export(exports, "removeConnectionDirectiveFromDocument", ()=>removeConnectionDirectiveFromDocument
);
parcelHelpers.export(exports, "removeArgumentsFromDocument", ()=>removeArgumentsFromDocument
);
parcelHelpers.export(exports, "removeFragmentSpreadFromDocument", ()=>removeFragmentSpreadFromDocument
);
parcelHelpers.export(exports, "buildQueryFromSelectionSet", ()=>buildQueryFromSelectionSet
);
parcelHelpers.export(exports, "removeClientSetsFromDocument", ()=>removeClientSetsFromDocument
);
var _tslib = require("tslib");
var _graphql = require("graphql");
var _tsInvariant = require("ts-invariant");
var _getFromASTJs = require("./getFromAST.js");
var _filterInPlaceJs = require("../common/filterInPlace.js");
var _storeUtilsJs = require("./storeUtils.js");
var _fragmentsJs = require("./fragments.js");
var TYPENAME_FIELD = {
    kind: 'Field',
    name: {
        kind: 'Name',
        value: '__typename'
    }
};
function isEmpty(op, fragments) {
    return op.selectionSet.selections.every(function(selection) {
        return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);
    });
}
function nullIfDocIsEmpty(doc) {
    return isEmpty(_getFromASTJs.getOperationDefinition(doc) || _getFromASTJs.getFragmentDefinition(doc), _fragmentsJs.createFragmentMap(_getFromASTJs.getFragmentDefinitions(doc))) ? null : doc;
}
function getDirectiveMatcher(directives) {
    return function directiveMatcher(directive) {
        return directives.some(function(dir) {
            return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);
        });
    };
}
function removeDirectivesFromDocument(directives, doc) {
    var variablesInUse = Object.create(null);
    var variablesToRemove = [];
    var fragmentSpreadsInUse = Object.create(null);
    var fragmentSpreadsToRemove = [];
    var modifiedDoc = nullIfDocIsEmpty(_graphql.visit(doc, {
        Variable: {
            enter: function(node, _key, parent) {
                if (parent.kind !== 'VariableDefinition') variablesInUse[node.name.value] = true;
            }
        },
        Field: {
            enter: function(node) {
                if (directives && node.directives) {
                    var shouldRemoveField = directives.some(function(directive) {
                        return directive.remove;
                    });
                    if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {
                        if (node.arguments) node.arguments.forEach(function(arg) {
                            if (arg.value.kind === 'Variable') variablesToRemove.push({
                                name: arg.value.name.value
                            });
                        });
                        if (node.selectionSet) getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function(frag) {
                            fragmentSpreadsToRemove.push({
                                name: frag.name.value
                            });
                        });
                        return null;
                    }
                }
            }
        },
        FragmentSpread: {
            enter: function(node) {
                fragmentSpreadsInUse[node.name.value] = true;
            }
        },
        Directive: {
            enter: function(node) {
                if (getDirectiveMatcher(directives)(node)) return null;
            }
        }
    }));
    if (modifiedDoc && _filterInPlaceJs.filterInPlace(variablesToRemove, function(v) {
        return !!v.name && !variablesInUse[v.name];
    }).length) modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
    if (modifiedDoc && _filterInPlaceJs.filterInPlace(fragmentSpreadsToRemove, function(fs) {
        return !!fs.name && !fragmentSpreadsInUse[fs.name];
    }).length) modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
    return modifiedDoc;
}
var addTypenameToDocument = Object.assign(function(doc) {
    return _graphql.visit(_getFromASTJs.checkDocument(doc), {
        SelectionSet: {
            enter: function(node, _key, parent) {
                if (parent && parent.kind === 'OperationDefinition') return;
                var selections = node.selections;
                if (!selections) return;
                var skip = selections.some(function(selection) {
                    return _storeUtilsJs.isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);
                });
                if (skip) return;
                var field = parent;
                if (_storeUtilsJs.isField(field) && field.directives && field.directives.some(function(d) {
                    return d.name.value === 'export';
                })) return;
                return _tslib.__assign(_tslib.__assign({
                }, node), {
                    selections: _tslib.__spreadArray(_tslib.__spreadArray([], selections), [
                        TYPENAME_FIELD
                    ])
                });
            }
        }
    });
}, {
    added: function(field) {
        return field === TYPENAME_FIELD;
    }
});
var connectionRemoveConfig = {
    test: function(directive) {
        var willRemove = directive.name.value === 'connection';
        if (willRemove) {
            if (!directive.arguments || !directive.arguments.some(function(arg) {
                return arg.name.value === 'key';
            })) __DEV__ && _tsInvariant.invariant.warn("Removing an @connection directive even though it does not have a key. You may want to use the key parameter to specify a store key.");
        }
        return willRemove;
    }
};
function removeConnectionDirectiveFromDocument(doc) {
    return removeDirectivesFromDocument([
        connectionRemoveConfig
    ], _getFromASTJs.checkDocument(doc));
}
function hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {
    if (nestedCheck === void 0) nestedCheck = true;
    return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function(selection) {
        return hasDirectivesInSelection(directives, selection, nestedCheck);
    });
}
function hasDirectivesInSelection(directives, selection, nestedCheck) {
    if (nestedCheck === void 0) nestedCheck = true;
    if (!_storeUtilsJs.isField(selection)) return true;
    if (!selection.directives) return false;
    return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);
}
function getArgumentMatcher(config) {
    return function argumentMatcher(argument) {
        return config.some(function(aConfig) {
            return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
        });
    };
}
function removeArgumentsFromDocument(config, doc) {
    var argMatcher = getArgumentMatcher(config);
    return nullIfDocIsEmpty(_graphql.visit(doc, {
        OperationDefinition: {
            enter: function(node) {
                return _tslib.__assign(_tslib.__assign({
                }, node), {
                    variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function(varDef) {
                        return !config.some(function(arg) {
                            return arg.name === varDef.variable.name.value;
                        });
                    }) : []
                });
            }
        },
        Field: {
            enter: function(node) {
                var shouldRemoveField = config.some(function(argConfig) {
                    return argConfig.remove;
                });
                if (shouldRemoveField) {
                    var argMatchCount_1 = 0;
                    if (node.arguments) node.arguments.forEach(function(arg) {
                        if (argMatcher(arg)) argMatchCount_1 += 1;
                    });
                    if (argMatchCount_1 === 1) return null;
                }
            }
        },
        Argument: {
            enter: function(node) {
                if (argMatcher(node)) return null;
            }
        }
    }));
}
function removeFragmentSpreadFromDocument(config, doc) {
    function enter(node) {
        if (config.some(function(def) {
            return def.name === node.name.value;
        })) return null;
    }
    return nullIfDocIsEmpty(_graphql.visit(doc, {
        FragmentSpread: {
            enter: enter
        },
        FragmentDefinition: {
            enter: enter
        }
    }));
}
function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
    var allFragments = [];
    selectionSet.selections.forEach(function(selection) {
        if ((_storeUtilsJs.isField(selection) || _storeUtilsJs.isInlineFragment(selection)) && selection.selectionSet) getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function(frag) {
            return allFragments.push(frag);
        });
        else if (selection.kind === 'FragmentSpread') allFragments.push(selection);
    });
    return allFragments;
}
function buildQueryFromSelectionSet(document) {
    var definition = _getFromASTJs.getMainDefinition(document);
    var definitionOperation = definition.operation;
    if (definitionOperation === 'query') return document;
    var modifiedDoc = _graphql.visit(document, {
        OperationDefinition: {
            enter: function(node) {
                return _tslib.__assign(_tslib.__assign({
                }, node), {
                    operation: 'query'
                });
            }
        }
    });
    return modifiedDoc;
}
function removeClientSetsFromDocument(document) {
    _getFromASTJs.checkDocument(document);
    var modifiedDoc = removeDirectivesFromDocument([
        {
            test: function(directive) {
                return directive.name.value === 'client';
            },
            remove: true
        }, 
    ], document);
    if (modifiedDoc) modifiedDoc = _graphql.visit(modifiedDoc, {
        FragmentDefinition: {
            enter: function(node) {
                if (node.selectionSet) {
                    var isTypenameOnly = node.selectionSet.selections.every(function(selection) {
                        return _storeUtilsJs.isField(selection) && selection.name.value === '__typename';
                    });
                    if (isTypenameOnly) return null;
                }
            }
        }
    });
    return modifiedDoc;
}

},{"tslib":"bjkXk","graphql":"6yWt3","ts-invariant":"eFYq1","./getFromAST.js":"1nIQK","../common/filterInPlace.js":"6AVvk","./storeUtils.js":"2CHuR","./fragments.js":"8U80W","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6AVvk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "filterInPlace", ()=>filterInPlace
);
function filterInPlace(array, test, context) {
    var target = 0;
    array.forEach(function(elem, i) {
        if (test.call(this, elem, i, array)) array[target++] = elem;
    }, context);
    array.length = target;
    return array;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"auVEQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatPagination", ()=>concatPagination
);
parcelHelpers.export(exports, "offsetLimitPagination", ()=>offsetLimitPagination
);
parcelHelpers.export(exports, "relayStylePagination", ()=>relayStylePagination
);
var _tslib = require("tslib");
var _mergeDeepJs = require("../common/mergeDeep.js");
function concatPagination(keyArgs) {
    if (keyArgs === void 0) keyArgs = false;
    return {
        keyArgs: keyArgs,
        merge: function(existing, incoming) {
            return existing ? _tslib.__spreadArray(_tslib.__spreadArray([], existing), incoming) : incoming;
        }
    };
}
function offsetLimitPagination(keyArgs) {
    if (keyArgs === void 0) keyArgs = false;
    return {
        keyArgs: keyArgs,
        merge: function(existing, incoming, _a) {
            var args = _a.args;
            var merged = existing ? existing.slice(0) : [];
            if (args) {
                var _b = args.offset, offset = _b === void 0 ? 0 : _b;
                for(var i = 0; i < incoming.length; ++i)merged[offset + i] = incoming[i];
            } else merged.push.apply(merged, incoming);
            return merged;
        }
    };
}
function relayStylePagination(keyArgs) {
    if (keyArgs === void 0) keyArgs = false;
    return {
        keyArgs: keyArgs,
        read: function(existing, _a) {
            var canRead = _a.canRead, readField = _a.readField;
            if (!existing) return;
            var edges = [];
            var firstEdgeCursor = "";
            var lastEdgeCursor = "";
            existing.edges.forEach(function(edge) {
                if (canRead(readField("node", edge))) {
                    edges.push(edge);
                    if (edge.cursor) {
                        firstEdgeCursor = firstEdgeCursor || edge.cursor || "";
                        lastEdgeCursor = edge.cursor || lastEdgeCursor;
                    }
                }
            });
            var _b = existing.pageInfo || {
            }, startCursor = _b.startCursor, endCursor = _b.endCursor;
            return _tslib.__assign(_tslib.__assign({
            }, getExtras(existing)), {
                edges: edges,
                pageInfo: _tslib.__assign(_tslib.__assign({
                }, existing.pageInfo), {
                    startCursor: startCursor || firstEdgeCursor,
                    endCursor: endCursor || lastEdgeCursor
                })
            });
        },
        merge: function(existing, incoming, _a) {
            if (existing === void 0) existing = makeEmptyData();
            var args = _a.args, isReference = _a.isReference, readField = _a.readField;
            var incomingEdges = incoming.edges ? incoming.edges.map(function(edge) {
                if (isReference(edge = _tslib.__assign({
                }, edge))) edge.cursor = readField("cursor", edge);
                return edge;
            }) : [];
            if (incoming.pageInfo) {
                var pageInfo_1 = incoming.pageInfo;
                var startCursor = pageInfo_1.startCursor, endCursor = pageInfo_1.endCursor;
                var firstEdge = incomingEdges[0];
                var lastEdge = incomingEdges[incomingEdges.length - 1];
                if (firstEdge && startCursor) firstEdge.cursor = startCursor;
                if (lastEdge && endCursor) lastEdge.cursor = endCursor;
                var firstCursor = firstEdge && firstEdge.cursor;
                if (firstCursor && !startCursor) incoming = _mergeDeepJs.mergeDeep(incoming, {
                    pageInfo: {
                        startCursor: firstCursor
                    }
                });
                var lastCursor = lastEdge && lastEdge.cursor;
                if (lastCursor && !endCursor) incoming = _mergeDeepJs.mergeDeep(incoming, {
                    pageInfo: {
                        endCursor: lastCursor
                    }
                });
            }
            var prefix = existing.edges;
            var suffix = [];
            if (args && args.after) {
                var index = prefix.findIndex(function(edge) {
                    return edge.cursor === args.after;
                });
                if (index >= 0) prefix = prefix.slice(0, index + 1);
            } else if (args && args.before) {
                var index = prefix.findIndex(function(edge) {
                    return edge.cursor === args.before;
                });
                suffix = index < 0 ? prefix : prefix.slice(index);
                prefix = [];
            } else if (incoming.edges) prefix = [];
            var edges = _tslib.__spreadArray(_tslib.__spreadArray(_tslib.__spreadArray([], prefix), incomingEdges), suffix);
            var pageInfo = _tslib.__assign(_tslib.__assign({
            }, incoming.pageInfo), existing.pageInfo);
            if (incoming.pageInfo) {
                var _b = incoming.pageInfo, hasPreviousPage = _b.hasPreviousPage, hasNextPage = _b.hasNextPage, startCursor = _b.startCursor, endCursor = _b.endCursor, extras = _tslib.__rest(_b, [
                    "hasPreviousPage",
                    "hasNextPage",
                    "startCursor",
                    "endCursor"
                ]);
                Object.assign(pageInfo, extras);
                if (!prefix.length) {
                    if ((void 0) !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;
                    if ((void 0) !== startCursor) pageInfo.startCursor = startCursor;
                }
                if (!suffix.length) {
                    if ((void 0) !== hasNextPage) pageInfo.hasNextPage = hasNextPage;
                    if ((void 0) !== endCursor) pageInfo.endCursor = endCursor;
                }
            }
            return _tslib.__assign(_tslib.__assign(_tslib.__assign({
            }, getExtras(existing)), getExtras(incoming)), {
                edges: edges,
                pageInfo: pageInfo
            });
        }
    };
}
var getExtras = function(obj) {
    return _tslib.__rest(obj, notExtras);
};
var notExtras = [
    "edges",
    "pageInfo"
];
function makeEmptyData() {
    return {
        edges: [],
        pageInfo: {
            hasPreviousPage: false,
            hasNextPage: true,
            startCursor: "",
            endCursor: ""
        }
    };
}

},{"tslib":"bjkXk","../common/mergeDeep.js":"hAOlx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hAOlx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeDeep", ()=>mergeDeep
);
parcelHelpers.export(exports, "mergeDeepArray", ()=>mergeDeepArray
);
parcelHelpers.export(exports, "DeepMerger", ()=>DeepMerger
);
var _tslib = require("tslib");
var _objectsJs = require("./objects.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;
function mergeDeep() {
    var sources = [];
    for(var _i = 0; _i < arguments.length; _i++)sources[_i] = arguments[_i];
    return mergeDeepArray(sources);
}
function mergeDeepArray(sources) {
    var target = sources[0] || {
    };
    var count = sources.length;
    if (count > 1) {
        var merger = new DeepMerger();
        for(var i = 1; i < count; ++i)target = merger.merge(target, sources[i]);
    }
    return target;
}
var defaultReconciler = function(target, source, property) {
    return this.merge(target[property], source[property]);
};
var DeepMerger = function() {
    function DeepMerger1(reconciler) {
        if (reconciler === void 0) reconciler = defaultReconciler;
        this.reconciler = reconciler;
        this.isObject = _objectsJs.isNonNullObject;
        this.pastCopies = new Set();
    }
    DeepMerger1.prototype.merge = function(target, source) {
        var _this = this;
        var context = [];
        for(var _i = 2; _i < arguments.length; _i++)context[_i - 2] = arguments[_i];
        if (_objectsJs.isNonNullObject(source) && _objectsJs.isNonNullObject(target)) {
            Object.keys(source).forEach(function(sourceKey) {
                if (hasOwnProperty.call(target, sourceKey)) {
                    var targetValue = target[sourceKey];
                    if (source[sourceKey] !== targetValue) {
                        var result = _this.reconciler.apply(_this, _tslib.__spreadArray([
                            target,
                            source,
                            sourceKey
                        ], context));
                        if (result !== targetValue) {
                            target = _this.shallowCopyForMerge(target);
                            target[sourceKey] = result;
                        }
                    }
                } else {
                    target = _this.shallowCopyForMerge(target);
                    target[sourceKey] = source[sourceKey];
                }
            });
            return target;
        }
        return source;
    };
    DeepMerger1.prototype.shallowCopyForMerge = function(value) {
        if (_objectsJs.isNonNullObject(value) && !this.pastCopies.has(value)) {
            if (Array.isArray(value)) value = value.slice(0);
            else value = _tslib.__assign({
                __proto__: Object.getPrototypeOf(value)
            }, value);
            this.pastCopies.add(value);
        }
        return value;
    };
    return DeepMerger1;
}();

},{"tslib":"bjkXk","./objects.js":"aYdMx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9aLrX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observable", ()=>_zenObservableTs.Observable
);
var _zenObservableTs = require("zen-observable-ts");
var _symbolObservable = require("symbol-observable");
var prototype = _zenObservableTs.Observable.prototype;
var fakeObsSymbol = '@@observable';
if (!prototype[fakeObsSymbol]) prototype[fakeObsSymbol] = function() {
    return this;
};

},{"zen-observable-ts":"8E4Xv","symbol-observable":"a5uaQ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8E4Xv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observable", ()=>Observable
);
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function() {
            if (i >= o.length) return {
                done: true
            };
            return {
                done: false,
                value: o[i++]
            };
        };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
// === Symbol Support ===
var hasSymbols = function() {
    return typeof Symbol === 'function';
};
var hasSymbol = function(name) {
    return hasSymbols() && Boolean(Symbol[name]);
};
var getSymbol = function(name) {
    return hasSymbol(name) ? Symbol[name] : '@@' + name;
};
if (hasSymbols() && !hasSymbol('observable')) Symbol.observable = Symbol('observable');
var SymbolIterator = getSymbol('iterator');
var SymbolObservable = getSymbol('observable');
var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===
function getMethod(obj, key) {
    var value = obj[key];
    if (value == null) return undefined;
    if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
    return value;
}
function getSpecies(obj) {
    var ctor = obj.constructor;
    if (ctor !== undefined) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) ctor = undefined;
    }
    return ctor !== undefined ? ctor : Observable;
}
function isObservable(x) {
    return x instanceof Observable; // SPEC: Brand check
}
function hostReportError(e) {
    if (hostReportError.log) hostReportError.log(e);
    else setTimeout(function() {
        throw e;
    });
}
function enqueue(fn) {
    Promise.resolve().then(function() {
        try {
            fn();
        } catch (e) {
            hostReportError(e);
        }
    });
}
function cleanupSubscription(subscription) {
    var cleanup = subscription._cleanup;
    if (cleanup === undefined) return;
    subscription._cleanup = undefined;
    if (!cleanup) return;
    try {
        if (typeof cleanup === 'function') cleanup();
        else {
            var unsubscribe = getMethod(cleanup, 'unsubscribe');
            if (unsubscribe) unsubscribe.call(cleanup);
        }
    } catch (e) {
        hostReportError(e);
    }
}
function closeSubscription(subscription) {
    subscription._observer = undefined;
    subscription._queue = undefined;
    subscription._state = 'closed';
}
function flushSubscription(subscription) {
    var queue = subscription._queue;
    if (!queue) return;
    subscription._queue = undefined;
    subscription._state = 'ready';
    for(var i = 0; i < queue.length; ++i){
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === 'closed') break;
    }
}
function notifySubscription(subscription, type, value) {
    subscription._state = 'running';
    var observer = subscription._observer;
    try {
        var m = getMethod(observer, type);
        switch(type){
            case 'next':
                if (m) m.call(observer, value);
                break;
            case 'error':
                closeSubscription(subscription);
                if (m) m.call(observer, value);
                else throw value;
                break;
            case 'complete':
                closeSubscription(subscription);
                if (m) m.call(observer);
                break;
        }
    } catch (e) {
        hostReportError(e);
    }
    if (subscription._state === 'closed') cleanupSubscription(subscription);
    else if (subscription._state === 'running') subscription._state = 'ready';
}
function onNotify(subscription, type, value) {
    if (subscription._state === 'closed') return;
    if (subscription._state === 'buffering') {
        subscription._queue.push({
            type: type,
            value: value
        });
        return;
    }
    if (subscription._state !== 'ready') {
        subscription._state = 'buffering';
        subscription._queue = [
            {
                type: type,
                value: value
            }
        ];
        enqueue(function() {
            return flushSubscription(subscription);
        });
        return;
    }
    notifySubscription(subscription, type, value);
}
var Subscription = /*#__PURE__*/ function() {
    function Subscription1(observer, subscriber) {
        // ASSERT: observer is an object
        // ASSERT: subscriber is callable
        this._cleanup = undefined;
        this._observer = observer;
        this._queue = undefined;
        this._state = 'initializing';
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
            this._cleanup = subscriber.call(undefined, subscriptionObserver);
        } catch (e) {
            subscriptionObserver.error(e);
        }
        if (this._state === 'initializing') this._state = 'ready';
    }
    var _proto = Subscription1.prototype;
    _proto.unsubscribe = function unsubscribe() {
        if (this._state !== 'closed') {
            closeSubscription(this);
            cleanupSubscription(this);
        }
    };
    _createClass(Subscription1, [
        {
            key: "closed",
            get: function() {
                return this._state === 'closed';
            }
        }
    ]);
    return Subscription1;
}();
var SubscriptionObserver = /*#__PURE__*/ function() {
    function SubscriptionObserver1(subscription) {
        this._subscription = subscription;
    }
    var _proto2 = SubscriptionObserver1.prototype;
    _proto2.next = function next(value) {
        onNotify(this._subscription, 'next', value);
    };
    _proto2.error = function error(value) {
        onNotify(this._subscription, 'error', value);
    };
    _proto2.complete = function complete() {
        onNotify(this._subscription, 'complete');
    };
    _createClass(SubscriptionObserver1, [
        {
            key: "closed",
            get: function() {
                return this._subscription._state === 'closed';
            }
        }
    ]);
    return SubscriptionObserver1;
}();
var Observable = /*#__PURE__*/ function() {
    function Observable1(subscriber) {
        if (!(this instanceof Observable1)) throw new TypeError('Observable cannot be called as a function');
        if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
        this._subscriber = subscriber;
    }
    var _proto3 = Observable1.prototype;
    _proto3.subscribe = function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) observer = {
            next: observer,
            error: arguments[1],
            complete: arguments[2]
        };
        return new Subscription(observer, this._subscriber);
    };
    _proto3.forEach = function forEach(fn) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            if (typeof fn !== 'function') {
                reject(new TypeError(fn + ' is not a function'));
                return;
            }
            function done() {
                subscription.unsubscribe();
                resolve();
            }
            var subscription = _this.subscribe({
                next: function(value) {
                    try {
                        fn(value, done);
                    } catch (e) {
                        reject(e);
                        subscription.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve
            });
        });
    };
    _proto3.map = function map(fn) {
        var _this2 = this;
        if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
        var C = getSpecies(this);
        return new C(function(observer) {
            return _this2.subscribe({
                next: function(value) {
                    try {
                        value = fn(value);
                    } catch (e) {
                        return observer.error(e);
                    }
                    observer.next(value);
                },
                error: function(e) {
                    observer.error(e);
                },
                complete: function() {
                    observer.complete();
                }
            });
        });
    };
    _proto3.filter = function filter(fn) {
        var _this3 = this;
        if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
        var C = getSpecies(this);
        return new C(function(observer) {
            return _this3.subscribe({
                next: function(value) {
                    try {
                        if (!fn(value)) return;
                    } catch (e) {
                        return observer.error(e);
                    }
                    observer.next(value);
                },
                error: function(e) {
                    observer.error(e);
                },
                complete: function() {
                    observer.complete();
                }
            });
        });
    };
    _proto3.reduce = function reduce(fn) {
        var _this4 = this;
        if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
        var C = getSpecies(this);
        var hasSeed = arguments.length > 1;
        var hasValue = false;
        var seed = arguments[1];
        var acc = seed;
        return new C(function(observer) {
            return _this4.subscribe({
                next: function(value) {
                    var first = !hasValue;
                    hasValue = true;
                    if (!first || hasSeed) try {
                        acc = fn(acc, value);
                    } catch (e) {
                        return observer.error(e);
                    }
                    else acc = value;
                },
                error: function(e) {
                    observer.error(e);
                },
                complete: function() {
                    if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
                    observer.next(acc);
                    observer.complete();
                }
            });
        });
    };
    _proto3.concat = function concat() {
        var _this5 = this;
        for(var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++)sources[_key] = arguments[_key];
        var C = getSpecies(this);
        return new C(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
                subscription = next.subscribe({
                    next: function(v) {
                        observer.next(v);
                    },
                    error: function(e) {
                        observer.error(e);
                    },
                    complete: function() {
                        if (index === sources.length) {
                            subscription = undefined;
                            observer.complete();
                        } else startNext(C.from(sources[index++]));
                    }
                });
            }
            startNext(_this5);
            return function() {
                if (subscription) {
                    subscription.unsubscribe();
                    subscription = undefined;
                }
            };
        });
    };
    _proto3.flatMap = function flatMap(fn) {
        var _this6 = this;
        if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
        var C = getSpecies(this);
        return new C(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
                next: function(value) {
                    if (fn) try {
                        value = fn(value);
                    } catch (e) {
                        return observer.error(e);
                    }
                    var inner = C.from(value).subscribe({
                        next: function(value1) {
                            observer.next(value1);
                        },
                        error: function(e) {
                            observer.error(e);
                        },
                        complete: function() {
                            var i = subscriptions.indexOf(inner);
                            if (i >= 0) subscriptions.splice(i, 1);
                            completeIfDone();
                        }
                    });
                    subscriptions.push(inner);
                },
                error: function(e) {
                    observer.error(e);
                },
                complete: function() {
                    completeIfDone();
                }
            });
            function completeIfDone() {
                if (outer.closed && subscriptions.length === 0) observer.complete();
            }
            return function() {
                subscriptions.forEach(function(s) {
                    return s.unsubscribe();
                });
                outer.unsubscribe();
            };
        });
    };
    _proto3[SymbolObservable] = function() {
        return this;
    };
    Observable1.from = function from(x) {
        var C = typeof this === 'function' ? this : Observable1;
        if (x == null) throw new TypeError(x + ' is not an object');
        var method = getMethod(x, SymbolObservable);
        if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
            if (isObservable(observable) && observable.constructor === C) return observable;
            return new C(function(observer) {
                return observable.subscribe(observer);
            });
        }
        if (hasSymbol('iterator')) {
            method = getMethod(x, SymbolIterator);
            if (method) return new C(function(observer) {
                enqueue(function() {
                    if (observer.closed) return;
                    for(var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;){
                        var item = _step.value;
                        observer.next(item);
                        if (observer.closed) return;
                    }
                    observer.complete();
                });
            });
        }
        if (Array.isArray(x)) return new C(function(observer) {
            enqueue(function() {
                if (observer.closed) return;
                for(var i = 0; i < x.length; ++i){
                    observer.next(x[i]);
                    if (observer.closed) return;
                }
                observer.complete();
            });
        });
        throw new TypeError(x + ' is not observable');
    };
    Observable1.of = function of() {
        for(var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)items[_key2] = arguments[_key2];
        var C = typeof this === 'function' ? this : Observable1;
        return new C(function(observer) {
            enqueue(function() {
                if (observer.closed) return;
                for(var i = 0; i < items.length; ++i){
                    observer.next(items[i]);
                    if (observer.closed) return;
                }
                observer.complete();
            });
        });
    };
    _createClass(Observable1, null, [
        {
            key: SymbolSpecies,
            get: function() {
                return this;
            }
        }
    ]);
    return Observable1;
}();
if (hasSymbols()) Object.defineProperty(Observable, Symbol('extensions'), {
    value: {
        symbol: SymbolObservable,
        hostReportError: hostReportError
    },
    configurable: true
});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a5uaQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* global window */ var _ponyfillJs = require("./ponyfill.js");
var _ponyfillJsDefault = parcelHelpers.interopDefault(_ponyfillJs);
var global = arguments[3];
var root;
if (typeof self !== 'undefined') root = self;
else if (typeof window !== 'undefined') root = window;
else if (typeof global !== 'undefined') root = global;
else if (typeof module !== 'undefined') root = module;
else root = Function('return this')();
var result = _ponyfillJsDefault.default(root);
exports.default = result;

},{"./ponyfill.js":"fIiG7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fIiG7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function symbolObservablePonyfill(root) {
    var result;
    var Symbol1 = root.Symbol;
    if (typeof Symbol1 === 'function') {
        if (Symbol1.observable) result = Symbol1.observable;
        else {
            if (typeof Symbol1.for === 'function') // This just needs to be something that won't trample other user's Symbol.for use
            // It also will guide people to the source of their issues, if this is problematic.
            // META: It's a resource locator!
            result = Symbol1.for('https://github.com/benlesh/symbol-observable');
            else // Symbol.for didn't exist! The best we can do at this point is a totally 
            // unique symbol. Note that the string argument here is a descriptor, not
            // an identifier. This symbol is unique.
            result = Symbol1('https://github.com/benlesh/symbol-observable');
            try {
                Symbol1.observable = result;
            } catch (err) {
            // Do nothing. In some environments, users have frozen `Symbol` for security reasons,
            // if it is frozen assigning to it will throw. In this case, we don't care, because
            // they will need to use the returned value from the ponyfill.
            }
        }
    } else result = '@@observable';
    return result;
}
exports.default = symbolObservablePonyfill;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8fKX8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cloneDeep", ()=>cloneDeep
);
var toString = Object.prototype.toString;
function cloneDeep(value) {
    return cloneDeepHelper(value);
}
function cloneDeepHelper(val, seen) {
    switch(toString.call(val)){
        case "[object Array]":
            seen = seen || new Map;
            if (seen.has(val)) return seen.get(val);
            var copy_1 = val.slice(0);
            seen.set(val, copy_1);
            copy_1.forEach(function(child, i) {
                copy_1[i] = cloneDeepHelper(child, seen);
            });
            return copy_1;
        case "[object Object]":
            seen = seen || new Map;
            if (seen.has(val)) return seen.get(val);
            var copy_2 = Object.create(Object.getPrototypeOf(val));
            seen.set(val, copy_2);
            Object.keys(val).forEach(function(key) {
                copy_2[key] = cloneDeepHelper(val[key], seen);
            });
            return copy_2;
        default:
            return val;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jSIGF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maybeDeepFreeze", ()=>maybeDeepFreeze
);
var _indexJs = require("../globals/index.js");
var _objectsJs = require("./objects.js");
function deepFreeze(value) {
    var workSet = new Set([
        value
    ]);
    workSet.forEach(function(obj) {
        if (_objectsJs.isNonNullObject(obj)) {
            if (!Object.isFrozen(obj)) Object.freeze(obj);
            Object.getOwnPropertyNames(obj).forEach(function(name) {
                if (_objectsJs.isNonNullObject(obj[name])) workSet.add(obj[name]);
            });
        }
    });
    return value;
}
function maybeDeepFreeze(obj) {
    if (__DEV__) deepFreeze(obj);
    return obj;
}

},{"../globals/index.js":"4SnoD","./objects.js":"aYdMx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5IE8U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iterateObserversSafely", ()=>iterateObserversSafely
);
function iterateObserversSafely(observers, method, argument) {
    var observersWithMethod = [];
    observers.forEach(function(obs) {
        return obs[method] && observersWithMethod.push(obs);
    });
    observersWithMethod.forEach(function(obs) {
        return obs[method](argument);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7Dena":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asyncMap", ()=>asyncMap
);
var _observableJs = require("./Observable.js");
function asyncMap(observable, mapFn, catchFn) {
    return new _observableJs.Observable(function(observer) {
        var next = observer.next, error = observer.error, complete = observer.complete;
        var activeCallbackCount = 0;
        var completed = false;
        var promiseQueue = {
            then: function(callback) {
                return new Promise(function(resolve) {
                    return resolve(callback());
                });
            }
        };
        function makeCallback(examiner, delegate) {
            if (examiner) return function(arg) {
                ++activeCallbackCount;
                var both = function() {
                    return examiner(arg);
                };
                promiseQueue = promiseQueue.then(both, both).then(function(result) {
                    --activeCallbackCount;
                    next && next.call(observer, result);
                    if (completed) handler.complete();
                }, function(error1) {
                    --activeCallbackCount;
                    throw error1;
                }).catch(function(caught) {
                    error && error.call(observer, caught);
                });
            };
            else return function(arg) {
                return delegate && delegate.call(observer, arg);
            };
        }
        var handler = {
            next: makeCallback(mapFn, next),
            error: makeCallback(catchFn, error),
            complete: function() {
                completed = true;
                if (!activeCallbackCount) complete && complete.call(observer);
            }
        };
        var sub = observable.subscribe(handler);
        return function() {
            return sub.unsubscribe();
        };
    });
}

},{"./Observable.js":"9aLrX","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7dsWA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Concast", ()=>Concast1
);
var _tslib = require("tslib");
var _observableJs = require("./Observable.js");
var _iterationJs = require("./iteration.js");
var _subclassingJs = require("./subclassing.js");
function isPromiseLike(value) {
    return value && typeof value.then === "function";
}
var Concast1 = function(_super) {
    _tslib.__extends(Concast2, _super);
    function Concast2(sources) {
        var _this = _super.call(this, function(observer) {
            _this.addObserver(observer);
            return function() {
                return _this.removeObserver(observer);
            };
        }) || this;
        _this.observers = new Set();
        _this.addCount = 0;
        _this.promise = new Promise(function(resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
        _this.handlers = {
            next: function(result) {
                if (_this.sub !== null) {
                    _this.latest = [
                        "next",
                        result
                    ];
                    _iterationJs.iterateObserversSafely(_this.observers, "next", result);
                }
            },
            error: function(error) {
                var sub = _this.sub;
                if (sub !== null) {
                    if (sub) Promise.resolve().then(function() {
                        return sub.unsubscribe();
                    });
                    _this.sub = null;
                    _this.latest = [
                        "error",
                        error
                    ];
                    _this.reject(error);
                    _iterationJs.iterateObserversSafely(_this.observers, "error", error);
                }
            },
            complete: function() {
                if (_this.sub !== null) {
                    var value = _this.sources.shift();
                    if (!value) {
                        _this.sub = null;
                        if (_this.latest && _this.latest[0] === "next") _this.resolve(_this.latest[1]);
                        else _this.resolve();
                        _iterationJs.iterateObserversSafely(_this.observers, "complete");
                    } else if (isPromiseLike(value)) value.then(function(obs) {
                        return _this.sub = obs.subscribe(_this.handlers);
                    });
                    else _this.sub = value.subscribe(_this.handlers);
                }
            }
        };
        _this.cancel = function(reason) {
            _this.reject(reason);
            _this.sources = [];
            _this.handlers.complete();
        };
        _this.promise.catch(function(_) {
        });
        if (typeof sources === "function") sources = [
            new _observableJs.Observable(sources)
        ];
        if (isPromiseLike(sources)) sources.then(function(iterable) {
            return _this.start(iterable);
        }, _this.handlers.error);
        else _this.start(sources);
        return _this;
    }
    Concast2.prototype.start = function(sources) {
        if (this.sub !== void 0) return;
        this.sources = Array.from(sources);
        this.handlers.complete();
    };
    Concast2.prototype.deliverLastMessage = function(observer) {
        if (this.latest) {
            var nextOrError = this.latest[0];
            var method = observer[nextOrError];
            if (method) method.call(observer, this.latest[1]);
            if (this.sub === null && nextOrError === "next" && observer.complete) observer.complete();
        }
    };
    Concast2.prototype.addObserver = function(observer) {
        if (!this.observers.has(observer)) {
            this.deliverLastMessage(observer);
            this.observers.add(observer);
            ++this.addCount;
        }
    };
    Concast2.prototype.removeObserver = function(observer, quietly) {
        if (this.observers.delete(observer) && (--this.addCount) < 1 && !quietly) this.handlers.error(new Error("Observable cancelled prematurely"));
    };
    Concast2.prototype.cleanup = function(callback) {
        var _this = this;
        var called = false;
        var once = function() {
            if (!called) {
                called = true;
                _this.observers.delete(observer);
                callback();
            }
        };
        var observer = {
            next: once,
            error: once,
            complete: once
        };
        var count = this.addCount;
        this.addObserver(observer);
        this.addCount = count;
    };
    return Concast2;
}(_observableJs.Observable);
_subclassingJs.fixObservableSubclass(Concast1);

},{"tslib":"bjkXk","./Observable.js":"9aLrX","./iteration.js":"5IE8U","./subclassing.js":"3aAlg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3aAlg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fixObservableSubclass", ()=>fixObservableSubclass
);
var _observableJs = require("./Observable.js");
function fixObservableSubclass(subclass) {
    function set(key) {
        Object.defineProperty(subclass, key, {
            value: _observableJs.Observable
        });
    }
    if (typeof Symbol === "function" && Symbol.species) set(Symbol.species);
    set("@@species");
    return subclass;
}

},{"./Observable.js":"9aLrX","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6Ewl1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNonEmptyArray", ()=>isNonEmptyArray
);
function isNonEmptyArray(value) {
    return Array.isArray(value) && value.length > 0;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jK252":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "graphQLResultHasError", ()=>graphQLResultHasError
);
function graphQLResultHasError(result) {
    return result.errors && result.errors.length > 0 || false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bMGKm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "canUseWeakMap", ()=>canUseWeakMap
);
parcelHelpers.export(exports, "canUseWeakSet", ()=>canUseWeakSet
);
var canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' && navigator.product === 'ReactNative');
var canUseWeakSet = typeof WeakSet === 'function';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dqF4M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compact", ()=>compact
);
function compact() {
    var objects = [];
    for(var _i = 0; _i < arguments.length; _i++)objects[_i] = arguments[_i];
    var result = Object.create(null);
    objects.forEach(function(obj) {
        if (!obj) return;
        Object.keys(obj).forEach(function(key) {
            var value = obj[key];
            if (value !== void 0) result[key] = value;
        });
    });
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ckB7u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeUniqueId", ()=>makeUniqueId
);
var prefixCounts = new Map();
function makeUniqueId(prefix) {
    var count = prefixCounts.get(prefix) || 1;
    prefixCounts.set(prefix, count + 1);
    return prefix + ":" + count + ":" + Math.random().toString(36).slice(2);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"e4eYW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringifyForDisplay", ()=>stringifyForDisplay
);
var _makeUniqueIdJs = require("./makeUniqueId.js");
function stringifyForDisplay(value) {
    var undefId = _makeUniqueIdJs.makeUniqueId("stringifyForDisplay");
    return JSON.stringify(value, function(key, value1) {
        return value1 === void 0 ? undefId : value1;
    }).split(JSON.stringify(undefId)).join("<undefined>");
}

},{"./makeUniqueId.js":"ckB7u","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a12GE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hRMfY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeOptions", ()=>mergeOptions
);
parcelHelpers.export(exports, "ApolloClient", ()=>ApolloClient
);
var _tslib = require("tslib");
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../link/core/index.js");
var _indexJs1 = require("../utilities/index.js");
var _versionJs = require("../version.js");
var _indexJs2 = require("../link/http/index.js");
var _queryManagerJs = require("./QueryManager.js");
var _localStateJs = require("./LocalState.js");
var hasSuggestedDevtools = false;
function mergeOptions(defaults, options) {
    return _indexJs1.compact(defaults, options, options.variables && {
        variables: _tslib.__assign(_tslib.__assign({
        }, defaults.variables), options.variables)
    });
}
var ApolloClient = function() {
    function ApolloClient1(options) {
        var _this = this;
        this.defaultOptions = {
        };
        this.resetStoreCallbacks = [];
        this.clearStoreCallbacks = [];
        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, _c = options.connectToDevTools, connectToDevTools = _c === void 0 ? typeof window === 'object' && !window.__APOLLO_CLIENT__ && __DEV__ : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? false : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
        var link = options.link;
        if (!link) link = uri ? new _indexJs2.HttpLink({
            uri: uri,
            credentials: credentials,
            headers: headers
        }) : _indexJs.ApolloLink.empty();
        if (!cache) throw __DEV__ ? new _tsInvariant.InvariantError("To initialize Apollo Client, you must specify a 'cache' property in the options object. \nFor more information, please visit: https://go.apollo.dev/c/docs") : new _tsInvariant.InvariantError(10);
        this.link = link;
        this.cache = cache;
        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
        this.queryDeduplication = queryDeduplication;
        this.defaultOptions = defaultOptions || {
        };
        this.typeDefs = typeDefs;
        if (ssrForceFetchDelay) setTimeout(function() {
            return _this.disableNetworkFetches = false;
        }, ssrForceFetchDelay);
        this.watchQuery = this.watchQuery.bind(this);
        this.query = this.query.bind(this);
        this.mutate = this.mutate.bind(this);
        this.resetStore = this.resetStore.bind(this);
        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
        if (connectToDevTools && typeof window === 'object') window.__APOLLO_CLIENT__ = this;
        if (!hasSuggestedDevtools && __DEV__) {
            hasSuggestedDevtools = true;
            if (typeof window !== 'undefined' && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {
                var nav = window.navigator;
                var ua = nav && nav.userAgent;
                var url = void 0;
                if (typeof ua === "string") {
                    if (ua.indexOf("Chrome/") > -1) url = "https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm";
                    else if (ua.indexOf("Firefox/") > -1) url = "https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/";
                }
                if (url) __DEV__ && _tsInvariant.invariant.log("Download the Apollo DevTools for a better development experience: " + url);
            }
        }
        this.version = _versionJs.version;
        this.localState = new _localStateJs.LocalState({
            cache: cache,
            client: this,
            resolvers: resolvers,
            fragmentMatcher: fragmentMatcher
        });
        this.queryManager = new _queryManagerJs.QueryManager({
            cache: this.cache,
            link: this.link,
            queryDeduplication: queryDeduplication,
            ssrMode: ssrMode,
            clientAwareness: {
                name: clientAwarenessName,
                version: clientAwarenessVersion
            },
            localState: this.localState,
            assumeImmutableResults: assumeImmutableResults,
            onBroadcast: connectToDevTools ? function() {
                if (_this.devToolsHookCb) _this.devToolsHookCb({
                    action: {
                    },
                    state: {
                        queries: _this.queryManager.getQueryStore(),
                        mutations: _this.queryManager.mutationStore || {
                        }
                    },
                    dataWithOptimisticResults: _this.cache.extract(true)
                });
            } : void 0
        });
    }
    ApolloClient1.prototype.stop = function() {
        this.queryManager.stop();
    };
    ApolloClient1.prototype.watchQuery = function(options) {
        if (this.defaultOptions.watchQuery) options = mergeOptions(this.defaultOptions.watchQuery, options);
        if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) options = _tslib.__assign(_tslib.__assign({
        }, options), {
            fetchPolicy: 'cache-first'
        });
        return this.queryManager.watchQuery(options);
    };
    ApolloClient1.prototype.query = function(options) {
        if (this.defaultOptions.query) options = mergeOptions(this.defaultOptions.query, options);
        __DEV__ ? _tsInvariant.invariant(options.fetchPolicy !== 'cache-and-network', "The cache-and-network fetchPolicy does not work with client.query, because client.query can only return a single result. Please use client.watchQuery to receive multiple results from the cache and the network, or consider using a different fetchPolicy, such as cache-first or network-only.") : _tsInvariant.invariant(options.fetchPolicy !== 'cache-and-network', 11);
        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') options = _tslib.__assign(_tslib.__assign({
        }, options), {
            fetchPolicy: 'cache-first'
        });
        return this.queryManager.query(options);
    };
    ApolloClient1.prototype.mutate = function(options) {
        if (this.defaultOptions.mutate) options = mergeOptions(this.defaultOptions.mutate, options);
        return this.queryManager.mutate(options);
    };
    ApolloClient1.prototype.subscribe = function(options) {
        return this.queryManager.startGraphQLSubscription(options);
    };
    ApolloClient1.prototype.readQuery = function(options, optimistic) {
        if (optimistic === void 0) optimistic = false;
        return this.cache.readQuery(options, optimistic);
    };
    ApolloClient1.prototype.readFragment = function(options, optimistic) {
        if (optimistic === void 0) optimistic = false;
        return this.cache.readFragment(options, optimistic);
    };
    ApolloClient1.prototype.writeQuery = function(options) {
        this.cache.writeQuery(options);
        this.queryManager.broadcastQueries();
    };
    ApolloClient1.prototype.writeFragment = function(options) {
        this.cache.writeFragment(options);
        this.queryManager.broadcastQueries();
    };
    ApolloClient1.prototype.__actionHookForDevTools = function(cb) {
        this.devToolsHookCb = cb;
    };
    ApolloClient1.prototype.__requestRaw = function(payload) {
        return _indexJs.execute(this.link, payload);
    };
    ApolloClient1.prototype.resetStore = function() {
        var _this = this;
        return Promise.resolve().then(function() {
            return _this.queryManager.clearStore();
        }).then(function() {
            return Promise.all(_this.resetStoreCallbacks.map(function(fn) {
                return fn();
            }));
        }).then(function() {
            return _this.reFetchObservableQueries();
        });
    };
    ApolloClient1.prototype.clearStore = function() {
        var _this = this;
        return Promise.resolve().then(function() {
            return _this.queryManager.clearStore();
        }).then(function() {
            return Promise.all(_this.clearStoreCallbacks.map(function(fn) {
                return fn();
            }));
        });
    };
    ApolloClient1.prototype.onResetStore = function(cb) {
        var _this = this;
        this.resetStoreCallbacks.push(cb);
        return function() {
            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {
                return c !== cb;
            });
        };
    };
    ApolloClient1.prototype.onClearStore = function(cb) {
        var _this = this;
        this.clearStoreCallbacks.push(cb);
        return function() {
            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {
                return c !== cb;
            });
        };
    };
    ApolloClient1.prototype.reFetchObservableQueries = function(includeStandby) {
        return this.queryManager.reFetchObservableQueries(includeStandby);
    };
    ApolloClient1.prototype.refetchQueries = function(options) {
        var map = this.queryManager.refetchQueries(options);
        var queries = [];
        var results = [];
        map.forEach(function(result, obsQuery) {
            queries.push(obsQuery);
            results.push(result);
        });
        var result = Promise.all(results);
        result.queries = queries;
        result.results = results;
        result.catch(function(error) {
            __DEV__ && _tsInvariant.invariant.debug("In client.refetchQueries, Promise.all promise rejected with error " + error);
        });
        return result;
    };
    ApolloClient1.prototype.getObservableQueries = function(include) {
        if (include === void 0) include = "active";
        return this.queryManager.getObservableQueries(include);
    };
    ApolloClient1.prototype.extract = function(optimistic) {
        return this.cache.extract(optimistic);
    };
    ApolloClient1.prototype.restore = function(serializedState) {
        return this.cache.restore(serializedState);
    };
    ApolloClient1.prototype.addResolvers = function(resolvers) {
        this.localState.addResolvers(resolvers);
    };
    ApolloClient1.prototype.setResolvers = function(resolvers) {
        this.localState.setResolvers(resolvers);
    };
    ApolloClient1.prototype.getResolvers = function() {
        return this.localState.getResolvers();
    };
    ApolloClient1.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {
        this.localState.setFragmentMatcher(fragmentMatcher);
    };
    ApolloClient1.prototype.setLink = function(newLink) {
        this.link = this.queryManager.link = newLink;
    };
    return ApolloClient1;
}();

},{"tslib":"bjkXk","ts-invariant":"eFYq1","../link/core/index.js":"h0k4j","../utilities/index.js":"fhAGU","../version.js":"kLWHq","../link/http/index.js":"5crTt","./QueryManager.js":"hlTwp","./LocalState.js":"4HN4d","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"h0k4j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "empty", ()=>_emptyJs.empty
);
parcelHelpers.export(exports, "from", ()=>_fromJs.from
);
parcelHelpers.export(exports, "split", ()=>_splitJs.split
);
parcelHelpers.export(exports, "concat", ()=>_concatJs.concat
);
parcelHelpers.export(exports, "execute", ()=>_executeJs.execute
);
parcelHelpers.export(exports, "ApolloLink", ()=>_apolloLinkJs.ApolloLink
);
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../../utilities/index.js");
var _emptyJs = require("./empty.js");
var _fromJs = require("./from.js");
var _splitJs = require("./split.js");
var _concatJs = require("./concat.js");
var _executeJs = require("./execute.js");
var _apolloLinkJs = require("./ApolloLink.js");
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
__DEV__ ? _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, _indexJs.DEV) : _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, 24);

},{"ts-invariant":"eFYq1","../../utilities/index.js":"fhAGU","./empty.js":"6IBfk","./from.js":"ia6yt","./split.js":"04rFC","./concat.js":"3xUEl","./execute.js":"dkAhf","./ApolloLink.js":"itRs3","./types.js":"cGwqU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6IBfk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "empty", ()=>empty
);
var _apolloLinkJs = require("./ApolloLink.js");
var empty = _apolloLinkJs.ApolloLink.empty;

},{"./ApolloLink.js":"itRs3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"itRs3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApolloLink", ()=>ApolloLink
);
var _tslib = require("tslib");
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../../utilities/index.js");
var _indexJs1 = require("../utils/index.js");
function passthrough(op, forward) {
    return forward ? forward(op) : _indexJs.Observable.of();
}
function toLink(handler) {
    return typeof handler === 'function' ? new ApolloLink(handler) : handler;
}
function isTerminating(link) {
    return link.request.length <= 1;
}
var LinkError1 = function(_super) {
    _tslib.__extends(LinkError2, _super);
    function LinkError2(message, link) {
        var _this = _super.call(this, message) || this;
        _this.link = link;
        return _this;
    }
    return LinkError2;
}(Error);
var ApolloLink = function() {
    function ApolloLink1(request) {
        if (request) this.request = request;
    }
    ApolloLink1.empty = function() {
        return new ApolloLink1(function() {
            return _indexJs.Observable.of();
        });
    };
    ApolloLink1.from = function(links) {
        if (links.length === 0) return ApolloLink1.empty();
        return links.map(toLink).reduce(function(x, y) {
            return x.concat(y);
        });
    };
    ApolloLink1.split = function(test, left, right) {
        var leftLink = toLink(left);
        var rightLink = toLink(right || new ApolloLink1(passthrough));
        if (isTerminating(leftLink) && isTerminating(rightLink)) return new ApolloLink1(function(operation) {
            return test(operation) ? leftLink.request(operation) || _indexJs.Observable.of() : rightLink.request(operation) || _indexJs.Observable.of();
        });
        else return new ApolloLink1(function(operation, forward) {
            return test(operation) ? leftLink.request(operation, forward) || _indexJs.Observable.of() : rightLink.request(operation, forward) || _indexJs.Observable.of();
        });
    };
    ApolloLink1.execute = function(link, operation) {
        return link.request(_indexJs1.createOperation(operation.context, _indexJs1.transformOperation(_indexJs1.validateOperation(operation)))) || _indexJs.Observable.of();
    };
    ApolloLink1.concat = function(first, second) {
        var firstLink = toLink(first);
        if (isTerminating(firstLink)) {
            __DEV__ && _tsInvariant.invariant.warn(new LinkError1("You are calling concat on a terminating link, which will have no effect", firstLink));
            return firstLink;
        }
        var nextLink = toLink(second);
        if (isTerminating(nextLink)) return new ApolloLink1(function(operation) {
            return firstLink.request(operation, function(op) {
                return nextLink.request(op) || _indexJs.Observable.of();
            }) || _indexJs.Observable.of();
        });
        else return new ApolloLink1(function(operation, forward) {
            return firstLink.request(operation, function(op) {
                return nextLink.request(op, forward) || _indexJs.Observable.of();
            }) || _indexJs.Observable.of();
        });
    };
    ApolloLink1.prototype.split = function(test, left, right) {
        return this.concat(ApolloLink1.split(test, left, right || new ApolloLink1(passthrough)));
    };
    ApolloLink1.prototype.concat = function(next) {
        return ApolloLink1.concat(this, next);
    };
    ApolloLink1.prototype.request = function(operation, forward) {
        throw __DEV__ ? new _tsInvariant.InvariantError('request is not implemented') : new _tsInvariant.InvariantError(23);
    };
    ApolloLink1.prototype.onError = function(error, observer) {
        if (observer && observer.error) {
            observer.error(error);
            return false;
        }
        throw error;
    };
    ApolloLink1.prototype.setOnError = function(fn) {
        this.onError = fn;
        return this;
    };
    return ApolloLink1;
}();

},{"tslib":"bjkXk","ts-invariant":"eFYq1","../../utilities/index.js":"fhAGU","../utils/index.js":"2qmtE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2qmtE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromError", ()=>_fromErrorJs.fromError
);
parcelHelpers.export(exports, "toPromise", ()=>_toPromiseJs.toPromise
);
parcelHelpers.export(exports, "fromPromise", ()=>_fromPromiseJs.fromPromise
);
parcelHelpers.export(exports, "throwServerError", ()=>_throwServerErrorJs.throwServerError
);
parcelHelpers.export(exports, "validateOperation", ()=>_validateOperationJs.validateOperation
);
parcelHelpers.export(exports, "createOperation", ()=>_createOperationJs.createOperation
);
parcelHelpers.export(exports, "transformOperation", ()=>_transformOperationJs.transformOperation
);
var _fromErrorJs = require("./fromError.js");
var _toPromiseJs = require("./toPromise.js");
var _fromPromiseJs = require("./fromPromise.js");
var _throwServerErrorJs = require("./throwServerError.js");
var _validateOperationJs = require("./validateOperation.js");
var _createOperationJs = require("./createOperation.js");
var _transformOperationJs = require("./transformOperation.js");

},{"./fromError.js":"5TXHQ","./toPromise.js":"jPeVG","./fromPromise.js":"8pqry","./throwServerError.js":"eS9Gx","./validateOperation.js":"aldnF","./createOperation.js":"gJ8up","./transformOperation.js":"fKQ9L","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5TXHQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromError", ()=>fromError
);
var _indexJs = require("../../utilities/index.js");
function fromError(errorValue) {
    return new _indexJs.Observable(function(observer) {
        observer.error(errorValue);
    });
}

},{"../../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jPeVG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toPromise", ()=>toPromise
);
var _tsInvariant = require("ts-invariant");
function toPromise(observable) {
    var completed = false;
    return new Promise(function(resolve, reject) {
        observable.subscribe({
            next: function(data) {
                if (completed) __DEV__ && _tsInvariant.invariant.warn("Promise Wrapper does not support multiple results from Observable");
                else {
                    completed = true;
                    resolve(data);
                }
            },
            error: reject
        });
    });
}

},{"ts-invariant":"eFYq1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8pqry":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromPromise", ()=>fromPromise
);
var _indexJs = require("../../utilities/index.js");
function fromPromise(promise) {
    return new _indexJs.Observable(function(observer) {
        promise.then(function(value) {
            observer.next(value);
            observer.complete();
        }).catch(observer.error.bind(observer));
    });
}

},{"../../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eS9Gx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "throwServerError", ()=>throwServerError
);
var throwServerError = function(response, result, message) {
    var error = new Error(message);
    error.name = 'ServerError';
    error.response = response;
    error.statusCode = response.status;
    error.result = result;
    throw error;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aldnF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateOperation", ()=>validateOperation
);
var _tsInvariant = require("ts-invariant");
function validateOperation(operation) {
    var OPERATION_FIELDS = [
        'query',
        'operationName',
        'variables',
        'extensions',
        'context', 
    ];
    for(var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++){
        var key = _a[_i];
        if (OPERATION_FIELDS.indexOf(key) < 0) throw __DEV__ ? new _tsInvariant.InvariantError("illegal argument: " + key) : new _tsInvariant.InvariantError(29);
    }
    return operation;
}

},{"ts-invariant":"eFYq1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gJ8up":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOperation", ()=>createOperation
);
var _tslib = require("tslib");
function createOperation(starting, operation) {
    var context = _tslib.__assign({
    }, starting);
    var setContext = function(next) {
        if (typeof next === 'function') context = _tslib.__assign(_tslib.__assign({
        }, context), next(context));
        else context = _tslib.__assign(_tslib.__assign({
        }, context), next);
    };
    var getContext = function() {
        return _tslib.__assign({
        }, context);
    };
    Object.defineProperty(operation, 'setContext', {
        enumerable: false,
        value: setContext
    });
    Object.defineProperty(operation, 'getContext', {
        enumerable: false,
        value: getContext
    });
    return operation;
}

},{"tslib":"bjkXk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fKQ9L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transformOperation", ()=>transformOperation
);
var _indexJs = require("../../utilities/index.js");
function transformOperation(operation) {
    var transformedOperation = {
        variables: operation.variables || {
        },
        extensions: operation.extensions || {
        },
        operationName: operation.operationName,
        query: operation.query
    };
    if (!transformedOperation.operationName) transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? _indexJs.getOperationName(transformedOperation.query) || undefined : '';
    return transformedOperation;
}

},{"../../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ia6yt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "from", ()=>from
);
var _apolloLinkJs = require("./ApolloLink.js");
var from = _apolloLinkJs.ApolloLink.from;

},{"./ApolloLink.js":"itRs3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"04rFC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "split", ()=>split
);
var _apolloLinkJs = require("./ApolloLink.js");
var split = _apolloLinkJs.ApolloLink.split;

},{"./ApolloLink.js":"itRs3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3xUEl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat", ()=>concat
);
var _apolloLinkJs = require("./ApolloLink.js");
var concat = _apolloLinkJs.ApolloLink.concat;

},{"./ApolloLink.js":"itRs3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dkAhf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "execute", ()=>execute
);
var _apolloLinkJs = require("./ApolloLink.js");
var execute = _apolloLinkJs.ApolloLink.execute;

},{"./ApolloLink.js":"itRs3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cGwqU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kLWHq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version
);
var version = '3.4.8';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5crTt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseAndCheckHttpResponse", ()=>_parseAndCheckHttpResponseJs.parseAndCheckHttpResponse
);
parcelHelpers.export(exports, "serializeFetchParameter", ()=>_serializeFetchParameterJs.serializeFetchParameter
);
parcelHelpers.export(exports, "fallbackHttpConfig", ()=>_selectHttpOptionsAndBodyJs.fallbackHttpConfig
);
parcelHelpers.export(exports, "selectHttpOptionsAndBody", ()=>_selectHttpOptionsAndBodyJs.selectHttpOptionsAndBody
);
parcelHelpers.export(exports, "checkFetcher", ()=>_checkFetcherJs.checkFetcher
);
parcelHelpers.export(exports, "createSignalIfSupported", ()=>_createSignalIfSupportedJs.createSignalIfSupported
);
parcelHelpers.export(exports, "selectURI", ()=>_selectURIJs.selectURI
);
parcelHelpers.export(exports, "createHttpLink", ()=>_createHttpLinkJs.createHttpLink
);
parcelHelpers.export(exports, "HttpLink", ()=>_httpLinkJs.HttpLink
);
parcelHelpers.export(exports, "rewriteURIForGET", ()=>_rewriteURIForGETJs.rewriteURIForGET
);
var _parseAndCheckHttpResponseJs = require("./parseAndCheckHttpResponse.js");
var _serializeFetchParameterJs = require("./serializeFetchParameter.js");
var _selectHttpOptionsAndBodyJs = require("./selectHttpOptionsAndBody.js");
var _checkFetcherJs = require("./checkFetcher.js");
var _createSignalIfSupportedJs = require("./createSignalIfSupported.js");
var _selectURIJs = require("./selectURI.js");
var _createHttpLinkJs = require("./createHttpLink.js");
var _httpLinkJs = require("./HttpLink.js");
var _rewriteURIForGETJs = require("./rewriteURIForGET.js");

},{"./parseAndCheckHttpResponse.js":"hb6UQ","./serializeFetchParameter.js":"gcXcx","./selectHttpOptionsAndBody.js":"jWRCO","./checkFetcher.js":"lC3c6","./createSignalIfSupported.js":"eTtgv","./selectURI.js":"lIMOT","./createHttpLink.js":"742xI","./HttpLink.js":"cuihw","./rewriteURIForGET.js":"hvGRn","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hb6UQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseAndCheckHttpResponse", ()=>parseAndCheckHttpResponse
);
var _indexJs = require("../utils/index.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;
function parseAndCheckHttpResponse(operations) {
    return function(response) {
        return response.text().then(function(bodyText) {
            try {
                return JSON.parse(bodyText);
            } catch (err) {
                var parseError = err;
                parseError.name = 'ServerParseError';
                parseError.response = response;
                parseError.statusCode = response.status;
                parseError.bodyText = bodyText;
                throw parseError;
            }
        }).then(function(result) {
            if (response.status >= 300) _indexJs.throwServerError(response, result, "Response not successful: Received status code " + response.status);
            if (!Array.isArray(result) && !hasOwnProperty.call(result, 'data') && !hasOwnProperty.call(result, 'errors')) _indexJs.throwServerError(response, result, "Server response was missing for query '" + (Array.isArray(operations) ? operations.map(function(op) {
                return op.operationName;
            }) : operations.operationName) + "'.");
            return result;
        });
    };
}

},{"../utils/index.js":"2qmtE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gcXcx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeFetchParameter", ()=>serializeFetchParameter
);
var _tsInvariant = require("ts-invariant");
var serializeFetchParameter = function(p, label) {
    var serialized;
    try {
        serialized = JSON.stringify(p);
    } catch (e) {
        var parseError = __DEV__ ? new _tsInvariant.InvariantError("Network request failed. " + label + " is not serializable: " + e.message) : new _tsInvariant.InvariantError(26);
        parseError.parseError = e;
        throw parseError;
    }
    return serialized;
};

},{"ts-invariant":"eFYq1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jWRCO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fallbackHttpConfig", ()=>fallbackHttpConfig
);
parcelHelpers.export(exports, "selectHttpOptionsAndBody", ()=>selectHttpOptionsAndBody
);
var _tslib = require("tslib");
var _graphql = require("graphql");
var defaultHttpOptions = {
    includeQuery: true,
    includeExtensions: false
};
var defaultHeaders = {
    accept: '*/*',
    'content-type': 'application/json'
};
var defaultOptions = {
    method: 'POST'
};
var fallbackHttpConfig = {
    http: defaultHttpOptions,
    headers: defaultHeaders,
    options: defaultOptions
};
var selectHttpOptionsAndBody = function(operation, fallbackConfig) {
    var configs = [];
    for(var _i = 2; _i < arguments.length; _i++)configs[_i - 2] = arguments[_i];
    var options = _tslib.__assign(_tslib.__assign({
    }, fallbackConfig.options), {
        headers: fallbackConfig.headers,
        credentials: fallbackConfig.credentials
    });
    var http = fallbackConfig.http || {
    };
    configs.forEach(function(config) {
        options = _tslib.__assign(_tslib.__assign(_tslib.__assign({
        }, options), config.options), {
            headers: _tslib.__assign(_tslib.__assign({
            }, options.headers), headersToLowerCase(config.headers))
        });
        if (config.credentials) options.credentials = config.credentials;
        http = _tslib.__assign(_tslib.__assign({
        }, http), config.http);
    });
    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
    var body = {
        operationName: operationName,
        variables: variables
    };
    if (http.includeExtensions) body.extensions = extensions;
    if (http.includeQuery) body.query = _graphql.print(query);
    return {
        options: options,
        body: body
    };
};
function headersToLowerCase(headers) {
    if (headers) {
        var normalized_1 = Object.create(null);
        Object.keys(Object(headers)).forEach(function(name) {
            normalized_1[name.toLowerCase()] = headers[name];
        });
        return normalized_1;
    }
    return headers;
}

},{"tslib":"bjkXk","graphql":"6yWt3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lC3c6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkFetcher", ()=>checkFetcher
);
var _tsInvariant = require("ts-invariant");
var checkFetcher = function(fetcher) {
    if (!fetcher && typeof fetch === 'undefined') throw __DEV__ ? new _tsInvariant.InvariantError("\n\"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    ") : new _tsInvariant.InvariantError(25);
};

},{"ts-invariant":"eFYq1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eTtgv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSignalIfSupported", ()=>createSignalIfSupported
);
var createSignalIfSupported = function() {
    if (typeof AbortController === 'undefined') return {
        controller: false,
        signal: false
    };
    var controller = new AbortController();
    var signal = controller.signal;
    return {
        controller: controller,
        signal: signal
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lIMOT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selectURI", ()=>selectURI
);
var selectURI = function(operation, fallbackURI) {
    var context = operation.getContext();
    var contextURI = context.uri;
    if (contextURI) return contextURI;
    else if (typeof fallbackURI === 'function') return fallbackURI(operation);
    else return fallbackURI || '/graphql';
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"742xI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHttpLink", ()=>createHttpLink
);
var _tslib = require("tslib");
var _graphql = require("graphql");
var _indexJs = require("../core/index.js");
var _indexJs1 = require("../../utilities/index.js");
var _serializeFetchParameterJs = require("./serializeFetchParameter.js");
var _selectURIJs = require("./selectURI.js");
var _parseAndCheckHttpResponseJs = require("./parseAndCheckHttpResponse.js");
var _checkFetcherJs = require("./checkFetcher.js");
var _selectHttpOptionsAndBodyJs = require("./selectHttpOptionsAndBody.js");
var _createSignalIfSupportedJs = require("./createSignalIfSupported.js");
var _rewriteURIForGETJs = require("./rewriteURIForGET.js");
var _indexJs2 = require("../utils/index.js");
var backupFetch = _indexJs1.maybe(function() {
    return fetch;
});
var createHttpLink = function(linkOptions) {
    if (linkOptions === void 0) linkOptions = {
    };
    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, preferredFetch = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, _b = linkOptions.includeUnusedVariables, includeUnusedVariables = _b === void 0 ? false : _b, requestOptions = _tslib.__rest(linkOptions, [
        "uri",
        "fetch",
        "includeExtensions",
        "useGETForQueries",
        "includeUnusedVariables"
    ]);
    if (__DEV__) _checkFetcherJs.checkFetcher(preferredFetch || backupFetch);
    var linkConfig = {
        http: {
            includeExtensions: includeExtensions
        },
        options: requestOptions.fetchOptions,
        credentials: requestOptions.credentials,
        headers: requestOptions.headers
    };
    return new _indexJs.ApolloLink(function(operation) {
        var chosenURI = _selectURIJs.selectURI(operation, uri);
        var context = operation.getContext();
        var clientAwarenessHeaders = {
        };
        if (context.clientAwareness) {
            var _a1 = context.clientAwareness, name_1 = _a1.name, version = _a1.version;
            if (name_1) clientAwarenessHeaders['apollographql-client-name'] = name_1;
            if (version) clientAwarenessHeaders['apollographql-client-version'] = version;
        }
        var contextHeaders = _tslib.__assign(_tslib.__assign({
        }, clientAwarenessHeaders), context.headers);
        var contextConfig = {
            http: context.http,
            options: context.fetchOptions,
            credentials: context.credentials,
            headers: contextHeaders
        };
        var _b1 = _selectHttpOptionsAndBodyJs.selectHttpOptionsAndBody(operation, _selectHttpOptionsAndBodyJs.fallbackHttpConfig, linkConfig, contextConfig), options = _b1.options, body = _b1.body;
        if (body.variables && !includeUnusedVariables) {
            var unusedNames_1 = new Set(Object.keys(body.variables));
            _graphql.visit(operation.query, {
                Variable: function(node, _key, parent) {
                    if (parent && parent.kind !== 'VariableDefinition') unusedNames_1.delete(node.name.value);
                }
            });
            if (unusedNames_1.size) {
                body.variables = _tslib.__assign({
                }, body.variables);
                unusedNames_1.forEach(function(name) {
                    delete body.variables[name];
                });
            }
        }
        var controller;
        if (!options.signal) {
            var _c = _createSignalIfSupportedJs.createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
            controller = _controller;
            if (controller) options.signal = signal;
        }
        var definitionIsMutation = function(d) {
            return d.kind === 'OperationDefinition' && d.operation === 'mutation';
        };
        if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) options.method = 'GET';
        if (options.method === 'GET') {
            var _d = _rewriteURIForGETJs.rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
            if (parseError) return _indexJs2.fromError(parseError);
            chosenURI = newURI;
        } else try {
            options.body = _serializeFetchParameterJs.serializeFetchParameter(body, 'Payload');
        } catch (parseError) {
            return _indexJs2.fromError(parseError);
        }
        return new _indexJs1.Observable(function(observer) {
            var currentFetch = preferredFetch || _indexJs1.maybe(function() {
                return fetch;
            }) || backupFetch;
            currentFetch(chosenURI, options).then(function(response) {
                operation.setContext({
                    response: response
                });
                return response;
            }).then(_parseAndCheckHttpResponseJs.parseAndCheckHttpResponse(operation)).then(function(result) {
                observer.next(result);
                observer.complete();
                return result;
            }).catch(function(err) {
                if (err.name === 'AbortError') return;
                if (err.result && err.result.errors && err.result.data) observer.next(err.result);
                observer.error(err);
            });
            return function() {
                if (controller) controller.abort();
            };
        });
    });
};

},{"tslib":"bjkXk","graphql":"6yWt3","../core/index.js":"h0k4j","../../utilities/index.js":"fhAGU","./serializeFetchParameter.js":"gcXcx","./selectURI.js":"lIMOT","./parseAndCheckHttpResponse.js":"hb6UQ","./checkFetcher.js":"lC3c6","./selectHttpOptionsAndBody.js":"jWRCO","./createSignalIfSupported.js":"eTtgv","./rewriteURIForGET.js":"hvGRn","../utils/index.js":"2qmtE","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hvGRn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rewriteURIForGET", ()=>rewriteURIForGET
);
var _serializeFetchParameterJs = require("./serializeFetchParameter.js");
function rewriteURIForGET(chosenURI, body) {
    var queryParams = [];
    var addQueryParam = function(key, value) {
        queryParams.push(key + "=" + encodeURIComponent(value));
    };
    if ('query' in body) addQueryParam('query', body.query);
    if (body.operationName) addQueryParam('operationName', body.operationName);
    if (body.variables) {
        var serializedVariables = void 0;
        try {
            serializedVariables = _serializeFetchParameterJs.serializeFetchParameter(body.variables, 'Variables map');
        } catch (parseError) {
            return {
                parseError: parseError
            };
        }
        addQueryParam('variables', serializedVariables);
    }
    if (body.extensions) {
        var serializedExtensions = void 0;
        try {
            serializedExtensions = _serializeFetchParameterJs.serializeFetchParameter(body.extensions, 'Extensions map');
        } catch (parseError) {
            return {
                parseError: parseError
            };
        }
        addQueryParam('extensions', serializedExtensions);
    }
    var fragment = '', preFragment = chosenURI;
    var fragmentStart = chosenURI.indexOf('#');
    if (fragmentStart !== -1) {
        fragment = chosenURI.substr(fragmentStart);
        preFragment = chosenURI.substr(0, fragmentStart);
    }
    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';
    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;
    return {
        newURI: newURI
    };
}

},{"./serializeFetchParameter.js":"gcXcx","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cuihw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpLink", ()=>HttpLink1
);
var _tslib = require("tslib");
var _indexJs = require("../core/index.js");
var _createHttpLinkJs = require("./createHttpLink.js");
var HttpLink1 = function(_super) {
    _tslib.__extends(HttpLink2, _super);
    function HttpLink2(options) {
        if (options === void 0) options = {
        };
        var _this = _super.call(this, _createHttpLinkJs.createHttpLink(options).request) || this;
        _this.options = options;
        return _this;
    }
    return HttpLink2;
}(_indexJs.ApolloLink);

},{"tslib":"bjkXk","../core/index.js":"h0k4j","./createHttpLink.js":"742xI","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hlTwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "QueryManager", ()=>QueryManager
);
var _tslib = require("tslib");
var _tsInvariant = require("ts-invariant");
var _equality = require("@wry/equality");
var _indexJs = require("../link/core/index.js");
var _indexJs1 = require("../cache/index.js");
var _indexJs2 = require("../utilities/index.js");
var _indexJs3 = require("../errors/index.js");
var _observableQueryJs = require("./ObservableQuery.js");
var _networkStatusJs = require("./networkStatus.js");
var _localStateJs = require("./LocalState.js");
var _queryInfoJs = require("./QueryInfo.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;
var QueryManager = function() {
    function QueryManager1(_a) {
        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {
        } : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;
        this.clientAwareness = {
        };
        this.queries = new Map();
        this.fetchCancelFns = new Map();
        this.transformCache = new (_indexJs2.canUseWeakMap ? WeakMap : Map)();
        this.queryIdCounter = 1;
        this.requestIdCounter = 1;
        this.mutationIdCounter = 1;
        this.inFlightLinkObservables = new Map();
        this.cache = cache;
        this.link = link;
        this.queryDeduplication = queryDeduplication;
        this.clientAwareness = clientAwareness;
        this.localState = localState || new _localStateJs.LocalState({
            cache: cache
        });
        this.ssrMode = ssrMode;
        this.assumeImmutableResults = !!assumeImmutableResults;
        if (this.onBroadcast = onBroadcast) this.mutationStore = Object.create(null);
    }
    QueryManager1.prototype.stop = function() {
        var _this = this;
        this.queries.forEach(function(_info, queryId) {
            _this.stopQueryNoBroadcast(queryId);
        });
        this.cancelPendingFetches(__DEV__ ? new _tsInvariant.InvariantError('QueryManager stopped while query was in flight') : new _tsInvariant.InvariantError(14));
    };
    QueryManager1.prototype.cancelPendingFetches = function(error) {
        this.fetchCancelFns.forEach(function(cancel) {
            return cancel(error);
        });
        this.fetchCancelFns.clear();
    };
    QueryManager1.prototype.mutate = function(_a) {
        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, _e = _a.fetchPolicy, fetchPolicy = _e === void 0 ? 'network-only' : _e, keepRootFields = _a.keepRootFields, context = _a.context;
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var mutationId, mutationStoreValue, self;
            return _tslib.__generator(this, function(_f) {
                switch(_f.label){
                    case 0:
                        __DEV__ ? _tsInvariant.invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : _tsInvariant.invariant(mutation, 15);
                        __DEV__ ? _tsInvariant.invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', "Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.") : _tsInvariant.invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 16);
                        mutationId = this.generateMutationId();
                        mutation = this.transform(mutation).document;
                        variables = this.getVariables(mutation, variables);
                        if (!this.transform(mutation).hasClientExports) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            this.localState.addExportedVariables(mutation, variables, context)
                        ];
                    case 1:
                        variables = _f.sent();
                        _f.label = 2;
                    case 2:
                        mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {
                            mutation: mutation,
                            variables: variables,
                            loading: true,
                            error: null
                        });
                        if (optimisticResponse) this.markMutationOptimistic(optimisticResponse, {
                            mutationId: mutationId,
                            document: mutation,
                            variables: variables,
                            fetchPolicy: fetchPolicy,
                            errorPolicy: errorPolicy,
                            context: context,
                            updateQueries: updateQueries,
                            update: updateWithProxyFn,
                            keepRootFields: keepRootFields
                        });
                        this.broadcastQueries();
                        self = this;
                        return [
                            2,
                            new Promise(function(resolve, reject) {
                                return _indexJs2.asyncMap(self.getObservableFromLink(mutation, _tslib.__assign(_tslib.__assign({
                                }, context), {
                                    optimisticResponse: optimisticResponse
                                }), variables, false), function(result) {
                                    if (_indexJs2.graphQLResultHasError(result) && errorPolicy === 'none') throw new _indexJs3.ApolloError({
                                        graphQLErrors: result.errors
                                    });
                                    if (mutationStoreValue) {
                                        mutationStoreValue.loading = false;
                                        mutationStoreValue.error = null;
                                    }
                                    var storeResult = _tslib.__assign({
                                    }, result);
                                    if (typeof refetchQueries === "function") refetchQueries = refetchQueries(storeResult);
                                    if (errorPolicy === 'ignore' && _indexJs2.graphQLResultHasError(storeResult)) delete storeResult.errors;
                                    return self.markMutationResult({
                                        mutationId: mutationId,
                                        result: storeResult,
                                        document: mutation,
                                        variables: variables,
                                        fetchPolicy: fetchPolicy,
                                        errorPolicy: errorPolicy,
                                        context: context,
                                        update: updateWithProxyFn,
                                        updateQueries: updateQueries,
                                        awaitRefetchQueries: awaitRefetchQueries,
                                        refetchQueries: refetchQueries,
                                        removeOptimistic: optimisticResponse ? mutationId : void 0,
                                        onQueryUpdated: onQueryUpdated,
                                        keepRootFields: keepRootFields
                                    });
                                }).subscribe({
                                    next: function(storeResult) {
                                        self.broadcastQueries();
                                        resolve(storeResult);
                                    },
                                    error: function(err) {
                                        if (mutationStoreValue) {
                                            mutationStoreValue.loading = false;
                                            mutationStoreValue.error = err;
                                        }
                                        if (optimisticResponse) self.cache.removeOptimistic(mutationId);
                                        self.broadcastQueries();
                                        reject(err instanceof _indexJs3.ApolloError ? err : new _indexJs3.ApolloError({
                                            networkError: err
                                        }));
                                    }
                                });
                            })
                        ];
                }
            });
        });
    };
    QueryManager1.prototype.markMutationResult = function(mutation, cache) {
        var _this = this;
        if (cache === void 0) cache = this.cache;
        var result = mutation.result;
        var cacheWrites = [];
        var skipCache = mutation.fetchPolicy === "no-cache";
        if (!skipCache && _queryInfoJs.shouldWriteResult(result, mutation.errorPolicy)) {
            cacheWrites.push({
                result: result.data,
                dataId: 'ROOT_MUTATION',
                query: mutation.document,
                variables: mutation.variables
            });
            var updateQueries_1 = mutation.updateQueries;
            if (updateQueries_1) this.queries.forEach(function(_a, queryId) {
                var observableQuery = _a.observableQuery;
                var queryName = observableQuery && observableQuery.queryName;
                if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) return;
                var updater = updateQueries_1[queryName];
                var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;
                var _c = cache.diff({
                    query: document,
                    variables: variables,
                    returnPartialData: true,
                    optimistic: false
                }), currentQueryResult = _c.result, complete = _c.complete;
                if (complete && currentQueryResult) {
                    var nextQueryResult = updater(currentQueryResult, {
                        mutationResult: result,
                        queryName: document && _indexJs2.getOperationName(document) || void 0,
                        queryVariables: variables
                    });
                    if (nextQueryResult) cacheWrites.push({
                        result: nextQueryResult,
                        dataId: 'ROOT_QUERY',
                        query: document,
                        variables: variables
                    });
                }
            });
        }
        if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {
            var results_1 = [];
            this.refetchQueries({
                updateCache: function(cache1) {
                    if (!skipCache) cacheWrites.forEach(function(write) {
                        return cache1.write(write);
                    });
                    var update = mutation.update;
                    if (update) {
                        if (!skipCache) {
                            var diff = cache1.diff({
                                id: "ROOT_MUTATION",
                                query: _this.transform(mutation.document).asQuery,
                                variables: mutation.variables,
                                optimistic: false,
                                returnPartialData: true
                            });
                            if (diff.complete) result = _tslib.__assign(_tslib.__assign({
                            }, result), {
                                data: diff.result
                            });
                        }
                        update(cache1, result, {
                            context: mutation.context,
                            variables: mutation.variables
                        });
                    }
                    if (!skipCache && !mutation.keepRootFields) cache1.modify({
                        id: 'ROOT_MUTATION',
                        fields: function(value, _a) {
                            var fieldName = _a.fieldName, DELETE = _a.DELETE;
                            return fieldName === "__typename" ? value : DELETE;
                        }
                    });
                },
                include: mutation.refetchQueries,
                optimistic: false,
                removeOptimistic: mutation.removeOptimistic,
                onQueryUpdated: mutation.onQueryUpdated || null
            }).forEach(function(result1) {
                return results_1.push(result1);
            });
            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) return Promise.all(results_1).then(function() {
                return result;
            });
        }
        return Promise.resolve(result);
    };
    QueryManager1.prototype.markMutationOptimistic = function(optimisticResponse, mutation) {
        var _this = this;
        var data = typeof optimisticResponse === "function" ? optimisticResponse(mutation.variables) : optimisticResponse;
        return this.cache.recordOptimisticTransaction(function(cache) {
            try {
                _this.markMutationResult(_tslib.__assign(_tslib.__assign({
                }, mutation), {
                    result: {
                        data: data
                    }
                }), cache);
            } catch (error) {
                __DEV__ && _tsInvariant.invariant.error(error);
            }
        }, mutation.mutationId);
    };
    QueryManager1.prototype.fetchQuery = function(queryId, options, networkStatus) {
        return this.fetchQueryObservable(queryId, options, networkStatus).promise;
    };
    QueryManager1.prototype.getQueryStore = function() {
        var store = Object.create(null);
        this.queries.forEach(function(info, queryId) {
            store[queryId] = {
                variables: info.variables,
                networkStatus: info.networkStatus,
                networkError: info.networkError,
                graphQLErrors: info.graphQLErrors
            };
        });
        return store;
    };
    QueryManager1.prototype.resetErrors = function(queryId) {
        var queryInfo = this.queries.get(queryId);
        if (queryInfo) {
            queryInfo.networkError = undefined;
            queryInfo.graphQLErrors = [];
        }
    };
    QueryManager1.prototype.transform = function(document) {
        var transformCache = this.transformCache;
        if (!transformCache.has(document)) {
            var transformed = this.cache.transformDocument(document);
            var forLink = _indexJs2.removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));
            var clientQuery = this.localState.clientQuery(transformed);
            var serverQuery = forLink && this.localState.serverQuery(forLink);
            var cacheEntry_1 = {
                document: transformed,
                hasClientExports: _indexJs2.hasClientExports(transformed),
                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
                clientQuery: clientQuery,
                serverQuery: serverQuery,
                defaultVars: _indexJs2.getDefaultValues(_indexJs2.getOperationDefinition(transformed)),
                asQuery: _tslib.__assign(_tslib.__assign({
                }, transformed), {
                    definitions: transformed.definitions.map(function(def) {
                        if (def.kind === "OperationDefinition" && def.operation !== "query") return _tslib.__assign(_tslib.__assign({
                        }, def), {
                            operation: "query"
                        });
                        return def;
                    })
                })
            };
            var add = function(doc) {
                if (doc && !transformCache.has(doc)) transformCache.set(doc, cacheEntry_1);
            };
            add(document);
            add(transformed);
            add(clientQuery);
            add(serverQuery);
        }
        return transformCache.get(document);
    };
    QueryManager1.prototype.getVariables = function(document, variables) {
        return _tslib.__assign(_tslib.__assign({
        }, this.transform(document).defaultVars), variables);
    };
    QueryManager1.prototype.watchQuery = function(options) {
        options = _tslib.__assign(_tslib.__assign({
        }, options), {
            variables: this.getVariables(options.query, options.variables)
        });
        if (typeof options.notifyOnNetworkStatusChange === 'undefined') options.notifyOnNetworkStatusChange = false;
        var queryInfo = new _queryInfoJs.QueryInfo(this);
        var observable = new _observableQueryJs.ObservableQuery({
            queryManager: this,
            queryInfo: queryInfo,
            options: options
        });
        this.queries.set(observable.queryId, queryInfo);
        queryInfo.init({
            document: options.query,
            observableQuery: observable,
            variables: options.variables
        });
        return observable;
    };
    QueryManager1.prototype.query = function(options, queryId) {
        var _this = this;
        if (queryId === void 0) queryId = this.generateQueryId();
        __DEV__ ? _tsInvariant.invariant(options.query, "query option is required. You must specify your GraphQL document in the query option.") : _tsInvariant.invariant(options.query, 17);
        __DEV__ ? _tsInvariant.invariant(options.query.kind === 'Document', 'You must wrap the query string in a "gql" tag.') : _tsInvariant.invariant(options.query.kind === 'Document', 18);
        __DEV__ ? _tsInvariant.invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : _tsInvariant.invariant(!options.returnPartialData, 19);
        __DEV__ ? _tsInvariant.invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : _tsInvariant.invariant(!options.pollInterval, 20);
        return this.fetchQuery(queryId, options).finally(function() {
            return _this.stopQuery(queryId);
        });
    };
    QueryManager1.prototype.generateQueryId = function() {
        return String(this.queryIdCounter++);
    };
    QueryManager1.prototype.generateRequestId = function() {
        return this.requestIdCounter++;
    };
    QueryManager1.prototype.generateMutationId = function() {
        return String(this.mutationIdCounter++);
    };
    QueryManager1.prototype.stopQueryInStore = function(queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.broadcastQueries();
    };
    QueryManager1.prototype.stopQueryInStoreNoBroadcast = function(queryId) {
        var queryInfo = this.queries.get(queryId);
        if (queryInfo) queryInfo.stop();
    };
    QueryManager1.prototype.clearStore = function() {
        this.cancelPendingFetches(__DEV__ ? new _tsInvariant.InvariantError('Store reset while query was in flight (not completed in link chain)') : new _tsInvariant.InvariantError(21));
        this.queries.forEach(function(queryInfo) {
            if (queryInfo.observableQuery) queryInfo.networkStatus = _networkStatusJs.NetworkStatus.loading;
            else queryInfo.stop();
        });
        if (this.mutationStore) this.mutationStore = Object.create(null);
        return this.cache.reset();
    };
    QueryManager1.prototype.resetStore = function() {
        var _this = this;
        return this.clearStore().then(function() {
            return _this.reFetchObservableQueries();
        });
    };
    QueryManager1.prototype.getObservableQueries = function(include) {
        var _this = this;
        if (include === void 0) include = "active";
        var queries = new Map();
        var queryNamesAndDocs = new Map();
        var legacyQueryOptions = new Set();
        if (Array.isArray(include)) include.forEach(function(desc) {
            if (typeof desc === "string") queryNamesAndDocs.set(desc, false);
            else if (_indexJs2.isDocumentNode(desc)) queryNamesAndDocs.set(_this.transform(desc).document, false);
            else if (_indexJs2.isNonNullObject(desc) && desc.query) legacyQueryOptions.add(desc);
        });
        this.queries.forEach(function(_a, queryId) {
            var oq = _a.observableQuery, document = _a.document;
            if (oq) {
                if (include === "all") {
                    queries.set(queryId, oq);
                    return;
                }
                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;
                if (fetchPolicy === "standby" || !oq.hasObservers()) return;
                if (include === "active" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {
                    queries.set(queryId, oq);
                    if (queryName) queryNamesAndDocs.set(queryName, true);
                    if (document) queryNamesAndDocs.set(document, true);
                }
            }
        });
        if (legacyQueryOptions.size) legacyQueryOptions.forEach(function(options) {
            var queryId = _indexJs2.makeUniqueId("legacyOneTimeQuery");
            var queryInfo = _this.getQuery(queryId).init({
                document: options.query,
                variables: options.variables
            });
            var oq = new _observableQueryJs.ObservableQuery({
                queryManager: _this,
                queryInfo: queryInfo,
                options: _tslib.__assign(_tslib.__assign({
                }, options), {
                    fetchPolicy: "network-only"
                })
            });
            _tsInvariant.invariant(oq.queryId === queryId);
            queryInfo.setObservableQuery(oq);
            queries.set(queryId, oq);
        });
        if (__DEV__ && queryNamesAndDocs.size) queryNamesAndDocs.forEach(function(included, nameOrDoc) {
            if (!included) __DEV__ && _tsInvariant.invariant.warn("Unknown query " + (typeof nameOrDoc === "string" ? "named " : "") + JSON.stringify(nameOrDoc, null, 2) + " requested in refetchQueries options.include array");
        });
        return queries;
    };
    QueryManager1.prototype.reFetchObservableQueries = function(includeStandby) {
        var _this = this;
        if (includeStandby === void 0) includeStandby = false;
        var observableQueryPromises = [];
        this.getObservableQueries(includeStandby ? "all" : "active").forEach(function(observableQuery, queryId) {
            var fetchPolicy = observableQuery.options.fetchPolicy;
            observableQuery.resetLastResults();
            if (includeStandby || fetchPolicy !== "standby" && fetchPolicy !== "cache-only") observableQueryPromises.push(observableQuery.refetch());
            _this.getQuery(queryId).setDiff(null);
        });
        this.broadcastQueries();
        return Promise.all(observableQueryPromises);
    };
    QueryManager1.prototype.setObservableQuery = function(observableQuery) {
        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);
    };
    QueryManager1.prototype.startGraphQLSubscription = function(_a) {
        var _this = this;
        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {
        } : _b;
        query = this.transform(query).document;
        variables = this.getVariables(query, variables);
        var makeObservable = function(variables1) {
            return _this.getObservableFromLink(query, context, variables1).map(function(result) {
                if (fetchPolicy !== 'no-cache') {
                    if (_queryInfoJs.shouldWriteResult(result, errorPolicy)) _this.cache.write({
                        query: query,
                        result: result.data,
                        dataId: 'ROOT_SUBSCRIPTION',
                        variables: variables1
                    });
                    _this.broadcastQueries();
                }
                if (_indexJs2.graphQLResultHasError(result)) throw new _indexJs3.ApolloError({
                    graphQLErrors: result.errors
                });
                return result;
            });
        };
        if (this.transform(query).hasClientExports) {
            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);
            return new _indexJs2.Observable(function(observer) {
                var sub = null;
                observablePromise_1.then(function(observable) {
                    return sub = observable.subscribe(observer);
                }, observer.error);
                return function() {
                    return sub && sub.unsubscribe();
                };
            });
        }
        return makeObservable(variables);
    };
    QueryManager1.prototype.stopQuery = function(queryId) {
        this.stopQueryNoBroadcast(queryId);
        this.broadcastQueries();
    };
    QueryManager1.prototype.stopQueryNoBroadcast = function(queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.removeQuery(queryId);
    };
    QueryManager1.prototype.removeQuery = function(queryId) {
        this.fetchCancelFns.delete(queryId);
        this.getQuery(queryId).stop();
        this.queries.delete(queryId);
    };
    QueryManager1.prototype.broadcastQueries = function() {
        if (this.onBroadcast) this.onBroadcast();
        this.queries.forEach(function(info) {
            return info.notify();
        });
    };
    QueryManager1.prototype.getLocalState = function() {
        return this.localState;
    };
    QueryManager1.prototype.getObservableFromLink = function(query, context, variables, deduplication) {
        var _this = this;
        var _a;
        if (deduplication === void 0) deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;
        var observable;
        var serverQuery = this.transform(query).serverQuery;
        if (serverQuery) {
            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;
            var operation = {
                query: serverQuery,
                variables: variables,
                operationName: _indexJs2.getOperationName(serverQuery) || void 0,
                context: this.prepareContext(_tslib.__assign(_tslib.__assign({
                }, context), {
                    forceFetch: !deduplication
                }))
            };
            context = operation.context;
            if (deduplication) {
                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();
                inFlightLinkObservables_1.set(serverQuery, byVariables_1);
                var varJson_1 = _indexJs1.canonicalStringify(variables);
                observable = byVariables_1.get(varJson_1);
                if (!observable) {
                    var concast = new _indexJs2.Concast([
                        _indexJs.execute(link, operation)
                    ]);
                    byVariables_1.set(varJson_1, observable = concast);
                    concast.cleanup(function() {
                        if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) inFlightLinkObservables_1.delete(serverQuery);
                    });
                }
            } else observable = new _indexJs2.Concast([
                _indexJs.execute(link, operation)
            ]);
        } else {
            observable = new _indexJs2.Concast([
                _indexJs2.Observable.of({
                    data: {
                    }
                })
            ]);
            context = this.prepareContext(context);
        }
        var clientQuery = this.transform(query).clientQuery;
        if (clientQuery) observable = _indexJs2.asyncMap(observable, function(result) {
            return _this.localState.runResolvers({
                document: clientQuery,
                remoteResult: result,
                context: context,
                variables: variables
            });
        });
        return observable;
    };
    QueryManager1.prototype.getResultsFromLink = function(queryInfo, cacheWriteBehavior, options) {
        var requestId = queryInfo.lastRequestId = this.generateRequestId();
        return _indexJs2.asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function(result) {
            var hasErrors = _indexJs2.isNonEmptyArray(result.errors);
            if (requestId >= queryInfo.lastRequestId) {
                if (hasErrors && options.errorPolicy === "none") throw queryInfo.markError(new _indexJs3.ApolloError({
                    graphQLErrors: result.errors
                }));
                queryInfo.markResult(result, options, cacheWriteBehavior);
                queryInfo.markReady();
            }
            var aqr = {
                data: result.data,
                loading: false,
                networkStatus: queryInfo.networkStatus || _networkStatusJs.NetworkStatus.ready
            };
            if (hasErrors && options.errorPolicy !== "ignore") aqr.errors = result.errors;
            return aqr;
        }, function(networkError) {
            var error = _indexJs3.isApolloError(networkError) ? networkError : new _indexJs3.ApolloError({
                networkError: networkError
            });
            if (requestId >= queryInfo.lastRequestId) queryInfo.markError(error);
            throw error;
        });
    };
    QueryManager1.prototype.fetchQueryObservable = function(queryId, options, networkStatus) {
        var _this = this;
        if (networkStatus === void 0) networkStatus = _networkStatusJs.NetworkStatus.loading;
        var query = this.transform(options.query).document;
        var variables = this.getVariables(query, options.variables);
        var queryInfo = this.getQuery(queryId);
        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? "none" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {
        } : _e;
        var normalized = Object.assign({
        }, options, {
            query: query,
            variables: variables,
            fetchPolicy: fetchPolicy,
            errorPolicy: errorPolicy,
            returnPartialData: returnPartialData,
            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
            context: context
        });
        var fromVariables = function(variables1) {
            normalized.variables = variables1;
            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);
        };
        this.fetchCancelFns.set(queryId, function(reason) {
            Promise.resolve().then(function() {
                return concast.cancel(reason);
            });
        });
        var concast = new _indexJs2.Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));
        concast.cleanup(function() {
            _this.fetchCancelFns.delete(queryId);
            _observableQueryJs.applyNextFetchPolicy(options);
        });
        return concast;
    };
    QueryManager1.prototype.refetchQueries = function(_a) {
        var _this = this;
        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? _indexJs2.makeUniqueId("refetchQueries") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;
        var includedQueriesById = new Map();
        if (include) this.getObservableQueries(include).forEach(function(oq, queryId) {
            includedQueriesById.set(queryId, {
                oq: oq,
                lastDiff: _this.getQuery(queryId).getDiff()
            });
        });
        var results = new Map;
        if (updateCache) this.cache.batch({
            update: updateCache,
            optimistic: optimistic && removeOptimistic || false,
            removeOptimistic: removeOptimistic,
            onWatchUpdated: function(watch, diff, lastDiff) {
                var oq = watch.watcher instanceof _queryInfoJs.QueryInfo && watch.watcher.observableQuery;
                if (oq) {
                    if (onQueryUpdated) {
                        includedQueriesById.delete(oq.queryId);
                        var result = onQueryUpdated(oq, diff, lastDiff);
                        if (result === true) result = oq.refetch();
                        if (result !== false) results.set(oq, result);
                        return false;
                    }
                    if (onQueryUpdated !== null) includedQueriesById.set(oq.queryId, {
                        oq: oq,
                        lastDiff: lastDiff,
                        diff: diff
                    });
                }
            }
        });
        if (includedQueriesById.size) includedQueriesById.forEach(function(_a1, queryId) {
            var oq = _a1.oq, lastDiff = _a1.lastDiff, diff = _a1.diff;
            var result;
            if (onQueryUpdated) {
                if (!diff) {
                    var info = oq["queryInfo"];
                    info.reset();
                    diff = info.getDiff();
                }
                result = onQueryUpdated(oq, diff, lastDiff);
            }
            if (!onQueryUpdated || result === true) result = oq.refetch();
            if (result !== false) results.set(oq, result);
            if (queryId.indexOf("legacyOneTimeQuery") >= 0) _this.stopQueryNoBroadcast(queryId);
        });
        if (removeOptimistic) this.cache.removeOptimistic(removeOptimistic);
        return results;
    };
    QueryManager1.prototype.fetchQueryByPolicy = function(queryInfo, _a, networkStatus) {
        var _this = this;
        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;
        var oldNetworkStatus = queryInfo.networkStatus;
        queryInfo.init({
            document: query,
            variables: variables,
            networkStatus: networkStatus
        });
        var readCache = function() {
            return queryInfo.getDiff(variables);
        };
        var resultsFromCache = function(diff, networkStatus1) {
            if (networkStatus1 === void 0) networkStatus1 = queryInfo.networkStatus || _networkStatusJs.NetworkStatus.loading;
            var data = diff.result;
            if (__DEV__ && !returnPartialData && !_equality.equal(data, {
            })) _observableQueryJs.logMissingFieldErrors(diff.missing);
            var fromData = function(data1) {
                return _indexJs2.Observable.of(_tslib.__assign({
                    data: data1,
                    loading: _networkStatusJs.isNetworkRequestInFlight(networkStatus1),
                    networkStatus: networkStatus1
                }, diff.complete ? null : {
                    partial: true
                }));
            };
            if (data && _this.transform(query).hasForcedResolvers) return _this.localState.runResolvers({
                document: query,
                remoteResult: {
                    data: data
                },
                context: context,
                variables: variables,
                onlyRunForcedResolvers: true
            }).then(function(resolved) {
                return fromData(resolved.data || void 0);
            });
            return fromData(data);
        };
        var cacheWriteBehavior = fetchPolicy === "no-cache" ? 0 : networkStatus === _networkStatusJs.NetworkStatus.refetch && refetchWritePolicy !== "merge" ? 1 : 2;
        var resultsFromLink = function() {
            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {
                variables: variables,
                context: context,
                fetchPolicy: fetchPolicy,
                errorPolicy: errorPolicy
            });
        };
        var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === "number" && oldNetworkStatus !== networkStatus && _networkStatusJs.isNetworkRequestInFlight(networkStatus);
        switch(fetchPolicy){
            default:
            case "cache-first":
                var diff = readCache();
                if (diff.complete) return [
                    resultsFromCache(diff, queryInfo.markReady()), 
                ];
                if (returnPartialData || shouldNotify) return [
                    resultsFromCache(diff),
                    resultsFromLink(), 
                ];
                return [
                    resultsFromLink(), 
                ];
            case "cache-and-network":
                var diff = readCache();
                if (diff.complete || returnPartialData || shouldNotify) return [
                    resultsFromCache(diff),
                    resultsFromLink(), 
                ];
                return [
                    resultsFromLink(), 
                ];
            case "cache-only":
                return [
                    resultsFromCache(readCache(), queryInfo.markReady()), 
                ];
            case "network-only":
                if (shouldNotify) return [
                    resultsFromCache(readCache()),
                    resultsFromLink(), 
                ];
                return [
                    resultsFromLink()
                ];
            case "no-cache":
                if (shouldNotify) return [
                    resultsFromCache(queryInfo.getDiff()),
                    resultsFromLink(), 
                ];
                return [
                    resultsFromLink()
                ];
            case "standby":
                return [];
        }
    };
    QueryManager1.prototype.getQuery = function(queryId) {
        if (queryId && !this.queries.has(queryId)) this.queries.set(queryId, new _queryInfoJs.QueryInfo(this, queryId));
        return this.queries.get(queryId);
    };
    QueryManager1.prototype.prepareContext = function(context) {
        if (context === void 0) context = {
        };
        var newContext = this.localState.prepareContext(context);
        return _tslib.__assign(_tslib.__assign({
        }, newContext), {
            clientAwareness: this.clientAwareness
        });
    };
    return QueryManager1;
}();

},{"tslib":"bjkXk","ts-invariant":"eFYq1","@wry/equality":"i9esi","../link/core/index.js":"h0k4j","../cache/index.js":"ahDke","../utilities/index.js":"fhAGU","../errors/index.js":"hsZu1","./ObservableQuery.js":"4YjvH","./networkStatus.js":"jW3Zk","./LocalState.js":"4HN4d","./QueryInfo.js":"bvfev","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"i9esi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>equal
);
parcelHelpers.export(exports, "equal", ()=>equal
);
var _a = Object.prototype, toString = _a.toString, hasOwnProperty = _a.hasOwnProperty;
var fnToStr = Function.prototype.toString;
var previousComparisons = new Map();
/**
 * Performs a deep equality check on two JavaScript values, tolerating cycles.
 */ function equal(a, b) {
    try {
        return check(a, b);
    } finally{
        previousComparisons.clear();
    }
}
function check(a, b) {
    // If the two values are strictly equal, our job is easy.
    if (a === b) return true;
    // Object.prototype.toString returns a representation of the runtime type of
    // the given value that is considerably more precise than typeof.
    var aTag = toString.call(a);
    var bTag = toString.call(b);
    // If the runtime types of a and b are different, they could maybe be equal
    // under some interpretation of equality, but for simplicity and performance
    // we just return false instead.
    if (aTag !== bTag) return false;
    switch(aTag){
        case '[object Array]':
            // Arrays are a lot like other objects, but we can cheaply compare their
            // lengths as a short-cut before comparing their elements.
            if (a.length !== b.length) return false;
        // Fall through to object case...
        case '[object Object]':
            if (previouslyCompared(a, b)) return true;
            var aKeys = definedKeys(a);
            var bKeys = definedKeys(b);
            // If `a` and `b` have a different number of enumerable keys, they
            // must be different.
            var keyCount = aKeys.length;
            if (keyCount !== bKeys.length) return false;
            // Now make sure they have the same keys.
            for(var k = 0; k < keyCount; ++k){
                if (!hasOwnProperty.call(b, aKeys[k])) return false;
            }
            // Finally, check deep equality of all child properties.
            for(var k = 0; k < keyCount; ++k){
                var key = aKeys[k];
                if (!check(a[key], b[key])) return false;
            }
            return true;
        case '[object Error]':
            return a.name === b.name && a.message === b.message;
        case '[object Number]':
            // Handle NaN, which is !== itself.
            if (a !== a) return b !== b;
        // Fall through to shared +a === +b case...
        case '[object Boolean]':
        case '[object Date]':
            return +a === +b;
        case '[object RegExp]':
        case '[object String]':
            return a == "" + b;
        case '[object Map]':
        case '[object Set]':
            if (a.size !== b.size) return false;
            if (previouslyCompared(a, b)) return true;
            var aIterator = a.entries();
            var isMap = aTag === '[object Map]';
            while(true){
                var info = aIterator.next();
                if (info.done) break;
                // If a instanceof Set, aValue === aKey.
                var _a1 = info.value, aKey = _a1[0], aValue = _a1[1];
                // So this works the same way for both Set and Map.
                if (!b.has(aKey)) return false;
                // However, we care about deep equality of values only when dealing
                // with Map structures.
                if (isMap && !check(aValue, b.get(aKey))) return false;
            }
            return true;
        case '[object Uint16Array]':
        case '[object Uint8Array]':
        case '[object Uint32Array]':
        case '[object Int32Array]':
        case '[object Int8Array]':
        case '[object Int16Array]':
        case '[object ArrayBuffer]':
            // DataView doesn't need these conversions, but the equality check is
            // otherwise the same.
            a = new Uint8Array(a);
            b = new Uint8Array(b);
        // Fall through...
        case '[object DataView]':
            var len = a.byteLength;
            if (len === b.byteLength) {
                while((len--) && a[len] === b[len]);
            }
            return len === -1;
        case '[object AsyncFunction]':
        case '[object GeneratorFunction]':
        case '[object AsyncGeneratorFunction]':
        case '[object Function]':
            var aCode = fnToStr.call(a);
            if (aCode !== fnToStr.call(b)) return false;
            // We consider non-native functions equal if they have the same code
            // (native functions require === because their code is censored).
            // Note that this behavior is not entirely sound, since !== function
            // objects with the same code can behave differently depending on
            // their closure scope. However, any function can behave differently
            // depending on the values of its input arguments (including this)
            // and its calling context (including its closure scope), even
            // though the function object is === to itself; and it is entirely
            // possible for functions that are not === to behave exactly the
            // same under all conceivable circumstances. Because none of these
            // factors are statically decidable in JavaScript, JS function
            // equality is not well-defined. This ambiguity allows us to
            // consider the best possible heuristic among various imperfect
            // options, and equating non-native functions that have the same
            // code has enormous practical benefits, such as when comparing
            // functions that are repeatedly passed as fresh function
            // expressions within objects that are otherwise deeply equal. Since
            // any function created from the same syntactic expression (in the
            // same code location) will always stringify to the same code
            // according to fnToStr.call, we can reasonably expect these
            // repeatedly passed function expressions to have the same code, and
            // thus behave "the same" (with all the caveats mentioned above),
            // even though the runtime function objects are !== to one another.
            return !endsWith(aCode, nativeCodeSuffix);
    }
    // Otherwise the values are not equal.
    return false;
}
function definedKeys(obj) {
    // Remember that the second argument to Array.prototype.filter will be
    // used as `this` within the callback function.
    return Object.keys(obj).filter(isDefinedKey, obj);
}
function isDefinedKey(key) {
    return this[key] !== void 0;
}
var nativeCodeSuffix = "{ [native code] }";
function endsWith(full, suffix) {
    var fromIndex = full.length - suffix.length;
    return fromIndex >= 0 && full.indexOf(suffix, fromIndex) === fromIndex;
}
function previouslyCompared(a, b) {
    // Though cyclic references can make an object graph appear infinite from the
    // perspective of a depth-first traversal, the graph still contains a finite
    // number of distinct object references. We use the previousComparisons cache
    // to avoid comparing the same pair of object references more than once, which
    // guarantees termination (even if we end up comparing every object in one
    // graph to every object in the other graph, which is extremely unlikely),
    // while still allowing weird isomorphic structures (like rings with different
    // lengths) a chance to pass the equality test.
    var bSet = previousComparisons.get(a);
    if (bSet) {
        // Return true here because we can be sure false will be returned somewhere
        // else if the objects are not equivalent.
        if (bSet.has(b)) return true;
    } else previousComparisons.set(a, bSet = new Set);
    bSet.add(b);
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ahDke":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApolloCache", ()=>_cacheJs.ApolloCache
);
parcelHelpers.export(exports, "Cache", ()=>_cacheJs1.Cache
);
parcelHelpers.export(exports, "MissingFieldError", ()=>_commonJs.MissingFieldError
);
parcelHelpers.export(exports, "isReference", ()=>_indexJs.isReference
);
parcelHelpers.export(exports, "makeReference", ()=>_indexJs.makeReference
);
parcelHelpers.export(exports, "EntityStore", ()=>_entityStoreJs.EntityStore
);
parcelHelpers.export(exports, "fieldNameFromStoreName", ()=>_helpersJs.fieldNameFromStoreName
);
parcelHelpers.export(exports, "InMemoryCache", ()=>_inMemoryCacheJs.InMemoryCache
);
parcelHelpers.export(exports, "makeVar", ()=>_reactiveVarsJs.makeVar
);
parcelHelpers.export(exports, "cacheSlot", ()=>_reactiveVarsJs.cacheSlot
);
parcelHelpers.export(exports, "defaultDataIdFromObject", ()=>_policiesJs.defaultDataIdFromObject
);
parcelHelpers.export(exports, "Policies", ()=>_policiesJs.Policies
);
parcelHelpers.export(exports, "canonicalStringify", ()=>_objectCanonJs.canonicalStringify
);
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../utilities/index.js");
var _cacheJs = require("./core/cache.js");
var _cacheJs1 = require("./core/types/Cache.js");
var _commonJs = require("./core/types/common.js");
var _entityStoreJs = require("./inmemory/entityStore.js");
var _helpersJs = require("./inmemory/helpers.js");
var _inMemoryCacheJs = require("./inmemory/inMemoryCache.js");
var _reactiveVarsJs = require("./inmemory/reactiveVars.js");
var _policiesJs = require("./inmemory/policies.js");
var _objectCanonJs = require("./inmemory/object-canon.js");
var _typesJs = require("./inmemory/types.js");
parcelHelpers.exportAll(_typesJs, exports);
__DEV__ ? _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, _indexJs.DEV) : _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, 1);

},{"ts-invariant":"eFYq1","../utilities/index.js":"fhAGU","./core/cache.js":"8Gwz3","./core/types/Cache.js":"11I53","./core/types/common.js":"8Ncku","./inmemory/entityStore.js":"6Sllg","./inmemory/helpers.js":"hXLZd","./inmemory/inMemoryCache.js":"42Ddx","./inmemory/reactiveVars.js":"3Dkw9","./inmemory/policies.js":"8QdmI","./inmemory/object-canon.js":"cy4ps","./inmemory/types.js":"8JBVm","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8Gwz3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApolloCache", ()=>ApolloCache
);
var _tslib = require("tslib");
var _optimism = require("optimism");
var _indexJs = require("../../utilities/index.js");
var ApolloCache = function() {
    function ApolloCache1() {
        this.getFragmentDoc = _optimism.wrap(_indexJs.getFragmentQueryDocument);
    }
    ApolloCache1.prototype.batch = function(options) {
        var optimisticId = typeof options.optimistic === "string" ? options.optimistic : options.optimistic === false ? null : void 0;
        this.performTransaction(options.update, optimisticId);
    };
    ApolloCache1.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {
        this.performTransaction(transaction, optimisticId);
    };
    ApolloCache1.prototype.transformDocument = function(document) {
        return document;
    };
    ApolloCache1.prototype.identify = function(object) {
        return;
    };
    ApolloCache1.prototype.gc = function() {
        return [];
    };
    ApolloCache1.prototype.modify = function(options) {
        return false;
    };
    ApolloCache1.prototype.transformForLink = function(document) {
        return document;
    };
    ApolloCache1.prototype.readQuery = function(options, optimistic) {
        if (optimistic === void 0) optimistic = !!options.optimistic;
        return this.read(_tslib.__assign(_tslib.__assign({
        }, options), {
            rootId: options.id || 'ROOT_QUERY',
            optimistic: optimistic
        }));
    };
    ApolloCache1.prototype.readFragment = function(options, optimistic) {
        if (optimistic === void 0) optimistic = !!options.optimistic;
        return this.read(_tslib.__assign(_tslib.__assign({
        }, options), {
            query: this.getFragmentDoc(options.fragment, options.fragmentName),
            rootId: options.id,
            optimistic: optimistic
        }));
    };
    ApolloCache1.prototype.writeQuery = function(_a) {
        var id = _a.id, data = _a.data, options = _tslib.__rest(_a, [
            "id",
            "data"
        ]);
        return this.write(Object.assign(options, {
            dataId: id || 'ROOT_QUERY',
            result: data
        }));
    };
    ApolloCache1.prototype.writeFragment = function(_a) {
        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = _tslib.__rest(_a, [
            "id",
            "data",
            "fragment",
            "fragmentName"
        ]);
        return this.write(Object.assign(options, {
            query: this.getFragmentDoc(fragment, fragmentName),
            dataId: id,
            result: data
        }));
    };
    return ApolloCache1;
}();

},{"tslib":"bjkXk","optimism":"bZJ6P","../../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bZJ6P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KeyTrie", ()=>_trie.Trie
);
parcelHelpers.export(exports, "asyncFromGen", ()=>_context.asyncFromGen
);
parcelHelpers.export(exports, "bindContext", ()=>_context.bind
);
parcelHelpers.export(exports, "noContext", ()=>_context.noContext
);
parcelHelpers.export(exports, "setTimeout", ()=>_context.setTimeout
);
parcelHelpers.export(exports, "defaultMakeCacheKey", ()=>defaultMakeCacheKey
);
parcelHelpers.export(exports, "dep", ()=>dep
);
parcelHelpers.export(exports, "wrap", ()=>wrap
);
var _trie = require("@wry/trie");
var _context = require("@wry/context");
function defaultDispose() {
}
var Cache1 = function() {
    function Cache2(max, dispose) {
        if (max === void 0) max = Infinity;
        if (dispose === void 0) dispose = defaultDispose;
        this.max = max;
        this.dispose = dispose;
        this.map = new Map();
        this.newest = null;
        this.oldest = null;
    }
    Cache2.prototype.has = function(key) {
        return this.map.has(key);
    };
    Cache2.prototype.get = function(key) {
        var node = this.getNode(key);
        return node && node.value;
    };
    Cache2.prototype.getNode = function(key) {
        var node = this.map.get(key);
        if (node && node !== this.newest) {
            var older = node.older, newer = node.newer;
            if (newer) newer.older = older;
            if (older) older.newer = newer;
            node.older = this.newest;
            node.older.newer = node;
            node.newer = null;
            this.newest = node;
            if (node === this.oldest) this.oldest = newer;
        }
        return node;
    };
    Cache2.prototype.set = function(key, value) {
        var node = this.getNode(key);
        if (node) return node.value = value;
        node = {
            key: key,
            value: value,
            newer: null,
            older: this.newest
        };
        if (this.newest) this.newest.newer = node;
        this.newest = node;
        this.oldest = this.oldest || node;
        this.map.set(key, node);
        return node.value;
    };
    Cache2.prototype.clean = function() {
        while(this.oldest && this.map.size > this.max)this.delete(this.oldest.key);
    };
    Cache2.prototype.delete = function(key) {
        var node = this.map.get(key);
        if (node) {
            if (node === this.newest) this.newest = node.older;
            if (node === this.oldest) this.oldest = node.newer;
            if (node.newer) node.newer.older = node.older;
            if (node.older) node.older.newer = node.newer;
            this.map.delete(key);
            this.dispose(node.value, key);
            return true;
        }
        return false;
    };
    return Cache2;
}();
var parentEntrySlot = new _context.Slot();
var _a;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var // This Array.from polyfill is restricted to working with Set<any> for now,
// but we can improve the polyfill and add other input types, as needed. Note
// that this fallback implementation will only be used if the host environment
// does not support a native Array.from function. In most modern JS runtimes,
// the toArray function exported here will be === Array.from.
toArray = (_a = Array.from, _a === void 0 ? function(collection) {
    var array = [];
    collection.forEach(function(item) {
        return array.push(item);
    });
    return array;
} : _a);
function maybeUnsubscribe(entryOrDep) {
    var unsubscribe = entryOrDep.unsubscribe;
    if (typeof unsubscribe === "function") {
        entryOrDep.unsubscribe = void 0;
        unsubscribe();
    }
}
var emptySetPool = [];
var POOL_TARGET_SIZE = 100;
// Since this package might be used browsers, we should avoid using the
// Node built-in assert module.
function assert(condition, optionalMessage) {
    if (!condition) throw new Error(optionalMessage || "assertion failure");
}
function valueIs(a, b) {
    var len = a.length;
    return(// Unknown values are not equal to each other.
    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.
    len === b.length && // The underlying value or exception must be the same.
    a[len - 1] === b[len - 1]);
}
function valueGet(value) {
    switch(value.length){
        case 0:
            throw new Error("unknown value");
        case 1:
            return value[0];
        case 2:
            throw value[1];
    }
}
function valueCopy(value) {
    return value.slice(0);
}
var Entry = function() {
    function Entry1(fn) {
        this.fn = fn;
        this.parents = new Set();
        this.childValues = new Map();
        // When this Entry has children that are dirty, this property becomes
        // a Set containing other Entry objects, borrowed from emptySetPool.
        // When the set becomes empty, it gets recycled back to emptySetPool.
        this.dirtyChildren = null;
        this.dirty = true;
        this.recomputing = false;
        this.value = [];
        this.deps = null;
        ++Entry1.count;
    }
    Entry1.prototype.peek = function() {
        if (this.value.length === 1 && !mightBeDirty(this)) {
            rememberParent(this);
            return this.value[0];
        }
    };
    // This is the most important method of the Entry API, because it
    // determines whether the cached this.value can be returned immediately,
    // or must be recomputed. The overall performance of the caching system
    // depends on the truth of the following observations: (1) this.dirty is
    // usually false, (2) this.dirtyChildren is usually null/empty, and thus
    // (3) valueGet(this.value) is usually returned without recomputation.
    Entry1.prototype.recompute = function(args) {
        assert(!this.recomputing, "already recomputing");
        rememberParent(this);
        return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);
    };
    Entry1.prototype.setDirty = function() {
        if (this.dirty) return;
        this.dirty = true;
        this.value.length = 0;
        reportDirty(this);
        // We can go ahead and unsubscribe here, since any further dirty
        // notifications we receive will be redundant, and unsubscribing may
        // free up some resources, e.g. file watchers.
        maybeUnsubscribe(this);
    };
    Entry1.prototype.dispose = function() {
        var _this = this;
        this.setDirty();
        // Sever any dependency relationships with our own children, so those
        // children don't retain this parent Entry in their child.parents sets,
        // thereby preventing it from being fully garbage collected.
        forgetChildren(this);
        // Because this entry has been kicked out of the cache (in index.js),
        // we've lost the ability to find out if/when this entry becomes dirty,
        // whether that happens through a subscription, because of a direct call
        // to entry.setDirty(), or because one of its children becomes dirty.
        // Because of this loss of future information, we have to assume the
        // worst (that this entry might have become dirty very soon), so we must
        // immediately mark this entry's parents as dirty. Normally we could
        // just call entry.setDirty() rather than calling parent.setDirty() for
        // each parent, but that would leave this entry in parent.childValues
        // and parent.dirtyChildren, which would prevent the child from being
        // truly forgotten.
        eachParent(this, function(parent, child) {
            parent.setDirty();
            forgetChild(parent, _this);
        });
    };
    Entry1.prototype.forget = function() {
        // The code that creates Entry objects in index.ts will replace this method
        // with one that actually removes the Entry from the cache, which will also
        // trigger the entry.dispose method.
        this.dispose();
    };
    Entry1.prototype.dependOn = function(dep) {
        dep.add(this);
        if (!this.deps) this.deps = emptySetPool.pop() || new Set();
        this.deps.add(dep);
    };
    Entry1.prototype.forgetDeps = function() {
        var _this = this;
        if (this.deps) {
            toArray(this.deps).forEach(function(dep) {
                return dep.delete(_this);
            });
            this.deps.clear();
            emptySetPool.push(this.deps);
            this.deps = null;
        }
    };
    Entry1.count = 0;
    return Entry1;
}();
function rememberParent(child) {
    var parent = parentEntrySlot.getValue();
    if (parent) {
        child.parents.add(parent);
        if (!parent.childValues.has(child)) parent.childValues.set(child, []);
        if (mightBeDirty(child)) reportDirtyChild(parent, child);
        else reportCleanChild(parent, child);
        return parent;
    }
}
function reallyRecompute(entry, args) {
    forgetChildren(entry);
    // Set entry as the parent entry while calling recomputeNewValue(entry).
    parentEntrySlot.withValue(entry, recomputeNewValue, [
        entry,
        args
    ]);
    if (maybeSubscribe(entry, args)) // If we successfully recomputed entry.value and did not fail to
    // (re)subscribe, then this Entry is no longer explicitly dirty.
    setClean(entry);
    return valueGet(entry.value);
}
function recomputeNewValue(entry, args) {
    entry.recomputing = true;
    // Set entry.value as unknown.
    entry.value.length = 0;
    try {
        // If entry.fn succeeds, entry.value will become a normal Value.
        entry.value[0] = entry.fn.apply(null, args);
    } catch (e) {
        // If entry.fn throws, entry.value will become exceptional.
        entry.value[1] = e;
    }
    // Either way, this line is always reached.
    entry.recomputing = false;
}
function mightBeDirty(entry) {
    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
}
function setClean(entry) {
    entry.dirty = false;
    if (mightBeDirty(entry)) // This Entry may still have dirty children, in which case we can't
    // let our parents know we're clean just yet.
    return;
    reportClean(entry);
}
function reportDirty(child) {
    eachParent(child, reportDirtyChild);
}
function reportClean(child) {
    eachParent(child, reportCleanChild);
}
function eachParent(child, callback) {
    var parentCount = child.parents.size;
    if (parentCount) {
        var parents = toArray(child.parents);
        for(var i = 0; i < parentCount; ++i)callback(parents[i], child);
    }
}
// Let a parent Entry know that one of its children may be dirty.
function reportDirtyChild(parent, child) {
    // Must have called rememberParent(child) before calling
    // reportDirtyChild(parent, child).
    assert(parent.childValues.has(child));
    assert(mightBeDirty(child));
    var parentWasClean = !mightBeDirty(parent);
    if (!parent.dirtyChildren) parent.dirtyChildren = emptySetPool.pop() || new Set;
    else if (parent.dirtyChildren.has(child)) // If we already know this child is dirty, then we must have already
    // informed our own parents that we are dirty, so we can terminate
    // the recursion early.
    return;
    parent.dirtyChildren.add(child);
    // If parent was clean before, it just became (possibly) dirty (according to
    // mightBeDirty), since we just added child to parent.dirtyChildren.
    if (parentWasClean) reportDirty(parent);
}
// Let a parent Entry know that one of its children is no longer dirty.
function reportCleanChild(parent, child) {
    // Must have called rememberChild(child) before calling
    // reportCleanChild(parent, child).
    assert(parent.childValues.has(child));
    assert(!mightBeDirty(child));
    var childValue = parent.childValues.get(child);
    if (childValue.length === 0) parent.childValues.set(child, valueCopy(child.value));
    else if (!valueIs(childValue, child.value)) parent.setDirty();
    removeDirtyChild(parent, child);
    if (mightBeDirty(parent)) return;
    reportClean(parent);
}
function removeDirtyChild(parent, child) {
    var dc = parent.dirtyChildren;
    if (dc) {
        dc.delete(child);
        if (dc.size === 0) {
            if (emptySetPool.length < POOL_TARGET_SIZE) emptySetPool.push(dc);
            parent.dirtyChildren = null;
        }
    }
}
// Removes all children from this entry and returns an array of the
// removed children.
function forgetChildren(parent) {
    if (parent.childValues.size > 0) parent.childValues.forEach(function(_value, child) {
        forgetChild(parent, child);
    });
    // Remove this parent Entry from any sets to which it was added by the
    // addToSet method.
    parent.forgetDeps();
    // After we forget all our children, this.dirtyChildren must be empty
    // and therefore must have been reset to null.
    assert(parent.dirtyChildren === null);
}
function forgetChild(parent, child) {
    child.parents.delete(parent);
    parent.childValues.delete(child);
    removeDirtyChild(parent, child);
}
function maybeSubscribe(entry, args) {
    if (typeof entry.subscribe === "function") try {
        maybeUnsubscribe(entry); // Prevent double subscriptions.
        entry.unsubscribe = entry.subscribe.apply(null, args);
    } catch (e) {
        // If this Entry has a subscribe function and it threw an exception
        // (or an unsubscribe function it previously returned now throws),
        // return false to indicate that we were not able to subscribe (or
        // unsubscribe), and this Entry should remain dirty.
        entry.setDirty();
        return false;
    }
    // Returning true indicates either that there was no entry.subscribe
    // function or that it succeeded.
    return true;
}
var EntryMethods = {
    setDirty: true,
    dispose: true,
    forget: true
};
function dep(options) {
    var depsByKey = new Map();
    var subscribe = options && options.subscribe;
    function depend(key) {
        var parent = parentEntrySlot.getValue();
        if (parent) {
            var dep_1 = depsByKey.get(key);
            if (!dep_1) depsByKey.set(key, dep_1 = new Set);
            parent.dependOn(dep_1);
            if (typeof subscribe === "function") {
                maybeUnsubscribe(dep_1);
                dep_1.unsubscribe = subscribe(key);
            }
        }
    }
    depend.dirty = function dirty(key, entryMethodName) {
        var dep1 = depsByKey.get(key);
        if (dep1) {
            var m_1 = entryMethodName && hasOwnProperty.call(EntryMethods, entryMethodName) ? entryMethodName : "setDirty";
            // We have to use toArray(dep).forEach instead of dep.forEach, because
            // modifying a Set while iterating over it can cause elements in the Set
            // to be removed from the Set before they've been iterated over.
            toArray(dep1).forEach(function(entry) {
                return entry[m_1]();
            });
            depsByKey.delete(key);
            maybeUnsubscribe(dep1);
        }
    };
    return depend;
}
function makeDefaultMakeCacheKeyFunction() {
    var keyTrie = new _trie.Trie(typeof WeakMap === "function");
    return function() {
        return keyTrie.lookupArray(arguments);
    };
}
// The defaultMakeCacheKey function is remarkably powerful, because it gives
// a unique object for any shallow-identical list of arguments. If you need
// to implement a custom makeCacheKey function, you may find it helpful to
// delegate the final work to defaultMakeCacheKey, which is why we export it
// here. However, you may want to avoid defaultMakeCacheKey if your runtime
// does not support WeakMap, or you have the ability to return a string key.
// In those cases, just write your own custom makeCacheKey functions.
var defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();
var caches = new Set();
function wrap(originalFunction, options) {
    if (options === void 0) options = Object.create(null);
    var cache = new Cache1(options.max || Math.pow(2, 16), function(entry) {
        return entry.dispose();
    });
    var keyArgs = options.keyArgs;
    var makeCacheKey = options.makeCacheKey || makeDefaultMakeCacheKeyFunction();
    var optimistic = function() {
        var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);
        if (key === void 0) return originalFunction.apply(null, arguments);
        var entry = cache.get(key);
        if (!entry) {
            cache.set(key, entry = new Entry(originalFunction));
            entry.subscribe = options.subscribe;
            // Give the Entry the ability to trigger cache.delete(key), even though
            // the Entry itself does not know about key or cache.
            entry.forget = function() {
                return cache.delete(key);
            };
        }
        var value = entry.recompute(Array.prototype.slice.call(arguments));
        // Move this entry to the front of the least-recently used queue,
        // since we just finished computing its value.
        cache.set(key, entry);
        caches.add(cache);
        // Clean up any excess entries in the cache, but only if there is no
        // active parent entry, meaning we're not in the middle of a larger
        // computation that might be flummoxed by the cleaning.
        if (!parentEntrySlot.hasValue()) {
            caches.forEach(function(cache1) {
                return cache1.clean();
            });
            caches.clear();
        }
        return value;
    };
    Object.defineProperty(optimistic, "size", {
        get: function() {
            return cache["map"].size;
        },
        configurable: false,
        enumerable: false
    });
    function dirtyKey(key) {
        var entry = cache.get(key);
        if (entry) entry.setDirty();
    }
    optimistic.dirtyKey = dirtyKey;
    optimistic.dirty = function dirty() {
        dirtyKey(makeCacheKey.apply(null, arguments));
    };
    function peekKey(key) {
        var entry = cache.get(key);
        if (entry) return entry.peek();
    }
    optimistic.peekKey = peekKey;
    optimistic.peek = function peek() {
        return peekKey(makeCacheKey.apply(null, arguments));
    };
    function forgetKey(key) {
        return cache.delete(key);
    }
    optimistic.forgetKey = forgetKey;
    optimistic.forget = function forget() {
        return forgetKey(makeCacheKey.apply(null, arguments));
    };
    optimistic.makeCacheKey = makeCacheKey;
    optimistic.getKey = keyArgs ? function getKey() {
        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));
    } : makeCacheKey;
    return Object.freeze(optimistic);
}

},{"@wry/trie":"kxGp9","@wry/context":"6xhS2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kxGp9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Trie", ()=>Trie
);
// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds
// object keys weakly, yet can also hold non-object keys, unlike the
// native `WeakMap`.
// If no makeData function is supplied, the looked-up data will be an empty,
// null-prototype Object.
var defaultMakeData = function() {
    return Object.create(null);
};
// Useful for processing arguments objects as well as arrays.
var _a = Array.prototype, forEach = _a.forEach, slice = _a.slice;
var Trie = function() {
    function Trie1(weakness, makeData) {
        if (weakness === void 0) weakness = true;
        if (makeData === void 0) makeData = defaultMakeData;
        this.weakness = weakness;
        this.makeData = makeData;
    }
    Trie1.prototype.lookup = function() {
        var array = [];
        for(var _i = 0; _i < arguments.length; _i++)array[_i] = arguments[_i];
        return this.lookupArray(array);
    };
    Trie1.prototype.lookupArray = function(array) {
        var node = this;
        forEach.call(array, function(key) {
            return node = node.getChildTrie(key);
        });
        return node.data || (node.data = this.makeData(slice.call(array)));
    };
    Trie1.prototype.getChildTrie = function(key) {
        var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());
        var child = map.get(key);
        if (!child) map.set(key, child = new Trie1(this.weakness, this.makeData));
        return child;
    };
    return Trie1;
}();
function isObjRef(value) {
    switch(typeof value){
        case "object":
            if (value === null) break;
        // Fall through to return true...
        case "function":
            return true;
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6xhS2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Slot", ()=>Slot
);
parcelHelpers.export(exports, "asyncFromGen", ()=>asyncFromGen
);
parcelHelpers.export(exports, "bind", ()=>bind
);
parcelHelpers.export(exports, "noContext", ()=>noContext
);
parcelHelpers.export(exports, "setTimeout", ()=>setTimeoutWithContext
);
parcelHelpers.export(exports, "wrapYieldingFiberMethods", ()=>wrapYieldingFiberMethods
);
// This currentContext variable will only be used if the makeSlotClass
// function is called, which happens only if this is the first copy of the
// @wry/context package to be imported.
var currentContext = null;
// This unique internal object is used to denote the absence of a value
// for a given Slot, and is never exposed to outside code.
var MISSING_VALUE = {
};
var idCounter = 1;
// Although we can't do anything about the cost of duplicated code from
// accidentally bundling multiple copies of the @wry/context package, we can
// avoid creating the Slot class more than once using makeSlotClass.
var makeSlotClass = function() {
    return (function() {
        function Slot() {
            // If you have a Slot object, you can find out its slot.id, but you cannot
            // guess the slot.id of a Slot you don't have access to, thanks to the
            // randomized suffix.
            this.id = [
                "slot",
                idCounter++,
                Date.now(),
                Math.random().toString(36).slice(2), 
            ].join(":");
        }
        Slot.prototype.hasValue = function() {
            for(var context_1 = currentContext; context_1; context_1 = context_1.parent)// We use the Slot object iself as a key to its value, which means the
            // value cannot be obtained without a reference to the Slot object.
            if (this.id in context_1.slots) {
                var value = context_1.slots[this.id];
                if (value === MISSING_VALUE) break;
                if (context_1 !== currentContext) // Cache the value in currentContext.slots so the next lookup will
                // be faster. This caching is safe because the tree of contexts and
                // the values of the slots are logically immutable.
                currentContext.slots[this.id] = value;
                return true;
            }
            if (currentContext) // If a value was not found for this Slot, it's never going to be found
            // no matter how many times we look it up, so we might as well cache
            // the absence of the value, too.
            currentContext.slots[this.id] = MISSING_VALUE;
            return false;
        };
        Slot.prototype.getValue = function() {
            if (this.hasValue()) return currentContext.slots[this.id];
        };
        Slot.prototype.withValue = function(value, callback, // Given the prevalence of arrow functions, specifying arguments is likely
        // to be much more common than specifying `this`, hence this ordering:
        args, thisArg) {
            var _a;
            var slots = (_a = {
                __proto__: null
            }, _a[this.id] = value, _a);
            var parent = currentContext;
            currentContext = {
                parent: parent,
                slots: slots
            };
            try {
                // Function.prototype.apply allows the arguments array argument to be
                // omitted or undefined, so args! is fine here.
                return callback.apply(thisArg, args);
            } finally{
                currentContext = parent;
            }
        };
        // Capture the current context and wrap a callback function so that it
        // reestablishes the captured context when called.
        Slot.bind = function(callback) {
            var context = currentContext;
            return function() {
                var saved = currentContext;
                try {
                    currentContext = context;
                    return callback.apply(this, arguments);
                } finally{
                    currentContext = saved;
                }
            };
        };
        // Immediately run a callback function without any captured context.
        Slot.noContext = function(callback, // Given the prevalence of arrow functions, specifying arguments is likely
        // to be much more common than specifying `this`, hence this ordering:
        args, thisArg) {
            if (currentContext) {
                var saved = currentContext;
                try {
                    currentContext = null;
                    // Function.prototype.apply allows the arguments array argument to be
                    // omitted or undefined, so args! is fine here.
                    return callback.apply(thisArg, args);
                } finally{
                    currentContext = saved;
                }
            } else return callback.apply(thisArg, args);
        };
        return Slot;
    })();
};
// We store a single global implementation of the Slot class as a permanent
// non-enumerable symbol property of the Array constructor. This obfuscation
// does nothing to prevent access to the Slot class, but at least it ensures
// the implementation (i.e. currentContext) cannot be tampered with, and all
// copies of the @wry/context package (hopefully just one) will share the
// same Slot implementation. Since the first copy of the @wry/context package
// to be imported wins, this technique imposes a very high cost for any
// future breaking changes to the Slot class.
var globalKey = "@wry/context:Slot";
var host = Array;
var Slot = host[globalKey] || function() {
    var Slot1 = makeSlotClass();
    try {
        Object.defineProperty(host, globalKey, {
            value: host[globalKey] = Slot1,
            enumerable: false,
            writable: false,
            configurable: false
        });
    } finally{
        return Slot1;
    }
}();
var bind = Slot.bind, noContext = Slot.noContext;
function setTimeoutWithContext(callback, delay) {
    return setTimeout(bind(callback), delay);
}
// Turn any generator function into an async function (using yield instead
// of await), with context automatically preserved across yields.
function asyncFromGen(genFn) {
    return function() {
        var gen = genFn.apply(this, arguments);
        var boundNext = bind(gen.next);
        var boundThrow = bind(gen.throw);
        return new Promise(function(resolve, reject) {
            function invoke(method, argument) {
                try {
                    var result = method.call(gen, argument);
                } catch (error) {
                    return reject(error);
                }
                var next = result.done ? resolve : invokeNext;
                if (isPromiseLike(result.value)) result.value.then(next, result.done ? reject : invokeThrow);
                else next(result.value);
            }
            var invokeNext = function(value) {
                return invoke(boundNext, value);
            };
            var invokeThrow = function(error) {
                return invoke(boundThrow, error);
            };
            invokeNext();
        });
    };
}
function isPromiseLike(value) {
    return value && typeof value.then === "function";
}
// If you use the fibers npm package to implement coroutines in Node.js,
// you should call this function at least once to ensure context management
// remains coherent across any yields.
var wrappedFibers = [];
function wrapYieldingFiberMethods(Fiber) {
    // There can be only one implementation of Fiber per process, so this array
    // should never grow longer than one element.
    if (wrappedFibers.indexOf(Fiber) < 0) {
        var wrap = function(obj, method) {
            var fn = obj[method];
            obj[method] = function() {
                return noContext(fn, arguments, this);
            };
        };
        // These methods can yield, according to
        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100
        wrap(Fiber, "yield");
        wrap(Fiber.prototype, "run");
        wrap(Fiber.prototype, "throwInto");
        wrappedFibers.push(Fiber);
    }
    return Fiber;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"11I53":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cache", ()=>Cache1
);
var Cache1;
Cache1 = {
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8Ncku":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MissingFieldError", ()=>MissingFieldError1
);
var _tslib = require("tslib");
var MissingFieldError1 = function(_super) {
    _tslib.__extends(MissingFieldError2, _super);
    function MissingFieldError2(message, path, query, variables) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.path = path;
        _this.query = query;
        _this.variables = variables;
        _this.__proto__ = MissingFieldError2.prototype;
        return _this;
    }
    return MissingFieldError2;
}(Error);

},{"tslib":"bjkXk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6Sllg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EntityStore", ()=>EntityStore
);
parcelHelpers.export(exports, "maybeDependOnExistenceOfEntity", ()=>maybeDependOnExistenceOfEntity
);
parcelHelpers.export(exports, "supportsResultCaching", ()=>supportsResultCaching
);
var _tslib = require("tslib");
var _optimism = require("optimism");
var _tsInvariant = require("ts-invariant");
var _equality = require("@wry/equality");
var _trie = require("@wry/trie");
var _indexJs = require("../../utilities/index.js");
var _helpersJs = require("./helpers.js");
var DELETE = Object.create(null);
var delModifier = function() {
    return DELETE;
};
var INVALIDATE = Object.create(null);
var EntityStore = function() {
    function EntityStore1(policies, group) {
        var _this = this;
        this.policies = policies;
        this.group = group;
        this.data = Object.create(null);
        this.rootIds = Object.create(null);
        this.refs = Object.create(null);
        this.getFieldValue = function(objectOrReference, storeFieldName) {
            return _indexJs.maybeDeepFreeze(_indexJs.isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);
        };
        this.canRead = function(objOrRef) {
            return _indexJs.isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === "object";
        };
        this.toReference = function(objOrIdOrRef, mergeIntoStore) {
            if (typeof objOrIdOrRef === "string") return _indexJs.makeReference(objOrIdOrRef);
            if (_indexJs.isReference(objOrIdOrRef)) return objOrIdOrRef;
            var id = _this.policies.identify(objOrIdOrRef)[0];
            if (id) {
                var ref = _indexJs.makeReference(id);
                if (mergeIntoStore) _this.merge(id, objOrIdOrRef);
                return ref;
            }
        };
    }
    EntityStore1.prototype.toObject = function() {
        return _tslib.__assign({
        }, this.data);
    };
    EntityStore1.prototype.has = function(dataId) {
        return this.lookup(dataId, true) !== void 0;
    };
    EntityStore1.prototype.get = function(dataId, fieldName) {
        this.group.depend(dataId, fieldName);
        if (_helpersJs.hasOwn.call(this.data, dataId)) {
            var storeObject = this.data[dataId];
            if (storeObject && _helpersJs.hasOwn.call(storeObject, fieldName)) return storeObject[fieldName];
        }
        if (fieldName === "__typename" && _helpersJs.hasOwn.call(this.policies.rootTypenamesById, dataId)) return this.policies.rootTypenamesById[dataId];
        if (this instanceof Layer1) return this.parent.get(dataId, fieldName);
    };
    EntityStore1.prototype.lookup = function(dataId, dependOnExistence) {
        if (dependOnExistence) this.group.depend(dataId, "__exists");
        if (_helpersJs.hasOwn.call(this.data, dataId)) return this.data[dataId];
        if (this instanceof Layer1) return this.parent.lookup(dataId, dependOnExistence);
        if (this.policies.rootTypenamesById[dataId]) return Object.create(null);
    };
    EntityStore1.prototype.merge = function(older, newer) {
        var _this = this;
        var dataId;
        if (_indexJs.isReference(older)) older = older.__ref;
        if (_indexJs.isReference(newer)) newer = newer.__ref;
        var existing = typeof older === "string" ? this.lookup(dataId = older) : older;
        var incoming = typeof newer === "string" ? this.lookup(dataId = newer) : newer;
        if (!incoming) return;
        __DEV__ ? _tsInvariant.invariant(typeof dataId === "string", "store.merge expects a string ID") : _tsInvariant.invariant(typeof dataId === "string", 2);
        var merged = new _indexJs.DeepMerger(storeObjectReconciler).merge(existing, incoming);
        this.data[dataId] = merged;
        if (merged !== existing) {
            delete this.refs[dataId];
            if (this.group.caching) {
                var fieldsToDirty_1 = Object.create(null);
                if (!existing) fieldsToDirty_1.__exists = 1;
                Object.keys(incoming).forEach(function(storeFieldName) {
                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {
                        fieldsToDirty_1[storeFieldName] = 1;
                        var fieldName = _helpersJs.fieldNameFromStoreName(storeFieldName);
                        if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) fieldsToDirty_1[fieldName] = 1;
                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer1)) delete merged[storeFieldName];
                    }
                });
                if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) delete fieldsToDirty_1.__typename;
                Object.keys(fieldsToDirty_1).forEach(function(fieldName) {
                    return _this.group.dirty(dataId, fieldName);
                });
            }
        }
    };
    EntityStore1.prototype.modify = function(dataId, fields) {
        var _this = this;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var changedFields_1 = Object.create(null);
            var needToMerge_1 = false;
            var allDeleted_1 = true;
            var sharedDetails_1 = {
                DELETE: DELETE,
                INVALIDATE: INVALIDATE,
                isReference: _indexJs.isReference,
                toReference: this.toReference,
                canRead: this.canRead,
                readField: function(fieldNameOrOptions, from) {
                    return _this.policies.readField(typeof fieldNameOrOptions === "string" ? {
                        fieldName: fieldNameOrOptions,
                        from: from || _indexJs.makeReference(dataId)
                    } : fieldNameOrOptions, {
                        store: _this
                    });
                }
            };
            Object.keys(storeObject).forEach(function(storeFieldName) {
                var fieldName = _helpersJs.fieldNameFromStoreName(storeFieldName);
                var fieldValue = storeObject[storeFieldName];
                if (fieldValue === void 0) return;
                var modify = typeof fields === "function" ? fields : fields[storeFieldName] || fields[fieldName];
                if (modify) {
                    var newValue = modify === delModifier ? DELETE : modify(_indexJs.maybeDeepFreeze(fieldValue), _tslib.__assign(_tslib.__assign({
                    }, sharedDetails_1), {
                        fieldName: fieldName,
                        storeFieldName: storeFieldName,
                        storage: _this.getStorage(dataId, storeFieldName)
                    }));
                    if (newValue === INVALIDATE) _this.group.dirty(dataId, storeFieldName);
                    else {
                        if (newValue === DELETE) newValue = void 0;
                        if (newValue !== fieldValue) {
                            changedFields_1[storeFieldName] = newValue;
                            needToMerge_1 = true;
                            fieldValue = newValue;
                        }
                    }
                }
                if (fieldValue !== void 0) allDeleted_1 = false;
            });
            if (needToMerge_1) {
                this.merge(dataId, changedFields_1);
                if (allDeleted_1) {
                    if (this instanceof Layer1) this.data[dataId] = void 0;
                    else delete this.data[dataId];
                    this.group.dirty(dataId, "__exists");
                }
                return true;
            }
        }
        return false;
    };
    EntityStore1.prototype.delete = function(dataId, fieldName, args) {
        var _a;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var typename = this.getFieldValue(storeObject, "__typename");
            var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({
                typename: typename,
                fieldName: fieldName,
                args: args
            }) : fieldName;
            return this.modify(dataId, storeFieldName ? (_a = {
            }, _a[storeFieldName] = delModifier, _a) : delModifier);
        }
        return false;
    };
    EntityStore1.prototype.evict = function(options) {
        var evicted = false;
        if (options.id) {
            if (_helpersJs.hasOwn.call(this.data, options.id)) evicted = this.delete(options.id, options.fieldName, options.args);
            if (this instanceof Layer1) evicted = this.parent.evict(options) || evicted;
            if (options.fieldName || evicted) this.group.dirty(options.id, options.fieldName || "__exists");
        }
        return evicted;
    };
    EntityStore1.prototype.clear = function() {
        this.replace(null);
    };
    EntityStore1.prototype.extract = function() {
        var _this = this;
        var obj = this.toObject();
        var extraRootIds = [];
        this.getRootIdSet().forEach(function(id) {
            if (!_helpersJs.hasOwn.call(_this.policies.rootTypenamesById, id)) extraRootIds.push(id);
        });
        if (extraRootIds.length) obj.__META = {
            extraRootIds: extraRootIds.sort()
        };
        return obj;
    };
    EntityStore1.prototype.replace = function(newData) {
        var _this = this;
        Object.keys(this.data).forEach(function(dataId) {
            if (!(newData && _helpersJs.hasOwn.call(newData, dataId))) _this.delete(dataId);
        });
        if (newData) {
            var __META = newData.__META, rest_1 = _tslib.__rest(newData, [
                "__META"
            ]);
            Object.keys(rest_1).forEach(function(dataId) {
                _this.merge(dataId, rest_1[dataId]);
            });
            if (__META) __META.extraRootIds.forEach(this.retain, this);
        }
    };
    EntityStore1.prototype.retain = function(rootId) {
        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;
    };
    EntityStore1.prototype.release = function(rootId) {
        if (this.rootIds[rootId] > 0) {
            var count = --this.rootIds[rootId];
            if (!count) delete this.rootIds[rootId];
            return count;
        }
        return 0;
    };
    EntityStore1.prototype.getRootIdSet = function(ids) {
        if (ids === void 0) ids = new Set();
        Object.keys(this.rootIds).forEach(ids.add, ids);
        if (this instanceof Layer1) this.parent.getRootIdSet(ids);
        else Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);
        return ids;
    };
    EntityStore1.prototype.gc = function() {
        var _this = this;
        var ids = this.getRootIdSet();
        var snapshot = this.toObject();
        ids.forEach(function(id) {
            if (_helpersJs.hasOwn.call(snapshot, id)) {
                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
                delete snapshot[id];
            }
        });
        var idsToRemove = Object.keys(snapshot);
        if (idsToRemove.length) {
            var root_1 = this;
            while(root_1 instanceof Layer1)root_1 = root_1.parent;
            idsToRemove.forEach(function(id) {
                return root_1.delete(id);
            });
        }
        return idsToRemove;
    };
    EntityStore1.prototype.findChildRefIds = function(dataId) {
        if (!_helpersJs.hasOwn.call(this.refs, dataId)) {
            var found_1 = this.refs[dataId] = Object.create(null);
            var root = this.data[dataId];
            if (!root) return found_1;
            var workSet_1 = new Set([
                root
            ]);
            workSet_1.forEach(function(obj) {
                if (_indexJs.isReference(obj)) found_1[obj.__ref] = true;
                if (_indexJs.isNonNullObject(obj)) Object.keys(obj).forEach(function(key) {
                    var child = obj[key];
                    if (_indexJs.isNonNullObject(child)) workSet_1.add(child);
                });
            });
        }
        return this.refs[dataId];
    };
    EntityStore1.prototype.makeCacheKey = function() {
        return this.group.keyMaker.lookupArray(arguments);
    };
    return EntityStore1;
}();
var CacheGroup = function() {
    function CacheGroup1(caching, parent) {
        if (parent === void 0) parent = null;
        this.caching = caching;
        this.parent = parent;
        this.d = null;
        this.resetCaching();
    }
    CacheGroup1.prototype.resetCaching = function() {
        this.d = this.caching ? _optimism.dep() : null;
        this.keyMaker = new _trie.Trie(_indexJs.canUseWeakMap);
    };
    CacheGroup1.prototype.depend = function(dataId, storeFieldName) {
        if (this.d) {
            this.d(makeDepKey(dataId, storeFieldName));
            var fieldName = _helpersJs.fieldNameFromStoreName(storeFieldName);
            if (fieldName !== storeFieldName) this.d(makeDepKey(dataId, fieldName));
            if (this.parent) this.parent.depend(dataId, storeFieldName);
        }
    };
    CacheGroup1.prototype.dirty = function(dataId, storeFieldName) {
        if (this.d) this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === "__exists" ? "forget" : "setDirty");
    };
    return CacheGroup1;
}();
function makeDepKey(dataId, storeFieldName) {
    return storeFieldName + '#' + dataId;
}
function maybeDependOnExistenceOfEntity(store, entityId) {
    if (supportsResultCaching(store)) store.group.depend(entityId, "__exists");
}
(function(EntityStore1) {
    var Root1 = function(_super) {
        _tslib.__extends(Root2, _super);
        function Root2(_a) {
            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;
            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;
            _this.stump = new Stump1(_this);
            _this.storageTrie = new _trie.Trie(_indexJs.canUseWeakMap);
            if (seed) _this.replace(seed);
            return _this;
        }
        Root2.prototype.addLayer = function(layerId, replay) {
            return this.stump.addLayer(layerId, replay);
        };
        Root2.prototype.removeLayer = function() {
            return this;
        };
        Root2.prototype.getStorage = function() {
            return this.storageTrie.lookupArray(arguments);
        };
        return Root2;
    }(EntityStore1);
    EntityStore1.Root = Root1;
})(EntityStore || (EntityStore = {
}));
var Layer1 = function(_super) {
    _tslib.__extends(Layer2, _super);
    function Layer2(id, parent, replay, group) {
        var _this = _super.call(this, parent.policies, group) || this;
        _this.id = id;
        _this.parent = parent;
        _this.replay = replay;
        _this.group = group;
        replay(_this);
        return _this;
    }
    Layer2.prototype.addLayer = function(layerId, replay) {
        return new Layer2(layerId, this, replay, this.group);
    };
    Layer2.prototype.removeLayer = function(layerId) {
        var _this = this;
        var parent = this.parent.removeLayer(layerId);
        if (layerId === this.id) {
            if (this.group.caching) Object.keys(this.data).forEach(function(dataId) {
                var ownStoreObject = _this.data[dataId];
                var parentStoreObject = parent["lookup"](dataId);
                if (!parentStoreObject) _this.delete(dataId);
                else if (!ownStoreObject) {
                    _this.group.dirty(dataId, "__exists");
                    Object.keys(parentStoreObject).forEach(function(storeFieldName) {
                        _this.group.dirty(dataId, storeFieldName);
                    });
                } else if (ownStoreObject !== parentStoreObject) Object.keys(ownStoreObject).forEach(function(storeFieldName) {
                    if (!_equality.equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) _this.group.dirty(dataId, storeFieldName);
                });
            });
            return parent;
        }
        if (parent === this.parent) return this;
        return parent.addLayer(this.id, this.replay);
    };
    Layer2.prototype.toObject = function() {
        return _tslib.__assign(_tslib.__assign({
        }, this.parent.toObject()), this.data);
    };
    Layer2.prototype.findChildRefIds = function(dataId) {
        var fromParent = this.parent.findChildRefIds(dataId);
        return _helpersJs.hasOwn.call(this.data, dataId) ? _tslib.__assign(_tslib.__assign({
        }, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
    };
    Layer2.prototype.getStorage = function() {
        var p = this.parent;
        while(p.parent)p = p.parent;
        return p.getStorage.apply(p, arguments);
    };
    return Layer2;
}(EntityStore);
var Stump1 = function(_super) {
    _tslib.__extends(Stump2, _super);
    function Stump2(root) {
        return _super.call(this, "EntityStore.Stump", root, function() {
        }, new CacheGroup(root.group.caching, root.group)) || this;
    }
    Stump2.prototype.removeLayer = function() {
        return this;
    };
    Stump2.prototype.merge = function() {
        return this.parent.merge.apply(this.parent, arguments);
    };
    return Stump2;
}(Layer1);
function storeObjectReconciler(existingObject, incomingObject, property) {
    var existingValue = existingObject[property];
    var incomingValue = incomingObject[property];
    return _equality.equal(existingValue, incomingValue) ? existingValue : incomingValue;
}
function supportsResultCaching(store) {
    return !!(store instanceof EntityStore && store.group.caching);
}

},{"tslib":"bjkXk","optimism":"bZJ6P","ts-invariant":"eFYq1","@wry/equality":"i9esi","@wry/trie":"kxGp9","../../utilities/index.js":"fhAGU","./helpers.js":"hXLZd","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hXLZd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn
);
parcelHelpers.export(exports, "getTypenameFromStoreObject", ()=>getTypenameFromStoreObject
);
parcelHelpers.export(exports, "TypeOrFieldNameRegExp", ()=>TypeOrFieldNameRegExp
);
parcelHelpers.export(exports, "fieldNameFromStoreName", ()=>fieldNameFromStoreName
);
parcelHelpers.export(exports, "selectionSetMatchesResult", ()=>selectionSetMatchesResult
);
parcelHelpers.export(exports, "storeValueIsStoreObject", ()=>storeValueIsStoreObject
);
parcelHelpers.export(exports, "makeProcessedFieldsMerger", ()=>makeProcessedFieldsMerger
);
var _indexJs = require("../../utilities/index.js");
var hasOwn = Object.prototype.hasOwnProperty;
function getTypenameFromStoreObject(store, objectOrReference) {
    return _indexJs.isReference(objectOrReference) ? store.get(objectOrReference.__ref, "__typename") : objectOrReference && objectOrReference.__typename;
}
var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
function fieldNameFromStoreName(storeFieldName) {
    var match = storeFieldName.match(TypeOrFieldNameRegExp);
    return match ? match[0] : storeFieldName;
}
function selectionSetMatchesResult(selectionSet, result, variables) {
    if (_indexJs.isNonNullObject(result)) return Array.isArray(result) ? result.every(function(item) {
        return selectionSetMatchesResult(selectionSet, item, variables);
    }) : selectionSet.selections.every(function(field) {
        if (_indexJs.isField(field) && _indexJs.shouldInclude(field, variables)) {
            var key = _indexJs.resultKeyNameFromField(field);
            return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));
        }
        return true;
    });
    return false;
}
function storeValueIsStoreObject(value) {
    return _indexJs.isNonNullObject(value) && !_indexJs.isReference(value) && !Array.isArray(value);
}
function makeProcessedFieldsMerger() {
    return new _indexJs.DeepMerger;
}

},{"../../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"42Ddx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InMemoryCache", ()=>InMemoryCache1
);
var _tslib = require("tslib");
var _fixPolyfillsJs = require("./fixPolyfills.js");
var _optimism = require("optimism");
var _equality = require("@wry/equality");
var _cacheJs = require("../core/cache.js");
var _commonJs = require("../core/types/common.js");
var _indexJs = require("../../utilities/index.js");
var _readFromStoreJs = require("./readFromStore.js");
var _writeToStoreJs = require("./writeToStore.js");
var _entityStoreJs = require("./entityStore.js");
var _reactiveVarsJs = require("./reactiveVars.js");
var _policiesJs = require("./policies.js");
var _helpersJs = require("./helpers.js");
var _objectCanonJs = require("./object-canon.js");
var defaultConfig = {
    dataIdFromObject: _policiesJs.defaultDataIdFromObject,
    addTypename: true,
    resultCaching: true,
    typePolicies: {
    }
};
var InMemoryCache1 = function(_super) {
    _tslib.__extends(InMemoryCache2, _super);
    function InMemoryCache2(config) {
        if (config === void 0) config = {
        };
        var _this = _super.call(this) || this;
        _this.watches = new Set();
        _this.typenameDocumentCache = new Map();
        _this.makeVar = _reactiveVarsJs.makeVar;
        _this.txCount = 0;
        _this.config = _tslib.__assign(_tslib.__assign({
        }, defaultConfig), config);
        _this.addTypename = !!_this.config.addTypename;
        _this.policies = new _policiesJs.Policies({
            cache: _this,
            dataIdFromObject: _this.config.dataIdFromObject,
            possibleTypes: _this.config.possibleTypes,
            typePolicies: _this.config.typePolicies
        });
        _this.init();
        return _this;
    }
    InMemoryCache2.prototype.init = function() {
        var rootStore = this.data = new _entityStoreJs.EntityStore.Root({
            policies: this.policies,
            resultCaching: this.config.resultCaching
        });
        this.optimisticData = rootStore.stump;
        this.resetResultCache();
    };
    InMemoryCache2.prototype.resetResultCache = function(resetResultIdentities) {
        var _this = this;
        var previousReader = this.storeReader;
        this.storeWriter = new _writeToStoreJs.StoreWriter(this, this.storeReader = new _readFromStoreJs.StoreReader({
            cache: this,
            addTypename: this.addTypename,
            resultCacheMaxSize: this.config.resultCacheMaxSize,
            canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon
        }));
        this.maybeBroadcastWatch = _optimism.wrap(function(c, options) {
            return _this.broadcastWatch(c, options);
        }, {
            max: this.config.resultCacheMaxSize,
            makeCacheKey: function(c) {
                var store = c.optimistic ? _this.optimisticData : _this.data;
                if (_entityStoreJs.supportsResultCaching(store)) {
                    var optimistic = c.optimistic, rootId = c.rootId, variables = c.variables;
                    return store.makeCacheKey(c.query, c.callback, _objectCanonJs.canonicalStringify({
                        optimistic: optimistic,
                        rootId: rootId,
                        variables: variables
                    }));
                }
            }
        });
        new Set([
            this.data.group,
            this.optimisticData.group, 
        ]).forEach(function(group) {
            return group.resetCaching();
        });
    };
    InMemoryCache2.prototype.restore = function(data) {
        this.init();
        if (data) this.data.replace(data);
        return this;
    };
    InMemoryCache2.prototype.extract = function(optimistic) {
        if (optimistic === void 0) optimistic = false;
        return (optimistic ? this.optimisticData : this.data).extract();
    };
    InMemoryCache2.prototype.read = function(options) {
        var _a = options.returnPartialData, returnPartialData = _a === void 0 ? false : _a;
        try {
            return this.storeReader.diffQueryAgainstStore(_tslib.__assign(_tslib.__assign({
            }, options), {
                store: options.optimistic ? this.optimisticData : this.data,
                config: this.config,
                returnPartialData: returnPartialData
            })).result || null;
        } catch (e) {
            if (e instanceof _commonJs.MissingFieldError) return null;
            throw e;
        }
    };
    InMemoryCache2.prototype.write = function(options) {
        try {
            ++this.txCount;
            return this.storeWriter.writeToStore(this.data, options);
        } finally{
            if (!--this.txCount && options.broadcast !== false) this.broadcastWatches();
        }
    };
    InMemoryCache2.prototype.modify = function(options) {
        if (_helpersJs.hasOwn.call(options, "id") && !options.id) return false;
        var store = options.optimistic ? this.optimisticData : this.data;
        try {
            ++this.txCount;
            return store.modify(options.id || "ROOT_QUERY", options.fields);
        } finally{
            if (!--this.txCount && options.broadcast !== false) this.broadcastWatches();
        }
    };
    InMemoryCache2.prototype.diff = function(options) {
        return this.storeReader.diffQueryAgainstStore(_tslib.__assign(_tslib.__assign({
        }, options), {
            store: options.optimistic ? this.optimisticData : this.data,
            rootId: options.id || "ROOT_QUERY",
            config: this.config
        }));
    };
    InMemoryCache2.prototype.watch = function(watch) {
        var _this = this;
        if (!this.watches.size) _reactiveVarsJs.recallCache(this);
        this.watches.add(watch);
        if (watch.immediate) this.maybeBroadcastWatch(watch);
        return function() {
            if (_this.watches.delete(watch) && !_this.watches.size) _reactiveVarsJs.forgetCache(_this);
            _this.maybeBroadcastWatch.forget(watch);
        };
    };
    InMemoryCache2.prototype.gc = function(options) {
        _objectCanonJs.canonicalStringify.reset();
        var ids = this.optimisticData.gc();
        if (options && !this.txCount) {
            if (options.resetResultCache) this.resetResultCache(options.resetResultIdentities);
            else if (options.resetResultIdentities) this.storeReader.resetCanon();
        }
        return ids;
    };
    InMemoryCache2.prototype.retain = function(rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).retain(rootId);
    };
    InMemoryCache2.prototype.release = function(rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).release(rootId);
    };
    InMemoryCache2.prototype.identify = function(object) {
        return _indexJs.isReference(object) ? object.__ref : this.policies.identify(object)[0];
    };
    InMemoryCache2.prototype.evict = function(options) {
        if (!options.id) {
            if (_helpersJs.hasOwn.call(options, "id")) return false;
            options = _tslib.__assign(_tslib.__assign({
            }, options), {
                id: "ROOT_QUERY"
            });
        }
        try {
            ++this.txCount;
            return this.optimisticData.evict(options);
        } finally{
            if (!--this.txCount && options.broadcast !== false) this.broadcastWatches();
        }
    };
    InMemoryCache2.prototype.reset = function() {
        this.init();
        this.broadcastWatches();
        _objectCanonJs.canonicalStringify.reset();
        return Promise.resolve();
    };
    InMemoryCache2.prototype.removeOptimistic = function(idToRemove) {
        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);
        if (newOptimisticData !== this.optimisticData) {
            this.optimisticData = newOptimisticData;
            this.broadcastWatches();
        }
    };
    InMemoryCache2.prototype.batch = function(options) {
        var _this = this;
        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;
        var perform = function(layer) {
            var _a1 = _this, data = _a1.data, optimisticData = _a1.optimisticData;
            ++_this.txCount;
            if (layer) _this.data = _this.optimisticData = layer;
            try {
                update(_this);
            } finally{
                --_this.txCount;
                _this.data = data;
                _this.optimisticData = optimisticData;
            }
        };
        var alreadyDirty = new Set();
        if (onWatchUpdated && !this.txCount) this.broadcastWatches(_tslib.__assign(_tslib.__assign({
        }, options), {
            onWatchUpdated: function(watch) {
                alreadyDirty.add(watch);
                return false;
            }
        }));
        if (typeof optimistic === 'string') this.optimisticData = this.optimisticData.addLayer(optimistic, perform);
        else if (optimistic === false) perform(this.data);
        else perform();
        if (typeof removeOptimistic === "string") this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);
        if (onWatchUpdated && alreadyDirty.size) {
            this.broadcastWatches(_tslib.__assign(_tslib.__assign({
            }, options), {
                onWatchUpdated: function(watch, diff) {
                    var result = onWatchUpdated.call(this, watch, diff);
                    if (result !== false) alreadyDirty.delete(watch);
                    return result;
                }
            }));
            if (alreadyDirty.size) alreadyDirty.forEach(function(watch) {
                return _this.maybeBroadcastWatch.dirty(watch);
            });
        } else this.broadcastWatches(options);
    };
    InMemoryCache2.prototype.performTransaction = function(update, optimisticId) {
        return this.batch({
            update: update,
            optimistic: optimisticId || optimisticId !== null
        });
    };
    InMemoryCache2.prototype.transformDocument = function(document) {
        if (this.addTypename) {
            var result = this.typenameDocumentCache.get(document);
            if (!result) {
                result = _indexJs.addTypenameToDocument(document);
                this.typenameDocumentCache.set(document, result);
                this.typenameDocumentCache.set(result, result);
            }
            return result;
        }
        return document;
    };
    InMemoryCache2.prototype.broadcastWatches = function(options) {
        var _this = this;
        if (!this.txCount) this.watches.forEach(function(c) {
            return _this.maybeBroadcastWatch(c, options);
        });
    };
    InMemoryCache2.prototype.broadcastWatch = function(c, options) {
        var lastDiff = c.lastDiff;
        var diff = this.diff({
            query: c.query,
            variables: c.variables,
            optimistic: c.optimistic
        });
        if (options) {
            if (c.optimistic && typeof options.optimistic === "string") diff.fromOptimisticTransaction = true;
            if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) return;
        }
        if (!lastDiff || !_equality.equal(lastDiff.result, diff.result)) c.callback(c.lastDiff = diff, lastDiff);
    };
    return InMemoryCache2;
}(_cacheJs.ApolloCache);

},{"tslib":"bjkXk","./fixPolyfills.js":"5z6Zo","optimism":"bZJ6P","@wry/equality":"i9esi","../core/cache.js":"8Gwz3","../core/types/common.js":"8Ncku","../../utilities/index.js":"fhAGU","./readFromStore.js":"2ExQW","./writeToStore.js":"3kX9s","./entityStore.js":"6Sllg","./reactiveVars.js":"3Dkw9","./policies.js":"8QdmI","./helpers.js":"hXLZd","./object-canon.js":"cy4ps","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5z6Zo":[function(require,module,exports) {

},{}],"2ExQW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StoreReader", ()=>StoreReader
);
var _tslib = require("tslib");
var _optimism = require("optimism");
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../../utilities/index.js");
var _entityStoreJs = require("./entityStore.js");
var _helpersJs = require("./helpers.js");
var _commonJs = require("../core/types/common.js");
var _objectCanonJs = require("./object-canon.js");
function missingFromInvariant(err, context) {
    return new _commonJs.MissingFieldError(err.message, context.path.slice(), context.query, context.variables);
}
function execSelectionSetKeyArgs(options) {
    return [
        options.selectionSet,
        options.objectOrReference,
        options.context,
        options.context.canonizeResults, 
    ];
}
var StoreReader = function() {
    function StoreReader1(config) {
        var _this = this;
        this.knownResults = new (_indexJs.canUseWeakMap ? WeakMap : Map)();
        this.config = _tslib.__assign(_tslib.__assign({
        }, config), {
            addTypename: config.addTypename !== false
        });
        this.canon = config.canon || new _objectCanonJs.ObjectCanon;
        this.executeSelectionSet = _optimism.wrap(function(options) {
            var _a;
            var canonizeResults = options.context.canonizeResults;
            var peekArgs = execSelectionSetKeyArgs(options);
            peekArgs[3] = !canonizeResults;
            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);
            if (other) {
                if (canonizeResults) return _tslib.__assign(_tslib.__assign({
                }, other), {
                    result: _this.canon.admit(other.result)
                });
                return other;
            }
            _entityStoreJs.maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);
            return _this.execSelectionSetImpl(options);
        }, {
            max: this.config.resultCacheMaxSize,
            keyArgs: execSelectionSetKeyArgs,
            makeCacheKey: function(selectionSet, parent, context, canonizeResults) {
                if (_entityStoreJs.supportsResultCaching(context.store)) return context.store.makeCacheKey(selectionSet, _indexJs.isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);
            }
        });
        this.executeSubSelectedArray = _optimism.wrap(function(options) {
            _entityStoreJs.maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);
            return _this.execSubSelectedArrayImpl(options);
        }, {
            max: this.config.resultCacheMaxSize,
            makeCacheKey: function(_a) {
                var field = _a.field, array = _a.array, context = _a.context;
                if (_entityStoreJs.supportsResultCaching(context.store)) return context.store.makeCacheKey(field, array, context.varString);
            }
        });
    }
    StoreReader1.prototype.resetCanon = function() {
        this.canon = new _objectCanonJs.ObjectCanon;
    };
    StoreReader1.prototype.diffQueryAgainstStore = function(_a) {
        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? 'ROOT_QUERY' : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? true : _d;
        var policies = this.config.cache.policies;
        variables = _tslib.__assign(_tslib.__assign({
        }, _indexJs.getDefaultValues(_indexJs.getQueryDefinition(query))), variables);
        var rootRef = _indexJs.makeReference(rootId);
        var execResult = this.executeSelectionSet({
            selectionSet: _indexJs.getMainDefinition(query).selectionSet,
            objectOrReference: rootRef,
            enclosingRef: rootRef,
            context: {
                store: store,
                query: query,
                policies: policies,
                variables: variables,
                varString: _objectCanonJs.canonicalStringify(variables),
                canonizeResults: canonizeResults,
                fragmentMap: _indexJs.createFragmentMap(_indexJs.getFragmentDefinitions(query)),
                path: []
            }
        });
        var hasMissingFields = execResult.missing && execResult.missing.length > 0;
        if (hasMissingFields && !returnPartialData) throw execResult.missing[0];
        return {
            result: execResult.result,
            missing: execResult.missing,
            complete: !hasMissingFields
        };
    };
    StoreReader1.prototype.isFresh = function(result, parent, selectionSet, context) {
        if (_entityStoreJs.supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {
            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));
            if (latest && result === latest.result) return true;
        }
        return false;
    };
    StoreReader1.prototype.execSelectionSetImpl = function(_a) {
        var _this = this;
        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;
        if (_indexJs.isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) return {
            result: this.canon.empty,
            missing: [
                missingFromInvariant(__DEV__ ? new _tsInvariant.InvariantError("Dangling reference to missing " + objectOrReference.__ref + " object") : new _tsInvariant.InvariantError(6), context)
            ]
        };
        var variables = context.variables, policies = context.policies, store = context.store;
        var objectsToMerge = [];
        var finalResult = {
            result: null
        };
        var typename = store.getFieldValue(objectOrReference, "__typename");
        if (this.config.addTypename && typeof typename === "string" && !policies.rootIdsByTypename[typename]) objectsToMerge.push({
            __typename: typename
        });
        function getMissing() {
            return finalResult.missing || (finalResult.missing = []);
        }
        function handleMissing(result) {
            var _a1;
            if (result.missing) (_a1 = getMissing()).push.apply(_a1, result.missing);
            return result.result;
        }
        var workSet = new Set(selectionSet.selections);
        workSet.forEach(function(selection) {
            var _a1;
            if (!_indexJs.shouldInclude(selection, variables)) return;
            if (_indexJs.isField(selection)) {
                var fieldValue = policies.readField({
                    fieldName: selection.name.value,
                    field: selection,
                    variables: context.variables,
                    from: objectOrReference
                }, context);
                var resultName = _indexJs.resultKeyNameFromField(selection);
                context.path.push(resultName);
                if (fieldValue === void 0) {
                    if (!_indexJs.addTypenameToDocument.added(selection)) getMissing().push(missingFromInvariant(__DEV__ ? new _tsInvariant.InvariantError("Can't find field '" + selection.name.value + "' on " + (_indexJs.isReference(objectOrReference) ? objectOrReference.__ref + " object" : "object " + JSON.stringify(objectOrReference, null, 2))) : new _tsInvariant.InvariantError(7), context));
                } else if (Array.isArray(fieldValue)) fieldValue = handleMissing(_this.executeSubSelectedArray({
                    field: selection,
                    array: fieldValue,
                    enclosingRef: enclosingRef,
                    context: context
                }));
                else if (!selection.selectionSet) {
                    if (context.canonizeResults) fieldValue = _this.canon.pass(fieldValue);
                } else if (fieldValue != null) fieldValue = handleMissing(_this.executeSelectionSet({
                    selectionSet: selection.selectionSet,
                    objectOrReference: fieldValue,
                    enclosingRef: _indexJs.isReference(fieldValue) ? fieldValue : enclosingRef,
                    context: context
                }));
                if (fieldValue !== void 0) objectsToMerge.push((_a1 = {
                }, _a1[resultName] = fieldValue, _a1));
                _tsInvariant.invariant(context.path.pop() === resultName);
            } else {
                var fragment = _indexJs.getFragmentFromSelection(selection, context.fragmentMap);
                if (fragment && policies.fragmentMatches(fragment, typename)) fragment.selectionSet.selections.forEach(workSet.add, workSet);
            }
        });
        var merged = _indexJs.mergeDeepArray(objectsToMerge);
        finalResult.result = context.canonizeResults ? this.canon.admit(merged) : _indexJs.maybeDeepFreeze(merged);
        this.knownResults.set(finalResult.result, selectionSet);
        return finalResult;
    };
    StoreReader1.prototype.execSubSelectedArrayImpl = function(_a) {
        var _this = this;
        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;
        var missing;
        function handleMissing(childResult, i) {
            if (childResult.missing) {
                missing = missing || [];
                missing.push.apply(missing, childResult.missing);
            }
            _tsInvariant.invariant(context.path.pop() === i);
            return childResult.result;
        }
        if (field.selectionSet) array = array.filter(context.store.canRead);
        array = array.map(function(item, i) {
            if (item === null) return null;
            context.path.push(i);
            if (Array.isArray(item)) return handleMissing(_this.executeSubSelectedArray({
                field: field,
                array: item,
                enclosingRef: enclosingRef,
                context: context
            }), i);
            if (field.selectionSet) return handleMissing(_this.executeSelectionSet({
                selectionSet: field.selectionSet,
                objectOrReference: item,
                enclosingRef: _indexJs.isReference(item) ? item : enclosingRef,
                context: context
            }), i);
            if (__DEV__) assertSelectionSetForIdValue(context.store, field, item);
            _tsInvariant.invariant(context.path.pop() === i);
            return item;
        });
        return {
            result: context.canonizeResults ? this.canon.admit(array) : array,
            missing: missing
        };
    };
    return StoreReader1;
}();
function assertSelectionSetForIdValue(store, field, fieldValue) {
    if (!field.selectionSet) {
        var workSet_1 = new Set([
            fieldValue
        ]);
        workSet_1.forEach(function(value) {
            if (_indexJs.isNonNullObject(value)) {
                __DEV__ ? _tsInvariant.invariant(!_indexJs.isReference(value), "Missing selection set for object of type " + _helpersJs.getTypenameFromStoreObject(store, value) + " returned for query field " + field.name.value) : _tsInvariant.invariant(!_indexJs.isReference(value), 8);
                Object.values(value).forEach(workSet_1.add, workSet_1);
            }
        });
    }
}

},{"tslib":"bjkXk","optimism":"bZJ6P","ts-invariant":"eFYq1","../../utilities/index.js":"fhAGU","./entityStore.js":"6Sllg","./helpers.js":"hXLZd","../core/types/common.js":"8Ncku","./object-canon.js":"cy4ps","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cy4ps":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectCanon", ()=>ObjectCanon
);
parcelHelpers.export(exports, "canonicalStringify", ()=>canonicalStringify
);
var _tslib = require("tslib");
var _trie = require("@wry/trie");
var _indexJs = require("../../utilities/index.js");
function shallowCopy(value) {
    if (_indexJs.isNonNullObject(value)) return Array.isArray(value) ? value.slice(0) : _tslib.__assign({
        __proto__: Object.getPrototypeOf(value)
    }, value);
    return value;
}
var ObjectCanon = function() {
    function ObjectCanon1() {
        this.known = new (_indexJs.canUseWeakSet ? WeakSet : Set)();
        this.pool = new _trie.Trie(_indexJs.canUseWeakMap);
        this.passes = new WeakMap();
        this.keysByJSON = new Map();
        this.empty = this.admit({
        });
    }
    ObjectCanon1.prototype.isKnown = function(value) {
        return _indexJs.isNonNullObject(value) && this.known.has(value);
    };
    ObjectCanon1.prototype.pass = function(value) {
        if (_indexJs.isNonNullObject(value)) {
            var copy = shallowCopy(value);
            this.passes.set(copy, value);
            return copy;
        }
        return value;
    };
    ObjectCanon1.prototype.admit = function(value) {
        var _this = this;
        if (_indexJs.isNonNullObject(value)) {
            var original = this.passes.get(value);
            if (original) return original;
            var proto = Object.getPrototypeOf(value);
            switch(proto){
                case Array.prototype:
                    if (this.known.has(value)) return value;
                    var array = value.map(this.admit, this);
                    var node = this.pool.lookupArray(array);
                    if (!node.array) {
                        this.known.add(node.array = array);
                        if (__DEV__) Object.freeze(array);
                    }
                    return node.array;
                case null:
                case Object.prototype:
                    if (this.known.has(value)) return value;
                    var proto_1 = Object.getPrototypeOf(value);
                    var array_1 = [
                        proto_1
                    ];
                    var keys = this.sortedKeys(value);
                    array_1.push(keys.json);
                    var firstValueIndex_1 = array_1.length;
                    keys.sorted.forEach(function(key) {
                        array_1.push(_this.admit(value[key]));
                    });
                    var node = this.pool.lookupArray(array_1);
                    if (!node.object) {
                        var obj_1 = node.object = Object.create(proto_1);
                        this.known.add(obj_1);
                        keys.sorted.forEach(function(key, i) {
                            obj_1[key] = array_1[firstValueIndex_1 + i];
                        });
                        if (__DEV__) Object.freeze(obj_1);
                    }
                    return node.object;
            }
        }
        return value;
    };
    ObjectCanon1.prototype.sortedKeys = function(obj) {
        var keys = Object.keys(obj);
        var node = this.pool.lookupArray(keys);
        if (!node.keys) {
            keys.sort();
            var json = JSON.stringify(keys);
            if (!(node.keys = this.keysByJSON.get(json))) this.keysByJSON.set(json, node.keys = {
                sorted: keys,
                json: json
            });
        }
        return node.keys;
    };
    return ObjectCanon1;
}();
var canonicalStringify = Object.assign(function(value) {
    if (_indexJs.isNonNullObject(value)) {
        if (stringifyCanon === void 0) resetCanonicalStringify();
        var canonical = stringifyCanon.admit(value);
        var json = stringifyCache.get(canonical);
        if (json === void 0) stringifyCache.set(canonical, json = JSON.stringify(canonical));
        return json;
    }
    return JSON.stringify(value);
}, {
    reset: resetCanonicalStringify
});
var stringifyCanon;
var stringifyCache;
function resetCanonicalStringify() {
    stringifyCanon = new ObjectCanon;
    stringifyCache = new (_indexJs.canUseWeakMap ? WeakMap : Map)();
}

},{"tslib":"bjkXk","@wry/trie":"kxGp9","../../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3kX9s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StoreWriter", ()=>StoreWriter
);
var _tslib = require("tslib");
var _tsInvariant = require("ts-invariant");
var _equality = require("@wry/equality");
var _indexJs = require("../../utilities/index.js");
var _helpersJs = require("./helpers.js");
var _objectCanonJs = require("./object-canon.js");
var StoreWriter = function() {
    function StoreWriter1(cache, reader) {
        this.cache = cache;
        this.reader = reader;
    }
    StoreWriter1.prototype.writeToStore = function(store, _a) {
        var _this = this;
        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;
        var operationDefinition = _indexJs.getOperationDefinition(query);
        var merger = _helpersJs.makeProcessedFieldsMerger();
        variables = _tslib.__assign(_tslib.__assign({
        }, _indexJs.getDefaultValues(operationDefinition)), variables);
        var context = {
            store: store,
            written: Object.create(null),
            merge: function(existing, incoming) {
                return merger.merge(existing, incoming);
            },
            variables: variables,
            varString: _objectCanonJs.canonicalStringify(variables),
            fragmentMap: _indexJs.createFragmentMap(_indexJs.getFragmentDefinitions(query)),
            overwrite: !!overwrite,
            incomingById: new Map,
            clientOnly: false
        };
        var ref = this.processSelectionSet({
            result: result || Object.create(null),
            dataId: dataId,
            selectionSet: operationDefinition.selectionSet,
            mergeTree: {
                map: new Map
            },
            context: context
        });
        if (!_indexJs.isReference(ref)) throw __DEV__ ? new _tsInvariant.InvariantError("Could not identify object " + JSON.stringify(result)) : new _tsInvariant.InvariantError(9);
        context.incomingById.forEach(function(_a1, dataId1) {
            var fields = _a1.fields, mergeTree = _a1.mergeTree, selections = _a1.selections;
            var entityRef = _indexJs.makeReference(dataId1);
            if (mergeTree && mergeTree.map.size) {
                var applied = _this.applyMerges(mergeTree, entityRef, fields, context);
                if (_indexJs.isReference(applied)) return;
                fields = applied;
            }
            if (__DEV__ && !context.overwrite) {
                var hasSelectionSet_1 = function(storeFieldName) {
                    return fieldsWithSelectionSets_1.has(_helpersJs.fieldNameFromStoreName(storeFieldName));
                };
                var fieldsWithSelectionSets_1 = new Set();
                selections.forEach(function(selection) {
                    if (_indexJs.isField(selection) && selection.selectionSet) fieldsWithSelectionSets_1.add(selection.name.value);
                });
                var hasMergeFunction_1 = function(storeFieldName) {
                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);
                    return Boolean(childTree && childTree.info && childTree.info.merge);
                };
                Object.keys(fields).forEach(function(storeFieldName) {
                    if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) warnAboutDataLoss(entityRef, fields, storeFieldName, context.store);
                });
            }
            store.merge(dataId1, fields);
        });
        store.retain(ref.__ref);
        return ref;
    };
    StoreWriter1.prototype.processSelectionSet = function(_a) {
        var _this = this;
        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, mergeTree = _a.mergeTree;
        var policies = this.cache.policies;
        var _b = policies.identify(result, selectionSet, context.fragmentMap), id = _b[0], keyObject = _b[1];
        dataId = dataId || id;
        if ("string" === typeof dataId) {
            var sets = context.written[dataId] || (context.written[dataId] = []);
            var ref = _indexJs.makeReference(dataId);
            if (sets.indexOf(selectionSet) >= 0) return ref;
            sets.push(selectionSet);
            if (this.reader && this.reader.isFresh(result, ref, selectionSet, context)) return ref;
        }
        var incomingFields = Object.create(null);
        if (keyObject) incomingFields = context.merge(incomingFields, keyObject);
        var typename = dataId && policies.rootTypenamesById[dataId] || _indexJs.getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, "__typename");
        if ("string" === typeof typename) incomingFields.__typename = typename;
        var selections = new Set(selectionSet.selections);
        selections.forEach(function(selection) {
            var _a1;
            if (!_indexJs.shouldInclude(selection, context.variables)) return;
            if (_indexJs.isField(selection)) {
                var resultFieldKey = _indexJs.resultKeyNameFromField(selection);
                var value = result[resultFieldKey];
                var wasClientOnly = context.clientOnly;
                context.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function(d) {
                    return d.name.value === "client";
                }));
                if (value !== void 0) {
                    var storeFieldName = policies.getStoreFieldName({
                        typename: typename,
                        fieldName: selection.name.value,
                        field: selection,
                        variables: context.variables
                    });
                    var childTree = getChildMergeTree(mergeTree, storeFieldName);
                    var incomingValue = _this.processFieldValue(value, selection, context, childTree);
                    var childTypename = void 0;
                    if (selection.selectionSet) {
                        childTypename = context.store.getFieldValue(incomingValue, "__typename");
                        if (!childTypename && _indexJs.isReference(incomingValue)) {
                            var info = context.incomingById.get(incomingValue.__ref);
                            childTypename = info && info.fields.__typename;
                        }
                    }
                    var merge = policies.getMergeFunction(typename, selection.name.value, childTypename);
                    if (merge) childTree.info = {
                        field: selection,
                        typename: typename,
                        merge: merge
                    };
                    else maybeRecycleChildMergeTree(mergeTree, storeFieldName);
                    incomingFields = context.merge(incomingFields, (_a1 = {
                    }, _a1[storeFieldName] = incomingValue, _a1));
                } else if (!context.clientOnly && !_indexJs.addTypenameToDocument.added(selection)) __DEV__ && _tsInvariant.invariant.error(("Missing field '" + _indexJs.resultKeyNameFromField(selection) + "' while writing result " + JSON.stringify(result, null, 2)).substring(0, 1000));
                context.clientOnly = wasClientOnly;
            } else {
                var fragment = _indexJs.getFragmentFromSelection(selection, context.fragmentMap);
                if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) fragment.selectionSet.selections.forEach(selections.add, selections);
            }
        });
        if ("string" === typeof dataId) {
            var previous = context.incomingById.get(dataId);
            if (previous) {
                previous.fields = context.merge(previous.fields, incomingFields);
                previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);
                previous.selections.forEach(selections.add, selections);
                previous.selections = selections;
            } else context.incomingById.set(dataId, {
                fields: incomingFields,
                mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,
                selections: selections
            });
            return _indexJs.makeReference(dataId);
        }
        return incomingFields;
    };
    StoreWriter1.prototype.processFieldValue = function(value, field, context, mergeTree) {
        var _this = this;
        if (!field.selectionSet || value === null) return __DEV__ ? _indexJs.cloneDeep(value) : value;
        if (Array.isArray(value)) return value.map(function(item, i) {
            var value1 = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));
            maybeRecycleChildMergeTree(mergeTree, i);
            return value1;
        });
        return this.processSelectionSet({
            result: value,
            selectionSet: field.selectionSet,
            context: context,
            mergeTree: mergeTree
        });
    };
    StoreWriter1.prototype.applyMerges = function(mergeTree, existing, incoming, context, getStorageArgs) {
        var _a;
        var _this = this;
        if (mergeTree.map.size && !_indexJs.isReference(incoming)) {
            var e_1 = !Array.isArray(incoming) && (_indexJs.isReference(existing) || _helpersJs.storeValueIsStoreObject(existing)) ? existing : void 0;
            var i_1 = incoming;
            if (e_1 && !getStorageArgs) getStorageArgs = [
                _indexJs.isReference(e_1) ? e_1.__ref : e_1
            ];
            var changedFields_1;
            var getValue_1 = function(from, name) {
                return Array.isArray(from) ? typeof name === "number" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));
            };
            mergeTree.map.forEach(function(childTree, storeFieldName) {
                var eVal = getValue_1(e_1, storeFieldName);
                var iVal = getValue_1(i_1, storeFieldName);
                if ((void 0) === iVal) return;
                if (getStorageArgs) getStorageArgs.push(storeFieldName);
                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);
                if (aVal !== iVal) {
                    changedFields_1 = changedFields_1 || new Map;
                    changedFields_1.set(storeFieldName, aVal);
                }
                if (getStorageArgs) _tsInvariant.invariant(getStorageArgs.pop() === storeFieldName);
            });
            if (changedFields_1) {
                incoming = Array.isArray(i_1) ? i_1.slice(0) : _tslib.__assign({
                }, i_1);
                changedFields_1.forEach(function(value, name) {
                    incoming[name] = value;
                });
            }
        }
        if (mergeTree.info) return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));
        return incoming;
    };
    return StoreWriter1;
}();
var emptyMergeTreePool = [];
function getChildMergeTree(_a, name) {
    var map = _a.map;
    if (!map.has(name)) map.set(name, emptyMergeTreePool.pop() || {
        map: new Map
    });
    return map.get(name);
}
function mergeMergeTrees(left, right) {
    if (left === right || !right || mergeTreeIsEmpty(right)) return left;
    if (!left || mergeTreeIsEmpty(left)) return right;
    var info = left.info && right.info ? _tslib.__assign(_tslib.__assign({
    }, left.info), right.info) : left.info || right.info;
    var needToMergeMaps = left.map.size && right.map.size;
    var map = needToMergeMaps ? new Map : left.map.size ? left.map : right.map;
    var merged = {
        info: info,
        map: map
    };
    if (needToMergeMaps) {
        var remainingRightKeys_1 = new Set(right.map.keys());
        left.map.forEach(function(leftTree, key) {
            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));
            remainingRightKeys_1.delete(key);
        });
        remainingRightKeys_1.forEach(function(key) {
            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));
        });
    }
    return merged;
}
function mergeTreeIsEmpty(tree) {
    return !tree || !(tree.info || tree.map.size);
}
function maybeRecycleChildMergeTree(_a, name) {
    var map = _a.map;
    var childTree = map.get(name);
    if (childTree && mergeTreeIsEmpty(childTree)) {
        emptyMergeTreePool.push(childTree);
        map.delete(name);
    }
}
var warnings = new Set();
function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
    var getChild = function(objOrRef) {
        var child = store.getFieldValue(objOrRef, storeFieldName);
        return typeof child === "object" && child;
    };
    var existing = getChild(existingRef);
    if (!existing) return;
    var incoming = getChild(incomingObj);
    if (!incoming) return;
    if (_indexJs.isReference(existing)) return;
    if (_equality.equal(existing, incoming)) return;
    if (Object.keys(existing).every(function(key) {
        return store.getFieldValue(incoming, key) !== void 0;
    })) return;
    var parentType = store.getFieldValue(existingRef, "__typename") || store.getFieldValue(incomingObj, "__typename");
    var fieldName = _helpersJs.fieldNameFromStoreName(storeFieldName);
    var typeDotName = parentType + "." + fieldName;
    if (warnings.has(typeDotName)) return;
    warnings.add(typeDotName);
    var childTypenames = [];
    if (!Array.isArray(existing) && !Array.isArray(incoming)) [
        existing,
        incoming
    ].forEach(function(child) {
        var typename = store.getFieldValue(child, "__typename");
        if (typeof typename === "string" && !childTypenames.includes(typename)) childTypenames.push(typename);
    });
    __DEV__ && _tsInvariant.invariant.warn("Cache data may be lost when replacing the " + fieldName + " field of a " + parentType + " object.\n\nTo address this problem (which is not a bug in Apollo Client), " + (childTypenames.length ? "either ensure all objects of type " + childTypenames.join(" and ") + " have an ID or a custom merge function, or " : "") + "define a custom merge function for the " + typeDotName + " field, so InMemoryCache can safely merge these objects:\n\n  existing: " + JSON.stringify(existing).slice(0, 1000) + "\n  incoming: " + JSON.stringify(incoming).slice(0, 1000) + "\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n");
}

},{"tslib":"bjkXk","ts-invariant":"eFYq1","@wry/equality":"i9esi","../../utilities/index.js":"fhAGU","./helpers.js":"hXLZd","./object-canon.js":"cy4ps","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3Dkw9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cacheSlot", ()=>cacheSlot
);
parcelHelpers.export(exports, "forgetCache", ()=>forgetCache
);
parcelHelpers.export(exports, "recallCache", ()=>recallCache
);
parcelHelpers.export(exports, "makeVar", ()=>makeVar
);
var _optimism = require("optimism");
var _context = require("@wry/context");
var cacheSlot = new _context.Slot();
var cacheInfoMap = new WeakMap();
function getCacheInfo(cache) {
    var info = cacheInfoMap.get(cache);
    if (!info) cacheInfoMap.set(cache, info = {
        vars: new Set,
        dep: _optimism.dep()
    });
    return info;
}
function forgetCache(cache) {
    getCacheInfo(cache).vars.forEach(function(rv) {
        return rv.forgetCache(cache);
    });
}
function recallCache(cache) {
    getCacheInfo(cache).vars.forEach(function(rv) {
        return rv.attachCache(cache);
    });
}
function makeVar(value) {
    var caches = new Set();
    var listeners = new Set();
    var rv = function(newValue) {
        if (arguments.length > 0) {
            if (value !== newValue) {
                value = newValue;
                caches.forEach(function(cache) {
                    getCacheInfo(cache).dep.dirty(rv);
                    broadcast(cache);
                });
                var oldListeners = Array.from(listeners);
                listeners.clear();
                oldListeners.forEach(function(listener) {
                    return listener(value);
                });
            }
        } else {
            var cache = cacheSlot.getValue();
            if (cache) {
                attach(cache);
                getCacheInfo(cache).dep(rv);
            }
        }
        return value;
    };
    rv.onNextChange = function(listener) {
        listeners.add(listener);
        return function() {
            listeners.delete(listener);
        };
    };
    var attach = rv.attachCache = function(cache) {
        caches.add(cache);
        getCacheInfo(cache).vars.add(rv);
        return rv;
    };
    rv.forgetCache = function(cache) {
        return caches.delete(cache);
    };
    return rv;
}
function broadcast(cache) {
    if (cache.broadcastWatches) cache.broadcastWatches();
}

},{"optimism":"bZJ6P","@wry/context":"6xhS2","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8QdmI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultDataIdFromObject", ()=>defaultDataIdFromObject
);
parcelHelpers.export(exports, "Policies", ()=>Policies
);
var _tslib = require("tslib");
var _trie = require("@wry/trie");
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../../utilities/index.js");
var _helpersJs = require("./helpers.js");
var _reactiveVarsJs = require("./reactiveVars.js");
var _objectCanonJs = require("./object-canon.js");
_indexJs.getStoreKeyName.setStringify(_objectCanonJs.canonicalStringify);
function argsFromFieldSpecifier(spec) {
    return spec.args !== void 0 ? spec.args : spec.field ? _indexJs.argumentsObjectFromField(spec.field, spec.variables) : null;
}
var defaultDataIdFromObject = function(_a, context) {
    var __typename = _a.__typename, id = _a.id, _id = _a._id;
    if (typeof __typename === "string") {
        if (context) context.keyObject = id !== void 0 ? {
            id: id
        } : _id !== void 0 ? {
            _id: _id
        } : void 0;
        if (id === void 0) id = _id;
        if (id !== void 0) return __typename + ":" + (typeof id === "number" || typeof id === "string" ? id : JSON.stringify(id));
    }
};
var nullKeyFieldsFn = function() {
    return void 0;
};
var simpleKeyArgsFn = function(_args, context) {
    return context.fieldName;
};
var mergeTrueFn = function(existing, incoming, _a) {
    var mergeObjects = _a.mergeObjects;
    return mergeObjects(existing, incoming);
};
var mergeFalseFn = function(_, incoming) {
    return incoming;
};
var Policies = function() {
    function Policies1(config) {
        this.config = config;
        this.typePolicies = Object.create(null);
        this.toBeAdded = Object.create(null);
        this.supertypeMap = new Map();
        this.fuzzySubtypes = new Map();
        this.rootIdsByTypename = Object.create(null);
        this.rootTypenamesById = Object.create(null);
        this.usingPossibleTypes = false;
        this.config = _tslib.__assign({
            dataIdFromObject: defaultDataIdFromObject
        }, config);
        this.cache = this.config.cache;
        this.setRootTypename("Query");
        this.setRootTypename("Mutation");
        this.setRootTypename("Subscription");
        if (config.possibleTypes) this.addPossibleTypes(config.possibleTypes);
        if (config.typePolicies) this.addTypePolicies(config.typePolicies);
    }
    Policies1.prototype.identify = function(object, selectionSet, fragmentMap) {
        var typename = selectionSet && fragmentMap ? _indexJs.getTypenameFromResult(object, selectionSet, fragmentMap) : object.__typename;
        if (typename === this.rootTypenamesById.ROOT_QUERY) return [
            "ROOT_QUERY"
        ];
        var context = {
            typename: typename,
            selectionSet: selectionSet,
            fragmentMap: fragmentMap
        };
        var id;
        var policy = typename && this.getTypePolicy(typename);
        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;
        while(keyFn){
            var specifierOrId = keyFn(object, context);
            if (Array.isArray(specifierOrId)) keyFn = keyFieldsFnFromSpecifier(specifierOrId);
            else {
                id = specifierOrId;
                break;
            }
        }
        id = id ? String(id) : void 0;
        return context.keyObject ? [
            id,
            context.keyObject
        ] : [
            id
        ];
    };
    Policies1.prototype.addTypePolicies = function(typePolicies) {
        var _this = this;
        Object.keys(typePolicies).forEach(function(typename) {
            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = _tslib.__rest(_a, [
                "queryType",
                "mutationType",
                "subscriptionType"
            ]);
            if (queryType) _this.setRootTypename("Query", typename);
            if (mutationType) _this.setRootTypename("Mutation", typename);
            if (subscriptionType) _this.setRootTypename("Subscription", typename);
            if (_helpersJs.hasOwn.call(_this.toBeAdded, typename)) _this.toBeAdded[typename].push(incoming);
            else _this.toBeAdded[typename] = [
                incoming
            ];
        });
    };
    Policies1.prototype.updateTypePolicy = function(typename, incoming) {
        var _this = this;
        var existing = this.getTypePolicy(typename);
        var keyFields = incoming.keyFields, fields = incoming.fields;
        function setMerge(existing1, merge) {
            existing1.merge = typeof merge === "function" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing1.merge;
        }
        setMerge(existing, incoming.merge);
        existing.keyFn = keyFields === false ? nullKeyFieldsFn : Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === "function" ? keyFields : existing.keyFn;
        if (fields) Object.keys(fields).forEach(function(fieldName) {
            var existing1 = _this.getFieldPolicy(typename, fieldName, true);
            var incoming1 = fields[fieldName];
            if (typeof incoming1 === "function") existing1.read = incoming1;
            else {
                var keyArgs = incoming1.keyArgs, read = incoming1.read, merge = incoming1.merge;
                existing1.keyFn = keyArgs === false ? simpleKeyArgsFn : Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === "function" ? keyArgs : existing1.keyFn;
                if (typeof read === "function") existing1.read = read;
                setMerge(existing1, merge);
            }
            if (existing1.read && existing1.merge) existing1.keyFn = existing1.keyFn || simpleKeyArgsFn;
        });
    };
    Policies1.prototype.setRootTypename = function(which, typename) {
        if (typename === void 0) typename = which;
        var rootId = "ROOT_" + which.toUpperCase();
        var old = this.rootTypenamesById[rootId];
        if (typename !== old) {
            __DEV__ ? _tsInvariant.invariant(!old || old === which, "Cannot change root " + which + " __typename more than once") : _tsInvariant.invariant(!old || old === which, 3);
            if (old) delete this.rootIdsByTypename[old];
            this.rootIdsByTypename[typename] = rootId;
            this.rootTypenamesById[rootId] = typename;
        }
    };
    Policies1.prototype.addPossibleTypes = function(possibleTypes) {
        var _this = this;
        this.usingPossibleTypes = true;
        Object.keys(possibleTypes).forEach(function(supertype) {
            _this.getSupertypeSet(supertype, true);
            possibleTypes[supertype].forEach(function(subtype) {
                _this.getSupertypeSet(subtype, true).add(supertype);
                var match = subtype.match(_helpersJs.TypeOrFieldNameRegExp);
                if (!match || match[0] !== subtype) _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
            });
        });
    };
    Policies1.prototype.getTypePolicy = function(typename) {
        var _this = this;
        if (!_helpersJs.hasOwn.call(this.typePolicies, typename)) {
            var policy_1 = this.typePolicies[typename] = Object.create(null);
            policy_1.fields = Object.create(null);
            var supertypes = this.supertypeMap.get(typename);
            if (supertypes && supertypes.size) supertypes.forEach(function(supertype) {
                var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = _tslib.__rest(_a, [
                    "fields"
                ]);
                Object.assign(policy_1, rest);
                Object.assign(policy_1.fields, fields);
            });
        }
        var inbox = this.toBeAdded[typename];
        if (inbox && inbox.length) inbox.splice(0).forEach(function(policy) {
            _this.updateTypePolicy(typename, policy);
        });
        return this.typePolicies[typename];
    };
    Policies1.prototype.getFieldPolicy = function(typename, fieldName, createIfMissing) {
        if (typename) {
            var fieldPolicies = this.getTypePolicy(typename).fields;
            return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));
        }
    };
    Policies1.prototype.getSupertypeSet = function(subtype, createIfMissing) {
        var supertypeSet = this.supertypeMap.get(subtype);
        if (!supertypeSet && createIfMissing) this.supertypeMap.set(subtype, supertypeSet = new Set());
        return supertypeSet;
    };
    Policies1.prototype.fragmentMatches = function(fragment, typename, result, variables) {
        var _this = this;
        if (!fragment.typeCondition) return true;
        if (!typename) return false;
        var supertype = fragment.typeCondition.name.value;
        if (typename === supertype) return true;
        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {
            var typenameSupertypeSet = this.getSupertypeSet(typename, true);
            var workQueue_1 = [
                typenameSupertypeSet
            ];
            var maybeEnqueue_1 = function(subtype) {
                var supertypeSet = _this.getSupertypeSet(subtype, false);
                if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) workQueue_1.push(supertypeSet);
            };
            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
            var checkingFuzzySubtypes = false;
            for(var i = 0; i < workQueue_1.length; ++i){
                var supertypeSet = workQueue_1[i];
                if (supertypeSet.has(supertype)) {
                    if (!typenameSupertypeSet.has(supertype)) {
                        if (checkingFuzzySubtypes) __DEV__ && _tsInvariant.invariant.warn("Inferring subtype " + typename + " of supertype " + supertype);
                        typenameSupertypeSet.add(supertype);
                    }
                    return true;
                }
                supertypeSet.forEach(maybeEnqueue_1);
                if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && _helpersJs.selectionSetMatchesResult(fragment.selectionSet, result, variables)) {
                    needToCheckFuzzySubtypes = false;
                    checkingFuzzySubtypes = true;
                    this.fuzzySubtypes.forEach(function(regExp, fuzzyString) {
                        var match = typename.match(regExp);
                        if (match && match[0] === typename) maybeEnqueue_1(fuzzyString);
                    });
                }
            }
        }
        return false;
    };
    Policies1.prototype.hasKeyArgs = function(typename, fieldName) {
        var policy = this.getFieldPolicy(typename, fieldName, false);
        return !!(policy && policy.keyFn);
    };
    Policies1.prototype.getStoreFieldName = function(fieldSpec) {
        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;
        var policy = this.getFieldPolicy(typename, fieldName, false);
        var storeFieldName;
        var keyFn = policy && policy.keyFn;
        if (keyFn && typename) {
            var context = {
                typename: typename,
                fieldName: fieldName,
                field: fieldSpec.field || null,
                variables: fieldSpec.variables
            };
            var args = argsFromFieldSpecifier(fieldSpec);
            while(keyFn){
                var specifierOrString = keyFn(args, context);
                if (Array.isArray(specifierOrString)) keyFn = keyArgsFnFromSpecifier(specifierOrString);
                else {
                    storeFieldName = specifierOrString || fieldName;
                    break;
                }
            }
        }
        if (storeFieldName === void 0) storeFieldName = fieldSpec.field ? _indexJs.storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : _indexJs.getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));
        if (storeFieldName === false) return fieldName;
        return fieldName === _helpersJs.fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + ":" + storeFieldName;
    };
    Policies1.prototype.readField = function(options, context) {
        var objectOrReference = options.from;
        if (!objectOrReference) return;
        var nameOrField = options.field || options.fieldName;
        if (!nameOrField) return;
        if (options.typename === void 0) {
            var typename = context.store.getFieldValue(objectOrReference, "__typename");
            if (typename) options.typename = typename;
        }
        var storeFieldName = this.getStoreFieldName(options);
        var fieldName = _helpersJs.fieldNameFromStoreName(storeFieldName);
        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);
        var policy = this.getFieldPolicy(options.typename, fieldName, false);
        var read = policy && policy.read;
        if (read) {
            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(_indexJs.isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));
            return _reactiveVarsJs.cacheSlot.withValue(this.cache, read, [
                existing,
                readOptions
            ]);
        }
        return existing;
    };
    Policies1.prototype.getMergeFunction = function(parentTypename, fieldName, childTypename) {
        var policy = this.getFieldPolicy(parentTypename, fieldName, false);
        var merge = policy && policy.merge;
        if (!merge && childTypename) {
            policy = this.getTypePolicy(childTypename);
            merge = policy && policy.merge;
        }
        return merge;
    };
    Policies1.prototype.runMergeFunction = function(existing, incoming, _a, context, storage) {
        var field = _a.field, typename = _a.typename, merge = _a.merge;
        if (merge === mergeTrueFn) return makeMergeObjectsFunction(context.store)(existing, incoming);
        if (merge === mergeFalseFn) return incoming;
        if (context.overwrite) existing = void 0;
        return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, {
            typename: typename,
            fieldName: field.name.value,
            field: field,
            variables: context.variables
        }, context, storage || Object.create(null)));
    };
    return Policies1;
}();
function makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {
    var storeFieldName = policies.getStoreFieldName(fieldSpec);
    var fieldName = _helpersJs.fieldNameFromStoreName(storeFieldName);
    var variables = fieldSpec.variables || context.variables;
    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;
    return {
        args: argsFromFieldSpecifier(fieldSpec),
        field: fieldSpec.field || null,
        fieldName: fieldName,
        storeFieldName: storeFieldName,
        variables: variables,
        isReference: _indexJs.isReference,
        toReference: toReference,
        storage: storage,
        cache: policies.cache,
        canRead: canRead,
        readField: function(fieldNameOrOptions, from) {
            var options;
            if (typeof fieldNameOrOptions === "string") options = {
                fieldName: fieldNameOrOptions,
                from: arguments.length > 1 ? from : objectOrReference
            };
            else if (_indexJs.isNonNullObject(fieldNameOrOptions)) {
                options = _tslib.__assign({
                }, fieldNameOrOptions);
                if (!_helpersJs.hasOwn.call(fieldNameOrOptions, "from")) options.from = objectOrReference;
            } else {
                __DEV__ && _tsInvariant.invariant.warn("Unexpected readField arguments: " + _indexJs.stringifyForDisplay(Array.from(arguments)));
                return;
            }
            if (__DEV__ && options.from === void 0) __DEV__ && _tsInvariant.invariant.warn("Undefined 'from' passed to readField with arguments " + _indexJs.stringifyForDisplay(Array.from(arguments)));
            if ((void 0) === options.variables) options.variables = variables;
            return policies.readField(options, context);
        },
        mergeObjects: makeMergeObjectsFunction(context.store)
    };
}
function makeMergeObjectsFunction(store) {
    return function mergeObjects(existing, incoming) {
        if (Array.isArray(existing) || Array.isArray(incoming)) throw __DEV__ ? new _tsInvariant.InvariantError("Cannot automatically merge arrays") : new _tsInvariant.InvariantError(4);
        if (_indexJs.isNonNullObject(existing) && _indexJs.isNonNullObject(incoming)) {
            var eType = store.getFieldValue(existing, "__typename");
            var iType = store.getFieldValue(incoming, "__typename");
            var typesDiffer = eType && iType && eType !== iType;
            if (typesDiffer) return incoming;
            if (_indexJs.isReference(existing) && _helpersJs.storeValueIsStoreObject(incoming)) {
                store.merge(existing.__ref, incoming);
                return existing;
            }
            if (_helpersJs.storeValueIsStoreObject(existing) && _indexJs.isReference(incoming)) {
                store.merge(existing, incoming.__ref);
                return incoming;
            }
            if (_helpersJs.storeValueIsStoreObject(existing) && _helpersJs.storeValueIsStoreObject(incoming)) return _tslib.__assign(_tslib.__assign({
            }, existing), incoming);
        }
        return incoming;
    };
}
function keyArgsFnFromSpecifier(specifier) {
    return function(args, context) {
        return args ? context.fieldName + ":" + JSON.stringify(computeKeyObject(args, specifier, false)) : context.fieldName;
    };
}
function keyFieldsFnFromSpecifier(specifier) {
    var trie = new _trie.Trie(_indexJs.canUseWeakMap);
    return function(object, context) {
        var aliasMap;
        if (context.selectionSet && context.fragmentMap) {
            var info = trie.lookupArray([
                context.selectionSet,
                context.fragmentMap, 
            ]);
            aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap));
        }
        var keyObject = context.keyObject = computeKeyObject(object, specifier, true, aliasMap);
        return context.typename + ":" + JSON.stringify(keyObject);
    };
}
function makeAliasMap(selectionSet, fragmentMap) {
    var map = Object.create(null);
    var workQueue = new Set([
        selectionSet
    ]);
    workQueue.forEach(function(selectionSet1) {
        selectionSet1.selections.forEach(function(selection) {
            if (_indexJs.isField(selection)) {
                if (selection.alias) {
                    var responseKey = selection.alias.value;
                    var storeKey = selection.name.value;
                    if (storeKey !== responseKey) {
                        var aliases = map.aliases || (map.aliases = Object.create(null));
                        aliases[storeKey] = responseKey;
                    }
                }
                if (selection.selectionSet) {
                    var subsets = map.subsets || (map.subsets = Object.create(null));
                    subsets[selection.name.value] = makeAliasMap(selection.selectionSet, fragmentMap);
                }
            } else {
                var fragment = _indexJs.getFragmentFromSelection(selection, fragmentMap);
                if (fragment) workQueue.add(fragment.selectionSet);
            }
        });
    });
    return map;
}
function computeKeyObject(response, specifier, strict, aliasMap) {
    var keyObj = Object.create(null);
    var lastResponseKey;
    var lastActualKey;
    specifier.forEach(function(s) {
        if (Array.isArray(s)) {
            if (typeof lastActualKey === "string" && typeof lastResponseKey === "string") {
                var subsets = aliasMap && aliasMap.subsets;
                var subset = subsets && subsets[lastActualKey];
                keyObj[lastActualKey] = computeKeyObject(response[lastResponseKey], s, strict, subset);
            }
        } else {
            var aliases = aliasMap && aliasMap.aliases;
            var responseName = aliases && aliases[s] || s;
            if (_helpersJs.hasOwn.call(response, responseName)) keyObj[lastActualKey = s] = response[lastResponseKey = responseName];
            else {
                __DEV__ ? _tsInvariant.invariant(!strict, "Missing field '" + responseName + "' while computing key fields") : _tsInvariant.invariant(!strict, 5);
                lastResponseKey = lastActualKey = void 0;
            }
        }
    });
    return keyObj;
}

},{"tslib":"bjkXk","@wry/trie":"kxGp9","ts-invariant":"eFYq1","../../utilities/index.js":"fhAGU","./helpers.js":"hXLZd","./reactiveVars.js":"3Dkw9","./object-canon.js":"cy4ps","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8JBVm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hsZu1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isApolloError", ()=>isApolloError
);
parcelHelpers.export(exports, "ApolloError", ()=>ApolloError1
);
var _tslib = require("tslib");
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../utilities/index.js");
__DEV__ ? _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, _indexJs.DEV) : _tsInvariant.invariant("boolean" === typeof _indexJs.DEV, 22);
function isApolloError(err) {
    return err.hasOwnProperty('graphQLErrors');
}
var generateErrorMessage = function(err) {
    var message = '';
    if (_indexJs.isNonEmptyArray(err.graphQLErrors) || _indexJs.isNonEmptyArray(err.clientErrors)) {
        var errors = (err.graphQLErrors || []).concat(err.clientErrors || []);
        errors.forEach(function(error) {
            var errorMessage = error ? error.message : 'Error message not found.';
            message += errorMessage + "\n";
        });
    }
    if (err.networkError) message += err.networkError.message + "\n";
    message = message.replace(/\n$/, '');
    return message;
};
var ApolloError1 = function(_super) {
    _tslib.__extends(ApolloError2, _super);
    function ApolloError2(_a) {
        var graphQLErrors = _a.graphQLErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;
        var _this = _super.call(this, errorMessage) || this;
        _this.graphQLErrors = graphQLErrors || [];
        _this.clientErrors = clientErrors || [];
        _this.networkError = networkError || null;
        _this.message = errorMessage || generateErrorMessage(_this);
        _this.extraInfo = extraInfo;
        _this.__proto__ = ApolloError2.prototype;
        return _this;
    }
    return ApolloError2;
}(Error);

},{"tslib":"bjkXk","ts-invariant":"eFYq1","../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4YjvH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObservableQuery", ()=>ObservableQuery1
);
parcelHelpers.export(exports, "logMissingFieldErrors", ()=>logMissingFieldErrors
);
parcelHelpers.export(exports, "applyNextFetchPolicy", ()=>applyNextFetchPolicy
);
var _tslib = require("tslib");
var _tsInvariant = require("ts-invariant");
var _equality = require("@wry/equality");
var _networkStatusJs = require("./networkStatus.js");
var _indexJs = require("../utilities/index.js");
var warnedAboutUpdateQuery = false;
var ObservableQuery1 = function(_super) {
    _tslib.__extends(ObservableQuery2, _super);
    function ObservableQuery2(_a) {
        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;
        var _this = _super.call(this, function(observer) {
            try {
                var subObserver = observer._subscription._observer;
                if (subObserver && !subObserver.error) subObserver.error = defaultSubscriptionObserverErrorCallback;
            } catch (_a1) {
            }
            var first = !_this.observers.size;
            _this.observers.add(observer);
            var last = _this.last;
            if (last && last.error) observer.error && observer.error(last.error);
            else if (last && last.result) observer.next && observer.next(last.result);
            if (first) _this.reobserve().catch(function() {
            });
            return function() {
                if (_this.observers.delete(observer) && !_this.observers.size) _this.tearDownQuery();
            };
        }) || this;
        _this.observers = new Set();
        _this.subscriptions = new Set();
        _this.isTornDown = false;
        _this.options = options;
        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();
        var opDef = _indexJs.getOperationDefinition(options.query);
        _this.queryName = opDef && opDef.name && opDef.name.value;
        _this.initialFetchPolicy = options.fetchPolicy || "cache-first";
        _this.queryManager = queryManager;
        _this.queryInfo = queryInfo;
        return _this;
    }
    Object.defineProperty(ObservableQuery2.prototype, "variables", {
        get: function() {
            return this.options.variables;
        },
        enumerable: false,
        configurable: true
    });
    ObservableQuery2.prototype.result = function() {
        var _this = this;
        return new Promise(function(resolve, reject) {
            var observer = {
                next: function(result) {
                    resolve(result);
                    _this.observers.delete(observer);
                    if (!_this.observers.size) _this.queryManager.removeQuery(_this.queryId);
                    setTimeout(function() {
                        subscription.unsubscribe();
                    }, 0);
                },
                error: reject
            };
            var subscription = _this.subscribe(observer);
        });
    };
    ObservableQuery2.prototype.getCurrentResult = function(saveAsLastResult) {
        if (saveAsLastResult === void 0) saveAsLastResult = true;
        var lastResult = this.getLastResult(true);
        var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatusJs.NetworkStatus.ready;
        var result = _tslib.__assign(_tslib.__assign({
        }, lastResult), {
            loading: _networkStatusJs.isNetworkRequestInFlight(networkStatus),
            networkStatus: networkStatus
        });
        if (!this.queryManager.transform(this.options.query).hasForcedResolvers) {
            var diff = this.queryInfo.getDiff();
            if (diff.complete || this.options.returnPartialData) result.data = diff.result;
            if (_equality.equal(result.data, {
            })) result.data = void 0;
            var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a;
            if (diff.complete) {
                if (result.networkStatus === _networkStatusJs.NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {
                    result.networkStatus = _networkStatusJs.NetworkStatus.ready;
                    result.loading = false;
                }
                delete result.partial;
            } else if (fetchPolicy !== "no-cache") result.partial = true;
            if (__DEV__ && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) logMissingFieldErrors(diff.missing);
        }
        if (saveAsLastResult) this.updateLastResult(result);
        return result;
    };
    ObservableQuery2.prototype.isDifferentFromLastResult = function(newResult) {
        return !this.last || !_equality.equal(this.last.result, newResult);
    };
    ObservableQuery2.prototype.getLast = function(key, variablesMustMatch) {
        var last = this.last;
        if (last && last[key] && (!variablesMustMatch || _equality.equal(last.variables, this.variables))) return last[key];
    };
    ObservableQuery2.prototype.getLastResult = function(variablesMustMatch) {
        return this.getLast("result", variablesMustMatch);
    };
    ObservableQuery2.prototype.getLastError = function(variablesMustMatch) {
        return this.getLast("error", variablesMustMatch);
    };
    ObservableQuery2.prototype.resetLastResults = function() {
        delete this.last;
        this.isTornDown = false;
    };
    ObservableQuery2.prototype.resetQueryStoreErrors = function() {
        this.queryManager.resetErrors(this.queryId);
    };
    ObservableQuery2.prototype.refetch = function(variables) {
        var reobserveOptions = {
            pollInterval: 0
        };
        var fetchPolicy = this.options.fetchPolicy;
        if (fetchPolicy === 'no-cache') reobserveOptions.fetchPolicy = 'no-cache';
        else if (fetchPolicy !== 'cache-and-network') reobserveOptions.fetchPolicy = 'network-only';
        if (variables && !_equality.equal(this.options.variables, variables)) reobserveOptions.variables = this.options.variables = _tslib.__assign(_tslib.__assign({
        }, this.options.variables), variables);
        this.queryInfo.resetLastWrite();
        return this.reobserve(reobserveOptions, _networkStatusJs.NetworkStatus.refetch);
    };
    ObservableQuery2.prototype.fetchMore = function(fetchMoreOptions) {
        var _this = this;
        var combinedOptions = _tslib.__assign(_tslib.__assign({
        }, fetchMoreOptions.query ? fetchMoreOptions : _tslib.__assign(_tslib.__assign(_tslib.__assign({
        }, this.options), fetchMoreOptions), {
            variables: _tslib.__assign(_tslib.__assign({
            }, this.options.variables), fetchMoreOptions.variables)
        })), {
            fetchPolicy: "no-cache"
        });
        var qid = this.queryManager.generateQueryId();
        if (combinedOptions.notifyOnNetworkStatusChange) {
            this.queryInfo.networkStatus = _networkStatusJs.NetworkStatus.fetchMore;
            this.observe();
        }
        return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatusJs.NetworkStatus.fetchMore).then(function(fetchMoreResult) {
            var data = fetchMoreResult.data;
            var updateQuery = fetchMoreOptions.updateQuery;
            if (updateQuery) {
                if (__DEV__ && !warnedAboutUpdateQuery) {
                    __DEV__ && _tsInvariant.invariant.warn("The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.");
                    warnedAboutUpdateQuery = true;
                }
                _this.updateQuery(function(previous) {
                    return updateQuery(previous, {
                        fetchMoreResult: data,
                        variables: combinedOptions.variables
                    });
                });
            } else _this.queryManager.cache.writeQuery({
                query: combinedOptions.query,
                variables: combinedOptions.variables,
                data: data
            });
            return fetchMoreResult;
        }).finally(function() {
            _this.queryManager.stopQuery(qid);
            _this.reobserve();
        });
    };
    ObservableQuery2.prototype.subscribeToMore = function(options) {
        var _this = this;
        var subscription = this.queryManager.startGraphQLSubscription({
            query: options.document,
            variables: options.variables,
            context: options.context
        }).subscribe({
            next: function(subscriptionData) {
                var updateQuery = options.updateQuery;
                if (updateQuery) _this.updateQuery(function(previous, _a) {
                    var variables = _a.variables;
                    return updateQuery(previous, {
                        subscriptionData: subscriptionData,
                        variables: variables
                    });
                });
            },
            error: function(err) {
                if (options.onError) {
                    options.onError(err);
                    return;
                }
                __DEV__ && _tsInvariant.invariant.error('Unhandled GraphQL subscription error', err);
            }
        });
        this.subscriptions.add(subscription);
        return function() {
            if (_this.subscriptions.delete(subscription)) subscription.unsubscribe();
        };
    };
    ObservableQuery2.prototype.setOptions = function(newOptions) {
        return this.reobserve(newOptions);
    };
    ObservableQuery2.prototype.setVariables = function(variables) {
        if (_equality.equal(this.variables, variables)) return this.observers.size ? this.result() : Promise.resolve();
        this.options.variables = variables;
        if (!this.observers.size) return Promise.resolve();
        return this.reobserve({
            fetchPolicy: this.initialFetchPolicy,
            variables: variables
        }, _networkStatusJs.NetworkStatus.setVariables);
    };
    ObservableQuery2.prototype.updateQuery = function(mapFn) {
        var queryManager = this.queryManager;
        var result = queryManager.cache.diff({
            query: this.options.query,
            variables: this.variables,
            returnPartialData: true,
            optimistic: false
        }).result;
        var newResult = mapFn(result, {
            variables: this.variables
        });
        if (newResult) {
            queryManager.cache.writeQuery({
                query: this.options.query,
                data: newResult,
                variables: this.variables
            });
            queryManager.broadcastQueries();
        }
    };
    ObservableQuery2.prototype.startPolling = function(pollInterval) {
        this.options.pollInterval = pollInterval;
        this.updatePolling();
    };
    ObservableQuery2.prototype.stopPolling = function() {
        this.options.pollInterval = 0;
        this.updatePolling();
    };
    ObservableQuery2.prototype.fetch = function(options, newNetworkStatus) {
        this.queryManager.setObservableQuery(this);
        return this.queryManager.fetchQueryObservable(this.queryId, options, newNetworkStatus);
    };
    ObservableQuery2.prototype.updatePolling = function() {
        var _this = this;
        if (this.queryManager.ssrMode) return;
        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;
        if (!pollInterval) {
            if (pollingInfo) {
                clearTimeout(pollingInfo.timeout);
                delete this.pollingInfo;
            }
            return;
        }
        if (pollingInfo && pollingInfo.interval === pollInterval) return;
        __DEV__ ? _tsInvariant.invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : _tsInvariant.invariant(pollInterval, 13);
        var info = pollingInfo || (this.pollingInfo = {
        });
        info.interval = pollInterval;
        var maybeFetch = function() {
            if (_this.pollingInfo) {
                if (!_networkStatusJs.isNetworkRequestInFlight(_this.queryInfo.networkStatus)) _this.reobserve({
                    fetchPolicy: "network-only"
                }, _networkStatusJs.NetworkStatus.poll).then(poll, poll);
                else poll();
            }
        };
        var poll = function() {
            var info1 = _this.pollingInfo;
            if (info1) {
                clearTimeout(info1.timeout);
                info1.timeout = setTimeout(maybeFetch, info1.interval);
            }
        };
        poll();
    };
    ObservableQuery2.prototype.updateLastResult = function(newResult, variables) {
        if (variables === void 0) variables = this.variables;
        this.last = _tslib.__assign(_tslib.__assign({
        }, this.last), {
            result: this.queryManager.assumeImmutableResults ? newResult : _indexJs.cloneDeep(newResult),
            variables: variables
        });
        if (!_indexJs.isNonEmptyArray(newResult.errors)) delete this.last.error;
        return this.last;
    };
    ObservableQuery2.prototype.reobserve = function(newOptions, newNetworkStatus) {
        var _this = this;
        this.isTornDown = false;
        var useDisposableConcast = newNetworkStatus === _networkStatusJs.NetworkStatus.refetch || newNetworkStatus === _networkStatusJs.NetworkStatus.fetchMore || newNetworkStatus === _networkStatusJs.NetworkStatus.poll;
        var oldVariables = this.options.variables;
        var options = useDisposableConcast ? _indexJs.compact(this.options, newOptions) : Object.assign(this.options, _indexJs.compact(newOptions));
        if (!useDisposableConcast) {
            this.updatePolling();
            if (newOptions && newOptions.variables && !newOptions.fetchPolicy && !_equality.equal(newOptions.variables, oldVariables)) {
                options.fetchPolicy = this.initialFetchPolicy;
                if (newNetworkStatus === void 0) newNetworkStatus = _networkStatusJs.NetworkStatus.setVariables;
            }
        }
        var variables = options.variables && _tslib.__assign({
        }, options.variables);
        var concast = this.fetch(options, newNetworkStatus);
        var observer = {
            next: function(result) {
                _this.reportResult(result, variables);
            },
            error: function(error) {
                _this.reportError(error, variables);
            }
        };
        if (!useDisposableConcast) {
            if (this.concast && this.observer) this.concast.removeObserver(this.observer, true);
            this.concast = concast;
            this.observer = observer;
        }
        concast.addObserver(observer);
        return concast.promise;
    };
    ObservableQuery2.prototype.observe = function() {
        this.reportResult(this.getCurrentResult(false), this.variables);
    };
    ObservableQuery2.prototype.reportResult = function(result, variables) {
        if (this.getLastError() || this.isDifferentFromLastResult(result)) {
            this.updateLastResult(result, variables);
            _indexJs.iterateObserversSafely(this.observers, 'next', result);
        }
    };
    ObservableQuery2.prototype.reportError = function(error, variables) {
        var errorResult = _tslib.__assign(_tslib.__assign({
        }, this.getLastResult()), {
            error: error,
            errors: error.graphQLErrors,
            networkStatus: _networkStatusJs.NetworkStatus.error,
            loading: false
        });
        this.updateLastResult(errorResult, variables);
        _indexJs.iterateObserversSafely(this.observers, 'error', this.last.error = error);
    };
    ObservableQuery2.prototype.hasObservers = function() {
        return this.observers.size > 0;
    };
    ObservableQuery2.prototype.tearDownQuery = function() {
        if (this.isTornDown) return;
        if (this.concast && this.observer) {
            this.concast.removeObserver(this.observer);
            delete this.concast;
            delete this.observer;
        }
        this.stopPolling();
        this.subscriptions.forEach(function(sub) {
            return sub.unsubscribe();
        });
        this.subscriptions.clear();
        this.queryManager.stopQuery(this.queryId);
        this.observers.clear();
        this.isTornDown = true;
    };
    return ObservableQuery2;
}(_indexJs.Observable);
_indexJs.fixObservableSubclass(ObservableQuery1);
function defaultSubscriptionObserverErrorCallback(error) {
    __DEV__ && _tsInvariant.invariant.error('Unhandled error', error.message, error.stack);
}
function logMissingFieldErrors(missing) {
    if (__DEV__ && _indexJs.isNonEmptyArray(missing)) __DEV__ && _tsInvariant.invariant.debug("Missing cache result fields: " + missing.map(function(m) {
        return m.path.join('.');
    }).join(', '), missing);
}
function applyNextFetchPolicy(options) {
    var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a, nextFetchPolicy = options.nextFetchPolicy;
    if (nextFetchPolicy) options.fetchPolicy = typeof nextFetchPolicy === "function" ? nextFetchPolicy.call(options, fetchPolicy) : nextFetchPolicy;
}

},{"tslib":"bjkXk","ts-invariant":"eFYq1","@wry/equality":"i9esi","./networkStatus.js":"jW3Zk","../utilities/index.js":"fhAGU","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jW3Zk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NetworkStatus", ()=>NetworkStatus
);
parcelHelpers.export(exports, "isNetworkRequestInFlight", ()=>isNetworkRequestInFlight
);
var NetworkStatus;
(function(NetworkStatus1) {
    NetworkStatus1[NetworkStatus1["loading"] = 1] = "loading";
    NetworkStatus1[NetworkStatus1["setVariables"] = 2] = "setVariables";
    NetworkStatus1[NetworkStatus1["fetchMore"] = 3] = "fetchMore";
    NetworkStatus1[NetworkStatus1["refetch"] = 4] = "refetch";
    NetworkStatus1[NetworkStatus1["poll"] = 6] = "poll";
    NetworkStatus1[NetworkStatus1["ready"] = 7] = "ready";
    NetworkStatus1[NetworkStatus1["error"] = 8] = "error";
})(NetworkStatus || (NetworkStatus = {
}));
function isNetworkRequestInFlight(networkStatus) {
    return networkStatus ? networkStatus < 7 : false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4HN4d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LocalState", ()=>LocalState
);
var _tslib = require("tslib");
var _graphql = require("graphql");
var _tsInvariant = require("ts-invariant");
var _indexJs = require("../utilities/index.js");
var _indexJs1 = require("../cache/index.js");
var LocalState = function() {
    function LocalState1(_a) {
        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;
        this.cache = cache;
        if (client) this.client = client;
        if (resolvers) this.addResolvers(resolvers);
        if (fragmentMatcher) this.setFragmentMatcher(fragmentMatcher);
    }
    LocalState1.prototype.addResolvers = function(resolvers) {
        var _this = this;
        this.resolvers = this.resolvers || {
        };
        if (Array.isArray(resolvers)) resolvers.forEach(function(resolverGroup) {
            _this.resolvers = _indexJs.mergeDeep(_this.resolvers, resolverGroup);
        });
        else this.resolvers = _indexJs.mergeDeep(this.resolvers, resolvers);
    };
    LocalState1.prototype.setResolvers = function(resolvers) {
        this.resolvers = {
        };
        this.addResolvers(resolvers);
    };
    LocalState1.prototype.getResolvers = function() {
        return this.resolvers || {
        };
    };
    LocalState1.prototype.runResolvers = function(_a) {
        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(_c) {
                if (document) return [
                    2,
                    this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {
                        return _tslib.__assign(_tslib.__assign({
                        }, remoteResult), {
                            data: localResult.result
                        });
                    })
                ];
                return [
                    2,
                    remoteResult
                ];
            });
        });
    };
    LocalState1.prototype.setFragmentMatcher = function(fragmentMatcher) {
        this.fragmentMatcher = fragmentMatcher;
    };
    LocalState1.prototype.getFragmentMatcher = function() {
        return this.fragmentMatcher;
    };
    LocalState1.prototype.clientQuery = function(document) {
        if (_indexJs.hasDirectives([
            'client'
        ], document)) {
            if (this.resolvers) return document;
        }
        return null;
    };
    LocalState1.prototype.serverQuery = function(document) {
        return _indexJs.removeClientSetsFromDocument(document);
    };
    LocalState1.prototype.prepareContext = function(context) {
        var cache = this.cache;
        return _tslib.__assign(_tslib.__assign({
        }, context), {
            cache: cache,
            getCacheKey: function(obj) {
                return cache.identify(obj);
            }
        });
    };
    LocalState1.prototype.addExportedVariables = function(document, variables, context) {
        if (variables === void 0) variables = {
        };
        if (context === void 0) context = {
        };
        return _tslib.__awaiter(this, void 0, void 0, function() {
            return _tslib.__generator(this, function(_a) {
                if (document) return [
                    2,
                    this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {
                    }, this.prepareContext(context), variables).then(function(data) {
                        return _tslib.__assign(_tslib.__assign({
                        }, variables), data.exportedVariables);
                    })
                ];
                return [
                    2,
                    _tslib.__assign({
                    }, variables)
                ];
            });
        });
    };
    LocalState1.prototype.shouldForceResolvers = function(document) {
        var forceResolvers = false;
        _graphql.visit(document, {
            Directive: {
                enter: function(node) {
                    if (node.name.value === 'client' && node.arguments) {
                        forceResolvers = node.arguments.some(function(arg) {
                            return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;
                        });
                        if (forceResolvers) return _graphql.BREAK;
                    }
                }
            }
        });
        return forceResolvers;
    };
    LocalState1.prototype.buildRootValueFromCache = function(document, variables) {
        return this.cache.diff({
            query: _indexJs.buildQueryFromSelectionSet(document),
            variables: variables,
            returnPartialData: true,
            optimistic: false
        }).result;
    };
    LocalState1.prototype.resolveDocument = function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
        if (context === void 0) context = {
        };
        if (variables === void 0) variables = {
        };
        if (fragmentMatcher === void 0) fragmentMatcher = function() {
            return true;
        };
        if (onlyRunForcedResolvers === void 0) onlyRunForcedResolvers = false;
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;
            return _tslib.__generator(this, function(_b) {
                mainDefinition = _indexJs.getMainDefinition(document);
                fragments = _indexJs.getFragmentDefinitions(document);
                fragmentMap = _indexJs.createFragmentMap(fragments);
                definitionOperation = mainDefinition.operation;
                defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';
                _a = this, cache = _a.cache, client = _a.client;
                execContext = {
                    fragmentMap: fragmentMap,
                    context: _tslib.__assign(_tslib.__assign({
                    }, context), {
                        cache: cache,
                        client: client
                    }),
                    variables: variables,
                    fragmentMatcher: fragmentMatcher,
                    defaultOperationType: defaultOperationType,
                    exportedVariables: {
                    },
                    onlyRunForcedResolvers: onlyRunForcedResolvers
                };
                return [
                    2,
                    this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function(result) {
                        return {
                            result: result,
                            exportedVariables: execContext.exportedVariables
                        };
                    })
                ];
            });
        });
    };
    LocalState1.prototype.resolveSelectionSet = function(selectionSet, rootValue, execContext) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var fragmentMap, context, variables, resultsToMerge, execute;
            var _this = this;
            return _tslib.__generator(this, function(_a) {
                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
                resultsToMerge = [
                    rootValue
                ];
                execute = function(selection) {
                    return _tslib.__awaiter(_this, void 0, void 0, function() {
                        var fragment, typeCondition;
                        return _tslib.__generator(this, function(_a1) {
                            if (!_indexJs.shouldInclude(selection, variables)) return [
                                2
                            ];
                            if (_indexJs.isField(selection)) return [
                                2,
                                this.resolveField(selection, rootValue, execContext).then(function(fieldResult) {
                                    var _a2;
                                    if (typeof fieldResult !== 'undefined') resultsToMerge.push((_a2 = {
                                    }, _a2[_indexJs.resultKeyNameFromField(selection)] = fieldResult, _a2));
                                })
                            ];
                            if (_indexJs.isInlineFragment(selection)) fragment = selection;
                            else {
                                fragment = fragmentMap[selection.name.value];
                                __DEV__ ? _tsInvariant.invariant(fragment, "No fragment named " + selection.name.value) : _tsInvariant.invariant(fragment, 12);
                            }
                            if (fragment && fragment.typeCondition) {
                                typeCondition = fragment.typeCondition.name.value;
                                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) return [
                                    2,
                                    this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function(fragmentResult) {
                                        resultsToMerge.push(fragmentResult);
                                    })
                                ];
                            }
                            return [
                                2
                            ];
                        });
                    });
                };
                return [
                    2,
                    Promise.all(selectionSet.selections.map(execute)).then(function() {
                        return _indexJs.mergeDeepArray(resultsToMerge);
                    })
                ];
            });
        });
    };
    LocalState1.prototype.resolveField = function(field, rootValue, execContext) {
        return _tslib.__awaiter(this, void 0, void 0, function() {
            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
            var _this = this;
            return _tslib.__generator(this, function(_a) {
                variables = execContext.variables;
                fieldName = field.name.value;
                aliasedFieldName = _indexJs.resultKeyNameFromField(field);
                aliasUsed = fieldName !== aliasedFieldName;
                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
                resultPromise = Promise.resolve(defaultResult);
                if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
                    resolverType = rootValue.__typename || execContext.defaultOperationType;
                    resolverMap = this.resolvers && this.resolvers[resolverType];
                    if (resolverMap) {
                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
                        if (resolve) resultPromise = Promise.resolve(_indexJs1.cacheSlot.withValue(this.cache, resolve, [
                            rootValue,
                            _indexJs.argumentsObjectFromField(field, variables),
                            execContext.context,
                            {
                                field: field,
                                fragmentMap: execContext.fragmentMap
                            }, 
                        ]));
                    }
                }
                return [
                    2,
                    resultPromise.then(function(result) {
                        if (result === void 0) result = defaultResult;
                        if (field.directives) field.directives.forEach(function(directive) {
                            if (directive.name.value === 'export' && directive.arguments) directive.arguments.forEach(function(arg) {
                                if (arg.name.value === 'as' && arg.value.kind === 'StringValue') execContext.exportedVariables[arg.value.value] = result;
                            });
                        });
                        if (!field.selectionSet) return result;
                        if (result == null) return result;
                        if (Array.isArray(result)) return _this.resolveSubSelectedArray(field, result, execContext);
                        if (field.selectionSet) return _this.resolveSelectionSet(field.selectionSet, result, execContext);
                    })
                ];
            });
        });
    };
    LocalState1.prototype.resolveSubSelectedArray = function(field, result, execContext) {
        var _this = this;
        return Promise.all(result.map(function(item) {
            if (item === null) return null;
            if (Array.isArray(item)) return _this.resolveSubSelectedArray(field, item, execContext);
            if (field.selectionSet) return _this.resolveSelectionSet(field.selectionSet, item, execContext);
        }));
    };
    return LocalState1;
}();

},{"tslib":"bjkXk","graphql":"6yWt3","ts-invariant":"eFYq1","../utilities/index.js":"fhAGU","../cache/index.js":"ahDke","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bvfev":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "QueryInfo", ()=>QueryInfo
);
parcelHelpers.export(exports, "shouldWriteResult", ()=>shouldWriteResult
);
var _tslib = require("tslib");
var _equality = require("@wry/equality");
var _indexJs = require("../utilities/index.js");
var _networkStatusJs = require("./networkStatus.js");
var destructiveMethodCounts = new (_indexJs.canUseWeakMap ? WeakMap : Map)();
function wrapDestructiveCacheMethod(cache, methodName) {
    var original = cache[methodName];
    if (typeof original === "function") cache[methodName] = function() {
        destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1000000000000000);
        return original.apply(this, arguments);
    };
}
function cancelNotifyTimeout(info) {
    if (info["notifyTimeout"]) {
        clearTimeout(info["notifyTimeout"]);
        info["notifyTimeout"] = void 0;
    }
}
var QueryInfo = function() {
    function QueryInfo1(queryManager, queryId) {
        if (queryId === void 0) queryId = queryManager.generateQueryId();
        this.queryId = queryId;
        this.listeners = new Set();
        this.document = null;
        this.lastRequestId = 1;
        this.subscriptions = new Set();
        this.stopped = false;
        this.dirty = false;
        this.observableQuery = null;
        var cache = this.cache = queryManager.cache;
        if (!destructiveMethodCounts.has(cache)) {
            destructiveMethodCounts.set(cache, 0);
            wrapDestructiveCacheMethod(cache, "evict");
            wrapDestructiveCacheMethod(cache, "modify");
            wrapDestructiveCacheMethod(cache, "reset");
        }
    }
    QueryInfo1.prototype.init = function(query) {
        var networkStatus = query.networkStatus || _networkStatusJs.NetworkStatus.loading;
        if (this.variables && this.networkStatus !== _networkStatusJs.NetworkStatus.loading && !_equality.equal(this.variables, query.variables)) networkStatus = _networkStatusJs.NetworkStatus.setVariables;
        if (!_equality.equal(query.variables, this.variables)) this.lastDiff = void 0;
        Object.assign(this, {
            document: query.document,
            variables: query.variables,
            networkError: null,
            graphQLErrors: this.graphQLErrors || [],
            networkStatus: networkStatus
        });
        if (query.observableQuery) this.setObservableQuery(query.observableQuery);
        if (query.lastRequestId) this.lastRequestId = query.lastRequestId;
        return this;
    };
    QueryInfo1.prototype.reset = function() {
        cancelNotifyTimeout(this);
        this.lastDiff = void 0;
        this.dirty = false;
    };
    QueryInfo1.prototype.getDiff = function(variables) {
        if (variables === void 0) variables = this.variables;
        var options = this.getDiffOptions(variables);
        if (this.lastDiff && _equality.equal(options, this.lastDiff.options)) return this.lastDiff.diff;
        this.updateWatch(this.variables = variables);
        var oq = this.observableQuery;
        if (oq && oq.options.fetchPolicy === "no-cache") return {
            complete: false
        };
        var diff = this.cache.diff(options);
        this.updateLastDiff(diff, options);
        return diff;
    };
    QueryInfo1.prototype.updateLastDiff = function(diff, options) {
        this.lastDiff = diff ? {
            diff: diff,
            options: options || this.getDiffOptions()
        } : void 0;
    };
    QueryInfo1.prototype.getDiffOptions = function(variables) {
        if (variables === void 0) variables = this.variables;
        var oq = this.observableQuery;
        return {
            query: this.document,
            variables: variables,
            returnPartialData: true,
            optimistic: true,
            canonizeResults: !oq || oq.options.canonizeResults !== false
        };
    };
    QueryInfo1.prototype.setDiff = function(diff) {
        var _this = this;
        var oldDiff = this.lastDiff && this.lastDiff.diff;
        this.updateLastDiff(diff);
        if (!this.dirty && !_equality.equal(oldDiff && oldDiff.result, diff && diff.result)) {
            this.dirty = true;
            if (!this.notifyTimeout) this.notifyTimeout = setTimeout(function() {
                return _this.notify();
            }, 0);
        }
    };
    QueryInfo1.prototype.setObservableQuery = function(oq) {
        var _this = this;
        if (oq === this.observableQuery) return;
        if (this.oqListener) this.listeners.delete(this.oqListener);
        this.observableQuery = oq;
        if (oq) {
            oq["queryInfo"] = this;
            this.listeners.add(this.oqListener = function() {
                if (_this.getDiff().fromOptimisticTransaction) oq["observe"]();
                else oq.reobserve();
            });
        } else delete this.oqListener;
    };
    QueryInfo1.prototype.notify = function() {
        var _this = this;
        cancelNotifyTimeout(this);
        if (this.shouldNotify()) this.listeners.forEach(function(listener) {
            return listener(_this);
        });
        this.dirty = false;
    };
    QueryInfo1.prototype.shouldNotify = function() {
        if (!this.dirty || !this.listeners.size) return false;
        if (_networkStatusJs.isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {
            var fetchPolicy = this.observableQuery.options.fetchPolicy;
            if (fetchPolicy !== "cache-only" && fetchPolicy !== "cache-and-network") return false;
        }
        return true;
    };
    QueryInfo1.prototype.stop = function() {
        if (!this.stopped) {
            this.stopped = true;
            this.reset();
            this.cancel();
            this.cancel = QueryInfo1.prototype.cancel;
            this.subscriptions.forEach(function(sub) {
                return sub.unsubscribe();
            });
            var oq = this.observableQuery;
            if (oq) oq.stopPolling();
        }
    };
    QueryInfo1.prototype.cancel = function() {
    };
    QueryInfo1.prototype.updateWatch = function(variables) {
        var _this = this;
        if (variables === void 0) variables = this.variables;
        var oq = this.observableQuery;
        if (oq && oq.options.fetchPolicy === "no-cache") return;
        var watchOptions = _tslib.__assign(_tslib.__assign({
        }, this.getDiffOptions(variables)), {
            watcher: this,
            callback: function(diff) {
                return _this.setDiff(diff);
            }
        });
        if (!this.lastWatch || !_equality.equal(watchOptions, this.lastWatch)) {
            this.cancel();
            this.cancel = this.cache.watch(this.lastWatch = watchOptions);
        }
    };
    QueryInfo1.prototype.resetLastWrite = function() {
        this.lastWrite = void 0;
    };
    QueryInfo1.prototype.shouldWrite = function(result, variables) {
        var lastWrite = this.lastWrite;
        return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && _equality.equal(variables, lastWrite.variables) && _equality.equal(result.data, lastWrite.result.data));
    };
    QueryInfo1.prototype.markResult = function(result, options, cacheWriteBehavior) {
        var _this = this;
        this.graphQLErrors = _indexJs.isNonEmptyArray(result.errors) ? result.errors : [];
        this.reset();
        if (options.fetchPolicy === 'no-cache') this.updateLastDiff({
            result: result.data,
            complete: true
        }, this.getDiffOptions(options.variables));
        else if (cacheWriteBehavior !== 0) {
            if (shouldWriteResult(result, options.errorPolicy)) this.cache.performTransaction(function(cache) {
                if (_this.shouldWrite(result, options.variables)) {
                    cache.writeQuery({
                        query: _this.document,
                        data: result.data,
                        variables: options.variables,
                        overwrite: cacheWriteBehavior === 1
                    });
                    _this.lastWrite = {
                        result: result,
                        variables: options.variables,
                        dmCount: destructiveMethodCounts.get(_this.cache)
                    };
                } else if (_this.lastDiff && _this.lastDiff.diff.complete) {
                    result.data = _this.lastDiff.diff.result;
                    return;
                }
                var diffOptions = _this.getDiffOptions(options.variables);
                var diff = cache.diff(diffOptions);
                if (!_this.stopped) _this.updateWatch(options.variables);
                _this.updateLastDiff(diff, diffOptions);
                if (diff.complete) result.data = diff.result;
            });
            else this.lastWrite = void 0;
        }
    };
    QueryInfo1.prototype.markReady = function() {
        this.networkError = null;
        return this.networkStatus = _networkStatusJs.NetworkStatus.ready;
    };
    QueryInfo1.prototype.markError = function(error) {
        this.networkStatus = _networkStatusJs.NetworkStatus.error;
        this.lastWrite = void 0;
        this.reset();
        if (error.graphQLErrors) this.graphQLErrors = error.graphQLErrors;
        if (error.networkError) this.networkError = error.networkError;
        return error;
    };
    return QueryInfo1;
}();
function shouldWriteResult(result, errorPolicy) {
    if (errorPolicy === void 0) errorPolicy = "none";
    var ignoreErrors = errorPolicy === "ignore" || errorPolicy === "all";
    var writeWithErrors = !_indexJs.graphQLResultHasError(result);
    if (!writeWithErrors && ignoreErrors && result.data) writeWithErrors = true;
    return writeWithErrors;
}

},{"tslib":"bjkXk","@wry/equality":"i9esi","../utilities/index.js":"fhAGU","./networkStatus.js":"jW3Zk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"42MPA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1g5En":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gql", ()=>gql
);
parcelHelpers.export(exports, "resetCaches", ()=>resetCaches
);
parcelHelpers.export(exports, "disableFragmentWarnings", ()=>disableFragmentWarnings
);
parcelHelpers.export(exports, "enableExperimentalFragmentVariables", ()=>enableExperimentalFragmentVariables
);
parcelHelpers.export(exports, "disableExperimentalFragmentVariables", ()=>disableExperimentalFragmentVariables
);
var _tslib = require("tslib");
var _graphql = require("graphql");
var docCache = new Map();
var fragmentSourceMap = new Map();
var printFragmentWarnings = true;
var experimentalFragmentVariables = false;
function normalize(string) {
    return string.replace(/[\s,]+/g, ' ').trim();
}
function cacheKeyFromLoc(loc) {
    return normalize(loc.source.body.substring(loc.start, loc.end));
}
function processFragments(ast) {
    var seenKeys = new Set();
    var definitions = [];
    ast.definitions.forEach(function(fragmentDefinition) {
        if (fragmentDefinition.kind === 'FragmentDefinition') {
            var fragmentName = fragmentDefinition.name.value;
            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
            var sourceKeySet = fragmentSourceMap.get(fragmentName);
            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
                if (printFragmentWarnings) console.warn("Warning: fragment with name " + fragmentName + " already exists.\n" + "graphql-tag enforces all fragment names across your application to be unique; read more about\n" + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
            } else if (!sourceKeySet) fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);
            sourceKeySet.add(sourceKey);
            if (!seenKeys.has(sourceKey)) {
                seenKeys.add(sourceKey);
                definitions.push(fragmentDefinition);
            }
        } else definitions.push(fragmentDefinition);
    });
    return _tslib.__assign(_tslib.__assign({
    }, ast), {
        definitions: definitions
    });
}
function stripLoc(doc) {
    var workSet = new Set(doc.definitions);
    workSet.forEach(function(node) {
        if (node.loc) delete node.loc;
        Object.keys(node).forEach(function(key) {
            var value = node[key];
            if (value && typeof value === 'object') workSet.add(value);
        });
    });
    var loc = doc.loc;
    if (loc) {
        delete loc.startToken;
        delete loc.endToken;
    }
    return doc;
}
function parseDocument(source) {
    var cacheKey = normalize(source);
    if (!docCache.has(cacheKey)) {
        var parsed = _graphql.parse(source, {
            experimentalFragmentVariables: experimentalFragmentVariables
        });
        if (!parsed || parsed.kind !== 'Document') throw new Error('Not a valid GraphQL document.');
        docCache.set(cacheKey, stripLoc(processFragments(parsed)));
    }
    return docCache.get(cacheKey);
}
function gql(literals) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    if (typeof literals === 'string') literals = [
        literals
    ];
    var result = literals[0];
    args.forEach(function(arg, i) {
        if (arg && arg.kind === 'Document') result += arg.loc.source.body;
        else result += arg;
        result += literals[i + 1];
    });
    return parseDocument(result);
}
function resetCaches() {
    docCache.clear();
    fragmentSourceMap.clear();
}
function disableFragmentWarnings() {
    printFragmentWarnings = false;
}
function enableExperimentalFragmentVariables() {
    experimentalFragmentVariables = true;
}
function disableExperimentalFragmentVariables() {
    experimentalFragmentVariables = false;
}
var extras = {
    gql: gql,
    resetCaches: resetCaches,
    disableFragmentWarnings: disableFragmentWarnings,
    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,
    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables
};
(function(gql_1) {
    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
})(gql || (gql = {
}));
gql["default"] = gql;
exports.default = gql;

},{"tslib":"bjkXk","graphql":"6yWt3","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5hoGf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApolloClients", ()=>ApolloClients
);
parcelHelpers.export(exports, "DefaultApolloClient", ()=>DefaultApolloClient
);
parcelHelpers.export(exports, "provideApolloClient", ()=>provideApolloClient
);
parcelHelpers.export(exports, "useApolloClient", ()=>useApolloClient
);
parcelHelpers.export(exports, "useGlobalMutationLoading", ()=>useGlobalMutationLoading
);
parcelHelpers.export(exports, "useGlobalQueryLoading", ()=>useGlobalQueryLoading
);
parcelHelpers.export(exports, "useGlobalSubscriptionLoading", ()=>useGlobalSubscriptionLoading
);
parcelHelpers.export(exports, "useLazyQuery", ()=>useLazyQuery
);
parcelHelpers.export(exports, "useMutation", ()=>useMutation
);
parcelHelpers.export(exports, "useMutationLoading", ()=>useMutationLoading
);
parcelHelpers.export(exports, "useQuery", ()=>useQuery
);
parcelHelpers.export(exports, "useQueryLoading", ()=>useQueryLoading
);
parcelHelpers.export(exports, "useResult", ()=>useResult
);
parcelHelpers.export(exports, "useSubscription", ()=>useSubscription
);
parcelHelpers.export(exports, "useSubscriptionLoading", ()=>useSubscriptionLoading
);
// src/useQuery.ts
var _vueDemi = require("vue-demi");
var _throttleDebounce = require("throttle-debounce");
// src/util/toApolloError.ts
var _core = require("@apollo/client/core");
var DefaultApolloClient = Symbol("default-apollo-client");
var ApolloClients = Symbol("apollo-clients");
function resolveDefaultClient(providedApolloClients, providedApolloClient) {
    const resolvedClient = providedApolloClients ? providedApolloClients.default : providedApolloClient != null ? providedApolloClient : void 0;
    return resolvedClient;
}
function resolveClientWithId(providedApolloClients, clientId) {
    if (!providedApolloClients) throw new Error(`No apolloClients injection found, tried to resolve '${clientId}' clientId`);
    return providedApolloClients[clientId];
}
function useApolloClient(clientId) {
    let resolveImpl;
    if (!_vueDemi.getCurrentInstance()) resolveImpl = ()=>currentApolloClient
    ;
    else {
        const providedApolloClients = _vueDemi.inject(ApolloClients, null);
        const providedApolloClient = _vueDemi.inject(DefaultApolloClient, null);
        resolveImpl = (id)=>{
            if (currentApolloClient) return currentApolloClient;
            else if (id) return resolveClientWithId(providedApolloClients, id);
            return resolveDefaultClient(providedApolloClients, providedApolloClient);
        };
    }
    function resolveClient(id = clientId) {
        const client = resolveImpl(id);
        if (!client) throw new Error(`Apollo client with id ${id != null ? id : "default"} not found. Use provideApolloClient() if you are outside of a component setup.`);
        return client;
    }
    return {
        resolveClient,
        get client () {
            return resolveClient();
        }
    };
}
var currentApolloClient;
function provideApolloClient(client) {
    currentApolloClient = client;
    return function(fn) {
        const result = fn();
        currentApolloClient = void 0;
        return result;
    };
}
function paramToRef(param) {
    if (_vueDemi.isRef(param)) return param;
    else if (typeof param === "function") return _vueDemi.computed(param);
    else return _vueDemi.ref(param);
}
function paramToReactive(param) {
    if (_vueDemi.isRef(param)) return param;
    else if (typeof param === "function") return _vueDemi.computed(param);
    else if (param) return _vueDemi.reactive(param);
    else return param;
}
// src/util/useEventHook.ts
function useEventHook() {
    const fns = [];
    function on(fn) {
        fns.push(fn);
        return {
            off: ()=>off(fn)
        };
    }
    function off(fn) {
        const index = fns.indexOf(fn);
        if (index !== -1) fns.splice(index, 1);
    }
    function trigger(param) {
        for (const fn of fns)fn(param);
    }
    function getCount() {
        return fns.length;
    }
    return {
        on,
        off,
        trigger,
        getCount
    };
}
function getAppTracking() {
    var _a;
    const vm = _vueDemi.getCurrentInstance();
    const root = (_a = vm == null ? void 0 : vm.$root) != null ? _a : vm == null ? void 0 : vm.root;
    if (!root) throw new Error("Instance $root not found");
    let appTracking;
    if (!root._apolloAppTracking) appTracking = root._apolloAppTracking = {
        queries: _vueDemi.ref(0),
        mutations: _vueDemi.ref(0),
        subscriptions: _vueDemi.ref(0),
        components: new Map()
    };
    else appTracking = root._apolloAppTracking;
    return {
        appTracking
    };
}
function getCurrentTracking() {
    const vm = _vueDemi.getCurrentInstance();
    if (!vm) throw new Error("getCurrentTracking must be used during a component setup");
    const { appTracking  } = getAppTracking();
    let tracking;
    if (!appTracking.components.has(vm)) {
        appTracking.components.set(vm, tracking = {
            queries: _vueDemi.ref(0),
            mutations: _vueDemi.ref(0),
            subscriptions: _vueDemi.ref(0)
        });
        _vueDemi.onUnmounted(()=>{
            appTracking.components.delete(vm);
        });
    } else tracking = appTracking.components.get(vm);
    return {
        appTracking,
        tracking
    };
}
function track(loading, type) {
    const { appTracking , tracking  } = getCurrentTracking();
    _vueDemi.watch(loading, (value, oldValue)=>{
        if (oldValue != null && value !== oldValue) {
            const mod = value ? 1 : -1;
            tracking[type].value += mod;
            appTracking[type].value += mod;
        }
    }, {
        immediate: true
    });
    _vueDemi.onBeforeUnmount(()=>{
        if (loading.value) {
            tracking[type].value--;
            appTracking[type].value--;
        }
    });
}
function trackQuery(loading) {
    track(loading, "queries");
}
function trackMutation(loading) {
    track(loading, "mutations");
}
function trackSubscription(loading) {
    track(loading, "subscriptions");
}
function toApolloError(error) {
    if (!(error instanceof Error)) return new _core.ApolloError({
        networkError: Object.assign(new Error(), {
            originalError: error
        }),
        errorMessage: String(error)
    });
    if (_core.isApolloError(error)) return error;
    return new _core.ApolloError({
        networkError: error,
        errorMessage: error.message
    });
}
// src/useQuery.ts
function useQuery(document, variables, options) {
    return useQueryImpl(document, variables, options);
}
function useQueryImpl(document, variables, options = {
}, lazy = false) {
    var _a, _b;
    const vm = _vueDemi.getCurrentInstance();
    const isServer = (_a = vm == null ? void 0 : vm.$isServer) != null ? _a : false;
    const currentOptions = _vueDemi.ref();
    const documentRef = paramToRef(document);
    const variablesRef = paramToRef(variables);
    const optionsRef = paramToReactive(options);
    const result = _vueDemi.ref();
    const resultEvent = useEventHook();
    const error = _vueDemi.ref(null);
    const errorEvent = useEventHook();
    const loading = _vueDemi.ref(false);
    vm && trackQuery(loading);
    const networkStatus = _vueDemi.ref();
    let firstResolve;
    let firstReject;
    (_b = _vueDemi.onServerPrefetch) == null || _b(()=>{
        var _a2;
        if (!isEnabled.value || isServer && ((_a2 = currentOptions.value) == null ? void 0 : _a2.prefetch) === false) return;
        return new Promise((resolve, reject)=>{
            firstResolve = ()=>{
                resolve();
                firstResolve = void 0;
                firstReject = void 0;
            };
            firstReject = (apolloError)=>{
                reject(apolloError);
                firstResolve = void 0;
                firstReject = void 0;
            };
        }).then(stop).catch(stop);
    });
    const { resolveClient  } = useApolloClient();
    const query = _vueDemi.ref();
    let observer;
    let started = false;
    function start() {
        var _a2, _b2, _c, _d;
        if (started || !isEnabled.value || isServer && ((_a2 = currentOptions.value) == null ? void 0 : _a2.prefetch) === false) {
            if (firstResolve) firstResolve();
            return;
        }
        started = true;
        loading.value = true;
        const client = resolveClient((_b2 = currentOptions.value) == null ? void 0 : _b2.clientId);
        query.value = client.watchQuery({
            query: currentDocument,
            variables: currentVariables,
            ...currentOptions.value,
            ...isServer ? {
                fetchPolicy: "network-only"
            } : {
            }
        });
        startQuerySubscription();
        if (!isServer && (((_c = currentOptions.value) == null ? void 0 : _c.fetchPolicy) !== "no-cache" || currentOptions.value.notifyOnNetworkStatusChange)) {
            const currentResult = query.value.getCurrentResult();
            if (!currentResult.loading || currentResult.partial || ((_d = currentOptions.value) == null ? void 0 : _d.notifyOnNetworkStatusChange)) onNextResult(currentResult);
        }
        if (!isServer) for (const item of subscribeToMoreItems)addSubscribeToMore(item);
    }
    function startQuerySubscription() {
        if (observer && !observer.closed) return;
        if (!query.value) return;
        observer = query.value.subscribe({
            next: onNextResult,
            error: onError
        });
    }
    function onNextResult(queryResult) {
        error.value = null;
        processNextResult(queryResult);
        if (queryResult.error !== void 0) processError(queryResult.error);
        else if (firstResolve) {
            firstResolve();
            stop();
        }
    }
    function processNextResult(queryResult) {
        result.value = queryResult.data && Object.keys(queryResult.data).length === 0 ? void 0 : queryResult.data;
        loading.value = queryResult.loading;
        networkStatus.value = queryResult.networkStatus;
        resultEvent.trigger(queryResult);
    }
    function onError(queryError) {
        const apolloError = toApolloError(queryError);
        processNextResult(query.value.getCurrentResult());
        processError(apolloError);
        if (firstReject) {
            firstReject(apolloError);
            stop();
        }
        resubscribeToQuery();
    }
    function processError(apolloError) {
        error.value = apolloError;
        loading.value = false;
        networkStatus.value = 8;
        errorEvent.trigger(apolloError);
    }
    function resubscribeToQuery() {
        if (!query.value) return;
        const lastError = query.value.getLastError();
        const lastResult = query.value.getLastResult();
        query.value.resetLastResults();
        startQuerySubscription();
        Object.assign(query.value, {
            lastError,
            lastResult
        });
    }
    let onStopHandlers = [];
    function stop() {
        if (firstResolve) firstResolve();
        if (!started) return;
        started = false;
        loading.value = false;
        onStopHandlers.forEach((handler)=>handler()
        );
        onStopHandlers = [];
        if (query.value) {
            query.value.stopPolling();
            query.value = null;
        }
        if (observer) {
            observer.unsubscribe();
            observer = void 0;
        }
    }
    let restarting = false;
    function baseRestart() {
        if (!started || restarting) return;
        restarting = true;
        _vueDemi.nextTick(()=>{
            if (started) {
                stop();
                start();
            }
            restarting = false;
        });
    }
    let debouncedRestart;
    let isRestartDebounceSetup = false;
    function updateRestartFn() {
        var _a2, _b2;
        if (!currentOptions) debouncedRestart = baseRestart;
        else {
            if ((_a2 = currentOptions.value) == null ? void 0 : _a2.throttle) debouncedRestart = _throttleDebounce.throttle(currentOptions.value.throttle, baseRestart);
            else if ((_b2 = currentOptions.value) == null ? void 0 : _b2.debounce) debouncedRestart = _throttleDebounce.debounce(currentOptions.value.debounce, baseRestart);
            else debouncedRestart = baseRestart;
            isRestartDebounceSetup = true;
        }
    }
    function restart() {
        if (!isRestartDebounceSetup) updateRestartFn();
        debouncedRestart();
    }
    let currentDocument;
    _vueDemi.watch(documentRef, (value)=>{
        currentDocument = value;
        restart();
    }, {
        immediate: true
    });
    let currentVariables;
    let currentVariablesSerialized;
    _vueDemi.watch(variablesRef, (value, oldValue)=>{
        const serialized = JSON.stringify(value);
        if (serialized !== currentVariablesSerialized) {
            currentVariables = value;
            restart();
        }
        currentVariablesSerialized = serialized;
    }, {
        deep: true,
        immediate: true
    });
    _vueDemi.watch(()=>_vueDemi.isRef(optionsRef) ? optionsRef.value : optionsRef
    , (value)=>{
        if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) updateRestartFn();
        currentOptions.value = value;
        restart();
    }, {
        deep: true,
        immediate: true
    });
    function refetch(variables2) {
        if (query.value) {
            if (variables2) currentVariables = variables2;
            return query.value.refetch(variables2);
        }
    }
    function fetchMore(options2) {
        if (query.value) return query.value.fetchMore(options2);
    }
    const subscribeToMoreItems = [];
    function subscribeToMore(options2) {
        if (isServer) return;
        const optionsRef2 = paramToRef(options2);
        _vueDemi.watch(optionsRef2, (value, oldValue, onCleanup)=>{
            const index = subscribeToMoreItems.findIndex((item2)=>item2.options === oldValue
            );
            if (index !== -1) subscribeToMoreItems.splice(index, 1);
            const item = {
                options: value,
                unsubscribeFns: []
            };
            subscribeToMoreItems.push(item);
            addSubscribeToMore(item);
            onCleanup(()=>{
                item.unsubscribeFns.forEach((fn)=>fn()
                );
                item.unsubscribeFns = [];
            });
        }, {
            immediate: true
        });
    }
    function addSubscribeToMore(item) {
        if (!started) return;
        if (!query.value) throw new Error("Query is not defined");
        const unsubscribe = query.value.subscribeToMore(item.options);
        onStopHandlers.push(unsubscribe);
        item.unsubscribeFns.push(unsubscribe);
    }
    const forceDisabled = _vueDemi.ref(lazy);
    const enabledOption = _vueDemi.computed(()=>!currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled
    );
    const isEnabled = _vueDemi.computed(()=>enabledOption.value && !forceDisabled.value
    );
    _vueDemi.watch(isEnabled, (value)=>{
        if (value) start();
        else stop();
    }, {
        immediate: true
    });
    vm && _vueDemi.onBeforeUnmount(()=>{
        stop();
        subscribeToMoreItems.length = 0;
    });
    return {
        result,
        loading,
        networkStatus,
        error,
        start,
        stop,
        restart,
        forceDisabled,
        document: documentRef,
        variables: variablesRef,
        options: optionsRef,
        query,
        refetch,
        fetchMore,
        subscribeToMore,
        onResult: resultEvent.on,
        onError: errorEvent.on
    };
}
function useLazyQuery(document, variables, options) {
    const query = useQueryImpl(document, variables, options, true);
    function load(document2, variables2, options2) {
        if (document2) query.document.value = document2;
        if (variables2) query.variables.value = variables2;
        if (options2) Object.assign(_vueDemi.isRef(query.options) ? query.options.value : query.options, options2);
        query.forceDisabled.value = false;
    }
    return {
        ...query,
        load
    };
}
function useMutation(document, options = {
}) {
    const vm = _vueDemi.getCurrentInstance();
    const loading = _vueDemi.ref(false);
    vm && trackMutation(loading);
    const error = _vueDemi.ref(null);
    const called = _vueDemi.ref(false);
    const doneEvent = useEventHook();
    const errorEvent = useEventHook();
    const { resolveClient  } = useApolloClient();
    async function mutate(variables, overrideOptions = {
    }) {
        let currentDocument;
        if (typeof document === "function") currentDocument = document();
        else if (_vueDemi.isRef(document)) currentDocument = document.value;
        else currentDocument = document;
        let currentOptions;
        if (typeof options === "function") currentOptions = options();
        else if (_vueDemi.isRef(options)) currentOptions = options.value;
        else currentOptions = options;
        const client = resolveClient(currentOptions.clientId);
        error.value = null;
        loading.value = true;
        called.value = true;
        try {
            const result = await client.mutate({
                mutation: currentDocument,
                ...currentOptions,
                ...overrideOptions,
                variables: (variables != null ? variables : currentOptions.variables) ? {
                    ...currentOptions.variables,
                    ...variables
                } : void 0
            });
            loading.value = false;
            doneEvent.trigger(result);
            return result;
        } catch (e) {
            const apolloError = toApolloError(e);
            error.value = apolloError;
            loading.value = false;
            errorEvent.trigger(apolloError);
            if (currentOptions.throws === "always" || currentOptions.throws !== "never" && !errorEvent.getCount()) throw apolloError;
        }
        return null;
    }
    _vueDemi.onBeforeUnmount(()=>{
        loading.value = false;
    });
    return {
        mutate,
        loading,
        error,
        called,
        onDone: doneEvent.on,
        onError: errorEvent.on
    };
}
function useSubscription(document, variables, options = {
}) {
    var _a;
    const vm = _vueDemi.getCurrentInstance();
    const isServer = (_a = vm == null ? void 0 : vm.$isServer) != null ? _a : false;
    const documentRef = paramToRef(document);
    const variablesRef = paramToRef(variables);
    const optionsRef = paramToReactive(options);
    const result = _vueDemi.ref();
    const resultEvent = useEventHook();
    const error = _vueDemi.ref(null);
    const errorEvent = useEventHook();
    const loading = _vueDemi.ref(false);
    vm && trackSubscription(loading);
    const { resolveClient  } = useApolloClient();
    const subscription = _vueDemi.ref(null);
    let observer = null;
    let started = false;
    function start() {
        var _a2;
        if (started || !isEnabled.value || isServer) return;
        started = true;
        loading.value = true;
        const client = resolveClient((_a2 = currentOptions.value) == null ? void 0 : _a2.clientId);
        subscription.value = client.subscribe({
            query: currentDocument,
            variables: currentVariables,
            ...currentOptions.value
        });
        observer = subscription.value.subscribe({
            next: onNextResult,
            error: onError
        });
    }
    function onNextResult(fetchResult) {
        result.value = fetchResult.data;
        loading.value = false;
        resultEvent.trigger(fetchResult);
    }
    function onError(fetchError) {
        const apolloError = toApolloError(fetchError);
        error.value = apolloError;
        loading.value = false;
        errorEvent.trigger(apolloError);
    }
    function stop() {
        if (!started) return;
        started = false;
        loading.value = false;
        if (subscription.value) subscription.value = null;
        if (observer) {
            observer.unsubscribe();
            observer = null;
        }
    }
    let restarting = false;
    function baseRestart() {
        if (!started || restarting) return;
        restarting = true;
        _vueDemi.nextTick(()=>{
            if (started) {
                stop();
                start();
            }
            restarting = false;
        });
    }
    let debouncedRestart;
    function updateRestartFn() {
        var _a2, _b;
        if ((_a2 = currentOptions.value) == null ? void 0 : _a2.throttle) debouncedRestart = _throttleDebounce.throttle(currentOptions.value.throttle, baseRestart);
        else if ((_b = currentOptions.value) == null ? void 0 : _b.debounce) debouncedRestart = _throttleDebounce.debounce(currentOptions.value.debounce, baseRestart);
        else debouncedRestart = baseRestart;
    }
    function restart() {
        if (!debouncedRestart) updateRestartFn();
        debouncedRestart();
    }
    const currentOptions = _vueDemi.ref();
    _vueDemi.watch(()=>_vueDemi.isRef(optionsRef) ? optionsRef.value : optionsRef
    , (value)=>{
        if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) updateRestartFn();
        currentOptions.value = value;
        restart();
    }, {
        deep: true,
        immediate: true
    });
    let currentDocument;
    _vueDemi.watch(documentRef, (value)=>{
        currentDocument = value;
        restart();
    }, {
        immediate: true
    });
    let currentVariables;
    let currentVariablesSerialized;
    _vueDemi.watch(variablesRef, (value, oldValue)=>{
        const serialized = JSON.stringify(value);
        if (serialized !== currentVariablesSerialized) {
            currentVariables = value;
            restart();
        }
        currentVariablesSerialized = serialized;
    }, {
        deep: true,
        immediate: true
    });
    const enabledOption = _vueDemi.computed(()=>!currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled
    );
    const isEnabled = enabledOption;
    _vueDemi.watch(isEnabled, (value)=>{
        if (value) start();
        else stop();
    }, {
        immediate: true
    });
    _vueDemi.onBeforeUnmount(stop);
    return {
        result,
        loading,
        error,
        start,
        stop,
        restart,
        document: documentRef,
        variables: variablesRef,
        options: optionsRef,
        subscription,
        onResult: resultEvent.on,
        onError: errorEvent.on
    };
}
function useResult(result, defaultValue, pick) {
    return _vueDemi.computed(()=>{
        const value = result.value;
        if (value) {
            if (pick) try {
                return pick(value);
            } catch (e) {
            }
            else {
                const keys = Object.keys(value);
                if (keys.length === 1) return value[keys[0]];
                else return value;
            }
        }
        return defaultValue;
    });
}
function useQueryLoading() {
    const { tracking  } = getCurrentTracking();
    return _vueDemi.computed(()=>tracking.queries.value > 0
    );
}
function useMutationLoading() {
    const { tracking  } = getCurrentTracking();
    return _vueDemi.computed(()=>tracking.mutations.value > 0
    );
}
function useSubscriptionLoading() {
    const { tracking  } = getCurrentTracking();
    return _vueDemi.computed(()=>tracking.subscriptions.value > 0
    );
}
function useGlobalQueryLoading() {
    const { appTracking  } = getAppTracking();
    return _vueDemi.computed(()=>appTracking.queries.value > 0
    );
}
function useGlobalMutationLoading() {
    const { appTracking  } = getAppTracking();
    return _vueDemi.computed(()=>appTracking.mutations.value > 0
    );
}
function useGlobalSubscriptionLoading() {
    const { appTracking  } = getAppTracking();
    return _vueDemi.computed(()=>appTracking.subscriptions.value > 0
    );
}

},{"vue-demi":"izY59","throttle-debounce":"9MgKR","@apollo/client/core":"59jsk","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"izY59":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "set", ()=>set
);
parcelHelpers.export(exports, "del", ()=>del
);
parcelHelpers.export(exports, "Vue", ()=>_vue
);
parcelHelpers.export(exports, "Vue2", ()=>Vue2
);
parcelHelpers.export(exports, "isVue2", ()=>isVue2
);
parcelHelpers.export(exports, "isVue3", ()=>isVue3
);
parcelHelpers.export(exports, "install", ()=>install
);
var _vue = require("vue");
parcelHelpers.exportAll(_vue, exports);
var isVue2 = false;
var isVue3 = true;
var Vue2 = undefined;
function install() {
}
function set(target, key, val) {
    if (Array.isArray(target)) {
        target.length = Math.max(target.length, key);
        target.splice(key, 1, val);
        return val;
    }
    target[key] = val;
    return val;
}
function del(target, key) {
    if (Array.isArray(target)) {
        target.splice(key, 1);
        return;
    }
    delete target[key];
}

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9MgKR":[function(require,module,exports) {
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : (global = global || self, factory(global.throttleDebounce = {
    }));
})(this, function(exports) {
    'use strict';
    /* eslint-disable no-undefined,no-param-reassign,no-shadow */ /**
	 * Throttle execution of a function. Especially useful for rate limiting
	 * execution of handlers on events like resize and scroll.
	 *
	 * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
	 * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
	 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
	 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
	 *                                    the internal counter is reset).
	 * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
	 *                                    to `callback` when the throttled-function is executed.
	 * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
	 *                                    schedule `callback` to execute after `delay` ms.
	 *
	 * @returns {Function}  A new, throttled, function.
	 */ function throttle(delay, noTrailing, callback, debounceMode) {
        /*
	   * After wrapper has stopped being called, this timeout ensures that
	   * `callback` is executed at the proper times in `throttle` and `end`
	   * debounce modes.
	   */ var timeoutID;
        var cancelled = false; // Keep track of the last time `callback` was executed.
        var lastExec = 0; // Function to clear existing timeout
        function clearExistingTimeout() {
            if (timeoutID) clearTimeout(timeoutID);
        } // Function to cancel next exec
        function cancel() {
            clearExistingTimeout();
            cancelled = true;
        } // `noTrailing` defaults to falsy.
        if (typeof noTrailing !== 'boolean') {
            debounceMode = callback;
            callback = noTrailing;
            noTrailing = undefined;
        }
        /*
	   * The `wrapper` function encapsulates all of the throttling / debouncing
	   * functionality and when executed will limit the rate at which `callback`
	   * is executed.
	   */ function wrapper() {
            for(var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++)arguments_[_key] = arguments[_key];
            var self = this;
            var elapsed = Date.now() - lastExec;
            if (cancelled) return;
             // Execute `callback` and update the `lastExec` timestamp.
            function exec() {
                lastExec = Date.now();
                callback.apply(self, arguments_);
            }
            /*
	     * If `debounceMode` is true (at begin) this is used to clear the flag
	     * to allow future `callback` executions.
	     */ function clear() {
                timeoutID = undefined;
            }
            if (debounceMode && !timeoutID) /*
	       * Since `wrapper` is being called for the first time and
	       * `debounceMode` is true (at begin), execute `callback`.
	       */ exec();
            clearExistingTimeout();
            if (debounceMode === undefined && elapsed > delay) /*
	       * In throttle mode, if `delay` time has been exceeded, execute
	       * `callback`.
	       */ exec();
            else if (noTrailing !== true) /*
	       * In trailing throttle mode, since `delay` time has not been
	       * exceeded, schedule `callback` to execute `delay` ms after most
	       * recent execution.
	       *
	       * If `debounceMode` is true (at begin), schedule `clear` to execute
	       * after `delay` ms.
	       *
	       * If `debounceMode` is false (at end), schedule `callback` to
	       * execute after `delay` ms.
	       */ timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
        }
        wrapper.cancel = cancel; // Return the wrapper function.
        return wrapper;
    }
    /* eslint-disable no-undefined */ /**
	 * Debounce execution of a function. Debouncing, unlike throttling,
	 * guarantees that a function is only executed a single time, either at the
	 * very beginning of a series of calls, or at the very end.
	 *
	 * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
	 * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds
	 *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.
	 *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).
	 * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
	 *                                  to `callback` when the debounced-function is executed.
	 *
	 * @returns {Function} A new, debounced function.
	 */ function debounce(delay, atBegin, callback) {
        return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
    }
    exports.debounce = debounce;
    exports.throttle = throttle;
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
});

},{}],"aqnh3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./App.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./App.vue').render;
    script.__cssModules = require('style:./App.vue').default;
    require('custom:./App.vue').default(script);
    script.__scopeId = 'data-v-54ef43';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/App.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '54ef43-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('54ef43-hmr', script)) __VUE_HMR_RUNTIME__.reload('54ef43-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./App.vue":"bIHe3","template:./App.vue":"7XIqD","style:./App.vue":"6XVpc","custom:./App.vue":"jcrTm","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bIHe3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sectionVue = require("./Section.vue");
var _sectionVueDefault = parcelHelpers.interopDefault(_sectionVue);
var _menuHorizontalVue = require("./MenuHorizontal.vue");
var _menuHorizontalVueDefault = parcelHelpers.interopDefault(_menuHorizontalVue);
var _menuCollapsibleVue = require("./MenuCollapsible.vue");
var _menuCollapsibleVueDefault = parcelHelpers.interopDefault(_menuCollapsibleVue);
var _vue = require("vue");
var _busJs = require("../bus.js");
var _busJsDefault = parcelHelpers.interopDefault(_busJs);
var _querierJs = require("../querier.js");
var _querierJsDefault = parcelHelpers.interopDefault(_querierJs);
exports.default = {
    components: {
        Section: _sectionVueDefault.default,
        MenuHorizontal: _menuHorizontalVueDefault.default,
        MenuCollapsible: _menuCollapsibleVueDefault.default
    },
    setup () {
        const { loading , data  } = _querierJsDefault.default.home();
        return {
            bus: new _busJsDefault.default(),
            menu: _vue.ref(null),
            loading,
            data
        };
    },
    methods: {
        once (event, f) {
            this.bus.once(event, f);
        },
        onPageLoaded () {
            this.bus.emit('pageLoaded');
        },
        onScrolledToSection (section) {
            this.menu.activate(section);
        }
    }
};

},{"./Section.vue":"3FqvA","./MenuHorizontal.vue":"gJ14k","./MenuCollapsible.vue":"fNn3z","vue":"eg0LR","../bus.js":"kKlI0","../querier.js":"4Scx8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3FqvA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Section.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Section.vue').render;
    script.__cssModules = require('style:./Section.vue').default;
    require('custom:./Section.vue').default(script);
    script.__scopeId = 'data-v-f0754f';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/Section.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = 'f0754f-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('f0754f-hmr', script)) __VUE_HMR_RUNTIME__.reload('f0754f-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Section.vue":"9a2SB","template:./Section.vue":"5FG3e","style:./Section.vue":"41yhq","custom:./Section.vue":"fHxAZ","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"9a2SB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    props: [
        'title',
        'flow'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5FG3e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-f0754f");
_vue.pushScopeId("data-v-f0754f");
const _hoisted_1 = {
    class: "wrapper"
};
const _hoisted_2 = {
    key: 0
};
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    return _vue.openBlock(), _vue.createBlock("section", _hoisted_1, [
        _vue.createVNode("section", {
            id: "main",
            class: _ctx.flow
        }, [
            _ctx.title ? (_vue.openBlock(), _vue.createBlock("h2", _hoisted_2, _vue.toDisplayString(_ctx.title), 1 /* TEXT */ )) : _vue.createCommentVNode("v-if", true),
            _vue.renderSlot(_ctx.$slots, "default")
        ], 2 /* CLASS */ )
    ]);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('f0754f-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"41yhq":[function() {},{}],"fHxAZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"gJ14k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./MenuHorizontal.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./MenuHorizontal.vue').render;
    script.__cssModules = require('style:./MenuHorizontal.vue').default;
    require('custom:./MenuHorizontal.vue').default(script);
    script.__scopeId = 'data-v-a0a62c';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/MenuHorizontal.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = 'a0a62c-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('a0a62c-hmr', script)) __VUE_HMR_RUNTIME__.reload('a0a62c-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./MenuHorizontal.vue":"kb1Cr","template:./MenuHorizontal.vue":"2Xh7k","style:./MenuHorizontal.vue":"btMph","custom:./MenuHorizontal.vue":"8u6AR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kb1Cr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    methods: {
        activate (item) {
            // if null, clear active mark
            if (!item) {
                this.$el.querySelector('.selected')?.classList.remove('selected');
                return;
            }
            const next = this.$refs[item];
            if (next) {
                const selected = this.$el.querySelector('.selected');
                if (selected !== next) {
                    selected?.classList.remove('selected');
                    next.classList.add('selected');
                }
            }
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2Xh7k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-a0a62c");
_vue.pushScopeId("data-v-a0a62c");
const _hoisted_1 = {
    ref: "inicio"
};
const _hoisted_2 = /*#__PURE__*/ _vue.createTextVNode("Início");
const _hoisted_3 = {
    ref: "sobre-nos"
};
const _hoisted_4 = /*#__PURE__*/ _vue.createTextVNode("Sobre Nós");
const _hoisted_5 = {
    ref: "sermoes"
};
const _hoisted_6 = /*#__PURE__*/ _vue.createTextVNode("Sermões");
const _hoisted_7 = {
    ref: "ministerios"
};
const _hoisted_8 = /*#__PURE__*/ _vue.createTextVNode("Ministérios");
const _hoisted_9 = {
    ref: "contato"
};
const _hoisted_10 = /*#__PURE__*/ _vue.createTextVNode("Contato");
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_router_link = _vue.resolveComponent("router-link");
    return _vue.openBlock(), _vue.createBlock("nav", null, [
        _vue.createVNode("span", _hoisted_1, [
            _vue.createVNode(_component_router_link, {
                to: "/#inicio"
            }, {
                default: _withId(()=>[
                        _hoisted_2
                    ]
                ),
                _: 1 /* STABLE */ 
            })
        ], 512 /* NEED_PATCH */ ),
        _vue.createVNode("span", _hoisted_3, [
            _vue.createVNode(_component_router_link, {
                to: "/#sobre-nos"
            }, {
                default: _withId(()=>[
                        _hoisted_4
                    ]
                ),
                _: 1 /* STABLE */ 
            })
        ], 512 /* NEED_PATCH */ ),
        _vue.createVNode("span", _hoisted_5, [
            _vue.createVNode(_component_router_link, {
                to: "/#sermoes"
            }, {
                default: _withId(()=>[
                        _hoisted_6
                    ]
                ),
                _: 1 /* STABLE */ 
            })
        ], 512 /* NEED_PATCH */ ),
        _vue.createVNode("span", _hoisted_7, [
            _vue.createVNode(_component_router_link, {
                to: "/#ministerios"
            }, {
                default: _withId(()=>[
                        _hoisted_8
                    ]
                ),
                _: 1 /* STABLE */ 
            })
        ], 512 /* NEED_PATCH */ ),
        _vue.createVNode("span", _hoisted_9, [
            _vue.createVNode(_component_router_link, {
                to: "/#contato"
            }, {
                default: _withId(()=>[
                        _hoisted_10
                    ]
                ),
                _: 1 /* STABLE */ 
            })
        ], 512 /* NEED_PATCH */ )
    ]);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('a0a62c-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"btMph":[function() {},{}],"8u6AR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fNn3z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./MenuCollapsible.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./MenuCollapsible.vue').render;
    script.__cssModules = require('style:./MenuCollapsible.vue').default;
    require('custom:./MenuCollapsible.vue').default(script);
    script.__scopeId = 'data-v-268374';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/MenuCollapsible.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '268374-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('268374-hmr', script)) __VUE_HMR_RUNTIME__.reload('268374-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./MenuCollapsible.vue":"1aitK","template:./MenuCollapsible.vue":"6b9Qs","style:./MenuCollapsible.vue":"cJk3V","custom:./MenuCollapsible.vue":"laOLS","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1aitK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    data: function() {
        return {
            menuVisible: false
        };
    },
    methods: {
        toggleMenu: function() {
            this.menuVisible = !this.menuVisible;
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6b9Qs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-268374");
_vue.pushScopeId("data-v-268374");
const _hoisted_1 = {
    id: "content"
};
const _hoisted_2 = /*#__PURE__*/ _vue.createTextVNode(" Menu ");
const _hoisted_3 = /*#__PURE__*/ _vue.createVNode("i", {
    id: "arrow",
    class: "fas fa-angle-double-down"
}, null, -1 /* HOISTED */ );
const _hoisted_4 = /*#__PURE__*/ _vue.createVNode("a", {
    href: "/#sobre-nos"
}, "Sobre Nós", -1 /* HOISTED */ );
const _hoisted_5 = /*#__PURE__*/ _vue.createVNode("a", {
    href: "/#sermoes"
}, "Sermões", -1 /* HOISTED */ );
const _hoisted_6 = /*#__PURE__*/ _vue.createVNode("a", {
    href: "/#ministerios"
}, "Ministérios", -1 /* HOISTED */ );
const _hoisted_7 = /*#__PURE__*/ _vue.createVNode("a", {
    href: "/#contato"
}, "Contato", -1 /* HOISTED */ );
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    return _vue.openBlock(), _vue.createBlock("div", _hoisted_1, [
        _vue.createVNode("a", {
            id: "menu",
            href: "#",
            onclick: _ctx.toggleMenu,
            class: {
                active: _ctx.menuVisible
            }
        }, [
            _hoisted_2,
            _hoisted_3
        ], 10 /* CLASS, PROPS */ , [
            "onclick"
        ]),
        _vue.createVNode("nav", {
            class: {
                hidden: !_ctx.menuVisible
            }
        }, [
            _hoisted_4,
            _hoisted_5,
            _hoisted_6,
            _hoisted_7
        ], 2 /* CLASS */ )
    ]);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('268374-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cJk3V":[function() {},{}],"laOLS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kKlI0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Bus {
    constructor(){
        this.last = {
        };
        this.callbacks = {
        };
    }
    once(event, f) {
        if (this.last[event]) {
            f();
            delete this.last[event];
            return;
        }
        this.callbacks[event] = this.callbacks[event] || [];
        this.callbacks[event].push(f);
    }
    emit(event) {
        if (!this.callbacks[event]?.length) {
            this.last[event] = true;
            return;
        }
        while(this.callbacks[event]?.length)this.callbacks[event].shift()();
    }
}
exports.default = Bus;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4Scx8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _apolloComposable = require("@vue/apollo-composable");
var _graphqlTag = require("graphql-tag");
var _graphqlTagDefault = parcelHelpers.interopDefault(_graphqlTag);
exports.default = {
    home: ()=>{
        const { result , loading  } = _apolloComposable.useQuery(_graphqlTagDefault.default`\n      query {\n        site: generalSettings {\n          title\n          description\n        }\n        theme: crbThemeOptions {\n          logo\n          welcomeTitle\n          welcomeSubtitle\n          welcomeVideo\n          banners {\n            image\n            page {\n              uri\n            }\n          }\n          aboutUs {\n            title\n            content\n            image\n            actions {\n              text\n              page {\n                uri\n              }\n            }\n          }\n          groups {\n            name\n            image\n            page {\n              uri\n            }\n          }\n          contactWhatsapp,\n          contactPhone,\n          contactLocation,\n          contactEmail,\n          footerFirstTitle,\n          footerFirst,\n          footerSecondTitle,\n          footerSecond,\n          socialYoutube,\n          socialInstagram,\n          socialFacebook,\n          socialSpotify,\n        }\n        sermons: sermonSeries {\n          nodes {\n            name\n            slug\n            count\n            image\n          }\n        }\n      }`);
        return {
            loading,
            data: _apolloComposable.useResult(result, null, (data)=>({
                    title: data.site.title,
                    subtitle: data.site.description,
                    logo: data.theme.logo,
                    welcome: {
                        title: data.theme.welcomeTitle,
                        subtitle: data.theme.welcomeSubtitle,
                        video: data.theme.welcomeVideo
                    },
                    banners: data.theme.banners.map((banner)=>({
                            image: banner.image,
                            uri: banner.page[0]?.uri
                        })
                    ),
                    aboutUs: data.theme.aboutUs.map((about)=>({
                            title: about.title,
                            content: about.content,
                            image: about.image,
                            buttons: about.actions.map((action)=>({
                                    text: action.text,
                                    uri: action.page[0]?.uri
                                })
                            )
                        })
                    ),
                    sermons: data.sermons.nodes.map((series)=>({
                            name: series.name,
                            image: series.image,
                            slug: series.slug,
                            count: series.count ?? 0
                        })
                    ),
                    groups: data.theme.groups.map((group)=>({
                            name: group.name,
                            image: group.image,
                            uri: group.page[0]?.uri
                        })
                    ),
                    contact: {
                        whatsapp: data.theme.contactWhatsapp,
                        phone: data.theme.contactPhone,
                        location: data.theme.contactLocation,
                        email: data.theme.contactEmail
                    },
                    footer: {
                        first: {
                            title: data.theme.footerFirstTitle,
                            content: data.theme.footerFirst
                        },
                        second: {
                            title: data.theme.footerSecondTitle,
                            content: data.theme.footerSecond
                        },
                        social: {
                            youtube: data.theme.socialYoutube,
                            instagram: data.theme.socialInstagram,
                            facebook: data.theme.socialFacebook,
                            spotify: data.theme.socialSpotify
                        }
                    }
                })
            )
        };
    },
    page: (uri)=>{
        const { result , loading  } = _apolloComposable.useQuery(_graphqlTagDefault.default`\n      query {\n        theme: crbThemeOptions {\n          bannerStandalonePage\n        }\n        page: pageBy(uri: "${uri}") {\n          title\n          content\n        }\n      }`);
        return {
            loading,
            data: _apolloComposable.useResult(result, null, (data)=>({
                    banner: data.theme.bannerStandalonePage,
                    title: data.page.title,
                    content: data.page.content
                })
            )
        };
    },
    sermonSeries: ()=>{
        const { result , loading  } = _apolloComposable.useQuery(_graphqlTagDefault.default`\n      query {\n        theme: crbThemeOptions {\n          bannerStandalonePage\n        }\n        sermons: sermonSeries {\n          nodes {\n            name\n            slug\n            count\n            image\n          }\n        }\n      }`);
        return {
            loading,
            data: _apolloComposable.useResult(result, null, (data)=>({
                    banner: data.theme.bannerStandalonePage,
                    sermons: data.sermons.nodes.map((series)=>({
                            name: series.name,
                            image: series.image,
                            slug: series.slug,
                            count: series.count ?? 0
                        })
                    )
                })
            )
        };
    },
    sermonSerie: (serie)=>{
        const { result , loading  } = _apolloComposable.useQuery(_graphqlTagDefault.default`\n      query {\n        theme: crbThemeOptions {\n          bannerStandalonePage\n        }\n        series: sermonSeries(where: {slug: "${serie}"}) {\n          nodes {\n            name\n            description\n            image\n            sermons {\n              nodes {\n                slug\n                title\n                passage\n                embedCode\n                preached\n                preachers {\n                  nodes {\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }`);
        return {
            loading,
            data: _apolloComposable.useResult(result, null, (data)=>({
                    banner: data.theme.bannerStandalonePage,
                    title: data.series.nodes[0]?.name,
                    description: data.series.nodes[0]?.description,
                    image: data.series.nodes[0]?.image,
                    sermons: data.series.nodes[0]?.sermons.nodes.map((sermon)=>({
                            slug: sermon.slug,
                            title: sermon.title,
                            passage: sermon.passage,
                            embedCode: sermon.embedCode,
                            date: new Date(sermon.preached),
                            preacher: sermon.preachers.nodes[0]?.name
                        })
                    ).sort((s1, s2)=>s1.date.getTime() - s2.date.getTime()
                    )
                })
            )
        };
    }
};

},{"@vue/apollo-composable":"5hoGf","graphql-tag":"1g5En","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7XIqD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-54ef43");
_vue.pushScopeId("data-v-54ef43");
const _hoisted_1 = {
    id: "content"
};
const _hoisted_2 = {
    id: "title"
};
const _hoisted_3 = {
    id: "menu-horizontal"
};
const _hoisted_4 = {
    id: "menu-collapsible"
};
const _hoisted_5 = {
    id: "footer-items"
};
const _hoisted_6 = {
    id: "footer-main-item"
};
const _hoisted_7 = {
    id: "footer-secondary-items"
};
const _hoisted_8 = {
    id: "item"
};
const _hoisted_9 = {
    id: "item"
};
const _hoisted_10 = /*#__PURE__*/ _vue.createVNode("h3", null, "Redes Sociais", -1 /* HOISTED */ );
const _hoisted_11 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fab fa-youtube"
}, null, -1 /* HOISTED */ );
const _hoisted_12 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fab fa-instagram"
}, null, -1 /* HOISTED */ );
const _hoisted_13 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fab fa-facebook"
}, null, -1 /* HOISTED */ );
const _hoisted_14 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fab fa-spotify"
}, null, -1 /* HOISTED */ );
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_router_link = _vue.resolveComponent("router-link");
    const _component_MenuHorizontal = _vue.resolveComponent("MenuHorizontal");
    const _component_MenuCollapsible = _vue.resolveComponent("MenuCollapsible");
    const _component_Section = _vue.resolveComponent("Section");
    const _component_router_view = _vue.resolveComponent("router-view");
    return !_ctx.loading ? (_vue.openBlock(), _vue.createBlock(_vue.Fragment, {
        key: 0
    }, [
        _vue.createVNode(_component_Section, {
            id: "header",
            flow: "row",
            class: "light-gray"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_1, [
                        _vue.createVNode("header", null, [
                            _vue.createVNode(_component_router_link, {
                                to: "/"
                            }, {
                                default: _withId(()=>[
                                        _vue.createVNode("img", {
                                            src: _ctx.data.logo
                                        }, null, 8 /* PROPS */ , [
                                            "src"
                                        ])
                                    ]
                                ),
                                _: 1 /* STABLE */ 
                            }),
                            _vue.createVNode("div", _hoisted_2, [
                                _vue.createVNode(_component_router_link, {
                                    to: "/"
                                }, {
                                    default: _withId(()=>[
                                            _vue.createVNode("h1", null, _vue.toDisplayString(_ctx.data.title), 1 /* TEXT */ )
                                        ]
                                    ),
                                    _: 1 /* STABLE */ 
                                }),
                                _vue.createVNode("h2", null, _vue.toDisplayString(_ctx.data.subtitle), 1 /* TEXT */ )
                            ])
                        ]),
                        _vue.createVNode("div", _hoisted_3, [
                            _vue.createVNode(_component_MenuHorizontal, {
                                ref: "menu"
                            }, null, 512 /* NEED_PATCH */ )
                        ]),
                        _vue.createVNode("div", _hoisted_4, [
                            _vue.createVNode(_component_MenuCollapsible)
                        ])
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode(_component_router_view, {
            onPageLoaded: _ctx.onPageLoaded,
            onScrolledToSection: _ctx.onScrolledToSection
        }, null, 8 /* PROPS */ , [
            "onPageLoaded",
            "onScrolledToSection"
        ]),
        _vue.createVNode(_component_Section, {
            id: "footer",
            class: "dark"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_5, [
                        _vue.createVNode("div", _hoisted_6, [
                            _vue.createVNode("h3", null, _vue.toDisplayString(_ctx.data.footer.first.title), 1 /* TEXT */ ),
                            _vue.createTextVNode(" " + _vue.toDisplayString(_ctx.data.footer.first.content), 1 /* TEXT */ )
                        ]),
                        _vue.createVNode("div", _hoisted_7, [
                            _vue.createVNode("div", _hoisted_8, [
                                _vue.createVNode("h3", null, _vue.toDisplayString(_ctx.data.footer.second.title), 1 /* TEXT */ ),
                                _vue.createTextVNode(" " + _vue.toDisplayString(_ctx.data.footer.second.content), 1 /* TEXT */ )
                            ]),
                            _vue.createVNode("div", _hoisted_9, [
                                _hoisted_10,
                                _ctx.data.footer.social.youtube ? (_vue.openBlock(), _vue.createBlock("a", {
                                    key: 0,
                                    href: _ctx.data.footer.social.youtube
                                }, [
                                    _hoisted_11
                                ], 8 /* PROPS */ , [
                                    "href"
                                ])) : _vue.createCommentVNode("v-if", true),
                                _ctx.data.footer.social.instagram ? (_vue.openBlock(), _vue.createBlock("a", {
                                    key: 1,
                                    href: _ctx.data.footer.social.instagram
                                }, [
                                    _hoisted_12
                                ], 8 /* PROPS */ , [
                                    "href"
                                ])) : _vue.createCommentVNode("v-if", true),
                                _ctx.data.footer.social.facebook ? (_vue.openBlock(), _vue.createBlock("a", {
                                    key: 2,
                                    href: _ctx.data.footer.social.facebook
                                }, [
                                    _hoisted_13
                                ], 8 /* PROPS */ , [
                                    "href"
                                ])) : _vue.createCommentVNode("v-if", true),
                                _ctx.data.footer.social.spotify ? (_vue.openBlock(), _vue.createBlock("a", {
                                    key: 3,
                                    href: _ctx.data.footer.social.spotify
                                }, [
                                    _hoisted_14
                                ], 8 /* PROPS */ , [
                                    "href"
                                ])) : _vue.createCommentVNode("v-if", true)
                            ])
                        ])
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode(_component_Section, {
            id: "copyright",
            class: "darker center"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("span", null, _vue.toDisplayString(_ctx.data.title), 1 /* TEXT */ )
                ]
            ),
            _: 1 /* STABLE */ 
        })
    ], 64 /* STABLE_FRAGMENT */ )) : _vue.createCommentVNode("v-if", true);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('54ef43-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6XVpc":[function() {},{}],"jcrTm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2ifRl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Home.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Home.vue').render;
    script.__cssModules = require('style:./Home.vue').default;
    require('custom:./Home.vue').default(script);
    script.__scopeId = 'data-v-d70b3a';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/Home.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = 'd70b3a-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('d70b3a-hmr', script)) __VUE_HMR_RUNTIME__.reload('d70b3a-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Home.vue":"36NV2","template:./Home.vue":"f2SJV","style:./Home.vue":"6OU2e","custom:./Home.vue":"3xL8v","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"36NV2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sectionVue = require("./Section.vue");
var _sectionVueDefault = parcelHelpers.interopDefault(_sectionVue);
var _carouselVue = require("./Carousel.vue");
var _carouselVueDefault = parcelHelpers.interopDefault(_carouselVue);
var _buttonVue = require("./Button.vue");
var _buttonVueDefault = parcelHelpers.interopDefault(_buttonVue);
var _vue = require("vue");
var _querierJs = require("../querier.js");
var _querierJsDefault = parcelHelpers.interopDefault(_querierJs);
exports.default = {
    components: {
        Section: _sectionVueDefault.default,
        Carousel: _carouselVueDefault.default,
        Button: _buttonVueDefault.default
    },
    emits: [
        'pageLoaded',
        'scrolledToSection'
    ],
    setup () {
        const { loading , data  } = _querierJsDefault.default.home();
        return {
            // anchors
            inicio: _vue.ref(null),
            'sobre-nos': _vue.ref(null),
            sermoes: _vue.ref(null),
            ministerios: _vue.ref(null),
            contato: _vue.ref(null),
            SERMONS_LENGTH: 10,
            contact: _vue.ref(null),
            loading,
            data
        };
    },
    mounted () {
        _vue.watchEffect(()=>this.loading || this.onDataMounted()
        , {
            flush: 'post'
        });
    },
    unmounted () {
        window.removeEventListener('scroll', this.onScroll);
        this.$emit('scrolledToSection', null);
    },
    computed: {
        anchors () {
            return {
                inicio: this.$refs.inicio,
                'sobre-nos': this.$refs['sobre-nos'],
                sermoes: this.$refs.sermoes,
                ministerios: this.$refs.ministerios,
                contato: this.$refs.contato
            };
        },
        whatsappNumber () {
            if (this.data.contact.whatsapp) return this.data.contact.whatsapp.replaceAll(/[^0-9]+/g, '');
        },
        whatsappLink () {
            return this.buildWhatsappLink();
        },
        phoneLink () {
            if (this.data.contact.phone) {
                const phone = this.data.contact.phone.replaceAll(/[^0-9]+/g, '');
                return 'tel:+55' + phone;
            }
        },
        locationLink () {
            if (this.data.contact.location) {
                const location = this.data.contact.location.replaceAll(/\s+/g, ' ');
                return 'https://www.google.com/maps/search/?api=1&query=' + encodeURI(location);
            }
        },
        emailLink () {
            if (this.data.contact.email) {
                const email = this.data.contact.email.trim();
                return 'mailto:' + email;
            }
        }
    },
    methods: {
        onDataMounted () {
            // touching current route is necessary to same-page, anchor-based links to work
            // https://github.com/vuejs/vue-router/pull/3592 ?
            this.$router.currentRoute.value;
            this.$emit('pageLoaded');
            this.contact.addEventListener('submit', this.onContact);
            window.addEventListener('scroll', this.onScroll);
            this.onScroll();
        },
        buildWhatsappLink (message) {
            if (this.whatsappNumber) {
                let link = 'https://api.whatsapp.com/send?lang=pt_br&phone=+55' + this.whatsappNumber;
                if (message) link += '&text=' + encodeURI(message);
                return link;
            }
        },
        onScroll () {
            let item = null;
            for(let anchor in this.anchors){
                const rect = this.anchors[anchor].getBoundingClientRect();
                if (rect.top < (window.innerHeight || document.documentElement.clientHeight) / 2) item = anchor;
            }
            if (item !== this.activeSection) this.$emit('scrolledToSection', item);
            this.activeSection = item;
        },
        onContact (event) {
            event.preventDefault();
            const name = this.contact.querySelector('input#contact-name').value;
            const message = this.contact.querySelector('textarea#contact-message').value;
            const link = this.buildWhatsappLink(`Olá, sou ${name}. ${message}`);
            window.open(link, '_blank').focus();
        }
    }
};

},{"./Section.vue":"3FqvA","./Carousel.vue":"7BgUc","./Button.vue":"3r838","vue":"eg0LR","../querier.js":"4Scx8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7BgUc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Carousel.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Carousel.vue').render;
    script.__cssModules = require('style:./Carousel.vue').default;
    require('custom:./Carousel.vue').default(script);
    script.__scopeId = 'data-v-0e726c';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/Carousel.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '0e726c-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('0e726c-hmr', script)) __VUE_HMR_RUNTIME__.reload('0e726c-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Carousel.vue":"izvcW","template:./Carousel.vue":"kLyoh","style:./Carousel.vue":"aW4Ju","custom:./Carousel.vue":"iBeZs","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"izvcW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
exports.default = {
    setup () {
        return {
            index: null,
            timer: null,
            slides: _vue.ref(null),
            pagination: _vue.ref(null)
        };
    },
    mounted () {
        const slides = this.$refs.slides.children;
        if (slides.length) {
            this.setupPagination();
            this.changeSlide(0);
            const options = {
                passive: true
            };
            this.$refs.slides.addEventListener('mouseenter', this.stopTimer, options);
            this.$refs.slides.addEventListener('mouseleave', this.restartTimer, options);
        }
    },
    beforeUnmount () {
        this.stopTimer();
        if (this.$refs.slides.children) {
            this.$refs.slides.removeEventListener('mouseenter', this.stopTimer);
            this.$refs.slides.removeEventListener('mouseleave', this.restartTimer);
        }
    },
    methods: {
        setupPagination () {
            const slides = this.$refs.slides.children.length;
            for(let i = 0; i < slides; ++i){
                const button = document.createElement('button');
                button.addEventListener('click', ()=>this.changeSlide(i)
                );
                this.$refs.pagination.appendChild(button);
            }
        },
        changeSlide (index) {
            this.stopTimer();
            this.$refs.slides.querySelector('.active')?.classList.remove('active');
            const slides = this.$refs.slides.children;
            slides[index].classList.add('active');
            this.startTimer(index);
        },
        startTimer (index) {
            const nextSlideIndex = this.nextSlideIndex(index);
            this.timer = setTimeout(()=>{
                this.index = nextSlideIndex;
                this.changeSlide(nextSlideIndex);
            }, 4000);
        },
        nextSlideIndex (index) {
            const slides = this.$refs.slides.children.length;
            return index < slides - 1 ? index + 1 : 0;
        },
        stopTimer () {
            if (this.timer) clearTimeout(this.timer);
        },
        restartTimer () {
            if (this.index !== null) this.startTimer(this.index);
        }
    }
};

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kLyoh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-0e726c");
_vue.pushScopeId("data-v-0e726c");
const _hoisted_1 = {
    id: "wrapper"
};
const _hoisted_2 = {
    id: "slides",
    ref: "slides"
};
const _hoisted_3 = {
    id: "pagination",
    ref: "pagination"
};
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    return _vue.openBlock(), _vue.createBlock("div", _hoisted_1, [
        _vue.createVNode("div", _hoisted_2, [
            _vue.renderSlot(_ctx.$slots, "default")
        ], 512 /* NEED_PATCH */ ),
        _vue.createVNode("div", _hoisted_3, null, 512 /* NEED_PATCH */ )
    ]);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('0e726c-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"aW4Ju":[function() {},{}],"iBeZs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3r838":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Button.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Button.vue').render;
    script.__cssModules = require('style:./Button.vue').default;
    require('custom:./Button.vue').default(script);
    script.__scopeId = 'data-v-5d3e21';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/Button.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '5d3e21-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('5d3e21-hmr', script)) __VUE_HMR_RUNTIME__.reload('5d3e21-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Button.vue":"7Y63Q","template:./Button.vue":"2s0SA","style:./Button.vue":"fC2Es","custom:./Button.vue":"eRs1x","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7Y63Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    props: [
        'link'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2s0SA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-5d3e21");
_vue.pushScopeId("data-v-5d3e21");
const _hoisted_1 = {
    class: "button"
};
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_router_link = _vue.resolveComponent("router-link");
    return _vue.openBlock(), _vue.createBlock("span", _hoisted_1, [
        _vue.createVNode(_component_router_link, {
            to: _ctx.link ?? '#'
        }, {
            default: _withId(()=>[
                    _vue.renderSlot(_ctx.$slots, "default")
                ]
            ),
            _: 3 /* FORWARDED */ 
        }, 8 /* PROPS */ , [
            "to"
        ])
    ]);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('5d3e21-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fC2Es":[function() {},{}],"eRs1x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"f2SJV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-d70b3a");
_vue.pushScopeId("data-v-d70b3a");
const _hoisted_1 = {
    key: 0
};
const _hoisted_2 = {
    class: "anchor",
    id: "inicio",
    ref: "inicio"
};
const _hoisted_3 = {
    id: "items"
};
const _hoisted_4 = {
    id: "message"
};
const _hoisted_5 = {
    id: "tagline"
};
const _hoisted_6 = {
    id: "subscript"
};
const _hoisted_7 = {
    id: "video"
};
const _hoisted_8 = {
    class: "anchor",
    id: "sobre-nos",
    ref: "sobre-nos"
};
const _hoisted_9 = {
    class: "content"
};
const _hoisted_10 = {
    class: "buttons"
};
const _hoisted_11 = {
    class: "anchor",
    id: "sermoes",
    ref: "sermoes"
};
const _hoisted_12 = {
    id: "cards"
};
const _hoisted_13 = {
    class: "image-wrapper"
};
const _hoisted_14 = /*#__PURE__*/ _vue.createTextVNode("Ver Todos");
const _hoisted_15 = {
    class: "anchor",
    id: "ministerios",
    ref: "ministerios"
};
const _hoisted_16 = {
    id: "cards"
};
const _hoisted_17 = {
    class: "anchor",
    id: "contato",
    ref: "contato"
};
const _hoisted_18 = {
    id: "contact-row"
};
const _hoisted_19 = {
    id: "contact-info"
};
const _hoisted_20 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fab icon-large fa-whatsapp"
}, null, -1 /* HOISTED */ );
const _hoisted_21 = /*#__PURE__*/ _vue.createVNode("span", {
    class: "title"
}, "Whatsapp", -1 /* HOISTED */ );
const _hoisted_22 = {
    class: "subtitle"
};
const _hoisted_23 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fas icon-large fa-mobile-alt"
}, null, -1 /* HOISTED */ );
const _hoisted_24 = /*#__PURE__*/ _vue.createVNode("span", {
    class: "title"
}, "Telefone", -1 /* HOISTED */ );
const _hoisted_25 = {
    class: "subtitle"
};
const _hoisted_26 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fas icon-medium fa-map-marked-alt"
}, null, -1 /* HOISTED */ );
const _hoisted_27 = /*#__PURE__*/ _vue.createVNode("span", {
    class: "title"
}, "Localização", -1 /* HOISTED */ );
const _hoisted_28 = {
    class: "subtitle"
};
const _hoisted_29 = /*#__PURE__*/ _vue.createVNode("i", {
    class: "fas icon-medium fa-envelope-open-text"
}, null, -1 /* HOISTED */ );
const _hoisted_30 = /*#__PURE__*/ _vue.createVNode("span", {
    class: "title"
}, "Email", -1 /* HOISTED */ );
const _hoisted_31 = {
    class: "subtitle"
};
const _hoisted_32 = {
    id: "contact-form",
    ref: "contact"
};
const _hoisted_33 = /*#__PURE__*/ _vue.createVNode("input", {
    type: "text",
    id: "contact-name",
    placeholder: "Nome"
}, null, -1 /* HOISTED */ );
const _hoisted_34 = /*#__PURE__*/ _vue.createVNode("textarea", {
    type: "text",
    id: "contact-message",
    placeholder: "Mensagem",
    rows: "6"
}, null, -1 /* HOISTED */ );
const _hoisted_35 = /*#__PURE__*/ _vue.createVNode("input", {
    type: "submit",
    value: "Enviar pelo Whatsapp"
}, null, -1 /* HOISTED */ );
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_router_link = _vue.resolveComponent("router-link");
    const _component_Carousel = _vue.resolveComponent("Carousel");
    const _component_Section = _vue.resolveComponent("Section");
    const _component_Button = _vue.resolveComponent("Button");
    return !_ctx.loading ? (_vue.openBlock(), _vue.createBlock("div", _hoisted_1, [
        _vue.createVNode("a", _hoisted_2, null, 512 /* NEED_PATCH */ ),
        _vue.createVNode(_component_Section, {
            id: "banners",
            class: "fill gray borderless"
        }, {
            default: _withId(()=>[
                    _vue.createVNode(_component_Carousel, null, {
                        default: _withId(()=>[
                                (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(_ctx.data.banners, (banner)=>{
                                    return _vue.openBlock(), _vue.createBlock(_component_router_link, {
                                        key: banner.image,
                                        to: banner.uri
                                    }, {
                                        default: _withId(()=>[
                                                _vue.createVNode("div", {
                                                    class: "banner",
                                                    style: `background-image: url('${banner.image}')`
                                                }, null, 4 /* STYLE */ )
                                            ]
                                        ),
                                        _: 2 /* DYNAMIC */ 
                                    }, 1032 /* PROPS, DYNAMIC_SLOTS */ , [
                                        "to"
                                    ]);
                                }), 128 /* KEYED_FRAGMENT */ ))
                            ]
                        ),
                        _: 1 /* STABLE */ 
                    })
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode(_component_Section, {
            id: "intro",
            class: "alternate spacing center"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_3, [
                        _vue.createVNode("div", _hoisted_4, [
                            _vue.createVNode("span", _hoisted_5, _vue.toDisplayString(_ctx.data.welcome.title), 1 /* TEXT */ ),
                            _vue.createVNode("span", _hoisted_6, _vue.toDisplayString(_ctx.data.welcome.subtitle), 1 /* TEXT */ )
                        ]),
                        _vue.createVNode("div", _hoisted_7, [
                            _vue.createVNode("video", {
                                controls: "",
                                src: _ctx.data.welcome.video
                            }, [
                                _vue.createVNode("source", {
                                    src: _ctx.data.welcome.video,
                                    type: "video/mp4"
                                }, null, 8 /* PROPS */ , [
                                    "src"
                                ])
                            ], 8 /* PROPS */ , [
                                "src"
                            ])
                        ])
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode("a", _hoisted_8, null, 512 /* NEED_PATCH */ ),
        _vue.createVNode(_component_Section, {
            id: "about-us",
            class: "spacing",
            flow: "column",
            title: "Sobre Nós"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("ul", null, [
                        (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(_ctx.data.aboutUs, (section, index)=>{
                            return _vue.openBlock(), _vue.createBlock("li", {
                                key: section.title,
                                class: {
                                    alternate: index % 2,
                                    border: index < _ctx.data.aboutUs.length - 1
                                }
                            }, [
                                _vue.createVNode("div", {
                                    class: "card",
                                    style: `background-image: url('${section.image}')`
                                }, null, 4 /* STYLE */ ),
                                _vue.createVNode("div", _hoisted_9, [
                                    _vue.createVNode("h1", null, _vue.toDisplayString(section.title), 1 /* TEXT */ ),
                                    _vue.createVNode("div", {
                                        innerHTML: section.content
                                    }, null, 8 /* PROPS */ , [
                                        "innerHTML"
                                    ]),
                                    _vue.createVNode("div", _hoisted_10, [
                                        (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(section.buttons, (button)=>{
                                            return _vue.openBlock(), _vue.createBlock(_component_Button, {
                                                key: button.uri,
                                                link: button.uri
                                            }, {
                                                default: _withId(()=>[
                                                        _vue.createTextVNode(_vue.toDisplayString(button.text), 1 /* TEXT */ )
                                                    ]
                                                ),
                                                _: 2 /* DYNAMIC */ 
                                            }, 1032 /* PROPS, DYNAMIC_SLOTS */ , [
                                                "link"
                                            ]);
                                        }), 128 /* KEYED_FRAGMENT */ ))
                                    ])
                                ])
                            ], 2 /* CLASS */ );
                        }), 128 /* KEYED_FRAGMENT */ ))
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode("a", _hoisted_11, null, 512 /* NEED_PATCH */ ),
        _vue.createVNode(_component_Section, {
            id: "sermon-series",
            class: "spacing alternate",
            flow: "column",
            title: "Séries de Sermões"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_12, [
                        (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(_ctx.data.sermons.slice(0, _ctx.SERMONS_LENGTH), (series)=>{
                            return _vue.openBlock(), _vue.createBlock("a", {
                                key: series.slug,
                                id: "card",
                                href: `/sermoes/series/${series.slug}`
                            }, [
                                _vue.createVNode("div", _hoisted_13, [
                                    _vue.createVNode("img", {
                                        src: series.image
                                    }, null, 8 /* PROPS */ , [
                                        "src"
                                    ])
                                ]),
                                _vue.createVNode("span", null, _vue.toDisplayString(series.name), 1 /* TEXT */ )
                            ], 8 /* PROPS */ , [
                                "href"
                            ]);
                        }), 128 /* KEYED_FRAGMENT */ ))
                    ]),
                    _ctx.data.sermons.length > _ctx.SERMONS_LENGTH ? (_vue.openBlock(), _vue.createBlock(_component_Button, {
                        key: 0,
                        link: "/sermoes/series",
                        class: "see-more"
                    }, {
                        default: _withId(()=>[
                                _hoisted_14
                            ]
                        ),
                        _: 1 /* STABLE */ 
                    })) : _vue.createCommentVNode("v-if", true)
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode("a", _hoisted_15, null, 512 /* NEED_PATCH */ ),
        _vue.createVNode(_component_Section, {
            id: "groups",
            class: "fill spacing-top",
            flow: "column",
            title: "Ministérios"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_16, [
                        (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(_ctx.data.groups, (group)=>{
                            return _vue.openBlock(), _vue.createBlock("div", {
                                key: group.uri,
                                class: "card"
                            }, [
                                _vue.createVNode(_component_router_link, {
                                    to: `/ministerio${group.uri}`
                                }, {
                                    default: _withId(()=>[
                                            _vue.createVNode("img", {
                                                src: group.image
                                            }, null, 8 /* PROPS */ , [
                                                "src"
                                            ]),
                                            _vue.createVNode("span", null, _vue.toDisplayString(group.name), 1 /* TEXT */ )
                                        ]
                                    ),
                                    _: 2 /* DYNAMIC */ 
                                }, 1032 /* PROPS, DYNAMIC_SLOTS */ , [
                                    "to"
                                ])
                            ]);
                        }), 128 /* KEYED_FRAGMENT */ ))
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode("a", _hoisted_17, null, 512 /* NEED_PATCH */ ),
        _vue.createVNode(_component_Section, {
            id: "contact",
            class: "spacing alternate",
            flow: "column",
            title: "Entre em Contato"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_18, [
                        _vue.createVNode("div", _hoisted_19, [
                            _vue.createVNode("a", {
                                href: _ctx.whatsappLink,
                                target: "_blank"
                            }, [
                                _hoisted_20,
                                _vue.createVNode("p", null, [
                                    _hoisted_21,
                                    _vue.createVNode("span", _hoisted_22, _vue.toDisplayString(_ctx.data.contact.whatsapp), 1 /* TEXT */ )
                                ])
                            ], 8 /* PROPS */ , [
                                "href"
                            ]),
                            _vue.createVNode("a", {
                                href: _ctx.phoneLink,
                                target: "_blank"
                            }, [
                                _hoisted_23,
                                _vue.createVNode("p", null, [
                                    _hoisted_24,
                                    _vue.createVNode("span", _hoisted_25, _vue.toDisplayString(_ctx.data.contact.phone), 1 /* TEXT */ )
                                ])
                            ], 8 /* PROPS */ , [
                                "href"
                            ]),
                            _vue.createVNode("a", {
                                href: _ctx.locationLink,
                                target: "_blank"
                            }, [
                                _hoisted_26,
                                _vue.createVNode("p", null, [
                                    _hoisted_27,
                                    _vue.createVNode("span", _hoisted_28, _vue.toDisplayString(_ctx.data.contact.location), 1 /* TEXT */ )
                                ])
                            ], 8 /* PROPS */ , [
                                "href"
                            ]),
                            _vue.createVNode("a", {
                                href: _ctx.emailLink,
                                target: "_blank"
                            }, [
                                _hoisted_29,
                                _vue.createVNode("p", null, [
                                    _hoisted_30,
                                    _vue.createVNode("span", _hoisted_31, _vue.toDisplayString(_ctx.data.contact.email), 1 /* TEXT */ )
                                ])
                            ], 8 /* PROPS */ , [
                                "href"
                            ])
                        ]),
                        _vue.createVNode("form", _hoisted_32, [
                            _hoisted_33,
                            _hoisted_34,
                            _hoisted_35
                        ], 512 /* NEED_PATCH */ )
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        })
    ])) : _vue.createCommentVNode("v-if", true);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('d70b3a-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6OU2e":[function() {},{}],"3xL8v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"49owP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Page.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Page.vue').render;
    script.__cssModules = require('style:./Page.vue').default;
    require('custom:./Page.vue').default(script);
    script.__scopeId = 'data-v-1281b0';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/Page.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '1281b0-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('1281b0-hmr', script)) __VUE_HMR_RUNTIME__.reload('1281b0-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Page.vue":"dS1VZ","template:./Page.vue":"2ENYV","style:./Page.vue":"2nDvQ","custom:./Page.vue":"kNnh6","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dS1VZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sectionVue = require("./Section.vue");
var _sectionVueDefault = parcelHelpers.interopDefault(_sectionVue);
var _vue = require("vue");
var _querierJs = require("../querier.js");
var _querierJsDefault = parcelHelpers.interopDefault(_querierJs);
exports.default = {
    components: {
        Section: _sectionVueDefault.default
    },
    props: [
        'uri'
    ],
    emits: [
        'pageLoaded',
        'scrolledToSection'
    ],
    setup (props) {
        const uri = '/' + props.uri.join('/');
        const { loading , data  } = _querierJsDefault.default.page(uri);
        return {
            loading,
            data
        };
    },
    mounted () {
        _vue.watchEffect(()=>this.loading || this.$nextTick(()=>this.onDataMounted()
            )
        , {
            flush: 'post'
        });
    },
    methods: {
        onDataMounted () {
            this.$emit('pageLoaded');
            console.log('data', this.data);
        }
    }
};

},{"./Section.vue":"3FqvA","vue":"eg0LR","../querier.js":"4Scx8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2ENYV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-1281b0");
_vue.pushScopeId("data-v-1281b0");
const _hoisted_1 = {
    key: 0
};
const _hoisted_2 = {
    class: "anchor",
    id: "inicio",
    ref: "inicio"
};
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_Section = _vue.resolveComponent("Section");
    return !_ctx.loading ? (_vue.openBlock(), _vue.createBlock("div", _hoisted_1, [
        _vue.createVNode("a", _hoisted_2, null, 512 /* NEED_PATCH */ ),
        _vue.createVNode(_component_Section, {
            id: "banner-wrapper",
            class: "fill gray borderless"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", {
                        id: "banner",
                        style: `background-image: url('${_ctx.data.banner}')`
                    }, null, 4 /* STYLE */ )
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode(_component_Section, {
            id: "content",
            class: "spacing center",
            flow: "column",
            title: _ctx.data.title
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", {
                        innerHTML: _ctx.data.content
                    }, null, 8 /* PROPS */ , [
                        "innerHTML"
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        }, 8 /* PROPS */ , [
            "title"
        ])
    ])) : _vue.createCommentVNode("v-if", true);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('1281b0-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2nDvQ":[function() {},{}],"kNnh6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ilCqo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Serie.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Serie.vue').render;
    script.__cssModules = require('style:./Serie.vue').default;
    require('custom:./Serie.vue').default(script);
    script.__scopeId = 'data-v-c7a5ab';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/sermons/Serie.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = 'c7a5ab-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('c7a5ab-hmr', script)) __VUE_HMR_RUNTIME__.reload('c7a5ab-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Serie.vue":"3KxIS","template:./Serie.vue":"cZR5O","style:./Serie.vue":"7HIhl","custom:./Serie.vue":"bLXKc","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3KxIS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sectionVue = require("../Section.vue");
var _sectionVueDefault = parcelHelpers.interopDefault(_sectionVue);
var _vue = require("vue");
var _querierJs = require("../../querier.js");
var _querierJsDefault = parcelHelpers.interopDefault(_querierJs);
exports.default = {
    components: {
        Section: _sectionVueDefault.default
    },
    props: [
        'serie'
    ],
    emits: [
        'pageLoaded',
        'scrolledToSection'
    ],
    setup (props) {
        const { loading , data  } = _querierJsDefault.default.sermonSerie(props.serie);
        return {
            loading,
            data
        };
    },
    mounted () {
        _vue.watchEffect(()=>this.loading || this.$nextTick(()=>this.onDataMounted()
            )
        , {
            flush: 'post'
        });
    },
    methods: {
        onDataMounted () {
            this.$emit('pageLoaded');
        },
        play (event) {
            this.$el.querySelector('#' + event.target.dataset.sermonContent).classList.toggle('active');
        }
    }
};

},{"../Section.vue":"3FqvA","vue":"eg0LR","../../querier.js":"4Scx8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cZR5O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-c7a5ab");
_vue.pushScopeId("data-v-c7a5ab");
const _hoisted_1 = {
    key: 0
};
const _hoisted_2 = {
    class: "anchor",
    id: "inicio",
    ref: "inicio"
};
const _hoisted_3 = {
    id: "series"
};
const _hoisted_4 = {
    id: "metadata"
};
const _hoisted_5 = {
    id: "sermons"
};
const _hoisted_6 = {
    class: "header"
};
const _hoisted_7 = /*#__PURE__*/ _vue.createVNode("span", {
    class: "fa-stack"
}, [
    /*#__PURE__*/ _vue.createVNode("i", {
        class: "fas fa-circle fa-stack-1x fa-inverse"
    }),
    /*#__PURE__*/ _vue.createVNode("i", {
        class: "fas fa-play-circle fa-stack-1x"
    })
], -1 /* HOISTED */ );
const _hoisted_8 = {
    class: "sermon"
};
const _hoisted_9 = {
    class: "title"
};
const _hoisted_10 = {
    class: "metadata"
};
const _hoisted_11 = /*#__PURE__*/ _vue.createVNode("b", null, "Data:", -1 /* HOISTED */ );
const _hoisted_12 = /*#__PURE__*/ _vue.createVNode("b", null, "Texto:", -1 /* HOISTED */ );
const _hoisted_13 = /*#__PURE__*/ _vue.createVNode("b", null, "Pregador:", -1 /* HOISTED */ );
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_Section = _vue.resolveComponent("Section");
    return !_ctx.loading ? (_vue.openBlock(), _vue.createBlock("div", _hoisted_1, [
        _vue.createVNode("a", _hoisted_2, null, 512 /* NEED_PATCH */ ),
        _vue.createVNode(_component_Section, {
            id: "banner-wrapper",
            class: "fill gray borderless"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", {
                        id: "banner",
                        style: `background-image: url('${_ctx.data.banner}')`
                    }, null, 4 /* STYLE */ )
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode(_component_Section, {
            id: "content",
            class: "spacing center",
            flow: "column",
            title: 'Série: ' + _ctx.data.title
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_3, [
                        _vue.createVNode("div", _hoisted_4, [
                            _vue.createVNode("img", {
                                src: _ctx.data.image
                            }, null, 8 /* PROPS */ , [
                                "src"
                            ]),
                            _vue.createVNode("div", {
                                innerHTML: _ctx.data.description
                            }, null, 8 /* PROPS */ , [
                                "innerHTML"
                            ])
                        ]),
                        _vue.createVNode("div", _hoisted_5, [
                            _vue.createVNode("ul", null, [
                                (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(_ctx.data.sermons, (sermon, index)=>{
                                    return _vue.openBlock(), _vue.createBlock("li", {
                                        key: sermon.slug
                                    }, [
                                        _vue.createVNode("div", _hoisted_6, [
                                            _vue.createVNode("button", {
                                                class: "play",
                                                onclick: _ctx.play,
                                                "data-sermon-content": 'sermon-content-' + index
                                            }, [
                                                _hoisted_7
                                            ], 8 /* PROPS */ , [
                                                "onclick",
                                                "data-sermon-content"
                                            ]),
                                            _vue.createVNode("div", _hoisted_8, [
                                                _vue.createVNode("p", _hoisted_9, [
                                                    _vue.createVNode("b", null, _vue.toDisplayString(sermon.title), 1 /* TEXT */ )
                                                ]),
                                                _vue.createVNode("p", _hoisted_10, [
                                                    _vue.createVNode("span", null, [
                                                        _hoisted_11,
                                                        _vue.createTextVNode(" " + _vue.toDisplayString(sermon.date.toLocaleDateString()), 1 /* TEXT */ )
                                                    ]),
                                                    _vue.createVNode("span", null, [
                                                        _hoisted_12,
                                                        _vue.createTextVNode(" " + _vue.toDisplayString(sermon.passage), 1 /* TEXT */ )
                                                    ]),
                                                    _vue.createVNode("span", null, [
                                                        _hoisted_13,
                                                        _vue.createTextVNode(" " + _vue.toDisplayString(sermon.preacher), 1 /* TEXT */ )
                                                    ])
                                                ])
                                            ])
                                        ]),
                                        _vue.createVNode("div", {
                                            id: 'sermon-content-' + index,
                                            class: "content",
                                            innerHTML: sermon.embedCode
                                        }, null, 8 /* PROPS */ , [
                                            "id",
                                            "innerHTML"
                                        ])
                                    ]);
                                }), 128 /* KEYED_FRAGMENT */ ))
                            ])
                        ])
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        }, 8 /* PROPS */ , [
            "title"
        ])
    ])) : _vue.createCommentVNode("v-if", true);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('c7a5ab-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"7HIhl":[function() {},{}],"bLXKc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"2MpqS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require('script:./Series.vue');
    if (script.__esModule) script = script.default;
    script.render = require('template:./Series.vue').render;
    script.__cssModules = require('style:./Series.vue').default;
    require('custom:./Series.vue').default(script);
    script.__scopeId = 'data-v-694e0d';
    script.__file = "/home/paulo.lieuthier/Code/ipcasacaiada/theme/src/components/sermons/Series.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = '694e0d-hmr';
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord('694e0d-hmr', script)) __VUE_HMR_RUNTIME__.reload('694e0d-hmr', script);
        }, 0);
    });
}
exports.default = script;

},{"script:./Series.vue":"hH75X","template:./Series.vue":"Un95X","style:./Series.vue":"euX8W","custom:./Series.vue":"3ei6o","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"hH75X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sectionVue = require("../Section.vue");
var _sectionVueDefault = parcelHelpers.interopDefault(_sectionVue);
var _vue = require("vue");
var _querierJs = require("../../querier.js");
var _querierJsDefault = parcelHelpers.interopDefault(_querierJs);
exports.default = {
    components: {
        Section: _sectionVueDefault.default
    },
    emits: [
        'pageLoaded',
        'scrolledToSection'
    ],
    setup () {
        const { loading , data  } = _querierJsDefault.default.sermonSeries();
        return {
            loading,
            data
        };
    },
    mounted () {
        _vue.watchEffect(()=>this.loading || this.$nextTick(()=>this.onDataMounted()
            )
        , {
            flush: 'post'
        });
    },
    methods: {
        onDataMounted () {
            this.$emit('pageLoaded');
            console.log(this.data);
        }
    }
};

},{"../Section.vue":"3FqvA","vue":"eg0LR","../../querier.js":"4Scx8","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"Un95X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render
);
var _vue = require("vue");
const _withId = /*#__PURE__*/ _vue.withScopeId("data-v-694e0d");
_vue.pushScopeId("data-v-694e0d");
const _hoisted_1 = {
    key: 0
};
const _hoisted_2 = {
    id: "cards"
};
const _hoisted_3 = {
    class: "image-wrapper"
};
_vue.popScopeId();
const render = /*#__PURE__*/ _withId((_ctx, _cache)=>{
    const _component_Section = _vue.resolveComponent("Section");
    return !_ctx.loading ? (_vue.openBlock(), _vue.createBlock("div", _hoisted_1, [
        _vue.createVNode(_component_Section, {
            id: "banner-wrapper",
            class: "fill gray borderless"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", {
                        id: "banner",
                        style: `background-image: url('${_ctx.data.banner}')`
                    }, null, 4 /* STYLE */ )
                ]
            ),
            _: 1 /* STABLE */ 
        }),
        _vue.createVNode(_component_Section, {
            id: "content",
            class: "spacing center",
            flow: "column",
            title: "Séries de Sermões"
        }, {
            default: _withId(()=>[
                    _vue.createVNode("div", _hoisted_2, [
                        (_vue.openBlock(true), _vue.createBlock(_vue.Fragment, null, _vue.renderList(_ctx.data.sermons, (series)=>{
                            return _vue.openBlock(), _vue.createBlock("a", {
                                key: series.slug,
                                id: "card",
                                href: `/sermoes/series/${series.slug}`
                            }, [
                                _vue.createVNode("div", _hoisted_3, [
                                    _vue.createVNode("img", {
                                        src: series.image
                                    }, null, 8 /* PROPS */ , [
                                        "src"
                                    ])
                                ]),
                                _vue.createVNode("span", null, _vue.toDisplayString(series.name), 1 /* TEXT */ )
                            ], 8 /* PROPS */ , [
                                "href"
                            ]);
                        }), 128 /* KEYED_FRAGMENT */ ))
                    ])
                ]
            ),
            _: 1 /* STABLE */ 
        })
    ])) : _vue.createCommentVNode("v-if", true);
});
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender('694e0d-hmr', render);
});

},{"vue":"eg0LR","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"euX8W":[function() {},{}],"3ei6o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{
};
exports.default = (script)=>{
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}]},["fY9xN","6cF5V"], "6cF5V", "parcelRequireb5b1")

//# sourceMappingURL=index.js.map
